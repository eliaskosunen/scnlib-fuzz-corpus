_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  5.41M|{
 3807|  5.41M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  5.41M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  5.41M|    }
 3810|  5.41M|    else if constexpr (sizeof(U) == 2) {
 3811|  5.41M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  5.41M|    }
 3813|  5.41M|    else {
 3814|       |        // utf-32
 3815|  5.41M|        static_assert(sizeof(U) == 4);
 3816|  5.41M|        SCN_UNUSED(ch);
 3817|  5.41M|        return 1;
 3818|  5.41M|    }
 3819|  5.41M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  5.41M|{
 3771|  5.41M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  5.41M|    SCN_GCC_COMPAT_PUSH
 3774|  5.41M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  5.41M|    constexpr char lengths[] =
 3776|  5.41M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  5.41M|        "\1\1\1\1\1\1\1\1"
 3778|  5.41M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  5.41M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  5.41M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  5.41M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  5.41M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  5.41M|    SCN_GCC_COMPAT_POP
 3785|  5.41M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  5.22M|{
 4013|  5.22M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  5.22M|        return decode_utf8_code_point_exhaustive(input);
 4015|  5.22M|    }
 4016|  5.22M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  5.22M|        return decode_utf16_code_point_exhaustive(input);
 4018|  5.22M|    }
 4019|  5.22M|    else {
 4020|  5.22M|        SCN_EXPECT(input.size() == 1);
 4021|  5.22M|        auto cp = static_cast<char32_t>(input.front());
 4022|  5.22M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  5.22M|            return invalid_code_point;
 4024|  5.22M|        }
 4025|  5.22M|        return cp;
 4026|  5.22M|    }
 4027|  5.22M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  5.22M|{
 3826|  5.22M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  5.22M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  5.22M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  5.22M|    };
 3831|       |
 3832|  5.22M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.65M, False: 573k]
  ------------------
 3833|  4.65M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 384, False: 4.65M]
  ------------------
 3834|    384|            SCN_UNLIKELY_ATTR
 3835|    384|            return invalid_code_point;
 3836|    384|        }
 3837|  4.65M|        return static_cast<char32_t>(input[0]);
 3838|  4.65M|    }
 3839|       |
 3840|   573k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 198k, False: 374k]
  ------------------
 3841|   198k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 150, False: 198k]
  ------------------
 3842|    150|            SCN_UNLIKELY_ATTR
 3843|    150|            return invalid_code_point;
 3844|    150|        }
 3845|   198k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 11.3k, False: 187k]
  ------------------
 3846|  11.3k|            SCN_UNLIKELY_ATTR
 3847|  11.3k|            return invalid_code_point;
 3848|  11.3k|        }
 3849|       |
 3850|   187k|        char32_t cp{};
 3851|   187k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   187k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   187k|        return cp;
 3854|   198k|    }
 3855|       |
 3856|   374k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 359k, False: 15.4k]
  ------------------
 3857|   359k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 32, False: 359k]
  ------------------
 3858|     32|            SCN_UNLIKELY_ATTR
 3859|     32|            return invalid_code_point;
 3860|     32|        }
 3861|   359k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 3.16k, False: 355k]
  ------------------
 3862|   359k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.70k, False: 354k]
  ------------------
 3863|  4.87k|            SCN_UNLIKELY_ATTR
 3864|  4.87k|            return invalid_code_point;
 3865|  4.87k|        }
 3866|       |
 3867|   354k|        char32_t cp{};
 3868|   354k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   354k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   354k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   354k|        return cp;
 3872|   359k|    }
 3873|       |
 3874|  15.4k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 15.4k, False: 0]
  ------------------
 3875|  15.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 15.4k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  15.4k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 9.12k, False: 6.32k]
  ------------------
 3880|  9.12k|            SCN_UNLIKELY_ATTR
 3881|  9.12k|            return invalid_code_point;
 3882|  9.12k|        }
 3883|  6.32k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 1.72k, False: 4.60k]
  ------------------
 3884|  6.32k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 162, False: 4.44k]
  ------------------
 3885|  6.32k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 111, False: 4.33k]
  ------------------
 3886|  1.99k|            SCN_UNLIKELY_ATTR
 3887|  1.99k|            return invalid_code_point;
 3888|  1.99k|        }
 3889|       |
 3890|  4.33k|        char32_t cp{};
 3891|  4.33k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  4.33k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  4.33k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  4.33k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  4.33k|        return cp;
 3896|  6.32k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   929k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   929k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   929k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.63M|{
 3699|  4.63M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.63M|                                          decltype(first), decltype(last)> &&
 3701|  4.63M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.63M|        return {first, last};
 3703|  4.63M|    }
 3704|  4.63M|    else {
 3705|  4.63M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.63M|                                       to_address(first), to_address(last)))};
 3707|  4.63M|    }
 3708|  4.63M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.3M|{
  326|  14.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  14.6M|{
  304|  14.6M|    return p;
  305|  14.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  2.29M|{
 3730|  2.29M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  2.29M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  2.29M|                      decltype(it)> &&
 3733|  2.29M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  2.29M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  2.29M|        return it;
 3736|  2.29M|    }
 3737|  2.29M|    else {
 3738|  2.29M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  2.29M|    }
 3740|  2.29M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  27.0k|    {
 2724|  27.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  27.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  27.0k|    {
 2705|  27.0k|        return decay_copy(t.begin());
 2706|  27.0k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  2.52M|{
 1949|  2.52M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.52M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   587k|    {
 2781|   587k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   587k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   587k|    {
 2763|   587k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   587k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  59.5k|{
 8867|  59.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  59.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  59.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  59.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   250k|{
 5396|   250k|    detail::check_scan_arg_types<Args...>();
 5397|   250k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   250k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   308k|{
 5135|   308k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   308k|                  "Scan argument types must be default constructible");
 5137|   308k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   308k|                  "Scan argument types must be Destructible");
 5139|   308k|    static_assert(
 5140|   308k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   308k|        "Scan argument types must not be references");
 5142|   308k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   250k|    {
 5349|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   250k|    {
 5360|   250k|        return {detail::make_arg<
 5361|   250k|            kind, Context,
 5362|   250k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   250k|                                 typename Context::char_type>::value>(args)...};
 5364|   250k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   250k|{
 5170|   250k|    return make_value<Context>(value).ref_value;
 5171|   250k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   308k|{
 5120|   308k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   308k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   308k|                                  needs_context_tag>) {
 5124|   308k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   308k|    }
 5126|   308k|    else {
 5127|   308k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   308k|            value, context_tag<Context>{}));
 5129|   308k|    }
 5130|   308k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   308k|    {                                                                        \
 4959|   308k|        return val;                                                          \
 4960|   308k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   308k|{
 5089|   308k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   308k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   308k|    constexpr bool scannable_char =
 5093|   308k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   308k|    static_assert(scannable_char,
 5095|   308k|                  "Cannot scan an argument of an unsupported character "
 5096|   308k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   308k|    constexpr bool scannable_const =
 5099|   308k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   308k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   308k|    constexpr bool scannable_disabled =
 5103|   308k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   308k|    static_assert(scannable_disabled,
 5105|   308k|                  "Cannot scan an argument that has been disabled by "
 5106|   308k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   308k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   308k|    static_assert(
 5110|   308k|        scannable,
 5111|   308k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   308k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   308k|    return arg_value{arg};
 5115|   308k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   308k|    {
 4902|   308k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   119k|{
 8654|   119k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   119k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   119k|{
 8591|   119k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   119k|    auto result = vscan_impl(buffer, format, args);
 8594|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 107k]
  |  |  ------------------
  ------------------
 8595|  12.0k|        return unexpected(result.error());
 8596|  12.0k|    }
 8597|   107k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   119k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   293k|{
 4720|   293k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   293k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   293k|                  "\n"
 4724|   293k|                  "Unsupported range type given as input to a scanning "
 4725|   293k|                  "function.\n"
 4726|   293k|                  "A range needs to have a character type (value type) "
 4727|   293k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   293k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   293k|                  "to be included.\n"
 4730|   293k|                  "See the scnlib documentation for more details.");
 4731|   293k|    static_assert(
 4732|   293k|        !std::is_same_v<T, custom_char_traits>,
 4733|   293k|        "\n"
 4734|   293k|        "Unsupported range type given as input to a scanning "
 4735|   293k|        "function.\n"
 4736|   293k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   293k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   293k|        "not supported.");
 4739|   293k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   293k|                  "\n"
 4741|   293k|                  "Unsupported range type given as input to a scanning "
 4742|   293k|                  "function.\n"
 4743|   293k|                  "file_marker_found cannot be used as an "
 4744|   293k|                  "source range type to scn::scan.\n"
 4745|   293k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   293k|                  "and do not provide an explicit source range, "
 4747|   293k|                  "or use scn::scan with a FILE* directly.");
 4748|   293k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   293k|                  "\n"
 4750|   293k|                  "Unsupported range type given as input to a scanning "
 4751|   293k|                  "function.\n"
 4752|   293k|                  "In order to be scannable, a range needs to satisfy "
 4753|   293k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   293k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   293k|                  "\n"
 4756|   293k|                  "Unsupported range type given as input to a scanning "
 4757|   293k|                  "function.\n"
 4758|   293k|                  "A range needs to model forward_range and have a valid "
 4759|   293k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   293k|                  "Examples of scannable ranges are std::string, "
 4761|   293k|                  "std::string_view, "
 4762|   293k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   293k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   293k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   293k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   293k|{
 4659|   293k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   293k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   293k|    }
 4662|   293k|    else {
 4663|   293k|        return invalid_char_type{};
 4664|   293k|    }
 4665|   293k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   293k|    {
 2855|   293k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   293k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   293k|    {
 2836|   293k|        return t.data();
 2837|   293k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   293k|    {
 3231|   293k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.95k, False: 291k]
  ------------------
 3232|   293k|                   ? nullptr
 3233|   293k|                   : std::addressof(*ranges::begin(derived()));
 3234|   293k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   293k|    {
 3005|   293k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   293k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   293k|    {
 2978|   293k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   293k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  1.11M|    {
 3339|  1.11M|        return m_iterator == m_sentinel;
 3340|  1.11M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   584k|    {
 3185|   584k|        return static_cast<const D&>(*this);
 3186|   584k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   558k|    {
 2724|   558k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   558k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   558k|    {
 2705|   558k|        return decay_copy(t.begin());
 2706|   558k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  3.27M|    {
 3330|  3.27M|        return m_iterator;
 3331|  3.27M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   293k|    {
 2930|   293k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   293k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   293k|    {
 2896|   293k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   293k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  1.81M|{
 1949|  1.81M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.81M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.11M|    {
 3346|  1.11M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.11M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  3.66M|    {
 1598|  3.66M|        return has_value();
 1599|  3.66M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.28M|    {
  485|  7.28M|        return m_has_value;
  486|  7.28M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   117k|    {
 1604|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   117k|        return this->get_unexpected().error();
 1606|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   117k|    {
  468|   117k|        return m_unexpected;
  469|   117k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   869k|    {
  361|   869k|        return m_unexpected;
  362|   869k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   436k|    {
  347|   436k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   436k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   436k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  26.0k|    {
 1476|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  26.0k|    {
  447|  26.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   499k|    {
  356|   499k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   499k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   499k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   293k|    {
 1177|   293k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   267k|{
 5923|   267k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   267k|                      ranges::iterator_t<SourceRange>>) {
 5925|   267k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   267k|    }
 5927|   267k|    else {
 5928|   267k|        auto it = ranges::begin(source);
 5929|   267k|        while (n > 0) {
 5930|   267k|            --n;
 5931|   267k|            ++it;
 5932|   267k|        }
 5933|   267k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   267k|    }
 5935|   267k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.08M|    {
 2724|  1.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.08M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.08M|    {
 2705|  1.08M|        return decay_copy(t.begin());
 2706|  1.08M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   267k|{
 5910|   267k|    return ranges::end(source);
 5911|   267k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   267k|    {
 2781|   267k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   267k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   267k|    {
 2763|   267k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   267k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.70M|    {
 3334|  1.70M|        return m_sentinel;
 3335|  1.70M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.50M|    {
 1653|  3.50M|        return value();
 1654|  3.50M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  3.50M|    {
 1627|  3.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.50M|        return this->get_value();
 1629|  3.50M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.50M|    {
  451|  3.50M|        return m_value;
  452|  3.50M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   267k|    {
 1430|   267k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   267k|    {
  437|   267k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|   119k|    {
 7975|   119k|        return m_str;
 7976|   119k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   250k|    {
 5426|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   250k|    {
 5379|   250k|        return m_argptrs;
 5380|   250k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   369k|    {
 5478|   369k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   119k|{
 8820|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 107k]
  |  |  ------------------
  ------------------
 8821|  12.0k|        return unexpected(result.error());
 8822|  12.0k|    }
 8823|   107k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   119k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   293k|    {
 1598|   293k|        return has_value();
 1599|   293k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   586k|    {
  485|   586k|        return m_has_value;
  486|   586k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  26.0k|    {
 1604|  26.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.0k|        return this->get_unexpected().error();
 1606|  26.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.0k|    {
  468|  26.0k|        return m_unexpected;
  469|  26.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  13.0k|    {
  626|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  13.0k|    {
  689|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.0k|                                  std::forward<Args>(args)...);
  691|  13.0k|        m_has_value = false;
  692|  13.0k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  78.0k|{
  392|  78.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  78.0k|        T(std::forward<Args>(args)...);
  394|  78.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.0k|    {
  718|  26.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   214k|    {
 1653|   214k|        return value();
 1654|   214k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   267k|    {
 1627|   267k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   267k|        return this->get_value();
 1629|   267k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   267k|    {
  451|   267k|        return m_value;
  452|   267k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   133k|    {
 5830|   133k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   267k|    {
 5681|   267k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   282k|    {
 5616|   282k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   133k|    {
  616|   133k|        construct(std::forward<Args>(args)...);
  617|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   133k|    {
  682|   133k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   133k|        m_has_value = true;
  684|   133k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   133k|{
  392|   133k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   133k|        T(std::forward<Args>(args)...);
  394|   133k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|   133k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   400k|    {
  706|   400k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   400k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   400k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   267k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   250k|    {
 5374|   250k|        return m_args;
 5375|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   250k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.90M|    {
 3316|  1.90M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   369k|{
 7691|   369k|    return s;
 7692|   369k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   369k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   119k|    {
 7971|   119k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   426k|    {
  675|   426k|        return m_has_value;
  676|   426k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   133k|    {
 1673|   133k|        return &value();
 1674|   133k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   133k|    {
  641|   133k|        return *value_ptr();
  642|   133k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   267k|    {
 5698|   267k|        return ranges::begin(m_range);
 5699|   267k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   146k|    {
  631|   146k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 133k, False: 13.0k]
  ------------------
  632|   133k|            destroy_value();
  633|   133k|        }
  634|  13.0k|        else {
  635|  13.0k|            destroy_unexpected();
  636|  13.0k|        }
  637|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   133k|    {
  696|   133k|        scn::detail::destroy_at(value_ptr());
  697|   133k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   133k|{
  398|   133k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   133k|        for (auto& elem : *p) {
  400|   133k|            scn::detail::destroy_at(&elem);
  401|   133k|        }
  402|   133k|    }
  403|   133k|    else {
  404|   133k|        p->~T();
  405|   133k|    }
  406|   133k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.0k|    {
  700|  13.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.0k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  78.0k|{
  398|  78.0k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  78.0k|        for (auto& elem : *p) {
  400|  78.0k|            scn::detail::destroy_at(&elem);
  401|  78.0k|        }
  402|  78.0k|    }
  403|  78.0k|    else {
  404|  78.0k|        p->~T();
  405|  78.0k|    }
  406|  78.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  59.5k|{
 8934|  59.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  59.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  59.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  59.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   119k|{
 8672|   119k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   119k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   119k|{
 8607|   119k|#if !SCN_DISABLE_LOCALE
 8608|   119k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   119k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   119k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   119k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 107k]
  |  |  ------------------
  ------------------
 8615|  12.0k|        return unexpected(result.error());
 8616|  12.0k|    }
 8617|   107k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   119k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  27.5k|{
 8973|  27.5k|    T value;
 8974|  27.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  27.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 26.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  26.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  27.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  58.1k|{
 5155|  58.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  58.1k|    basic_scan_arg<Context> arg;
 5158|  58.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  58.1k|    arg.m_value = make_value<Context>(value);
 5160|  58.1k|    return arg;
 5161|  58.1k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   455k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  2.73M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  55.0k|{
 8685|  55.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  55.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  55.0k|{
 8631|  55.0k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  55.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  55.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 53.0k]
  |  |  ------------------
  ------------------
 8635|  2.00k|        return unexpected(result.error());
 8636|  2.00k|    }
 8637|  53.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  55.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  53.0k|    {
 1663|  53.0k|        return std::move(value());
 1664|  53.0k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  59.5k|{
 8867|  59.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  59.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  59.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  59.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|   119k|{
 5396|   119k|    detail::check_scan_arg_types<Args...>();
 5397|   119k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   119k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|   146k|{
 5135|   146k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   146k|                  "Scan argument types must be default constructible");
 5137|   146k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   146k|                  "Scan argument types must be Destructible");
 5139|   146k|    static_assert(
 5140|   146k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   146k|        "Scan argument types must not be references");
 5142|   146k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|   119k|    {
 5349|   119k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   119k|    {
 5360|   119k|        return {detail::make_arg<
 5361|   119k|            kind, Context,
 5362|   119k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   119k|                                 typename Context::char_type>::value>(args)...};
 5364|   119k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|   119k|{
 5170|   119k|    return make_value<Context>(value).ref_value;
 5171|   119k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|   146k|{
 5120|   146k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   146k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   146k|                                  needs_context_tag>) {
 5124|   146k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   146k|    }
 5126|   146k|    else {
 5127|   146k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   146k|            value, context_tag<Context>{}));
 5129|   146k|    }
 5130|   146k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|   146k|    {                                                                        \
 4959|   146k|        return val;                                                          \
 4960|   146k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|   146k|{
 5089|   146k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   146k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   146k|    constexpr bool scannable_char =
 5093|   146k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   146k|    static_assert(scannable_char,
 5095|   146k|                  "Cannot scan an argument of an unsupported character "
 5096|   146k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   146k|    constexpr bool scannable_const =
 5099|   146k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   146k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   146k|    constexpr bool scannable_disabled =
 5103|   146k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   146k|    static_assert(scannable_disabled,
 5105|   146k|                  "Cannot scan an argument that has been disabled by "
 5106|   146k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   146k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   146k|    static_assert(
 5110|   146k|        scannable,
 5111|   146k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   146k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   146k|    return arg_value{arg};
 5115|   146k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|   146k|    {
 4902|   146k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|   119k|    {
 7975|   119k|        return m_str;
 7976|   119k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   119k|    {
 5426|   119k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|   119k|    {
 5379|   119k|        return m_argptrs;
 5380|   119k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   119k|{
 8820|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 107k]
  |  |  ------------------
  ------------------
 8821|  12.0k|        return unexpected(result.error());
 8822|  12.0k|    }
 8823|   107k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   119k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  13.0k|    {
  447|  13.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   133k|    {
 5830|   133k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   133k|    {
 5616|   133k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|   119k|    {
 5374|   119k|        return m_args;
 5375|   119k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   119k|    {
 7971|   119k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   280k|    {
  485|   280k|        return m_has_value;
  486|   280k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   133k|    {
 1673|   133k|        return &value();
 1674|   133k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  59.5k|{
 8934|  59.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  59.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  59.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.5k|    static_cast<    \
  |  |  929|  59.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  59.5k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  27.5k|{
 8973|  27.5k|    T value;
 8974|  27.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  27.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 26.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  26.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  27.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.5k|{
 5155|  27.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.5k|    basic_scan_arg<Context> arg;
 5158|  27.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.5k|    arg.m_value = make_value<Context>(value);
 5160|  27.5k|    return arg;
 5161|  27.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  13.0k|    {
 2724|  13.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  13.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  13.0k|    {
 2705|  13.0k|        return decay_copy(t.begin());
 2706|  13.0k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  6.94M|{
 1949|  6.94M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.94M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   323k|    {
 2781|   323k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   323k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   323k|    {
 2763|   323k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   323k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  65.6k|{
 8867|  65.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  65.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  65.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.6k|    static_cast<    \
  |  |  929|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.6k|    static_cast<    \
  |  |  929|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  65.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  65.6k|{
 8654|  65.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  65.6k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  65.6k|{
 8591|  65.6k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  65.6k|    auto result = vscan_impl(buffer, format, args);
 8594|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 59.6k]
  |  |  ------------------
  ------------------
 8595|  6.00k|        return unexpected(result.error());
 8596|  6.00k|    }
 8597|  59.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  65.6k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|   161k|{
 4720|   161k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   161k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   161k|                  "\n"
 4724|   161k|                  "Unsupported range type given as input to a scanning "
 4725|   161k|                  "function.\n"
 4726|   161k|                  "A range needs to have a character type (value type) "
 4727|   161k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   161k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   161k|                  "to be included.\n"
 4730|   161k|                  "See the scnlib documentation for more details.");
 4731|   161k|    static_assert(
 4732|   161k|        !std::is_same_v<T, custom_char_traits>,
 4733|   161k|        "\n"
 4734|   161k|        "Unsupported range type given as input to a scanning "
 4735|   161k|        "function.\n"
 4736|   161k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   161k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   161k|        "not supported.");
 4739|   161k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   161k|                  "\n"
 4741|   161k|                  "Unsupported range type given as input to a scanning "
 4742|   161k|                  "function.\n"
 4743|   161k|                  "file_marker_found cannot be used as an "
 4744|   161k|                  "source range type to scn::scan.\n"
 4745|   161k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   161k|                  "and do not provide an explicit source range, "
 4747|   161k|                  "or use scn::scan with a FILE* directly.");
 4748|   161k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   161k|                  "\n"
 4750|   161k|                  "Unsupported range type given as input to a scanning "
 4751|   161k|                  "function.\n"
 4752|   161k|                  "In order to be scannable, a range needs to satisfy "
 4753|   161k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   161k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   161k|                  "\n"
 4756|   161k|                  "Unsupported range type given as input to a scanning "
 4757|   161k|                  "function.\n"
 4758|   161k|                  "A range needs to model forward_range and have a valid "
 4759|   161k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   161k|                  "Examples of scannable ranges are std::string, "
 4761|   161k|                  "std::string_view, "
 4762|   161k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   161k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   161k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   161k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   161k|{
 4690|   161k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   161k|        return file_marker_found{};
 4692|   161k|    }
 4693|   161k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   161k|        if constexpr (ranges::range<Range>) {
 4695|   161k|            return insufficient_range{};
 4696|   161k|        }
 4697|   161k|        else {
 4698|   161k|            return invalid_input_range{};
 4699|   161k|        }
 4700|   161k|    }
 4701|   161k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   161k|        return invalid_char_type{};
 4703|   161k|    }
 4704|   161k|    else {
 4705|   161k|        return make_forward_scan_buffer(r);
 4706|   161k|    }
 4707|   161k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|   161k|{
 4524|   161k|    return basic_scan_forward_buffer_impl(range);
 4525|   161k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   161k|    {
 4411|   161k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|   161k|    {
 4382|   161k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|   161k|    {
 4151|   161k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|   161k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   310k|    {
 2724|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   310k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   310k|    {
 2705|   310k|        return decay_copy(t.begin());
 2706|   310k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   459k|    {
 3330|   459k|        return m_iterator;
 3331|   459k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  2.01M|    {
 4415|  2.01M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 17.8k, False: 1.99M]
  ------------------
 4416|  17.8k|            return false;
 4417|  17.8k|        }
 4418|  1.99M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.99M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.99M|        }
 4421|  1.99M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.83M, False: 154k]
  ------------------
 4422|  1.83M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.83M|                                          this->m_current_view.begin(),
 4424|  1.83M|                                          this->m_current_view.end());
 4425|  1.83M|        }
 4426|  1.99M|        m_latest = *m_cursor;
 4427|  1.99M|        ++m_cursor;
 4428|  1.99M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.99M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.99M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.99M|        }
 4432|  1.99M|        return true;
 4433|  1.99M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.00M|    {
 2781|  6.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.00M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.00M|    {
 2763|  6.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  6.14M|    {
 3334|  6.14M|        return m_sentinel;
 3335|  6.14M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|   161k|    {
 4071|   161k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   161k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   161k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  13.0k|    {
  447|  13.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   161k|    {
 1177|   161k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   148k|{
 5923|   148k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   148k|                      ranges::iterator_t<SourceRange>>) {
 5925|   148k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   148k|    }
 5927|   148k|    else {
 5928|   148k|        auto it = ranges::begin(source);
 5929|   148k|        while (n > 0) {
 5930|   148k|            --n;
 5931|   148k|            ++it;
 5932|   148k|        }
 5933|   148k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   148k|    }
 5935|   148k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   148k|    {
 2724|   148k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   148k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   148k|    {
 2705|   148k|        return decay_copy(t.begin());
 2706|   148k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|   148k|{
 5910|   148k|    return ranges::end(source);
 5911|   148k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   148k|    {
 2781|   148k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   148k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   148k|    {
 2763|   148k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   148k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   148k|    {
 1430|   148k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   148k|    {
  437|   148k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|   131k|    {
 7975|   131k|        return m_str;
 7976|   131k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   131k|{
 8820|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 119k]
  |  |  ------------------
  ------------------
 8821|  12.0k|        return unexpected(result.error());
 8822|  12.0k|    }
 8823|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   131k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   161k|    {
 1598|   161k|        return has_value();
 1599|   161k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   323k|    {
  485|   323k|        return m_has_value;
  486|   323k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  13.0k|    {
 1604|  13.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.0k|        return this->get_unexpected().error();
 1606|  13.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.0k|    {
  468|  13.0k|        return m_unexpected;
  469|  13.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  13.0k|    {
  626|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  13.0k|    {
  689|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.0k|                                  std::forward<Args>(args)...);
  691|  13.0k|        m_has_value = false;
  692|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.0k|    {
  718|  26.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   161k|    {
 1177|   161k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   119k|    {
 1653|   119k|        return value();
 1654|   119k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   148k|    {
 1627|   148k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   148k|        return this->get_value();
 1629|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   148k|    {
  451|   148k|        return m_value;
  452|   148k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   148k|    {
 5830|   148k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|   148k|    {
 5681|   148k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   148k|    {
 1430|   148k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   148k|    {
  616|   148k|        construct(std::forward<Args>(args)...);
  617|   148k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   148k|    {
  682|   148k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   148k|        m_has_value = true;
  684|   148k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   148k|{
  392|   148k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   148k|        T(std::forward<Args>(args)...);
  394|   148k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|   148k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   446k|    {
  706|   446k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   446k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   446k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   297k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   310k|    {
 3316|   310k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   131k|    {
 7971|   131k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   161k|    {
 1598|   161k|        return has_value();
 1599|   161k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   472k|    {
  675|   472k|        return m_has_value;
  676|   472k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   148k|    {
 1673|   148k|        return &value();
 1674|   148k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   148k|    {
 1627|   148k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   148k|        return this->get_value();
 1629|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   148k|    {
  641|   148k|        return *value_ptr();
  642|   148k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|   148k|    {
 5698|   148k|        return ranges::begin(m_range);
 5699|   148k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   161k|    {
  631|   161k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 148k, False: 13.0k]
  ------------------
  632|   148k|            destroy_value();
  633|   148k|        }
  634|  13.0k|        else {
  635|  13.0k|            destroy_unexpected();
  636|  13.0k|        }
  637|   161k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   148k|    {
  696|   148k|        scn::detail::destroy_at(value_ptr());
  697|   148k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   148k|{
  398|   148k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   148k|        for (auto& elem : *p) {
  400|   148k|            scn::detail::destroy_at(&elem);
  401|   148k|        }
  402|   148k|    }
  403|   148k|    else {
  404|   148k|        p->~T();
  405|   148k|    }
  406|   148k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.0k|    {
  700|  13.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.0k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  65.6k|{
 8934|  65.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  65.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  65.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.6k|    static_cast<    \
  |  |  929|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.6k|    static_cast<    \
  |  |  929|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  65.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  65.6k|{
 8672|  65.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  65.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  65.6k|{
 8607|  65.6k|#if !SCN_DISABLE_LOCALE
 8608|  65.6k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  65.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  65.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  65.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 59.6k]
  |  |  ------------------
  ------------------
 8615|  6.00k|        return unexpected(result.error());
 8616|  6.00k|    }
 8617|  59.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  65.6k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  30.6k|{
 8973|  30.6k|    T value;
 8974|  30.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  30.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  29.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  30.6k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  30.6k|{
 8685|  30.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  30.6k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  30.6k|{
 8631|  30.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  30.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  30.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 29.6k]
  |  |  ------------------
  ------------------
 8635|  1.00k|        return unexpected(result.error());
 8636|  1.00k|    }
 8637|  29.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  30.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  29.6k|    {
 1663|  29.6k|        return std::move(value());
 1664|  29.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  54.0k|    {
 2724|  54.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  54.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  54.0k|    {
 2705|  54.0k|        return decay_copy(t.begin());
 2706|  54.0k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  10.5M|{
 1949|  10.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.04M|    {
 2781|  3.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.04M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.04M|    {
 2763|  3.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.04M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  1.22M|{
 5396|  1.22M|    detail::check_scan_arg_types<Args...>();
 5397|  1.22M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.22M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  1.52M|{
 5135|  1.52M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.52M|                  "Scan argument types must be default constructible");
 5137|  1.52M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.52M|                  "Scan argument types must be Destructible");
 5139|  1.52M|    static_assert(
 5140|  1.52M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.52M|        "Scan argument types must not be references");
 5142|  1.52M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  1.22M|    {
 5349|  1.22M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  1.22M|    {
 5360|  1.22M|        return {detail::make_arg<
 5361|  1.22M|            kind, Context,
 5362|  1.22M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.22M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.22M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  1.22M|{
 5170|  1.22M|    return make_value<Context>(value).ref_value;
 5171|  1.22M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  1.52M|{
 5120|  1.52M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.52M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.52M|                                  needs_context_tag>) {
 5124|  1.52M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.52M|    }
 5126|  1.52M|    else {
 5127|  1.52M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.52M|            value, context_tag<Context>{}));
 5129|  1.52M|    }
 5130|  1.52M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  1.52M|    {                                                                        \
 4959|  1.52M|        return val;                                                          \
 4960|  1.52M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  1.52M|{
 5089|  1.52M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.52M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.52M|    constexpr bool scannable_char =
 5093|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.52M|    static_assert(scannable_char,
 5095|  1.52M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.52M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.52M|    constexpr bool scannable_const =
 5099|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.52M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.52M|    constexpr bool scannable_disabled =
 5103|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.52M|    static_assert(scannable_disabled,
 5105|  1.52M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.52M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.52M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.52M|    static_assert(
 5110|  1.52M|        scannable,
 5111|  1.52M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.52M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.52M|    return arg_value{arg};
 5115|  1.52M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  1.52M|    {
 4902|  1.52M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   612k|{
 8591|   612k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   612k|    auto result = vscan_impl(buffer, format, args);
 8594|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 8595|  24.0k|        return unexpected(result.error());
 8596|  24.0k|    }
 8597|   588k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   612k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  1.52M|{
 4720|  1.52M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.52M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.52M|                  "\n"
 4724|  1.52M|                  "Unsupported range type given as input to a scanning "
 4725|  1.52M|                  "function.\n"
 4726|  1.52M|                  "A range needs to have a character type (value type) "
 4727|  1.52M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.52M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.52M|                  "to be included.\n"
 4730|  1.52M|                  "See the scnlib documentation for more details.");
 4731|  1.52M|    static_assert(
 4732|  1.52M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.52M|        "\n"
 4734|  1.52M|        "Unsupported range type given as input to a scanning "
 4735|  1.52M|        "function.\n"
 4736|  1.52M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.52M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.52M|        "not supported.");
 4739|  1.52M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.52M|                  "\n"
 4741|  1.52M|                  "Unsupported range type given as input to a scanning "
 4742|  1.52M|                  "function.\n"
 4743|  1.52M|                  "file_marker_found cannot be used as an "
 4744|  1.52M|                  "source range type to scn::scan.\n"
 4745|  1.52M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.52M|                  "and do not provide an explicit source range, "
 4747|  1.52M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.52M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.52M|                  "\n"
 4750|  1.52M|                  "Unsupported range type given as input to a scanning "
 4751|  1.52M|                  "function.\n"
 4752|  1.52M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.52M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.52M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.52M|                  "\n"
 4756|  1.52M|                  "Unsupported range type given as input to a scanning "
 4757|  1.52M|                  "function.\n"
 4758|  1.52M|                  "A range needs to model forward_range and have a valid "
 4759|  1.52M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.52M|                  "Examples of scannable ranges are std::string, "
 4761|  1.52M|                  "std::string_view, "
 4762|  1.52M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.52M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.52M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.52M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.52M|{
 4659|  1.52M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.52M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.52M|    }
 4662|  1.52M|    else {
 4663|  1.52M|        return invalid_char_type{};
 4664|  1.52M|    }
 4665|  1.52M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.52M|    {
 2855|  1.52M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.52M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.52M|    {
 2836|  1.52M|        return t.data();
 2837|  1.52M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  1.52M|    {
 3231|  1.52M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 4.18k, False: 1.51M]
  ------------------
 3232|  1.52M|                   ? nullptr
 3233|  1.52M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.52M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.52M|    {
 3005|  1.52M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.52M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.52M|    {
 2978|  1.52M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.52M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  3.00M|    {
 3339|  3.00M|        return m_iterator == m_sentinel;
 3340|  3.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  3.03M|    {
 3185|  3.03M|        return static_cast<const D&>(*this);
 3186|  3.03M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.98M|    {
 2724|  2.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.98M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.98M|    {
 2705|  2.98M|        return decay_copy(t.begin());
 2706|  2.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   171M|    {
 3330|   171M|        return m_iterator;
 3331|   171M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.52M|    {
 2930|  1.52M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.52M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.52M|    {
 2896|  1.52M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.52M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  3.00M|    {
 3346|  3.00M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  3.00M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  52.0k|    {
 1476|  52.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  52.0k|    {
  447|  52.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.52M|    {
 1177|  1.52M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.47M|{
 5923|  1.47M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.47M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.47M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.47M|    }
 5927|  1.47M|    else {
 5928|  1.47M|        auto it = ranges::begin(source);
 5929|  1.47M|        while (n > 0) {
 5930|  1.47M|            --n;
 5931|  1.47M|            ++it;
 5932|  1.47M|        }
 5933|  1.47M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.47M|    }
 5935|  1.47M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.95M|    {
 2724|  2.95M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.95M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.95M|    {
 2705|  2.95M|        return decay_copy(t.begin());
 2706|  2.95M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  1.47M|{
 5910|  1.47M|    return ranges::end(source);
 5911|  1.47M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.47M|    {
 2781|  1.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.47M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.47M|    {
 2763|  1.47M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.47M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   164M|    {
 3334|   164M|        return m_sentinel;
 3335|   164M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.47M|    {
 1430|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.47M|    {
  437|  1.47M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|   612k|    {
 7975|   612k|        return m_str;
 7976|   612k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.22M|    {
 5426|  1.22M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  1.22M|    {
 5379|  1.22M|        return m_argptrs;
 5380|  1.22M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  1.83M|    {
 5478|  1.83M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   612k|{
 8820|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 8821|  24.0k|        return unexpected(result.error());
 8822|  24.0k|    }
 8823|   588k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   612k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.52M|    {
 1598|  1.52M|        return has_value();
 1599|  1.52M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.04M|    {
  485|  3.04M|        return m_has_value;
  486|  3.04M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  52.0k|    {
 1604|  52.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  52.0k|        return this->get_unexpected().error();
 1606|  52.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  52.0k|    {
  468|  52.0k|        return m_unexpected;
  469|  52.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.0k|    {
 1476|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.0k|    {
  626|  26.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.0k|    {
  689|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.0k|                                  std::forward<Args>(args)...);
  691|  26.0k|        m_has_value = false;
  692|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  52.0k|    {
  718|  52.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  52.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  52.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  52.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   761k|    {
 1177|   761k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.17M|    {
 1653|  1.17M|        return value();
 1654|  1.17M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.47M|    {
 1627|  1.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.47M|        return this->get_value();
 1629|  1.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.47M|    {
  451|  1.47M|        return m_value;
  452|  1.47M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   735k|    {
 5830|   735k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.47M|    {
 5681|  1.47M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.47M|    {
 5616|  1.47M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   735k|    {
 1430|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   735k|    {
  616|   735k|        construct(std::forward<Args>(args)...);
  617|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   735k|    {
  682|   735k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   735k|        m_has_value = true;
  684|   735k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   735k|{
  392|   735k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   735k|        T(std::forward<Args>(args)...);
  394|   735k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|   735k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.20M|    {
  706|  2.20M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.20M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.20M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.47M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  1.22M|    {
 5374|  1.22M|        return m_args;
 5375|  1.22M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  1.22M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  63.0M|    {
 3316|  63.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.83M|{
 7696|  1.83M|    return s;
 7697|  1.83M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.83M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   612k|    {
 7971|   612k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   761k|    {
 1598|   761k|        return has_value();
 1599|   761k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.25M|    {
  675|  2.25M|        return m_has_value;
  676|  2.25M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   735k|    {
 1673|   735k|        return &value();
 1674|   735k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   735k|    {
 1627|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   735k|        return this->get_value();
 1629|   735k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   735k|    {
  641|   735k|        return *value_ptr();
  642|   735k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  1.47M|    {
 5698|  1.47M|        return ranges::begin(m_range);
 5699|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   761k|    {
  631|   761k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 735k, False: 26.0k]
  ------------------
  632|   735k|            destroy_value();
  633|   735k|        }
  634|  26.0k|        else {
  635|  26.0k|            destroy_unexpected();
  636|  26.0k|        }
  637|   761k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   735k|    {
  696|   735k|        scn::detail::destroy_at(value_ptr());
  697|   735k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   735k|{
  398|   735k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   735k|        for (auto& elem : *p) {
  400|   735k|            scn::detail::destroy_at(&elem);
  401|   735k|        }
  402|   735k|    }
  403|   735k|    else {
  404|   735k|        p->~T();
  405|   735k|    }
  406|   735k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.0k|    {
  700|  26.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   612k|{
 8607|   612k|#if !SCN_DISABLE_LOCALE
 8608|   612k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   612k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   612k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   612k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 8615|  24.0k|        return unexpected(result.error());
 8616|  24.0k|    }
 8617|   588k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   612k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   297k|{
 5155|   297k|    check_scan_arg_types<T>();
 5156|       |
 5157|   297k|    basic_scan_arg<Context> arg;
 5158|   297k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   297k|    arg.m_value = make_value<Context>(value);
 5160|   297k|    return arg;
 5161|   297k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  2.28M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   297k|{
 8631|   297k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   297k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   297k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 293k]
  |  |  ------------------
  ------------------
 8635|  4.00k|        return unexpected(result.error());
 8636|  4.00k|    }
 8637|   293k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   297k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   293k|    {
 1663|   293k|        return std::move(value());
 1664|   293k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|   612k|{
 5396|   612k|    detail::check_scan_arg_types<Args...>();
 5397|   612k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   612k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|   761k|{
 5135|   761k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   761k|                  "Scan argument types must be default constructible");
 5137|   761k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   761k|                  "Scan argument types must be Destructible");
 5139|   761k|    static_assert(
 5140|   761k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   761k|        "Scan argument types must not be references");
 5142|   761k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|   612k|    {
 5349|   612k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   612k|    {
 5360|   612k|        return {detail::make_arg<
 5361|   612k|            kind, Context,
 5362|   612k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   612k|                                 typename Context::char_type>::value>(args)...};
 5364|   612k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|   612k|{
 5170|   612k|    return make_value<Context>(value).ref_value;
 5171|   612k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|   761k|{
 5120|   761k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   761k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   761k|                                  needs_context_tag>) {
 5124|   761k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   761k|    }
 5126|   761k|    else {
 5127|   761k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   761k|            value, context_tag<Context>{}));
 5129|   761k|    }
 5130|   761k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|   761k|    {                                                                        \
 4959|   761k|        return val;                                                          \
 4960|   761k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|   761k|{
 5089|   761k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   761k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   761k|    constexpr bool scannable_char =
 5093|   761k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   761k|    static_assert(scannable_char,
 5095|   761k|                  "Cannot scan an argument of an unsupported character "
 5096|   761k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   761k|    constexpr bool scannable_const =
 5099|   761k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   761k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   761k|    constexpr bool scannable_disabled =
 5103|   761k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   761k|    static_assert(scannable_disabled,
 5105|   761k|                  "Cannot scan an argument that has been disabled by "
 5106|   761k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   761k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   761k|    static_assert(
 5110|   761k|        scannable,
 5111|   761k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   761k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   761k|    return arg_value{arg};
 5115|   761k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|   761k|    {
 4902|   761k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|   612k|    {
 7975|   612k|        return m_str;
 7976|   612k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   612k|    {
 5426|   612k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|   612k|    {
 5379|   612k|        return m_argptrs;
 5380|   612k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   612k|{
 8820|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 8821|  24.0k|        return unexpected(result.error());
 8822|  24.0k|    }
 8823|   588k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   612k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.0k|    {
 1476|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  26.0k|    {
  447|  26.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   761k|    {
 1177|   761k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   735k|    {
 5830|   735k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   735k|    {
 5616|   735k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   735k|    {
 1430|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   735k|    {
  437|   735k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|   612k|    {
 5374|   612k|        return m_args;
 5375|   612k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   612k|    {
 7971|   612k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   761k|    {
 1598|   761k|        return has_value();
 1599|   761k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.49M|    {
  485|  1.49M|        return m_has_value;
  486|  1.49M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   735k|    {
 1673|   735k|        return &value();
 1674|   735k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   735k|    {
 1627|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   735k|        return this->get_value();
 1629|   735k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   735k|    {
  451|   735k|        return m_value;
  452|   735k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   148k|{
 5155|   148k|    check_scan_arg_types<T>();
 5156|       |
 5157|   148k|    basic_scan_arg<Context> arg;
 5158|   148k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   148k|    arg.m_value = make_value<Context>(value);
 5160|   148k|    return arg;
 5161|   148k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  26.0k|    {
 2724|  26.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  26.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  26.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  26.0k|    {
 2705|  26.0k|        return decay_copy(t.begin());
 2706|  26.0k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  81.6M|{
 1949|  81.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  81.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  81.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.52M|    {
 2781|  1.52M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.52M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.52M|    {
 2763|  1.52M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.52M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   306k|{
 8591|   306k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   306k|    auto result = vscan_impl(buffer, format, args);
 8594|   306k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 294k]
  |  |  ------------------
  ------------------
 8595|  12.0k|        return unexpected(result.error());
 8596|  12.0k|    }
 8597|   294k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   306k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   761k|{
 4720|   761k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   761k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   761k|                  "\n"
 4724|   761k|                  "Unsupported range type given as input to a scanning "
 4725|   761k|                  "function.\n"
 4726|   761k|                  "A range needs to have a character type (value type) "
 4727|   761k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   761k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   761k|                  "to be included.\n"
 4730|   761k|                  "See the scnlib documentation for more details.");
 4731|   761k|    static_assert(
 4732|   761k|        !std::is_same_v<T, custom_char_traits>,
 4733|   761k|        "\n"
 4734|   761k|        "Unsupported range type given as input to a scanning "
 4735|   761k|        "function.\n"
 4736|   761k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   761k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   761k|        "not supported.");
 4739|   761k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   761k|                  "\n"
 4741|   761k|                  "Unsupported range type given as input to a scanning "
 4742|   761k|                  "function.\n"
 4743|   761k|                  "file_marker_found cannot be used as an "
 4744|   761k|                  "source range type to scn::scan.\n"
 4745|   761k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   761k|                  "and do not provide an explicit source range, "
 4747|   761k|                  "or use scn::scan with a FILE* directly.");
 4748|   761k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   761k|                  "\n"
 4750|   761k|                  "Unsupported range type given as input to a scanning "
 4751|   761k|                  "function.\n"
 4752|   761k|                  "In order to be scannable, a range needs to satisfy "
 4753|   761k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   761k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   761k|                  "\n"
 4756|   761k|                  "Unsupported range type given as input to a scanning "
 4757|   761k|                  "function.\n"
 4758|   761k|                  "A range needs to model forward_range and have a valid "
 4759|   761k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   761k|                  "Examples of scannable ranges are std::string, "
 4761|   761k|                  "std::string_view, "
 4762|   761k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   761k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   761k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   761k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   761k|{
 4690|   761k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   761k|        return file_marker_found{};
 4692|   761k|    }
 4693|   761k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   761k|        if constexpr (ranges::range<Range>) {
 4695|   761k|            return insufficient_range{};
 4696|   761k|        }
 4697|   761k|        else {
 4698|   761k|            return invalid_input_range{};
 4699|   761k|        }
 4700|   761k|    }
 4701|   761k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   761k|        return invalid_char_type{};
 4703|   761k|    }
 4704|   761k|    else {
 4705|   761k|        return make_forward_scan_buffer(r);
 4706|   761k|    }
 4707|   761k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   761k|{
 4524|   761k|    return basic_scan_forward_buffer_impl(range);
 4525|   761k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   761k|    {
 4411|   761k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   761k|    {
 4382|   761k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   761k|    {
 4151|   761k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   761k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.49M|    {
 2724|  1.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.49M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.49M|    {
 2705|  1.49M|        return decay_copy(t.begin());
 2706|  1.49M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  2.23M|    {
 3330|  2.23M|        return m_iterator;
 3331|  2.23M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  25.7M|    {
 4415|  25.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 22.9k, False: 25.7M]
  ------------------
 4416|  22.9k|            return false;
 4417|  22.9k|        }
 4418|  25.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  25.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  25.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  25.7M|        }
 4421|  25.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 24.9M, False: 746k]
  ------------------
 4422|  24.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  24.9M|                                          this->m_current_view.begin(),
 4424|  24.9M|                                          this->m_current_view.end());
 4425|  24.9M|        }
 4426|  25.7M|        m_latest = *m_cursor;
 4427|  25.7M|        ++m_cursor;
 4428|  25.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  25.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  25.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  25.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  25.7M|        }
 4432|  25.7M|        return true;
 4433|  25.7M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  77.1M|    {
 2781|  77.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  77.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  77.1M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  77.1M|    {
 2763|  77.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  77.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  77.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  77.8M|    {
 3334|  77.8M|        return m_sentinel;
 3335|  77.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   761k|    {
 4071|   761k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   761k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   761k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  26.0k|    {
 1476|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  26.0k|    {
  447|  26.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   761k|    {
 1177|   761k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   735k|{
 5923|   735k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   735k|                      ranges::iterator_t<SourceRange>>) {
 5925|   735k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   735k|    }
 5927|   735k|    else {
 5928|   735k|        auto it = ranges::begin(source);
 5929|   735k|        while (n > 0) {
 5930|   735k|            --n;
 5931|   735k|            ++it;
 5932|   735k|        }
 5933|   735k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   735k|    }
 5935|   735k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   735k|    {
 2724|   735k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   735k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   735k|    {
 2705|   735k|        return decay_copy(t.begin());
 2706|   735k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   735k|{
 5910|   735k|    return ranges::end(source);
 5911|   735k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   735k|    {
 2781|   735k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   735k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   735k|    {
 2763|   735k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   735k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   735k|    {
 1430|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   735k|    {
  437|   735k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|   612k|    {
 7975|   612k|        return m_str;
 7976|   612k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   612k|{
 8820|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 8821|  24.0k|        return unexpected(result.error());
 8822|  24.0k|    }
 8823|   588k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   612k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   761k|    {
 1598|   761k|        return has_value();
 1599|   761k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.52M|    {
  485|  1.52M|        return m_has_value;
  486|  1.52M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  26.0k|    {
 1604|  26.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.0k|        return this->get_unexpected().error();
 1606|  26.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.0k|    {
  468|  26.0k|        return m_unexpected;
  469|  26.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.0k|    {
 1476|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  26.0k|    {
  626|  26.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  26.0k|    {
  689|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.0k|                                  std::forward<Args>(args)...);
  691|  26.0k|        m_has_value = false;
  692|  26.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  52.0k|    {
  718|  52.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  52.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  52.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  52.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   761k|    {
 1177|   761k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   588k|    {
 1653|   588k|        return value();
 1654|   588k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   735k|    {
 1627|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   735k|        return this->get_value();
 1629|   735k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   735k|    {
  451|   735k|        return m_value;
  452|   735k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   735k|    {
 5830|   735k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   735k|    {
 5681|   735k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   735k|    {
 1430|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   735k|    {
  616|   735k|        construct(std::forward<Args>(args)...);
  617|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   735k|    {
  682|   735k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   735k|        m_has_value = true;
  684|   735k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   735k|{
  392|   735k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   735k|        T(std::forward<Args>(args)...);
  394|   735k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|   735k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.20M|    {
  706|  2.20M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.20M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.20M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  1.47M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  1.49M|    {
 3316|  1.49M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   612k|    {
 7971|   612k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   761k|    {
 1598|   761k|        return has_value();
 1599|   761k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.25M|    {
  675|  2.25M|        return m_has_value;
  676|  2.25M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   735k|    {
 1673|   735k|        return &value();
 1674|   735k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   735k|    {
 1627|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   735k|        return this->get_value();
 1629|   735k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   735k|    {
  641|   735k|        return *value_ptr();
  642|   735k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   735k|    {
 5698|   735k|        return ranges::begin(m_range);
 5699|   735k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   761k|    {
  631|   761k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 735k, False: 26.0k]
  ------------------
  632|   735k|            destroy_value();
  633|   735k|        }
  634|  26.0k|        else {
  635|  26.0k|            destroy_unexpected();
  636|  26.0k|        }
  637|   761k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   735k|    {
  696|   735k|        scn::detail::destroy_at(value_ptr());
  697|   735k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   735k|{
  398|   735k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   735k|        for (auto& elem : *p) {
  400|   735k|            scn::detail::destroy_at(&elem);
  401|   735k|        }
  402|   735k|    }
  403|   735k|    else {
  404|   735k|        p->~T();
  405|   735k|    }
  406|   735k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.0k|    {
  700|  26.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   306k|{
 8607|   306k|#if !SCN_DISABLE_LOCALE
 8608|   306k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   306k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   306k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   306k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   306k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 294k]
  |  |  ------------------
  ------------------
 8615|  12.0k|        return unexpected(result.error());
 8616|  12.0k|    }
 8617|   294k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   306k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   148k|{
 8631|   148k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   148k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   148k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 146k]
  |  |  ------------------
  ------------------
 8635|  2.00k|        return unexpected(result.error());
 8636|  2.00k|    }
 8637|   146k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   148k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   146k|    {
 1663|   146k|        return std::move(value());
 1664|   146k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   153k|    {
 3568|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   153k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  8.51M|    {
 3574|  8.51M|        return m_code == good;
 3575|  8.51M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  54.0k|    {
 3585|  54.0k|        return m_code;
 3586|  54.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  6.61M|    {
 3330|  6.61M|        return m_iterator;
 3331|  6.61M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  83.6M|    {
 3330|  83.6M|        return m_iterator;
 3331|  83.6M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  1.14M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  36.0k|    {
 6282|  36.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 36.0k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  36.0k|        m_specs.width = width;
 6289|  36.0k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.10M|    {
 6303|  1.10M|        m_specs.type = type;
 6304|  1.10M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  41.8k|    {
 6320|  41.8k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  41.8k|        const auto end_value = static_cast<unsigned>(end);
 6322|  41.8k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  41.8k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  41.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.8k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  41.8k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  41.8k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.13M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.08M, False: 41.8k]
  ------------------
 6329|  1.08M|                m_specs.charset_literals[v / 8] |=
 6330|  1.08M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.08M|            }
 6332|  41.8k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  41.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  36.0k|    {
 6365|  36.0k|        SCN_UNLIKELY_ATTR
 6366|  36.0k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  36.0k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.20M|    {
 6376|  1.20M|        return static_cast<bool>(m_error);
 6377|  1.20M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  54.0k|{
 3609|  54.0k|    return a.code() == b;
 3610|  54.0k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  54.0k|{
 3613|  54.0k|    return !(a == b);
 3614|  54.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  18.0k|{
 7063|  18.0k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 18.0k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 18.0k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 18.0k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 18.0k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 18.0k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 18.0k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 18.0k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 18.0k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 18.0k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 18.0k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 18.0k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 18.0k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 18.0k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 18.0k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 18.0k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 18.0k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 18.0k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 18.0k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 18.0k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  2.00k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 2.00k, False: 16.0k]
  ------------------
 7096|  6.00k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 4.00k, False: 14.0k]
  ------------------
 7097|  10.0k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 4.00k, False: 14.0k]
  ------------------
 7098|  18.0k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 8.00k, False: 10.0k]
  ------------------
 7099|  18.0k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 18.0k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 18.0k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  18.0k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  18.0k|            SCN_CLANG_POP
 7110|  18.0k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  18.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  18.0k|{
 3654|  18.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  18.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  20.9k|{
 3654|  20.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  20.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  10.6k|{
 3654|  10.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.6k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  1.10M|{
 7205|  1.10M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 1.10M]
  ------------------
 7206|  1.10M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 1.06M, False: 38.9k]
  ------------------
 7207|  1.10M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 20.9k, False: 18.0k]
  ------------------
 7208|  1.10M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 18.0k]
  ------------------
 7209|  1.10M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 18.0k]
  ------------------
 7210|  1.08M|        return;
 7211|  1.08M|    }
 7212|  18.0k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 18.0k, False: 0]
  ------------------
 7213|  18.0k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  18.0k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  18.0k|        }
 7218|      0|        return;
 7219|  18.0k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  36.2M|    {
 4195|  36.2M|        return m_end == nullptr;
 4196|  36.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   148k|{
 3715|   148k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   148k|                                          const CharT*, const CharT*>) {
 3717|   148k|        return {first, last};
 3718|   148k|    }
 3719|   148k|    else {
 3720|   148k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   148k|    }
 3722|   148k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|   762k|    {
 4211|   762k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 762k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   762k|        return parent()->get_segment_starting_at(position());
 4217|   762k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  21.1M|    {
 4205|  21.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  21.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  21.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|   762k|    {
 4101|   762k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   762k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 439k, False: 323k]
  |  |  ------------------
  ------------------
 4102|   762k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   439k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   439k|        }
 4105|   323k|        const auto start = pos - m_putback_buffer.size();
 4106|   323k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   323k|        return m_current_view.substr(start);
 4108|   323k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|   858k|    {
 4190|   858k|        return m_position;
 4191|   858k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   485k|    {
 4123|   485k|        return m_is_contiguous;
 4124|   485k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   466M|    {
 4195|   466M|        return m_end == nullptr;
 4196|   466M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   738k|{
 3715|   738k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   738k|                                          const CharT*, const CharT*>) {
 3717|   738k|        return {first, last};
 3718|   738k|    }
 3719|   738k|    else {
 3720|   738k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   738k|    }
 3722|   738k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  2.23M|    {
 4211|  2.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 2.23M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  2.23M|        return parent()->get_segment_starting_at(position());
 4217|  2.23M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|   271M|    {
 4205|   271M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   271M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   271M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   271M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  2.23M|    {
 4101|  2.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47M, False: 757k]
  |  |  ------------------
  ------------------
 4102|  2.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.47M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.47M|        }
 4105|   757k|        const auto start = pos - m_putback_buffer.size();
 4106|   757k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   757k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   757k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   757k|        return m_current_view.substr(start);
 4108|   757k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.68M|    {
 4190|  2.68M|        return m_position;
 4191|  2.68M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  2.28M|    {
 4123|  2.28M|        return m_is_contiguous;
 4124|  2.28M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.63M|    {
 3180|  1.63M|        return static_cast<D&>(*this);
 3181|  1.63M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   819k|    {
 2978|   819k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   819k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   819k|    {
 3005|   819k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   819k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   819k|    {
 3221|   819k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 756, False: 818k]
  ------------------
 3222|   819k|                   ? nullptr
 3223|   819k|                   : std::addressof(*ranges::begin(derived()));
 3224|   819k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  2.96M|    {
 3180|  2.96M|        return static_cast<D&>(*this);
 3181|  2.96M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.48M|    {
 2978|  1.48M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.48M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.48M|    {
 3005|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.48M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.48M|    {
 3221|  1.48M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 1.48M]
  ------------------
 3222|  1.48M|                   ? nullptr
 3223|  1.48M|                   : std::addressof(*ranges::begin(derived()));
 3224|  1.48M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  66.0k|    {
 8169|  66.0k|        return ranges::subrange{begin(), end()};
 8170|  66.0k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   196k|    {
 8153|   196k|        return m_current;
 8154|   196k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  66.0k|    {
 8161|  66.0k|        return ranges::default_sentinel;
 8162|  66.0k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  2.41M|    {
 3316|  2.41M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  2.72M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   153k|    {
 1837|   153k|        return detail::transform_error_impl(std::move(*this),
 1838|   153k|                                            std::forward<F>(f));
 1839|   153k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   153k|{
 1323|   153k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   153k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   153k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   153k|            return result(*std::forward<Exp>(exp));
 1327|   153k|        }
 1328|       |
 1329|   153k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   153k|        return result(unexpect, monostate{});
 1331|   153k|    }
 1332|   153k|    else {
 1333|   153k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   153k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 150k, False: 2.22k]
  |  |  ------------------
  ------------------
 1335|   153k|                   ? result(*std::forward<Exp>(exp))
 1336|   153k|                   : result(unexpect,
 1337|  2.22k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.22k|                                           std::forward<Exp>(exp).error()));
 1339|   153k|    }
 1340|   153k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   306k|    {
  485|   306k|        return m_has_value;
  486|   306k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   150k|    {
 1663|   150k|        return std::move(value());
 1664|   150k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   150k|    {
 1627|   150k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   150k|        return this->get_value();
 1629|   150k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   150k|    {
  451|   150k|        return m_value;
  452|   150k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   359k|    {
 1430|   359k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   359k|    {
  437|   359k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   376k|    {
 1177|   376k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  13.4k|{
 1211|  13.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  13.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.22k|    {
 1614|  2.22k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.22k|        return std::move(this->get_unexpected().error());
 1616|  2.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.22k|    {
  468|  2.22k|        return m_unexpected;
  469|  2.22k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  26.9k|    {
  361|  26.9k|        return m_unexpected;
  362|  26.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.22k|    {
 1486|  2.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  16.2k|    {
  447|  16.2k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   306k|    {
 8169|   306k|        return ranges::subrange{begin(), end()};
 8170|   306k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   914k|    {
 8153|   914k|        return m_current;
 8154|   914k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   306k|    {
 8161|   306k|        return ranges::default_sentinel;
 8162|   306k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  29.3M|    {
 3316|  29.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   744k|    {
 1837|   744k|        return detail::transform_error_impl(std::move(*this),
 1838|   744k|                                            std::forward<F>(f));
 1839|   744k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   744k|{
 1323|   744k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   744k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   744k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   744k|            return result(*std::forward<Exp>(exp));
 1327|   744k|        }
 1328|       |
 1329|   744k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   744k|        return result(unexpect, monostate{});
 1331|   744k|    }
 1332|   744k|    else {
 1333|   744k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   744k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   744k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 742k, False: 2.52k]
  |  |  ------------------
  ------------------
 1335|   744k|                   ? result(*std::forward<Exp>(exp))
 1336|   744k|                   : result(unexpect,
 1337|  2.52k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.52k|                                           std::forward<Exp>(exp).error()));
 1339|   744k|    }
 1340|   744k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.48M|    {
  485|  1.48M|        return m_has_value;
  486|  1.48M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   742k|    {
 1663|   742k|        return std::move(value());
 1664|   742k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   742k|    {
 1627|   742k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   742k|        return this->get_value();
 1629|   742k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   742k|    {
  451|   742k|        return m_value;
  452|   742k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.77M|    {
 1430|  1.77M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.77M|    {
  437|  1.77M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.80M|    {
 1177|  1.80M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.52k|    {
 1614|  2.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.52k|        return std::move(this->get_unexpected().error());
 1616|  2.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.52k|    {
  468|  2.52k|        return m_unexpected;
  469|  2.52k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.52k|    {
 1486|  2.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  31.5k|    {
  447|  31.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  49.5k|    {
  347|  49.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  49.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  49.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  28.5k|    {
 1476|  28.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  32.2k|    {
  447|  32.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   680k|    {
 1177|   680k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   646k|    {
 1430|   646k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   646k|    {
  437|   646k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   680k|    {
 1598|   680k|        return has_value();
 1599|   680k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.36M|    {
  485|  1.36M|        return m_has_value;
  486|  1.36M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  32.2k|    {
 1604|  32.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  32.2k|        return this->get_unexpected().error();
 1606|  32.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  32.2k|    {
  468|  32.2k|        return m_unexpected;
  469|  32.2k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   538k|    {
 1663|   538k|        return std::move(value());
 1664|   538k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   648k|    {
 1627|   648k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   648k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   648k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   648k|        return this->get_value();
 1629|   648k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   648k|    {
  451|   648k|        return m_value;
  452|   648k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  63.0k|    {
  447|  63.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.60M|    {
 1177|  3.60M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  3.54M|    {
 1430|  3.54M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.54M|    {
  437|  3.54M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.60M|    {
 1598|  3.60M|        return has_value();
 1599|  3.60M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.21M|    {
  485|  7.21M|        return m_has_value;
  486|  7.21M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  63.0k|    {
 1604|  63.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  63.0k|        return this->get_unexpected().error();
 1606|  63.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  63.0k|    {
  468|  63.0k|        return m_unexpected;
  469|  63.0k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.95M|    {
 1663|  2.95M|        return std::move(value());
 1664|  2.95M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.54M|    {
 1627|  3.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.54M|        return this->get_value();
 1629|  3.54M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.54M|    {
  451|  3.54M|        return m_value;
  452|  3.54M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   275k|    {
 1837|   275k|        return detail::transform_error_impl(std::move(*this),
 1838|   275k|                                            std::forward<F>(f));
 1839|   275k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   275k|{
 1323|   275k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   275k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   275k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   275k|            return result(*std::forward<Exp>(exp));
 1327|   275k|        }
 1328|       |
 1329|   275k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   275k|        return result(unexpect, monostate{});
 1331|   275k|    }
 1332|   275k|    else {
 1333|   275k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   275k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   275k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 271k, False: 3.70k]
  |  |  ------------------
  ------------------
 1335|   275k|                   ? result(*std::forward<Exp>(exp))
 1336|   275k|                   : result(unexpect,
 1337|  3.70k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.70k|                                           std::forward<Exp>(exp).error()));
 1339|   275k|    }
 1340|   275k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   550k|    {
  485|   550k|        return m_has_value;
  486|   550k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   271k|    {
 1663|   271k|        return std::move(value());
 1664|   271k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   271k|    {
 1627|   271k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   271k|        return this->get_value();
 1629|   271k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   271k|    {
  451|   271k|        return m_value;
  452|   271k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.70k|    {
 1614|  3.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.70k|        return std::move(this->get_unexpected().error());
 1616|  3.70k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.70k|    {
  468|  3.70k|        return m_unexpected;
  469|  3.70k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.70k|    {
 1486|  3.70k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  6.21M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  14.0k|    {
 1476|  14.0k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  1.89M|    {
 4280|  1.89M|        return x.is_at_end();
 4281|  1.89M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  3.90M|    {
 4324|  3.90M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 3.90M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  3.90M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 3.90M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  3.90M|        return !read_at_position();
 4331|  3.90M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  10.7M|    {
 4304|  10.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  10.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 10.7M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  10.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  10.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.76M, False: 2.01M]
  |  |  ------------------
  ------------------
 4311|  8.76M|            return true;
 4312|  8.76M|        }
 4313|       |
 4314|  4.00M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.01M, False: 1.99M]
  ------------------
 4315|  2.01M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 17.8k, False: 1.99M]
  ------------------
 4316|  17.8k|                return false;
 4317|  17.8k|            }
 4318|  2.01M|        }
 4319|  1.99M|        return true;
 4320|  2.01M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  14.7M|    {
 4081|  14.7M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  14.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  3.56M|    {
 4239|  3.56M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  3.56M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 3.56M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  3.56M|        auto res = read_at_position();
 4248|  3.56M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  3.56M|        return parent()->get_character_at(m_position);
 4250|  3.56M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  3.56M|    {
 4112|  3.56M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94M, False: 1.62M]
  |  |  ------------------
  ------------------
 4113|  3.56M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  1.94M|            return m_putback_buffer[pos];
 4115|  1.94M|        }
 4116|  1.62M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.62M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.62M|        return m_current_view[start];
 4119|  1.62M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   150k|    {
 1430|   150k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   150k|    {
  437|   150k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   153k|    {
 1177|   153k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.22k|    {
 1476|  2.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.22k|    {
  447|  2.22k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  13.4k|    {
  356|  13.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  13.4k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  1.44M|    {
 4274|  1.44M|        return !(lhs == rhs);
 4275|  1.44M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  1.45M|    {
 4269|  1.45M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 1.45M, False: 0]
  |  Branch (4269:46): [True: 249k, False: 1.20M]
  ------------------
 4270|  1.45M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  3.30M|    {
 4225|  3.30M|        ++m_position;
 4226|  3.30M|        (void)read_at_position();
 4227|  3.30M|        return *this;
 4228|  3.30M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  13.4k|    {
  347|  13.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  13.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    964|    {
 1476|    964|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    964|    {
  447|    964|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   123k|    {
 1177|   123k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   122k|    {
 1430|   122k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   122k|    {
  437|   122k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   123k|    {
 1598|   123k|        return has_value();
 1599|   123k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   247k|    {
  485|   247k|        return m_has_value;
  486|   247k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|    964|    {
 1604|    964|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    964|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    964|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    964|        return this->get_unexpected().error();
 1606|    964|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    964|    {
  468|    964|        return m_unexpected;
  469|    964|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   122k|    {
 1663|   122k|        return std::move(value());
 1664|   122k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   122k|    {
 1627|   122k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   122k|        return this->get_value();
 1629|   122k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   122k|    {
  451|   122k|        return m_value;
  452|   122k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  5.93M|    {
 3334|  5.93M|        return m_sentinel;
 3335|  5.93M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|   158k|    {
 3330|   158k|        return m_iterator;
 3331|   158k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|   158k|    {
 3334|   158k|        return m_sentinel;
 3335|   158k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   376k|    {
 1598|   376k|        return has_value();
 1599|   376k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   753k|    {
  485|   753k|        return m_has_value;
  486|   753k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  16.2k|    {
 1604|  16.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.2k|        return this->get_unexpected().error();
 1606|  16.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  16.2k|    {
  468|  16.2k|        return m_unexpected;
  469|  16.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   299k|    {
 1663|   299k|        return std::move(value());
 1664|   299k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   360k|    {
 1627|   360k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   360k|        return this->get_value();
 1629|   360k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   360k|    {
  451|   360k|        return m_value;
  452|   360k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   303k|{
  326|   303k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   303k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   151k|    {
 3316|   151k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.00M|    {
 4291|  2.00M|        return !x.is_at_end();
 4292|  2.00M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.70k|    {
 1476|  3.70k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.70k|    {
  447|  3.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   275k|    {
 1177|   275k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   271k|    {
 1430|   271k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   271k|    {
  437|   271k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   222k|    {
 1177|   222k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   221k|    {
 1430|   221k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   221k|    {
  437|   221k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   222k|    {
 1598|   222k|        return has_value();
 1599|   222k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   445k|    {
  485|   445k|        return m_has_value;
  486|   445k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   221k|    {
 1663|   221k|        return std::move(value());
 1664|   221k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   221k|    {
 1627|   221k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   221k|        return this->get_value();
 1629|   221k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   221k|    {
  451|   221k|        return m_value;
  452|   221k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   819k|    {
 2855|   819k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   819k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   819k|    {
 2836|   819k|        return t.data();
 2837|   819k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   117k|    {
 1476|   117k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   117k|    {
  447|   117k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.73M|    {
 1177|  2.73M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  2.62M|    {
 1430|  2.62M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  2.62M|    {
  437|  2.62M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  60.9k|    {
 1653|  60.9k|        return value();
 1654|  60.9k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   109k|    {
 1653|   109k|        return value();
 1654|   109k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    882|    {
 1430|    882|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    882|    {
  437|    882|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.76k|    {
 1430|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.76k|    {
  437|  1.76k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  26.8M|    {
 4280|  26.8M|        return x.is_at_end();
 4281|  26.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  52.9M|    {
 4324|  52.9M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 52.9M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  52.9M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 52.9M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  52.9M|        return !read_at_position();
 4331|  52.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   140M|    {
 4304|   140M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   140M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   140M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 140M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   140M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   140M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 114M, False: 25.7M]
  |  |  ------------------
  ------------------
 4311|   114M|            return true;
 4312|   114M|        }
 4313|       |
 4314|  51.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 25.7M, False: 25.7M]
  ------------------
 4315|  25.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 22.9k, False: 25.7M]
  ------------------
 4316|  22.9k|                return false;
 4317|  22.9k|            }
 4318|  25.7M|        }
 4319|  25.7M|        return true;
 4320|  25.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   191M|    {
 4081|   191M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   191M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  51.8M|    {
 4239|  51.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  51.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  51.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 51.8M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  51.8M|        auto res = read_at_position();
 4248|  51.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  51.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  51.8M|        return parent()->get_character_at(m_position);
 4250|  51.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  51.8M|    {
 4112|  51.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  51.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.8M, False: 24.9M]
  |  |  ------------------
  ------------------
 4113|  51.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  26.8M|            return m_putback_buffer[pos];
 4115|  26.8M|        }
 4116|  24.9M|        const auto start = pos - m_putback_buffer.size();
 4117|  24.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  24.9M|        return m_current_view[start];
 4119|  24.9M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   145M|{
 3807|   145M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   145M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   145M|    }
 3810|   145M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   145M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   145M|    }
 3813|   145M|    else {
 3814|       |        // utf-32
 3815|   145M|        static_assert(sizeof(U) == 4);
 3816|   145M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   145M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   145M|        return 1;
 3818|   145M|    }
 3819|   145M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   742k|    {
 1430|   742k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   742k|    {
  437|   742k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   744k|    {
 1177|   744k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.52k|    {
 1476|  2.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.52k|    {
  447|  2.52k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  10.2M|    {
 4274|  10.2M|        return !(lhs == rhs);
 4275|  10.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  10.2M|    {
 4269|  10.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 10.2M, False: 0]
  |  Branch (4269:46): [True: 301k, False: 9.93M]
  ------------------
 4270|  10.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  35.6M|    {
 4225|  35.6M|        ++m_position;
 4226|  35.6M|        (void)read_at_position();
 4227|  35.6M|        return *this;
 4228|  35.6M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   145M|{
 4013|   145M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   145M|        return decode_utf8_code_point_exhaustive(input);
 4015|   145M|    }
 4016|   145M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   145M|        return decode_utf16_code_point_exhaustive(input);
 4018|   145M|    }
 4019|   145M|    else {
 4020|   145M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   145M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   145M|        auto cp = static_cast<char32_t>(input.front());
 4022|   145M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   145M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.11M, False: 144M]
  |  |  ------------------
  ------------------
 4023|  1.11M|            return invalid_code_point;
 4024|  1.11M|        }
 4025|   144M|        return cp;
 4026|   145M|    }
 4027|   145M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.01k|    {
 1476|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.01k|    {
  447|  1.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   595k|    {
 1177|   595k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   594k|    {
 1430|   594k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   594k|    {
  437|   594k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   595k|    {
 1598|   595k|        return has_value();
 1599|   595k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.19M|    {
  485|  1.19M|        return m_has_value;
  486|  1.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.01k|    {
 1604|  1.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.01k|        return this->get_unexpected().error();
 1606|  1.01k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.01k|    {
  468|  1.01k|        return m_unexpected;
  469|  1.01k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   594k|    {
 1663|   594k|        return std::move(value());
 1664|   594k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   594k|    {
 1627|   594k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   594k|        return this->get_value();
 1629|   594k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   594k|    {
  451|   594k|        return m_value;
  452|   594k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  81.1M|    {
 3334|  81.1M|        return m_sentinel;
 3335|  81.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   750k|    {
 3330|   750k|        return m_iterator;
 3331|   750k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   750k|    {
 3334|   750k|        return m_sentinel;
 3335|   750k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.80M|    {
 1598|  1.80M|        return has_value();
 1599|  1.80M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.60M|    {
  485|  3.60M|        return m_has_value;
  486|  3.60M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  31.5k|    {
 1604|  31.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  31.5k|        return this->get_unexpected().error();
 1606|  31.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  31.5k|    {
  468|  31.5k|        return m_unexpected;
  469|  31.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.47M|    {
 1663|  1.47M|        return std::move(value());
 1664|  1.47M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.77M|    {
 1627|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.77M|        return this->get_value();
 1629|  1.77M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.77M|    {
  451|  1.77M|        return m_value;
  452|  1.77M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  68.5M|{
 3699|  68.5M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  68.5M|                                          decltype(first), decltype(last)> &&
 3701|  68.5M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  68.5M|        return {first, last};
 3703|  68.5M|    }
 3704|  68.5M|    else {
 3705|  68.5M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  68.5M|                                       to_address(first), to_address(last)))};
 3707|  68.5M|    }
 3708|  68.5M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   205M|{
  326|   205M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   205M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   205M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   207M|{
  304|   207M|    return p;
  305|   207M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.48M|{
  326|  1.48M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.48M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   742k|    {
 3316|   742k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  26.0M|    {
 4291|  26.0M|        return !x.is_at_end();
 4292|  26.0M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  5.05k|    {
 1476|  5.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  5.05k|    {
  447|  5.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48M|    {
 1177|  1.48M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.48M|    {
 1430|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48M|    {
  437|  1.48M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.97M|    {
  485|  2.97M|        return m_has_value;
  486|  2.97M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.48M|    {
 1627|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48M|        return this->get_value();
 1629|  1.48M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.48M|    {
  451|  1.48M|        return m_value;
  452|  1.48M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.02k|    {
 1476|  2.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.02k|    {
  447|  2.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.19M|    {
 1177|  1.19M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.18M|    {
 1430|  1.18M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.18M|    {
  437|  1.18M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.48M|    {
 1837|  1.48M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.48M|                                            std::forward<F>(f));
 1839|  1.48M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.48M|{
 1323|  1.48M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.48M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.48M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.48M|            return result(*std::forward<Exp>(exp));
 1327|  1.48M|        }
 1328|       |
 1329|  1.48M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.48M|        return result(unexpect, monostate{});
 1331|  1.48M|    }
 1332|  1.48M|    else {
 1333|  1.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.48M, False: 5.05k]
  |  |  ------------------
  ------------------
 1335|  1.48M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48M|                   : result(unexpect,
 1337|  5.05k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.05k|                                           std::forward<Exp>(exp).error()));
 1339|  1.48M|    }
 1340|  1.48M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.48M|    {
 1663|  1.48M|        return std::move(value());
 1664|  1.48M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.05k|    {
 1614|  5.05k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.05k|        return std::move(this->get_unexpected().error());
 1616|  5.05k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.05k|    {
  468|  5.05k|        return m_unexpected;
  469|  5.05k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  5.05k|    {
 1486|  5.05k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.19M|    {
 1598|  1.19M|        return has_value();
 1599|  1.19M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.38M|    {
  485|  2.38M|        return m_has_value;
  486|  2.38M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.02k|    {
 1604|  2.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.02k|        return this->get_unexpected().error();
 1606|  2.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.02k|    {
  468|  2.02k|        return m_unexpected;
  469|  2.02k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.18M|    {
 1663|  1.18M|        return std::move(value());
 1664|  1.18M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.18M|    {
 1627|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.18M|        return this->get_value();
 1629|  1.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.18M|    {
  451|  1.18M|        return m_value;
  452|  1.18M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.48M|    {
 2855|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.48M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.48M|    {
 2836|  1.48M|        return t.data();
 2837|  1.48M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   294k|    {
 1653|   294k|        return value();
 1654|   294k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   588k|    {
 1653|   588k|        return value();
 1654|   588k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|     90|    {
 1430|     90|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|     90|    {
  437|     90|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    180|    {
 1430|    180|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    180|    {
  437|    180|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   369k|    {
 5466|   369k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   369k|        return static_cast<std::size_t>(m_desc &
 5471|   369k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   369k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   738k|    {
 5491|   738k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   738k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   369k|    {
 5434|   369k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   369k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   369k|        const auto t = type(id);
 5446|   369k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   369k|        basic_scan_arg<Context> arg;
 5451|   369k|        arg.m_type = t;
 5452|   369k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 369k, False: 0]
  ------------------
 5453|   369k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   369k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   369k|        return arg;
 5459|   369k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   369k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   369k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   369k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   369k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   369k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   369k|    {
 5495|   369k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   369k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   641k|    {
 5247|   641k|        return m_type != detail::arg_type::none_type;
 5248|   641k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   165k|{
 8417|   165k|#define SCN_VISIT(Type)                                         \
 8418|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   165k|    }                                                           \
 8421|   165k|    else {                                                      \
 8422|   165k|        return vis(monostate_val);                              \
 8423|   165k|    }
 8424|       |
 8425|   165k|    monostate monostate_val{};
 8426|       |
 8427|   165k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 165k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 165k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 165k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 165k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 165k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 165k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 165k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 165k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 165k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 165k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 165k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 165k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 165k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 165k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 165k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 165k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 165k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 165k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  82.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 82.6k, False: 82.6k]
  ------------------
 8465|  82.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  82.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  82.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  82.6k|    }                                                           \
  |  | 8421|  82.6k|    else {                                                      \
  |  | 8422|  82.6k|        return vis(monostate_val);                              \
  |  | 8423|  82.6k|    }
  ------------------
 8466|  82.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 82.6k, False: 82.6k]
  ------------------
 8467|  82.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  82.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  82.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  82.6k|    }                                                           \
  |  | 8421|  82.6k|    else {                                                      \
  |  | 8422|  82.6k|        return vis(monostate_val);                              \
  |  | 8423|  82.6k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 165k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 165k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 165k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 165k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 165k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 165k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 165k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   165k|            SCN_CLANG_POP
 8495|   165k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   197k|    {
 5545|   197k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  70.0k|    {
 8138|  70.0k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   197k|    {
 8056|   197k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|   161k|{
 4344|   161k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 161k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   161k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   161k|                            ranges::default_sentinel};
 4350|   161k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|   161k|    {
 4177|   161k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   161k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   161k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  91.8k|{
 8417|  91.8k|#define SCN_VISIT(Type)                                         \
 8418|  91.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  91.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  91.8k|    }                                                           \
 8421|  91.8k|    else {                                                      \
 8422|  91.8k|        return vis(monostate_val);                              \
 8423|  91.8k|    }
 8424|       |
 8425|  91.8k|    monostate monostate_val{};
 8426|       |
 8427|  91.8k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 91.8k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 91.8k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 91.8k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 91.8k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 91.8k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 91.8k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 91.8k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 91.8k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 91.8k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 91.8k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 91.8k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 91.8k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 91.8k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 91.8k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 91.8k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 91.8k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 91.8k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 91.8k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 91.8k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  91.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 91.8k, False: 0]
  ------------------
 8467|  91.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  91.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  91.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  91.8k|    }                                                           \
  |  | 8421|  91.8k|    else {                                                      \
  |  | 8422|  91.8k|        return vis(monostate_val);                              \
  |  | 8423|  91.8k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 91.8k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 91.8k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 91.8k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 91.8k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 91.8k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 91.8k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 91.8k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  91.8k|            SCN_CLANG_POP
 8495|  91.8k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   127k|{
 7044|   127k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   127k|    handler.check_args_exhausted();
 7046|   127k|    return handler.get_error();
 7047|   127k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   127k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   127k|    auto begin = format.data();
 7013|   127k|    auto it = begin;
 7014|   127k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   235k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 127k, False: 107k]
  ------------------
 7017|   127k|        const auto ch = *it++;
 7018|   127k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 127k, False: 0]
  ------------------
 7019|   127k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   127k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   127k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 20.0k, False: 107k]
  ------------------
 7023|  20.0k|                return;
 7024|  20.0k|            }
 7025|   127k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   127k|    }
 7036|       |
 7037|   107k|    handler.on_literal_text(begin, end);
 7038|   107k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   127k|{
 6942|   127k|    struct id_adapter {
 6943|   127k|        constexpr void operator()()
 6944|   127k|        {
 6945|   127k|            arg_id = handler.on_arg_id();
 6946|   127k|        }
 6947|   127k|        constexpr void operator()(std::size_t id)
 6948|   127k|        {
 6949|   127k|            arg_id = handler.on_arg_id(id);
 6950|   127k|        }
 6951|       |
 6952|   127k|        constexpr void on_error(const char* msg)
 6953|   127k|        {
 6954|   127k|            SCN_UNLIKELY_ATTR
 6955|   127k|            handler.on_error(msg);
 6956|   127k|        }
 6957|       |
 6958|   127k|        Handler& handler;
 6959|   127k|        std::size_t arg_id;
 6960|   127k|    };
 6961|       |
 6962|   127k|    ++begin;
 6963|   127k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   127k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 127k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   127k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 127k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   127k|    else {
 6975|   127k|        auto adapter = id_adapter{handler, 0};
 6976|   127k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   127k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   127k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 127k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   127k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 127k, False: 0]
  ------------------
 6987|   127k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   127k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   127k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 119k]
  |  |  |  Branch (859:45): [True: 0, False: 127k]
  |  |  |  Branch (859:45): [True: 8.00k, False: 119k]
  |  |  ------------------
  ------------------
 6993|  8.00k|                handler.on_error("Unknown format specifier");
 6994|  8.00k|                return begin;
 6995|  8.00k|            }
 6996|   127k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   127k|    }
 7003|   119k|    return begin + 1;
 7004|   127k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   197k|    {
 8039|   197k|        return m_args.get(id);
 8040|   197k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   185k|    {
 8049|   185k|        return m_locale;
 8050|   185k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   197k|    {
 5566|   197k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 197k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   197k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   197k|        do_check_arg_id(id);
 5574|   197k|        return id;
 5575|   197k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   197k|{
 6054|   197k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   197k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   197k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   127k|{
 6443|   127k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   127k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 127k, False: 0]
  |  Branch (6444:26): [True: 0, False: 127k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   127k|    handler();
 6449|   127k|    return begin;
 6450|   127k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  12.0k|{
 6392|  12.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  12.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  12.0k|    unsigned long long value = 0;
 6396|  24.0k|    do {
 6397|  24.0k|        value *= 10;
 6398|  24.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  24.0k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 24.0k]
  ------------------
 6400|  24.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  24.0k|        ++begin;
 6404|  24.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 24.0k, False: 0]
  |  Branch (6404:30): [True: 24.0k, False: 0]
  |  Branch (6404:47): [True: 12.0k, False: 12.0k]
  ------------------
 6405|  12.0k|    return static_cast<int>(value);
 6406|  12.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   127k|        {
 6945|   127k|            arg_id = handler.on_arg_id();
 6946|   127k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   395k|    {
 5252|   395k|        return m_type;
 5253|   395k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   185k|    {
 5561|   185k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   185k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   383k|    {
 5550|   383k|        return m_format.data();
 5551|   383k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   127k|    {
 7122|   127k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   127k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   127k|{
 6858|   127k|    auto do_presentation = [&]() -> const CharT* {
 6859|   127k|        if (*begin == CharT{'['}) {
 6860|   127k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   127k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   127k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   127k|                return begin;
 6866|   127k|            }
 6867|   127k|            handler.on_character_set_string(set);
 6868|   127k|            return begin;
 6869|   127k|        }
 6870|   127k|        if (*begin == CharT{'/'}) {
 6871|   127k|            return parse_presentation_regex(begin, end, handler);
 6872|   127k|        }
 6873|   127k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   127k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   127k|            handler.on_error("Invalid type specifier in format string");
 6876|   127k|            return begin;
 6877|   127k|        }
 6878|   127k|        handler.on_type(type);
 6879|   127k|        return begin;
 6880|   127k|    };
 6881|       |
 6882|   127k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 127k, False: 0]
  |  Branch (6882:28): [True: 114k, False: 13.7k]
  ------------------
 6883|   127k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 114k, False: 0]
  |  Branch (6883:36): [True: 110k, False: 4.00k]
  ------------------
 6884|   110k|        return do_presentation();
 6885|   110k|    }
 6886|       |
 6887|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  17.7k|    begin = parse_align(begin, end, handler);
 6893|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  17.7k|    begin = parse_width(begin, end, handler);
 6899|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  17.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 17.7k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  17.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 4.00k, False: 13.7k]
  ------------------
 6918|  4.00k|        handler.on_localized();
 6919|  4.00k|        ++begin;
 6920|  4.00k|    }
 6921|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  17.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 17.7k, False: 0]
  |  Branch (6926:25): [True: 13.7k, False: 4.00k]
  ------------------
 6927|  13.7k|        do_presentation();
 6928|  13.7k|    }
 6929|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  17.7k|    return begin;
 6935|  17.7k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   177k|{
 6507|   177k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 171k, False: 6.00k]
  |  Branch (6507:33): [True: 171k, False: 0]
  ------------------
 6508|   177k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 6.00k, False: 0]
  |  Branch (6508:33): [True: 6.00k, False: 0]
  ------------------
 6509|   177k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   123k|    auto do_presentation = [&]() -> const CharT* {
 6859|   123k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 5.76k, False: 118k]
  ------------------
 6860|  5.76k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  5.76k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  5.76k|            handler.on_character_set_string(set);
 6868|  5.76k|            return begin;
 6869|  5.76k|        }
 6870|   118k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 118k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   118k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   118k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 114k]
  |  |  ------------------
  ------------------
 6875|  4.00k|            handler.on_error("Invalid type specifier in format string");
 6876|  4.00k|            return begin;
 6877|  4.00k|        }
 6878|   114k|        handler.on_type(type);
 6879|   114k|        return begin;
 6880|   118k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  5.76k|{
 6697|  5.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.76k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.76k|    auto start = begin;
 6701|  5.76k|    ++begin;
 6702|       |
 6703|  5.76k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  5.76k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 5.76k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  5.76k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 5.76k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  17.3k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 17.3k, False: 0]
  ------------------
 6728|  17.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  17.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.76k, False: 11.5k]
  ------------------
 6733|  5.76k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.76k|        }
 6735|       |
 6736|  11.5k|        parse_presentation_set_literal(begin, end, handler);
 6737|  11.5k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  5.76k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  11.5k|{
 6661|  11.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  11.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  11.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  11.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 11.5k, False: 0]
  |  Branch (6668:25): [True: 11.5k, False: 0]
  |  Branch (6668:49): [True: 11.5k, False: 0]
  ------------------
 6669|  11.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 11.5k, False: 0]
  ------------------
 6670|  11.5k|        ++begin;
 6671|       |
 6672|  11.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  11.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  11.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  11.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  11.5k|        return;
 6686|  11.5k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  23.0k|{
 6637|  23.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  23.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  23.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.0k]
  |  |  |  Branch (859:45): [True: 0, False: 23.0k]
  |  |  |  Branch (859:45): [True: 0, False: 23.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  23.0k|    const auto cp =
 6646|  23.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  23.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  23.0k|    begin += len;
 6653|  23.0k|    return cp;
 6654|  23.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  8.65k|    {
 6346|  8.65k|        m_specs.charset_string_data = fmt.data();
 6347|  8.65k|        m_specs.charset_string_size = fmt.size();
 6348|  8.65k|        on_type(presentation_type::string_set);
 6349|  8.65k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   183k|{
 6455|   183k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 183k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 183k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 183k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 183k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 183k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 183k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 183k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 183k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 183k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 183k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 183k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 183k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 183k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 183k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 183k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 183k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 183k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 183k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   171k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 171k, False: 12.0k]
  ------------------
 6486|   171k|            return presentation_type::string;
 6487|  6.00k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 6.00k, False: 177k]
  ------------------
 6488|  6.00k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 183k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 183k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 183k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 183k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  6.00k|        default:
  ------------------
  |  Branch (6499:9): [True: 6.00k, False: 177k]
  ------------------
 6500|  6.00k|            return presentation_type::none;
 6501|   183k|    }
 6502|   183k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  17.7k|{
 6532|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  17.7k|    auto check_align = [](wchar_t ch) {
 6535|  17.7k|        switch (ch) {
 6536|  17.7k|            case L'<':
 6537|  17.7k|                return align_type::left;
 6538|  17.7k|            case L'>':
 6539|  17.7k|                return align_type::right;
 6540|  17.7k|            case L'^':
 6541|  17.7k|                return align_type::center;
 6542|  17.7k|            default:
 6543|  17.7k|                return align_type::none;
 6544|  17.7k|        }
 6545|  17.7k|    };
 6546|       |
 6547|  17.7k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  17.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  35.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  Branch (859:45): [True: 0, False: 17.7k]
  |  |  |  Branch (859:45): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6549|  17.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  17.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  17.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  17.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  17.7k|    const auto begin_before_fill = begin;
 6559|  17.7k|    begin += potential_fill_len;
 6560|       |
 6561|  17.7k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 17.7k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  17.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  17.7k|    const auto begin_after_fill = begin;
 6567|  17.7k|    ++begin;
 6568|       |
 6569|  17.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 17.7k, False: 0]
  ------------------
 6570|  17.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  17.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 5.76k, False: 12.0k]
  ------------------
 6575|  5.76k|            return begin_before_fill;
 6576|  5.76k|        }
 6577|  17.7k|    }
 6578|       |
 6579|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 12.0k, False: 0]
  ------------------
 6580|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 12.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  12.0k|        return begin_before_fill;
 6585|  12.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  12.0k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  26.6k|{
 6514|  26.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  26.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  26.6k|        return 1;
 6517|  26.6k|    }
 6518|  26.6k|    else {
 6519|  26.6k|        const auto lengths =
 6520|  26.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  26.6k|            "\3\4";
 6522|  26.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  26.6k|        return len;
 6524|  26.6k|    }
 6525|  26.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  35.5k|    auto check_align = [](wchar_t ch) {
 6535|  35.5k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 35.5k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 35.5k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 35.5k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  35.5k|            default:
  ------------------
  |  Branch (6542:13): [True: 35.5k, False: 0]
  ------------------
 6543|  35.5k|                return align_type::none;
 6544|  35.5k|        }
 6545|  35.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  17.7k|{
 6597|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  17.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 17.7k, False: 0]
  |  Branch (6599:33): [True: 8.00k, False: 9.77k]
  ------------------
 6600|  8.00k|        int width = parse_simple_int(begin, end);
 6601|  8.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.00k, False: 0]
  |  |  ------------------
  ------------------
 6602|  8.00k|            handler.on_width(width);
 6603|  8.00k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  8.00k|    }
 6609|  17.7k|    return begin;
 6610|  17.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  4.00k|    {
 7127|  4.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  4.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 4.00k, False: 0]
  ------------------
 7129|  4.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 4.00k, False: 0]
  ------------------
 7130|  4.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 4.00k, False: 0]
  ------------------
 7131|  4.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 4.00k, False: 0]
  ------------------
 7132|  4.00k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  4.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  4.00k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   119k|{
 8417|   119k|#define SCN_VISIT(Type)                                         \
 8418|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   119k|    }                                                           \
 8421|   119k|    else {                                                      \
 8422|   119k|        return vis(monostate_val);                              \
 8423|   119k|    }
 8424|       |
 8425|   119k|    monostate monostate_val{};
 8426|       |
 8427|   119k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 119k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 119k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 119k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 119k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 119k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 119k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 119k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 119k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 119k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 119k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 119k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 119k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 119k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 119k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 119k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 119k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 119k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 119k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  59.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 59.9k, False: 59.9k]
  ------------------
 8465|  59.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  59.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  59.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  59.9k|    }                                                           \
  |  | 8421|  59.9k|    else {                                                      \
  |  | 8422|  59.9k|        return vis(monostate_val);                              \
  |  | 8423|  59.9k|    }
  ------------------
 8466|  59.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 59.9k, False: 59.9k]
  ------------------
 8467|  59.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  59.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  59.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  59.9k|    }                                                           \
  |  | 8421|  59.9k|    else {                                                      \
  |  | 8422|  59.9k|        return vis(monostate_val);                              \
  |  | 8423|  59.9k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 119k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 119k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 119k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 119k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 119k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 119k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 119k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   119k|            SCN_CLANG_POP
 8495|   119k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  70.0k|{
 7044|  70.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  70.0k|    handler.check_args_exhausted();
 7046|  70.0k|    return handler.get_error();
 7047|  70.0k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  70.0k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  70.0k|    auto begin = format.data();
 7013|  70.0k|    auto it = begin;
 7014|  70.0k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   130k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 70.0k, False: 60.0k]
  ------------------
 7017|  70.0k|        const auto ch = *it++;
 7018|  70.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 70.0k, False: 0]
  ------------------
 7019|  70.0k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  70.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  70.0k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 10.0k, False: 60.0k]
  ------------------
 7023|  10.0k|                return;
 7024|  10.0k|            }
 7025|  70.0k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  70.0k|    }
 7036|       |
 7037|  60.0k|    handler.on_literal_text(begin, end);
 7038|  60.0k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  60.0k|    {
 8175|  60.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  60.0k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  70.0k|{
 6942|  70.0k|    struct id_adapter {
 6943|  70.0k|        constexpr void operator()()
 6944|  70.0k|        {
 6945|  70.0k|            arg_id = handler.on_arg_id();
 6946|  70.0k|        }
 6947|  70.0k|        constexpr void operator()(std::size_t id)
 6948|  70.0k|        {
 6949|  70.0k|            arg_id = handler.on_arg_id(id);
 6950|  70.0k|        }
 6951|       |
 6952|  70.0k|        constexpr void on_error(const char* msg)
 6953|  70.0k|        {
 6954|  70.0k|            SCN_UNLIKELY_ATTR
 6955|  70.0k|            handler.on_error(msg);
 6956|  70.0k|        }
 6957|       |
 6958|  70.0k|        Handler& handler;
 6959|  70.0k|        std::size_t arg_id;
 6960|  70.0k|    };
 6961|       |
 6962|  70.0k|    ++begin;
 6963|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  70.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 70.0k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  70.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 70.0k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  70.0k|    else {
 6975|  70.0k|        auto adapter = id_adapter{handler, 0};
 6976|  70.0k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  70.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  70.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 70.0k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  70.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 70.0k, False: 0]
  ------------------
 6987|  70.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  70.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  70.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 66.0k]
  |  |  |  Branch (859:45): [True: 0, False: 70.0k]
  |  |  |  Branch (859:45): [True: 4.00k, False: 66.0k]
  |  |  ------------------
  ------------------
 6993|  4.00k|                handler.on_error("Unknown format specifier");
 6994|  4.00k|                return begin;
 6995|  4.00k|            }
 6996|  70.0k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  70.0k|    }
 7003|  66.0k|    return begin + 1;
 7004|  70.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  70.0k|{
 6443|  70.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  70.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 70.0k, False: 0]
  |  Branch (6444:26): [True: 0, False: 70.0k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  70.0k|    handler();
 6449|  70.0k|    return begin;
 6450|  70.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  70.0k|        {
 6945|  70.0k|            arg_id = handler.on_arg_id();
 6946|  70.0k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  70.0k|    {
 7122|  70.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  70.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  70.0k|{
 6858|  70.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  70.0k|        if (*begin == CharT{'['}) {
 6860|  70.0k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  70.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  70.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  70.0k|                return begin;
 6866|  70.0k|            }
 6867|  70.0k|            handler.on_character_set_string(set);
 6868|  70.0k|            return begin;
 6869|  70.0k|        }
 6870|  70.0k|        if (*begin == CharT{'/'}) {
 6871|  70.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  70.0k|        }
 6873|  70.0k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  70.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  70.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  70.0k|            return begin;
 6877|  70.0k|        }
 6878|  70.0k|        handler.on_type(type);
 6879|  70.0k|        return begin;
 6880|  70.0k|    };
 6881|       |
 6882|  70.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 70.0k, False: 0]
  |  Branch (6882:28): [True: 63.1k, False: 6.88k]
  ------------------
 6883|  70.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 63.1k, False: 0]
  |  Branch (6883:36): [True: 61.1k, False: 2.00k]
  ------------------
 6884|  61.1k|        return do_presentation();
 6885|  61.1k|    }
 6886|       |
 6887|  8.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  8.89k|    begin = parse_align(begin, end, handler);
 6893|  8.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  8.89k|    begin = parse_width(begin, end, handler);
 6899|  8.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  8.89k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 8.89k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  8.89k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 2.00k, False: 6.88k]
  ------------------
 6918|  2.00k|        handler.on_localized();
 6919|  2.00k|        ++begin;
 6920|  2.00k|    }
 6921|  8.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  8.89k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 8.89k, False: 0]
  |  Branch (6926:25): [True: 6.88k, False: 2.00k]
  ------------------
 6927|  6.88k|        do_presentation();
 6928|  6.88k|    }
 6929|  8.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  8.89k|    return begin;
 6935|  8.89k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  68.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  68.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.88k, False: 65.1k]
  ------------------
 6860|  2.88k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.88k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  2.88k|            handler.on_character_set_string(set);
 6868|  2.88k|            return begin;
 6869|  2.88k|        }
 6870|  65.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 65.1k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  65.1k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  65.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 63.1k]
  |  |  ------------------
  ------------------
 6875|  2.00k|            handler.on_error("Invalid type specifier in format string");
 6876|  2.00k|            return begin;
 6877|  2.00k|        }
 6878|  63.1k|        handler.on_type(type);
 6879|  63.1k|        return begin;
 6880|  65.1k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  2.88k|{
 6697|  2.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.88k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.88k|    auto start = begin;
 6701|  2.88k|    ++begin;
 6702|       |
 6703|  2.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.88k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 2.88k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  2.88k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.88k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  8.65k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 8.65k, False: 0]
  ------------------
 6728|  8.65k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  8.65k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.88k, False: 5.76k]
  ------------------
 6733|  2.88k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.88k|        }
 6735|       |
 6736|  5.76k|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.76k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.88k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  5.76k|{
 6661|  5.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.76k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.76k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  5.76k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.76k, False: 0]
  |  Branch (6668:25): [True: 5.76k, False: 0]
  |  Branch (6668:49): [True: 5.76k, False: 0]
  ------------------
 6669|  5.76k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 5.76k, False: 0]
  ------------------
 6670|  5.76k|        ++begin;
 6671|       |
 6672|  5.76k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  5.76k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  5.76k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  5.76k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  5.76k|        return;
 6686|  5.76k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  11.5k|{
 6637|  11.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  11.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  11.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  11.5k|    const auto cp =
 6646|  11.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  11.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  11.5k|    begin += len;
 6653|  11.5k|    return cp;
 6654|  11.5k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  8.89k|{
 6532|  8.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  8.89k|    auto check_align = [](wchar_t ch) {
 6535|  8.89k|        switch (ch) {
 6536|  8.89k|            case L'<':
 6537|  8.89k|                return align_type::left;
 6538|  8.89k|            case L'>':
 6539|  8.89k|                return align_type::right;
 6540|  8.89k|            case L'^':
 6541|  8.89k|                return align_type::center;
 6542|  8.89k|            default:
 6543|  8.89k|                return align_type::none;
 6544|  8.89k|        }
 6545|  8.89k|    };
 6546|       |
 6547|  8.89k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  8.89k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  |  Branch (859:45): [True: 0, False: 8.89k]
  |  |  |  Branch (859:45): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6549|  8.89k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  8.89k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  8.89k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  8.89k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  8.89k|    const auto begin_before_fill = begin;
 6559|  8.89k|    begin += potential_fill_len;
 6560|       |
 6561|  8.89k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 8.89k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  8.89k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  8.89k|    const auto begin_after_fill = begin;
 6567|  8.89k|    ++begin;
 6568|       |
 6569|  8.89k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 8.89k, False: 0]
  ------------------
 6570|  8.89k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  8.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.89k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  8.89k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 2.88k, False: 6.00k]
  ------------------
 6575|  2.88k|            return begin_before_fill;
 6576|  2.88k|        }
 6577|  8.89k|    }
 6578|       |
 6579|  6.00k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 6.00k, False: 0]
  ------------------
 6580|  6.00k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 6.00k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  6.00k|        return begin_before_fill;
 6585|  6.00k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  6.00k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  17.7k|    auto check_align = [](wchar_t ch) {
 6535|  17.7k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 17.7k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 17.7k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 17.7k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  17.7k|            default:
  ------------------
  |  Branch (6542:13): [True: 17.7k, False: 0]
  ------------------
 6543|  17.7k|                return align_type::none;
 6544|  17.7k|        }
 6545|  17.7k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  8.89k|{
 6597|  8.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  8.89k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 8.89k, False: 0]
  |  Branch (6599:33): [True: 4.00k, False: 4.88k]
  ------------------
 6600|  4.00k|        int width = parse_simple_int(begin, end);
 6601|  4.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.00k, False: 0]
  |  |  ------------------
  ------------------
 6602|  4.00k|            handler.on_width(width);
 6603|  4.00k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  4.00k|    }
 6609|  8.89k|    return begin;
 6610|  8.89k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  2.00k|    {
 7127|  2.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  2.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 2.00k, False: 0]
  ------------------
 7129|  2.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 2.00k, False: 0]
  ------------------
 7130|  2.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 2.00k, False: 0]
  ------------------
 7131|  2.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 2.00k, False: 0]
  ------------------
 7132|  2.00k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  2.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  2.00k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  66.0k|{
 8417|  66.0k|#define SCN_VISIT(Type)                                         \
 8418|  66.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  66.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  66.0k|    }                                                           \
 8421|  66.0k|    else {                                                      \
 8422|  66.0k|        return vis(monostate_val);                              \
 8423|  66.0k|    }
 8424|       |
 8425|  66.0k|    monostate monostate_val{};
 8426|       |
 8427|  66.0k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 66.0k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 66.0k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 66.0k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 66.0k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 66.0k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 66.0k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 66.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 66.0k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 66.0k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 66.0k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 66.0k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 66.0k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 66.0k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 66.0k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 66.0k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 66.0k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 66.0k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 66.0k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 66.0k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  66.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 66.0k, False: 0]
  ------------------
 8467|  66.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  66.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  66.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  66.0k|    }                                                           \
  |  | 8421|  66.0k|    else {                                                      \
  |  | 8422|  66.0k|        return vis(monostate_val);                              \
  |  | 8423|  66.0k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 66.0k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 66.0k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 66.0k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 66.0k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 66.0k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 66.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 66.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  66.0k|            SCN_CLANG_POP
 8495|  66.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  13.0k|    {
 4076|  13.0k|        sync(0);
 4077|  13.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.83M|    {
 5466|  1.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.83M|        return static_cast<std::size_t>(m_desc &
 5471|  1.83M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  3.67M|    {
 5491|  3.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  3.67M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.83M|    {
 5434|  1.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.83M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.83M|        const auto t = type(id);
 5446|  1.83M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.83M|        basic_scan_arg<Context> arg;
 5451|  1.83M|        arg.m_type = t;
 5452|  1.83M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.83M, False: 0]
  ------------------
 5453|  1.83M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.83M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.83M|        return arg;
 5459|  1.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.83M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.83M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.83M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.83M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.83M|    {
 5495|  1.83M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.83M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  3.20M|    {
 5247|  3.20M|        return m_type != detail::arg_type::none_type;
 5248|  3.20M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   893k|{
 8417|   893k|#define SCN_VISIT(Type)                                         \
 8418|   893k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   893k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   893k|    }                                                           \
 8421|   893k|    else {                                                      \
 8422|   893k|        return vis(monostate_val);                              \
 8423|   893k|    }
 8424|       |
 8425|   893k|    monostate monostate_val{};
 8426|       |
 8427|   893k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 893k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 893k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 893k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 893k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 893k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 893k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 893k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 893k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 893k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 893k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 893k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 893k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 893k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 893k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 893k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 893k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 893k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 893k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 893k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 893k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   446k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 446k, False: 446k]
  ------------------
 8469|   446k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   446k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   446k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   446k|    }                                                           \
  |  | 8421|   446k|    else {                                                      \
  |  | 8422|   446k|        return vis(monostate_val);                              \
  |  | 8423|   446k|    }
  ------------------
 8470|   446k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 446k, False: 446k]
  ------------------
 8471|   446k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   446k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   446k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   446k|    }                                                           \
  |  | 8421|   446k|    else {                                                      \
  |  | 8422|   446k|        return vis(monostate_val);                              \
  |  | 8423|   446k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 893k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 893k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 893k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 893k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 893k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   893k|            SCN_CLANG_POP
 8495|   893k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   942k|    {
 5545|   942k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   314k|    {
 8138|   314k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   942k|    {
 8056|   942k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   628k|{
 7044|   628k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   628k|    handler.check_args_exhausted();
 7046|   628k|    return handler.get_error();
 7047|   628k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   628k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   628k|    auto begin = format.data();
 7013|   628k|    auto it = begin;
 7014|   628k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.21M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 628k, False: 588k]
  ------------------
 7017|   628k|        const auto ch = *it++;
 7018|   628k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 628k, False: 0]
  ------------------
 7019|   628k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   628k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   628k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 40.0k, False: 588k]
  ------------------
 7023|  40.0k|                return;
 7024|  40.0k|            }
 7025|   628k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   628k|    }
 7036|       |
 7037|   588k|    handler.on_literal_text(begin, end);
 7038|   588k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   628k|{
 6942|   628k|    struct id_adapter {
 6943|   628k|        constexpr void operator()()
 6944|   628k|        {
 6945|   628k|            arg_id = handler.on_arg_id();
 6946|   628k|        }
 6947|   628k|        constexpr void operator()(std::size_t id)
 6948|   628k|        {
 6949|   628k|            arg_id = handler.on_arg_id(id);
 6950|   628k|        }
 6951|       |
 6952|   628k|        constexpr void on_error(const char* msg)
 6953|   628k|        {
 6954|   628k|            SCN_UNLIKELY_ATTR
 6955|   628k|            handler.on_error(msg);
 6956|   628k|        }
 6957|       |
 6958|   628k|        Handler& handler;
 6959|   628k|        std::size_t arg_id;
 6960|   628k|    };
 6961|       |
 6962|   628k|    ++begin;
 6963|   628k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   628k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 628k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   628k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 628k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   628k|    else {
 6975|   628k|        auto adapter = id_adapter{handler, 0};
 6976|   628k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   628k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   628k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 628k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   628k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 628k, False: 0]
  ------------------
 6987|   628k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   628k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   628k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 612k]
  |  |  |  Branch (859:45): [True: 0, False: 628k]
  |  |  |  Branch (859:45): [True: 16.0k, False: 612k]
  |  |  ------------------
  ------------------
 6993|  16.0k|                handler.on_error("Unknown format specifier");
 6994|  16.0k|                return begin;
 6995|  16.0k|            }
 6996|   628k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   628k|    }
 7003|   612k|    return begin + 1;
 7004|   628k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   942k|    {
 8039|   942k|        return m_args.get(id);
 8040|   942k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   918k|    {
 8049|   918k|        return m_locale;
 8050|   918k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   942k|    {
 5566|   942k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   942k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 942k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   942k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   942k|        do_check_arg_id(id);
 5574|   942k|        return id;
 5575|   942k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   942k|{
 6054|   942k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   942k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   942k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   628k|{
 6443|   628k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   628k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 628k, False: 0]
  |  Branch (6444:26): [True: 0, False: 628k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   628k|    handler();
 6449|   628k|    return begin;
 6450|   628k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  24.0k|{
 6392|  24.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  24.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  24.0k|    unsigned long long value = 0;
 6396|  48.0k|    do {
 6397|  48.0k|        value *= 10;
 6398|  48.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  48.0k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 48.0k]
  ------------------
 6400|  48.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  48.0k|        ++begin;
 6404|  48.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 48.0k, False: 0]
  |  Branch (6404:30): [True: 48.0k, False: 0]
  |  Branch (6404:47): [True: 24.0k, False: 24.0k]
  ------------------
 6405|  24.0k|    return static_cast<int>(value);
 6406|  24.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   628k|        {
 6945|   628k|            arg_id = handler.on_arg_id();
 6946|   628k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.88M|    {
 5252|  1.88M|        return m_type;
 5253|  1.88M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   918k|    {
 5561|   918k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   918k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   761k|{
 4344|   761k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 761k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   761k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   761k|                            ranges::default_sentinel};
 4350|   761k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   761k|    {
 4177|   761k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   761k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   761k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.86M|    {
 5550|  1.86M|        return m_format.data();
 5551|  1.86M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   628k|    {
 7122|   628k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   628k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   628k|{
 6858|   628k|    auto do_presentation = [&]() -> const CharT* {
 6859|   628k|        if (*begin == CharT{'['}) {
 6860|   628k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   628k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   628k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   628k|                return begin;
 6866|   628k|            }
 6867|   628k|            handler.on_character_set_string(set);
 6868|   628k|            return begin;
 6869|   628k|        }
 6870|   628k|        if (*begin == CharT{'/'}) {
 6871|   628k|            return parse_presentation_regex(begin, end, handler);
 6872|   628k|        }
 6873|   628k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   628k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   628k|            handler.on_error("Invalid type specifier in format string");
 6876|   628k|            return begin;
 6877|   628k|        }
 6878|   628k|        handler.on_type(type);
 6879|   628k|        return begin;
 6880|   628k|    };
 6881|       |
 6882|   628k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 628k, False: 0]
  |  Branch (6882:28): [True: 603k, False: 24.2k]
  ------------------
 6883|   628k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 603k, False: 0]
  |  Branch (6883:36): [True: 595k, False: 8.00k]
  ------------------
 6884|   595k|        return do_presentation();
 6885|   595k|    }
 6886|       |
 6887|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  32.2k|    begin = parse_align(begin, end, handler);
 6893|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  32.2k|    begin = parse_width(begin, end, handler);
 6899|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  32.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 32.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  32.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 8.00k, False: 24.2k]
  ------------------
 6918|  8.00k|        handler.on_localized();
 6919|  8.00k|        ++begin;
 6920|  8.00k|    }
 6921|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  32.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 32.2k, False: 0]
  |  Branch (6926:25): [True: 24.2k, False: 8.00k]
  ------------------
 6927|  24.2k|        do_presentation();
 6928|  24.2k|    }
 6929|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  32.2k|    return begin;
 6935|  32.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   905k|{
 6507|   905k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 893k, False: 12.0k]
  |  Branch (6507:33): [True: 893k, False: 0]
  ------------------
 6508|   905k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 12.0k, False: 0]
  |  Branch (6508:33): [True: 12.0k, False: 0]
  ------------------
 6509|   905k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   620k|    auto do_presentation = [&]() -> const CharT* {
 6859|   620k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 8.18k, False: 611k]
  ------------------
 6860|  8.18k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  8.18k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  8.18k|            handler.on_character_set_string(set);
 6868|  8.18k|            return begin;
 6869|  8.18k|        }
 6870|   611k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 611k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   611k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   611k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 603k]
  |  |  ------------------
  ------------------
 6875|  8.00k|            handler.on_error("Invalid type specifier in format string");
 6876|  8.00k|            return begin;
 6877|  8.00k|        }
 6878|   603k|        handler.on_type(type);
 6879|   603k|        return begin;
 6880|   611k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  8.18k|{
 6697|  8.18k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  8.18k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  8.18k|    auto start = begin;
 6701|  8.18k|    ++begin;
 6702|       |
 6703|  8.18k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  8.18k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 8.18k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  8.18k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 8.18k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  24.5k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 24.5k, False: 0]
  ------------------
 6728|  24.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.5k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  24.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 8.18k, False: 16.3k]
  ------------------
 6733|  8.18k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  8.18k|        }
 6735|       |
 6736|  16.3k|        parse_presentation_set_literal(begin, end, handler);
 6737|  16.3k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  8.18k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  16.3k|{
 6661|  16.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  16.3k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  16.3k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  16.3k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 16.3k, False: 0]
  |  Branch (6668:25): [True: 16.3k, False: 0]
  |  Branch (6668:49): [True: 16.3k, False: 0]
  ------------------
 6669|  16.3k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 16.3k, False: 0]
  ------------------
 6670|  16.3k|        ++begin;
 6671|       |
 6672|  16.3k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  16.3k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  16.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  16.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  16.3k|        return;
 6686|  16.3k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  32.7k|{
 6637|  32.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  32.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  32.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.7k]
  |  |  |  Branch (859:45): [True: 0, False: 32.7k]
  |  |  |  Branch (859:45): [True: 0, False: 32.7k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  32.7k|    const auto cp =
 6646|  32.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  32.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.7k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  32.7k|    begin += len;
 6653|  32.7k|    return cp;
 6654|  32.7k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  12.2k|    {
 6346|  12.2k|        m_specs.charset_string_data = fmt.data();
 6347|  12.2k|        m_specs.charset_string_size = fmt.size();
 6348|  12.2k|        on_type(presentation_type::string_set);
 6349|  12.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   917k|{
 6455|   917k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 917k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 917k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 917k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 917k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 917k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 917k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 917k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 917k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 917k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 917k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 917k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 917k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 917k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 917k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 917k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 917k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 917k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 917k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   893k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 893k, False: 24.0k]
  ------------------
 6486|   893k|            return presentation_type::string;
 6487|  12.0k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 12.0k, False: 905k]
  ------------------
 6488|  12.0k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 917k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 917k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 917k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 917k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  12.0k|        default:
  ------------------
  |  Branch (6499:9): [True: 12.0k, False: 905k]
  ------------------
 6500|  12.0k|            return presentation_type::none;
 6501|   917k|    }
 6502|   917k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  32.2k|{
 6532|  32.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  32.2k|    auto check_align = [](wchar_t ch) {
 6535|  32.2k|        switch (ch) {
 6536|  32.2k|            case L'<':
 6537|  32.2k|                return align_type::left;
 6538|  32.2k|            case L'>':
 6539|  32.2k|                return align_type::right;
 6540|  32.2k|            case L'^':
 6541|  32.2k|                return align_type::center;
 6542|  32.2k|            default:
 6543|  32.2k|                return align_type::none;
 6544|  32.2k|        }
 6545|  32.2k|    };
 6546|       |
 6547|  32.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  32.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  |  Branch (859:45): [True: 0, False: 32.2k]
  |  |  |  Branch (859:45): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6549|  32.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  32.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  32.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  32.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  32.2k|    const auto begin_before_fill = begin;
 6559|  32.2k|    begin += potential_fill_len;
 6560|       |
 6561|  32.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 32.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  32.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  32.2k|    const auto begin_after_fill = begin;
 6567|  32.2k|    ++begin;
 6568|       |
 6569|  32.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 32.2k, False: 0]
  ------------------
 6570|  32.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  32.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 8.18k, False: 24.0k]
  ------------------
 6575|  8.18k|            return begin_before_fill;
 6576|  8.18k|        }
 6577|  32.2k|    }
 6578|       |
 6579|  24.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 24.0k, False: 0]
  ------------------
 6580|  24.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 24.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  24.0k|        return begin_before_fill;
 6585|  24.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  24.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  48.3k|{
 6514|  48.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  48.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  48.3k|        return 1;
 6517|  48.3k|    }
 6518|  48.3k|    else {
 6519|  48.3k|        const auto lengths =
 6520|  48.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  48.3k|            "\3\4";
 6522|  48.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  48.3k|        return len;
 6524|  48.3k|    }
 6525|  48.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  64.4k|    auto check_align = [](wchar_t ch) {
 6535|  64.4k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 64.4k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 64.4k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 64.4k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  64.4k|            default:
  ------------------
  |  Branch (6542:13): [True: 64.4k, False: 0]
  ------------------
 6543|  64.4k|                return align_type::none;
 6544|  64.4k|        }
 6545|  64.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  32.2k|{
 6597|  32.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  32.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 32.2k, False: 0]
  |  Branch (6599:33): [True: 16.0k, False: 16.1k]
  ------------------
 6600|  16.0k|        int width = parse_simple_int(begin, end);
 6601|  16.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  16.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 6602|  16.0k|            handler.on_width(width);
 6603|  16.0k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  16.0k|    }
 6609|  32.2k|    return begin;
 6610|  32.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  8.00k|    {
 7127|  8.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  8.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 8.00k, False: 0]
  ------------------
 7129|  8.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 8.00k, False: 0]
  ------------------
 7130|  8.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 8.00k, False: 0]
  ------------------
 7131|  8.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 8.00k, False: 0]
  ------------------
 7132|  8.00k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  8.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  8.00k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   612k|{
 8417|   612k|#define SCN_VISIT(Type)                                         \
 8418|   612k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   612k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   612k|    }                                                           \
 8421|   612k|    else {                                                      \
 8422|   612k|        return vis(monostate_val);                              \
 8423|   612k|    }
 8424|       |
 8425|   612k|    monostate monostate_val{};
 8426|       |
 8427|   612k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 612k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 612k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 612k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 612k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 612k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 612k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 612k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 612k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 612k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 612k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 612k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 612k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 612k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 612k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 612k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 612k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 612k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 612k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 612k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 612k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   306k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 306k, False: 306k]
  ------------------
 8469|   306k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   306k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   306k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   306k|    }                                                           \
  |  | 8421|   306k|    else {                                                      \
  |  | 8422|   306k|        return vis(monostate_val);                              \
  |  | 8423|   306k|    }
  ------------------
 8470|   306k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 306k, False: 306k]
  ------------------
 8471|   306k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   306k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   306k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   306k|    }                                                           \
  |  | 8421|   306k|    else {                                                      \
  |  | 8422|   306k|        return vis(monostate_val);                              \
  |  | 8423|   306k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 612k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 612k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 612k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 612k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 612k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   612k|            SCN_CLANG_POP
 8495|   612k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   446k|{
 8417|   446k|#define SCN_VISIT(Type)                                         \
 8418|   446k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   446k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   446k|    }                                                           \
 8421|   446k|    else {                                                      \
 8422|   446k|        return vis(monostate_val);                              \
 8423|   446k|    }
 8424|       |
 8425|   446k|    monostate monostate_val{};
 8426|       |
 8427|   446k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 446k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 446k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 446k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 446k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 446k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 446k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 446k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 446k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 446k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 446k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 446k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 446k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 446k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 446k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 446k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 446k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 446k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 446k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 446k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 446k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 446k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   446k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 446k, False: 0]
  ------------------
 8471|   446k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   446k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   446k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   446k|    }                                                           \
  |  | 8421|   446k|    else {                                                      \
  |  | 8422|   446k|        return vis(monostate_val);                              \
  |  | 8423|   446k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 446k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 446k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 446k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 446k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 446k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   446k|            SCN_CLANG_POP
 8495|   446k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   314k|{
 7044|   314k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   314k|    handler.check_args_exhausted();
 7046|   314k|    return handler.get_error();
 7047|   314k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   314k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   314k|    auto begin = format.data();
 7013|   314k|    auto it = begin;
 7014|   314k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   608k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 314k, False: 294k]
  ------------------
 7017|   314k|        const auto ch = *it++;
 7018|   314k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 314k, False: 0]
  ------------------
 7019|   314k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   314k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   314k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 20.0k, False: 294k]
  ------------------
 7023|  20.0k|                return;
 7024|  20.0k|            }
 7025|   314k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   314k|    }
 7036|       |
 7037|   294k|    handler.on_literal_text(begin, end);
 7038|   294k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   294k|    {
 8175|   294k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   294k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   314k|{
 6942|   314k|    struct id_adapter {
 6943|   314k|        constexpr void operator()()
 6944|   314k|        {
 6945|   314k|            arg_id = handler.on_arg_id();
 6946|   314k|        }
 6947|   314k|        constexpr void operator()(std::size_t id)
 6948|   314k|        {
 6949|   314k|            arg_id = handler.on_arg_id(id);
 6950|   314k|        }
 6951|       |
 6952|   314k|        constexpr void on_error(const char* msg)
 6953|   314k|        {
 6954|   314k|            SCN_UNLIKELY_ATTR
 6955|   314k|            handler.on_error(msg);
 6956|   314k|        }
 6957|       |
 6958|   314k|        Handler& handler;
 6959|   314k|        std::size_t arg_id;
 6960|   314k|    };
 6961|       |
 6962|   314k|    ++begin;
 6963|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   314k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 314k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   314k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 314k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   314k|    else {
 6975|   314k|        auto adapter = id_adapter{handler, 0};
 6976|   314k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   314k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   314k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 314k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   314k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 314k, False: 0]
  ------------------
 6987|   314k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   314k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   314k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 306k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 8.00k, False: 306k]
  |  |  ------------------
  ------------------
 6993|  8.00k|                handler.on_error("Unknown format specifier");
 6994|  8.00k|                return begin;
 6995|  8.00k|            }
 6996|   314k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   314k|    }
 7003|   306k|    return begin + 1;
 7004|   314k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   314k|{
 6443|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   314k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 314k, False: 0]
  |  Branch (6444:26): [True: 0, False: 314k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   314k|    handler();
 6449|   314k|    return begin;
 6450|   314k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   314k|        {
 6945|   314k|            arg_id = handler.on_arg_id();
 6946|   314k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   314k|    {
 7122|   314k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   314k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   314k|{
 6858|   314k|    auto do_presentation = [&]() -> const CharT* {
 6859|   314k|        if (*begin == CharT{'['}) {
 6860|   314k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   314k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   314k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   314k|                return begin;
 6866|   314k|            }
 6867|   314k|            handler.on_character_set_string(set);
 6868|   314k|            return begin;
 6869|   314k|        }
 6870|   314k|        if (*begin == CharT{'/'}) {
 6871|   314k|            return parse_presentation_regex(begin, end, handler);
 6872|   314k|        }
 6873|   314k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   314k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   314k|            handler.on_error("Invalid type specifier in format string");
 6876|   314k|            return begin;
 6877|   314k|        }
 6878|   314k|        handler.on_type(type);
 6879|   314k|        return begin;
 6880|   314k|    };
 6881|       |
 6882|   314k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 314k, False: 0]
  |  Branch (6882:28): [True: 301k, False: 12.1k]
  ------------------
 6883|   314k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 301k, False: 0]
  |  Branch (6883:36): [True: 297k, False: 4.00k]
  ------------------
 6884|   297k|        return do_presentation();
 6885|   297k|    }
 6886|       |
 6887|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  16.1k|    begin = parse_align(begin, end, handler);
 6893|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  16.1k|    begin = parse_width(begin, end, handler);
 6899|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  16.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 16.1k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  16.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 4.00k, False: 12.1k]
  ------------------
 6918|  4.00k|        handler.on_localized();
 6919|  4.00k|        ++begin;
 6920|  4.00k|    }
 6921|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  16.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 16.1k, False: 0]
  |  Branch (6926:25): [True: 12.1k, False: 4.00k]
  ------------------
 6927|  12.1k|        do_presentation();
 6928|  12.1k|    }
 6929|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  16.1k|    return begin;
 6935|  16.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   310k|    auto do_presentation = [&]() -> const CharT* {
 6859|   310k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.09k, False: 305k]
  ------------------
 6860|  4.09k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.09k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.09k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  4.09k|            handler.on_character_set_string(set);
 6868|  4.09k|            return begin;
 6869|  4.09k|        }
 6870|   305k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 305k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   305k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   305k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 301k]
  |  |  ------------------
  ------------------
 6875|  4.00k|            handler.on_error("Invalid type specifier in format string");
 6876|  4.00k|            return begin;
 6877|  4.00k|        }
 6878|   301k|        handler.on_type(type);
 6879|   301k|        return begin;
 6880|   305k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  4.09k|{
 6697|  4.09k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.09k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.09k|    auto start = begin;
 6701|  4.09k|    ++begin;
 6702|       |
 6703|  4.09k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.09k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.09k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 4.09k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  4.09k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.09k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.2k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.2k, False: 0]
  ------------------
 6728|  12.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.09k, False: 8.18k]
  ------------------
 6733|  4.09k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.09k|        }
 6735|       |
 6736|  8.18k|        parse_presentation_set_literal(begin, end, handler);
 6737|  8.18k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.09k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  8.18k|{
 6661|  8.18k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  8.18k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  8.18k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  8.18k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 8.18k, False: 0]
  |  Branch (6668:25): [True: 8.18k, False: 0]
  |  Branch (6668:49): [True: 8.18k, False: 0]
  ------------------
 6669|  8.18k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.18k, False: 0]
  ------------------
 6670|  8.18k|        ++begin;
 6671|       |
 6672|  8.18k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.18k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.18k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.18k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.18k|        return;
 6686|  8.18k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  16.3k|{
 6637|  16.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  16.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  16.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.3k]
  |  |  |  Branch (859:45): [True: 0, False: 16.3k]
  |  |  |  Branch (859:45): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  16.3k|    const auto cp =
 6646|  16.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  16.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  16.3k|    begin += len;
 6653|  16.3k|    return cp;
 6654|  16.3k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  16.1k|{
 6532|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  16.1k|    auto check_align = [](wchar_t ch) {
 6535|  16.1k|        switch (ch) {
 6536|  16.1k|            case L'<':
 6537|  16.1k|                return align_type::left;
 6538|  16.1k|            case L'>':
 6539|  16.1k|                return align_type::right;
 6540|  16.1k|            case L'^':
 6541|  16.1k|                return align_type::center;
 6542|  16.1k|            default:
 6543|  16.1k|                return align_type::none;
 6544|  16.1k|        }
 6545|  16.1k|    };
 6546|       |
 6547|  16.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  16.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  |  Branch (859:45): [True: 0, False: 16.1k]
  |  |  |  Branch (859:45): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6549|  16.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  16.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  16.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  16.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  16.1k|    const auto begin_before_fill = begin;
 6559|  16.1k|    begin += potential_fill_len;
 6560|       |
 6561|  16.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 16.1k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  16.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  16.1k|    const auto begin_after_fill = begin;
 6567|  16.1k|    ++begin;
 6568|       |
 6569|  16.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 16.1k, False: 0]
  ------------------
 6570|  16.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  16.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.09k, False: 12.0k]
  ------------------
 6575|  4.09k|            return begin_before_fill;
 6576|  4.09k|        }
 6577|  16.1k|    }
 6578|       |
 6579|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 12.0k, False: 0]
  ------------------
 6580|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 12.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  12.0k|        return begin_before_fill;
 6585|  12.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  12.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  32.2k|    auto check_align = [](wchar_t ch) {
 6535|  32.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 32.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 32.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 32.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  32.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 32.2k, False: 0]
  ------------------
 6543|  32.2k|                return align_type::none;
 6544|  32.2k|        }
 6545|  32.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  16.1k|{
 6597|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  16.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 16.1k, False: 0]
  |  Branch (6599:33): [True: 8.00k, False: 8.09k]
  ------------------
 6600|  8.00k|        int width = parse_simple_int(begin, end);
 6601|  8.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.00k, False: 0]
  |  |  ------------------
  ------------------
 6602|  8.00k|            handler.on_width(width);
 6603|  8.00k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  8.00k|    }
 6609|  16.1k|    return begin;
 6610|  16.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  4.00k|    {
 7127|  4.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  4.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 4.00k, False: 0]
  ------------------
 7129|  4.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 4.00k, False: 0]
  ------------------
 7130|  4.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 4.00k, False: 0]
  ------------------
 7131|  4.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 4.00k, False: 0]
  ------------------
 7132|  4.00k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  4.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  4.00k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   306k|{
 8417|   306k|#define SCN_VISIT(Type)                                         \
 8418|   306k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   306k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   306k|    }                                                           \
 8421|   306k|    else {                                                      \
 8422|   306k|        return vis(monostate_val);                              \
 8423|   306k|    }
 8424|       |
 8425|   306k|    monostate monostate_val{};
 8426|       |
 8427|   306k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 306k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 306k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 306k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 306k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 306k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 306k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 306k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 306k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 306k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 306k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 306k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 306k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 306k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 306k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 306k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 306k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 306k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 306k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 306k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 306k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 306k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   306k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 306k, False: 0]
  ------------------
 8471|   306k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   306k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   306k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   306k|    }                                                           \
  |  | 8421|   306k|    else {                                                      \
  |  | 8422|   306k|        return vis(monostate_val);                              \
  |  | 8423|   306k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 306k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 306k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 306k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 306k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 306k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   306k|            SCN_CLANG_POP
 8495|   306k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  26.0k|    {
 4076|  26.0k|        sync(0);
 4077|  26.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|  85.7k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   446k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|   306k|{
   89|   306k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   306k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   306k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   612k|{
   44|   612k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   612k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|   306k|{
  127|   306k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   306k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   306k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   612k|{
   60|   612k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   612k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|   148k|{
  163|   148k|    T value;
  164|   148k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   148k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.00k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.00k|    }                                                  \
  |  |  |  | 3671|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   146k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   148k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   297k|{
   72|   297k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   297k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   306k|{
   89|   306k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   306k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   306k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|   306k|{
  127|   306k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   306k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   306k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|   148k|{
  163|   148k|    T value;
  164|   148k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   148k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.00k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.00k|    }                                                  \
  |  |  |  | 3671|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   146k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   148k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|   306k|{
   89|   306k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   306k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   306k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   306k|{
   44|   306k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   306k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   306k|{
  127|   306k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   306k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   306k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   306k|{
   60|   306k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   306k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|   148k|{
  163|   148k|    T value;
  164|   148k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   148k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.00k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.00k|    }                                                  \
  |  |  |  | 3671|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   146k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   148k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   148k|{
   72|   148k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   148k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.10M|{
  653|  1.10M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.10M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   119k|{
 2184|   119k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   119k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  65.6k|{
 2192|  65.6k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  65.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  65.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.6k, False: 6.00k]
  |  |  ------------------
  ------------------
 2194|  59.6k|        source.sync(*n);
 2195|  59.6k|    }
 2196|  6.00k|    else {
 2197|  6.00k|        source.sync_all();
 2198|  6.00k|    }
 2199|  65.6k|    return n;
 2200|  65.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   612k|{
 2208|   612k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   612k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   306k|{
 2216|   306k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   306k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   306k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 294k, False: 12.0k]
  |  |  ------------------
  ------------------
 2218|   294k|        source.sync(*n);
 2219|   294k|    }
 2220|  12.0k|    else {
 2221|  12.0k|        source.sync_all();
 2222|  12.0k|    }
 2223|   306k|    return n;
 2224|   306k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   422k|{
  194|   422k|    return find_classic_impl(
  195|   422k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   422k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   422k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   426k|{
  202|   426k|    return find_classic_impl(
  203|   426k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   426k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   426k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   119k|{
 2141|   119k|    return vscan_internal(source, format, args);
 2142|   119k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  65.6k|{
 2147|  65.6k|    auto n = vscan_internal(source, format, args);
 2148|  65.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  65.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.6k, False: 6.00k]
  |  |  ------------------
  ------------------
 2149|  59.6k|        source.sync(*n);
 2150|  59.6k|    }
 2151|  6.00k|    else {
 2152|  6.00k|        source.sync_all();
 2153|  6.00k|    }
 2154|  65.6k|    return n;
 2155|  65.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   612k|{
 2161|   612k|    return vscan_internal(source, format, args);
 2162|   612k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   306k|{
 2167|   306k|    auto n = vscan_internal(source, format, args);
 2168|   306k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   306k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 294k, False: 12.0k]
  |  |  ------------------
  ------------------
 2169|   294k|        source.sync(*n);
 2170|   294k|    }
 2171|  12.0k|    else {
 2172|  12.0k|        source.sync_all();
 2173|  12.0k|    }
 2174|   306k|    return n;
 2175|   306k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  55.0k|{
 2251|  55.0k|    return vscan_value_internal(source, arg);
 2252|  55.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  30.6k|{
 2256|  30.6k|    auto n = vscan_value_internal(source, arg);
 2257|  30.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  30.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.6k, False: 1.00k]
  |  |  ------------------
  ------------------
 2258|  29.6k|        source.sync(*n);
 2259|  29.6k|    }
 2260|  1.00k|    else {
 2261|  1.00k|        source.sync_all();
 2262|  1.00k|    }
 2263|  30.6k|    return n;
 2264|  30.6k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|   297k|{
 2270|   297k|    return vscan_value_internal(source, arg);
 2271|   297k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   148k|{
 2276|   148k|    auto n = vscan_value_internal(source, arg);
 2277|   148k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   148k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 146k, False: 2.00k]
  |  |  ------------------
  ------------------
 2278|   146k|        source.sync(*n);
 2279|   146k|    }
 2280|  2.00k|    else {
 2281|  2.00k|        source.sync_all();
 2282|  2.00k|    }
 2283|   148k|    return n;
 2284|   148k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   422k|{
  118|   422k|    auto it = source.begin();
  119|       |
  120|   755k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 600k, False: 155k]
  ------------------
  121|   600k|        auto sv =
  122|   600k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   600k|                .substr(0, 8);
  124|       |
  125|   600k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 414k, False: 185k]
  ------------------
  126|   414k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   414k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   414k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 189k, False: 225k]
  ------------------
  129|   189k|                break;
  130|   189k|            }
  131|   225k|            continue;
  132|   414k|        }
  133|       |
  134|   542k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 435k, False: 107k]
  ------------------
  135|   435k|            auto tmp =
  136|   435k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   435k|            auto res = get_next_code_point(tmp);
  138|   435k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 77.6k, False: 357k]
  ------------------
  139|  77.6k|                return it;
  140|  77.6k|            }
  141|   357k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   357k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   357k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   357k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   357k|        }
  145|   185k|    }
  146|       |
  147|   344k|    return detail::make_string_view_iterator(source, it);
  148|   422k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.04M|{
  105|  1.04M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.04M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.04M|    uint64_t word{};
  108|  1.04M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.04M|    return has_byte_greater(word, 127) != 0;
  111|  1.04M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  1.72M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   435k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   426k|{
  118|   426k|    auto it = source.begin();
  119|       |
  120|   586k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 441k, False: 145k]
  ------------------
  121|   441k|        auto sv =
  122|   441k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   441k|                .substr(0, 8);
  124|       |
  125|   441k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 348k, False: 92.3k]
  ------------------
  126|   348k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   348k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   348k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 192k, False: 156k]
  ------------------
  129|   192k|                break;
  130|   192k|            }
  131|   156k|            continue;
  132|   348k|        }
  133|       |
  134|   184k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 181k, False: 3.30k]
  ------------------
  135|   181k|            auto tmp =
  136|   181k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   181k|            auto res = get_next_code_point(tmp);
  138|   181k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 89.0k, False: 92.5k]
  ------------------
  139|  89.0k|                return it;
  140|  89.0k|            }
  141|  92.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  92.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  92.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  92.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  92.5k|        }
  145|  92.3k|    }
  146|       |
  147|   337k|    return detail::make_string_view_iterator(source, it);
  148|   426k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.17M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   181k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   131k|{
 2073|   131k|    const auto argcount = args.size();
 2074|   131k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 61.2k, False: 70.0k]
  |  Branch (2074:60): [True: 61.2k, False: 0]
  ------------------
 2075|  61.2k|        auto arg = args.get(0);
 2076|  61.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  61.2k|    static_cast<    \
  |  |  929|  61.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  61.2k|    }
 2078|       |
 2079|  70.0k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 70.0k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  70.0k|    SCN_UNLIKELY_ATTR
 2087|  70.0k|    {
 2088|  70.0k|        auto handler = format_handler<false, CharT>{
 2089|  70.0k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  70.0k|    static_cast<    \
  |  |  929|  70.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  70.0k|    static_cast<    \
  |  |  929|  70.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  70.0k|        return vscan_parse_format_string(format, handler);
 2091|  70.0k|    }
 2092|  70.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   369k|{
 1625|   369k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 197k, False: 171k]
  ------------------
 1626|   197k|        return false;
 1627|   197k|    }
 1628|   171k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 171k, False: 0]
  |  Branch (1628:39): [True: 171k, False: 0]
  ------------------
 1629|   369k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  91.8k|{
 1658|  91.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  91.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  91.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  91.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  91.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  91.8k|    static_cast<    \
  |  |  929|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  91.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.00k, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.00k|    }                                                  \
  |  |  |  | 3671|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  88.8k|    return it.position();
 1675|  91.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   127k|    {
 1903|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.14M|    {
 1722|  1.14M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   127k|    {
 1853|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   127k|{
 2038|   127k|    const auto beg = handler.get_ctx().begin();
 2039|   127k|    detail::parse_format_string<false>(format, handler);
 2040|   127k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 107k]
  |  |  ------------------
  ------------------
 2041|  20.0k|        return unexpected(handler.error);
 2042|  20.0k|    }
 2043|   107k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   127k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   839k|    {
 2022|   839k|        return ctx.get();
 2023|   839k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   839k|    {
 1857|   839k|        return contiguous_ctx;
 1858|   839k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   235k|    {
 1907|   235k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 235k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   235k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   127k|{
 1681|   127k|    auto arg = ctx.arg(id);
 1682|   127k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   127k|    return arg;
 1686|   127k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.14M|    {
 1797|  1.14M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.14M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.14M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.14M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.14M|            visited_args_lower64 |= (1ull << id);
 1808|  1.14M|            return;
 1809|  1.14M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.14M|    {
 1782|  1.14M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.14M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.14M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.14M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.14M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  54.0k|    {
 1766|  54.0k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.0k, False: 0]
  |  |  ------------------
  ------------------
 1767|  54.0k|            error = err;
 1768|  54.0k|        }
 1769|  54.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   127k|    {
 1944|   127k|        return parse_ctx.next_arg_id();
 1945|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   127k|    {
 1985|   127k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   127k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   127k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 127k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   127k|        auto specs = detail::format_specs{};
 1998|   127k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   127k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   127k|            arg.type()};
 2001|       |
 2002|   127k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   127k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 127k]
  |  Branch (2003:29): [True: 0, False: 127k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   127k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 119k]
  |  |  ------------------
  ------------------
 2009|  8.00k|            return parse_ctx.begin();
 2010|  8.00k|        }
 2011|   119k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   119k|        on_visit_scan_arg(
 2014|   119k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   119k|                                           get_ctx().locale()},
 2016|   119k|            arg);
 2017|   119k|        return parse_ctx.begin();
 2018|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   127k|    {
 1701|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   119k|    {
 1956|   119k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 119k]
  |  Branch (1956:23): [True: 0, False: 119k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   119k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   119k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 107k]
  |  |  ------------------
  ------------------
 1963|  12.0k|            on_error(r.error());
 1964|  12.0k|        }
 1965|   107k|        else {
 1966|   107k|            get_ctx().advance_to(*r);
 1967|   107k|        }
 1968|   119k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  36.0k|    {
 1761|  36.0k|        SCN_UNLIKELY_ATTR
 1762|  36.0k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  36.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.14M|    {
 1729|  1.14M|        {
 1730|  1.14M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.14M]
  ------------------
 1731|  1.14M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.14M]
  ------------------
 1732|  1.14M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.14M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.14M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.14M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.14M|        }
 1739|       |
 1740|  1.14M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.14M, False: 0]
  ------------------
 1741|  1.14M|            return;
 1742|  1.14M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.14M|    {
 1777|  1.14M|        return error;
 1778|  1.14M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  3.38M|    {
 1773|  3.38M|        return static_cast<bool>(error);
 1774|  3.38M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  70.0k|    {
 1903|  70.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  70.0k|    {
 1830|  70.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  70.0k|{
 2038|  70.0k|    const auto beg = handler.get_ctx().begin();
 2039|  70.0k|    detail::parse_format_string<false>(format, handler);
 2040|  70.0k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 60.0k]
  |  |  ------------------
  ------------------
 2041|  10.0k|        return unexpected(handler.error);
 2042|  10.0k|    }
 2043|  60.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  70.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   462k|    {
 2022|   462k|        return ctx.get();
 2023|   462k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   462k|    {
 1834|   462k|        return ctx;
 1835|   462k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   130k|    {
 1907|   130k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 130k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  70.0k|{
 1681|  70.0k|    auto arg = ctx.arg(id);
 1682|  70.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  70.0k|    return arg;
 1686|  70.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  70.0k|    {
 1944|  70.0k|        return parse_ctx.next_arg_id();
 1945|  70.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  70.0k|    {
 1985|  70.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  70.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  70.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 70.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  70.0k|        auto specs = detail::format_specs{};
 1998|  70.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  70.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  70.0k|            arg.type()};
 2001|       |
 2002|  70.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  70.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 70.0k]
  |  Branch (2003:29): [True: 0, False: 70.0k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  70.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 66.0k]
  |  |  ------------------
  ------------------
 2009|  4.00k|            return parse_ctx.begin();
 2010|  4.00k|        }
 2011|  66.0k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  66.0k|        on_visit_scan_arg(
 2014|  66.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  66.0k|                                           get_ctx().locale()},
 2016|  66.0k|            arg);
 2017|  66.0k|        return parse_ctx.begin();
 2018|  70.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  70.0k|    {
 1701|  70.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  66.0k|    {
 1956|  66.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 66.0k]
  |  Branch (1956:23): [True: 0, False: 66.0k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  66.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  66.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 60.0k]
  |  |  ------------------
  ------------------
 1963|  6.00k|            on_error(r.error());
 1964|  6.00k|        }
 1965|  60.0k|        else {
 1966|  60.0k|            get_ctx().advance_to(*r);
 1967|  60.0k|        }
 1968|  66.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   238k|{
 2053|   238k|    const auto argcount = args.size();
 2054|   238k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 110k, False: 127k]
  |  Branch (2054:60): [True: 110k, False: 0]
  ------------------
 2055|   110k|        auto arg = args.get(0);
 2056|   110k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   110k|    static_cast<    \
  |  |  929|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   110k|    }
 2058|       |
 2059|   127k|    auto handler = format_handler<true, CharT>{
 2060|   127k|        ranges::subrange<const CharT*>{source.data(),
 2061|   127k|                                       source.data() + source.size()},
 2062|   127k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   127k|    return vscan_parse_format_string(format, handler);
 2064|   238k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   165k|{
 1638|   165k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   165k|    auto reader =
 1644|   165k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   165k|            ranges::subrange<const CharT*>{source.data(),
 1646|   165k|                                           source.data() + source.size()},
 1647|   165k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   165k|    static_cast<    \
  |  |  929|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   165k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.00k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.00k|    }                                                  \
  |  |  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   159k|    return ranges::distance(source.data(), it);
 1650|   165k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.22M|{
 2053|  1.22M|    const auto argcount = args.size();
 2054|  1.22M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 595k, False: 628k]
  |  Branch (2054:60): [True: 595k, False: 0]
  ------------------
 2055|   595k|        auto arg = args.get(0);
 2056|   595k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   595k|    static_cast<    \
  |  |  929|   595k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   595k|    }
 2058|       |
 2059|   628k|    auto handler = format_handler<true, CharT>{
 2060|   628k|        ranges::subrange<const CharT*>{source.data(),
 2061|   628k|                                       source.data() + source.size()},
 2062|   628k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   628k|    return vscan_parse_format_string(format, handler);
 2064|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.83M|{
 1625|  1.83M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 942k, False: 893k]
  ------------------
 1626|   942k|        return false;
 1627|   942k|    }
 1628|   893k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 893k, False: 0]
  |  Branch (1628:39): [True: 893k, False: 0]
  ------------------
 1629|  1.83M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   893k|{
 1638|   893k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 893k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   893k|    auto reader =
 1644|   893k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   893k|            ranges::subrange<const CharT*>{source.data(),
 1646|   893k|                                           source.data() + source.size()},
 1647|   893k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   893k|    static_cast<    \
  |  |  929|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   893k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   893k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   893k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   893k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.0k, False: 881k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.0k|    }                                                  \
  |  |  |  | 3671|   893k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   881k|    return ranges::distance(source.data(), it);
 1650|   893k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   628k|    {
 1903|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   628k|    {
 1853|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   628k|{
 2038|   628k|    const auto beg = handler.get_ctx().begin();
 2039|   628k|    detail::parse_format_string<false>(format, handler);
 2040|   628k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 588k]
  |  |  ------------------
  ------------------
 2041|  40.0k|        return unexpected(handler.error);
 2042|  40.0k|    }
 2043|   588k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   628k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.28M|    {
 2022|  4.28M|        return ctx.get();
 2023|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.28M|    {
 1857|  4.28M|        return contiguous_ctx;
 1858|  4.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.21M|    {
 1907|  1.21M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.21M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.21M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   628k|{
 1681|   628k|    auto arg = ctx.arg(id);
 1682|   628k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   628k|    return arg;
 1686|   628k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   628k|    {
 1944|   628k|        return parse_ctx.next_arg_id();
 1945|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   628k|    {
 1985|   628k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   628k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   628k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 628k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   628k|        auto specs = detail::format_specs{};
 1998|   628k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   628k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   628k|            arg.type()};
 2001|       |
 2002|   628k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   628k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 628k]
  |  Branch (2003:29): [True: 0, False: 628k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   628k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 612k]
  |  |  ------------------
  ------------------
 2009|  16.0k|            return parse_ctx.begin();
 2010|  16.0k|        }
 2011|   612k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   612k|        on_visit_scan_arg(
 2014|   612k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   612k|                                           get_ctx().locale()},
 2016|   612k|            arg);
 2017|   612k|        return parse_ctx.begin();
 2018|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   628k|    {
 1701|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   612k|    {
 1956|   612k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 612k]
  |  Branch (1956:23): [True: 0, False: 612k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   612k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   612k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 588k]
  |  |  ------------------
  ------------------
 1963|  24.0k|            on_error(r.error());
 1964|  24.0k|        }
 1965|   588k|        else {
 1966|   588k|            get_ctx().advance_to(*r);
 1967|   588k|        }
 1968|   612k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   612k|{
 2073|   612k|    const auto argcount = args.size();
 2074|   612k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 297k, False: 314k]
  |  Branch (2074:60): [True: 297k, False: 0]
  ------------------
 2075|   297k|        auto arg = args.get(0);
 2076|   297k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   297k|    }
 2078|       |
 2079|   314k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 314k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   314k|    SCN_UNLIKELY_ATTR
 2087|   314k|    {
 2088|   314k|        auto handler = format_handler<false, CharT>{
 2089|   314k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   314k|        return vscan_parse_format_string(format, handler);
 2091|   314k|    }
 2092|   314k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   446k|{
 1658|   446k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   446k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   446k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   446k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   446k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   446k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   446k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   446k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   446k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.00k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.00k|    }                                                  \
  |  |  |  | 3671|   446k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   440k|    return it.position();
 1675|   446k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   314k|    {
 1903|   314k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   314k|    {
 1830|   314k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   314k|{
 2038|   314k|    const auto beg = handler.get_ctx().begin();
 2039|   314k|    detail::parse_format_string<false>(format, handler);
 2040|   314k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 294k]
  |  |  ------------------
  ------------------
 2041|  20.0k|        return unexpected(handler.error);
 2042|  20.0k|    }
 2043|   294k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   314k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.14M|    {
 2022|  2.14M|        return ctx.get();
 2023|  2.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.14M|    {
 1834|  2.14M|        return ctx;
 1835|  2.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   608k|    {
 1907|   608k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 608k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   608k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   314k|{
 1681|   314k|    auto arg = ctx.arg(id);
 1682|   314k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   314k|    return arg;
 1686|   314k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   314k|    {
 1944|   314k|        return parse_ctx.next_arg_id();
 1945|   314k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   314k|    {
 1985|   314k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   314k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   314k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 314k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   314k|        auto specs = detail::format_specs{};
 1998|   314k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   314k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   314k|            arg.type()};
 2001|       |
 2002|   314k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   314k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 314k]
  |  Branch (2003:29): [True: 0, False: 314k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   314k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 306k]
  |  |  ------------------
  ------------------
 2009|  8.00k|            return parse_ctx.begin();
 2010|  8.00k|        }
 2011|   306k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   306k|        on_visit_scan_arg(
 2014|   306k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   306k|                                           get_ctx().locale()},
 2016|   306k|            arg);
 2017|   306k|        return parse_ctx.begin();
 2018|   314k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   314k|    {
 1701|   314k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   306k|    {
 1956|   306k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 306k]
  |  Branch (1956:23): [True: 0, False: 306k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   306k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   306k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 294k]
  |  |  ------------------
  ------------------
 1963|  12.0k|            on_error(r.error());
 1964|  12.0k|        }
 1965|   294k|        else {
 1966|   294k|            get_ctx().advance_to(*r);
 1967|   294k|        }
 1968|   306k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  55.0k|{
 2099|  55.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  55.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  30.6k|{
 2099|  30.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  30.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   297k|{
 2099|   297k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   148k|{
 2099|   148k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   148k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  1.00k|{
 1363|  1.00k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  1.00k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  1.00k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  1.00k|            std::u32string tmp;
 1368|  1.00k|            transcode_to_string_impl_to32(src, tmp);
 1369|  1.00k|            return transcode_to_string_impl_32to16<false>(
 1370|  1.00k|                std::u32string_view{tmp}, dest);
 1371|  1.00k|        }
 1372|  1.00k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  1.00k|            return transcode_to_string_impl_to32(src, dest);
 1374|  1.00k|        }
 1375|  1.00k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  1.00k|{
 1256|  1.00k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  1.00k|    auto it = src.begin();
 1259|   403k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 402k, False: 1.00k]
  ------------------
 1260|   402k|        auto res = get_next_code_point(
 1261|   402k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   402k|                                                                 src.end()));
 1263|   402k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 397k]
  |  |  ------------------
  ------------------
 1264|  4.47k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.47k|        }
 1266|   397k|        else {
 1267|   397k|            dest.push_back(res.value);
 1268|   397k|        }
 1269|   402k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   402k|    }
 1271|  1.00k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.01M|{
 1169|  1.01M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.01M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.01M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 998k]
  |  |  ------------------
  ------------------
 1173|  20.0k|        return {get_start_for_next_code_point(input),
 1174|  20.0k|                detail::invalid_code_point};
 1175|  20.0k|    }
 1176|   998k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   998k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 982k]
  |  |  ------------------
  ------------------
 1177|  16.8k|        return {input.end(), detail::invalid_code_point};
 1178|  16.8k|    }
 1179|       |
 1180|   982k|    return {input.begin() + len,
 1181|   982k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   998k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  20.0k|{
 1155|  20.0k|    auto it = input.begin();
 1156|  88.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 87.2k, False: 1.69k]
  ------------------
 1157|  87.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18.3k, False: 68.8k]
  ------------------
 1158|  18.3k|            break;
 1159|  18.3k|        }
 1160|  87.2k|    }
 1161|  20.0k|    return it;
 1162|  20.0k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  18.0k|    {
 2931|  18.0k|        SCN_UNLIKELY_ATTR
 2932|  18.0k|        m_msg = msg;
 2933|  18.0k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  1.10M|    {
 2936|  1.10M|        return m_msg == nullptr;
 2937|  1.10M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.89M|{
  458|  2.89M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.89M|        static_cast<unsigned char>(ch))];
  460|  2.89M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  44.4k|{
  469|  44.4k|    return static_cast<unsigned char>(ch) <= 127;
  470|  44.4k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  12.7k|{
  474|  12.7k|#if WCHAR_MIN < 0
  475|  12.7k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 11.4k, False: 1.27k]
  |  Branch (475:23): [True: 7.27k, False: 4.16k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  12.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.04M|{
  539|  1.04M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.04M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  4.25M|{
  784|  4.25M|    return e != eof_error::good;
  785|  4.25M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  13.4k|{
  798|  13.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  13.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  13.4k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  79.3M|{
 1200|       |    // Pattern_White_Space property
 1201|  79.3M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 15.2M, False: 64.1M]
  |  Branch (1201:27): [True: 2.22M, False: 12.9M]
  ------------------
 1202|  79.3M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 2.49M, False: 74.6M]
  ------------------
 1203|  79.3M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 382k, False: 74.2M]
  ------------------
 1204|  79.3M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 277k, False: 74.0M]
  ------------------
 1205|  79.3M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 282k, False: 73.7M]
  ------------------
 1206|  79.3M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 282k, False: 73.4M]
  ------------------
 1207|  79.3M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 73.4M]
  ------------------
 1208|  79.3M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.05M|{
 6008|  1.05M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.05M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.05M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.05M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.05M|    return {};
 6023|  1.05M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   545k|    {
  304|   545k|        ranges::advance(x, n);
  305|   545k|        return x;
  306|   545k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   545k|    {
  268|   545k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   545k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   545k|    {
  151|   545k|        i += n;
  152|   545k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.27M|    {
  108|  1.27M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.27M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.27M|    {
   87|  1.27M|        return s - i;
   88|  1.27M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.47M|    {
  108|  1.47M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.47M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.47M|    {
   87|  1.47M|        return s - i;
   88|  1.47M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   155k|{
  981|   155k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   155k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   155k|        return true;
  984|   155k|    }
  985|   155k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   155k|                           ranges::const_iterator_t<Range>,
  987|   155k|                           typename detail::basic_scan_buffer<
  988|   155k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   155k|        auto beg = r.begin();
  990|   155k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 155k, False: 0]
  ------------------
  991|   155k|            return false;
  992|   155k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   155k|    else {
 1006|   155k|        return false;
 1007|   155k|    }
 1008|   155k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  38.9k|    {
  763|  38.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  38.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.65k|    {
  754|  8.65k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  19.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.4k|              cvref<T> obj = *get<T>(fn);
  745|  19.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.4k|              }
  748|  19.4k|              else {
  749|  19.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.4k|              }
  751|  19.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  19.4k|    {
  684|  19.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.4k|            return static_cast<T*>(s.m_cp);
  686|  19.4k|        }
  687|  19.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.4k|            return static_cast<T*>(s.m_p);
  689|  19.4k|        }
  690|  19.4k|        else {
  691|  19.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.4k|        }
  693|  19.4k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  8.65k|        {
  662|  8.65k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  84.5M|    {
  763|  84.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  84.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  84.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.37M|    {
  754|  2.37M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  5.77M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.77M|              cvref<T> obj = *get<T>(fn);
  745|  5.77M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.77M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.77M|              }
  748|  5.77M|              else {
  749|  5.77M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.77M|              }
  751|  5.77M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.77M|    {
  684|  5.77M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.77M|            return static_cast<T*>(s.m_cp);
  686|  5.77M|        }
  687|  5.77M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.77M|            return static_cast<T*>(s.m_p);
  689|  5.77M|        }
  690|  5.77M|        else {
  691|  5.77M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.77M|        }
  693|  5.77M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.37M|        {
  662|  2.37M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  64.0k|    {
 6037|  64.0k|        const bool need_skipped_width =
 6038|  64.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 64.0k]
  |  Branch (6038:33): [True: 0, False: 64.0k]
  ------------------
 6039|  64.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  64.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 64.0k]
  ------------------
 6043|  64.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 64.0k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  64.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 64.0k, False: 0]
  |  Branch (6047:56): [True: 61.1k, False: 2.88k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  61.1k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 61.1k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   121k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  61.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 964, False: 60.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    964|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    964|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    964|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    964|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    964|    }                                                  \
  |  |  |  | 3671|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   121k|                            make_eof_scan_error));
 6058|       |
 6059|   121k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 60.2k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  60.2k|            return result_type{it, 0};
 6067|   121k|        }
 6068|       |
 6069|  2.88k|        return result_type{rng.begin(), 0};
 6070|  64.0k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.88k|{
 1976|  2.88k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.88k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.88k|{
 1957|  2.88k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.88k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.88k|    }
 1960|  2.88k|    else {
 1961|  2.88k|        auto first = range.begin();
 1962|  6.56k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.49k, False: 64]
  ------------------
 1963|  6.49k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.82k, False: 3.67k]
  ------------------
 1964|  2.82k|                return first;
 1965|  2.82k|            }
 1966|  6.49k|        }
 1967|     64|        return first;
 1968|  2.88k|    }
 1969|  2.88k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  60.0k|    {
  108|  60.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  60.0k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  60.0k|    {
   94|  60.0k|        iter_difference_t<I> counter{0};
   95|   694k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 634k, False: 60.0k]
  ------------------
   96|   634k|            ++i;
   97|   634k|            ++counter;
   98|   634k|        }
   99|  60.0k|        return counter;
  100|  60.0k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   244k|{
  950|   244k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 242k]
  |  |  ------------------
  ------------------
  951|  2.22k|        return eof_error::eof;
  952|  2.22k|    }
  953|   242k|    return eof_error::good;
  954|   244k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.89M|{
  944|  1.89M|    return is_range_eof(r.begin(), r.end());
  945|  1.89M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.89M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.89M|    {
  937|  1.89M|        return begin == end;
  938|  1.89M|    }
  939|  1.89M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   151k|{
 1683|   151k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   151k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   151k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   151k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   151k|    }
 1688|   151k|    else {
 1689|   151k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   151k|    }
 1691|   151k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   151k|    {
 1537|   151k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   151k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   151k|    {
 1621|   151k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   151k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   151k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   151k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   151k|            m_storage.reset();
 1627|   151k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   151k|        }
 1629|   151k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   151k|                                          std::basic_string<CharT>>) {
 1631|   151k|            m_storage.emplace(SCN_FWD(range));
 1632|   151k|            m_view = string_view_type{*m_storage};
 1633|   151k|        }
 1634|   151k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   151k|                                          typename detail::basic_scan_buffer<
 1636|   151k|                                              value_t>::forward_iterator> &&
 1637|   151k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   151k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   151k|            auto end_seg = range.end().contiguous_segment();
 1640|   151k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.62k, False: 148k]
  |  |  ------------------
  ------------------
 1641|   151k|                             detail::to_address(end_seg.end()))) {
 1642|  3.62k|                auto& str = m_storage.emplace();
 1643|  3.62k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.62k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.62k|                m_view = string_view_type{str};
 1646|  3.62k|                return;
 1647|  3.62k|            }
 1648|       |
 1649|   148k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   148k|                                                            end_seg.data());
 1651|   148k|            m_storage.reset();
 1652|   148k|        }
 1653|   151k|        else {
 1654|   151k|            auto& str = m_storage.emplace();
 1655|   151k|            if constexpr (ranges::sized_range<Range>) {
 1656|   151k|                str.reserve(range.size());
 1657|   151k|            }
 1658|   151k|            if constexpr (ranges::common_range<Range>) {
 1659|   151k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   151k|                          std::back_inserter(str));
 1661|   151k|            }
 1662|   151k|            else {
 1663|   151k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   151k|                     ++it) {
 1665|   151k|                    str.push_back(*it);
 1666|   151k|                }
 1667|   151k|            }
 1668|   151k|            m_view = string_view_type{str};
 1669|   151k|        }
 1670|   151k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   298k|    {
 1582|   298k|        return m_view;
 1583|   298k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   151k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  59.5k|    {
 6079|  59.5k|        const bool need_skipped_width =
 6080|  59.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 59.5k]
  |  Branch (6080:33): [True: 0, False: 59.5k]
  ------------------
 6081|  59.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  59.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 59.5k]
  ------------------
 6084|  59.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 59.5k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  59.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 59.5k, False: 0]
  ------------------
 6093|  59.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 850, False: 58.7k]
  ------------------
 6094|  59.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 850]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    850|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 850]
  ------------------
 6096|    850|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  59.5k|        return result_type{rng.begin(), 0};
 6118|  59.5k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   439k|{
  950|   439k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.70k, False: 435k]
  |  |  ------------------
  ------------------
  951|  3.70k|        return eof_error::eof;
  952|  3.70k|    }
  953|   435k|    return eof_error::good;
  954|   439k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   439k|{
  944|   439k|    return is_range_eof(r.begin(), r.end());
  945|   439k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   439k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   439k|    {
  937|   439k|        return begin == end;
  938|   439k|    }
  939|   439k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   273k|{
 1683|   273k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   273k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   273k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   273k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   273k|    }
 1688|   273k|    else {
 1689|   273k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   273k|    }
 1691|   273k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   273k|    {
 1490|   273k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.49M|    {
 1503|  1.49M|        return sv;
 1504|  1.49M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  5.76k|{
 1976|  5.76k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.76k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.76k|{
 1957|  5.76k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.76k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.76k|    }
 1960|  5.76k|    else {
 1961|  5.76k|        auto first = range.begin();
 1962|  5.76k|        for (; first != range.end(); ++first) {
 1963|  5.76k|            if (pred(*first)) {
 1964|  5.76k|                return first;
 1965|  5.76k|            }
 1966|  5.76k|        }
 1967|  5.76k|        return first;
 1968|  5.76k|    }
 1969|  5.76k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   274k|{
 2951|   274k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 274k, False: 0]
  ------------------
 2952|   274k|        auto it = read_while_classic_space(range);
 2953|   274k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   274k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.56k, False: 271k]
  |  |  ------------------
  ------------------
 2955|  2.56k|            return unexpected(e);
 2956|  2.56k|        }
 2957|       |
 2958|   271k|        return it;
 2959|   274k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   274k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   274k|{
 2117|   274k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   274k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   274k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   274k|        auto buf = make_contiguous_buffer(range);
 2121|   274k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   274k|        return ranges::next(range.begin(),
 2123|   274k|                            ranges::distance(buf.view().begin(), it));
 2124|   274k|    }
 2125|   274k|    else {
 2126|   274k|        auto it = range.begin();
 2127|       |
 2128|   274k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   274k|            auto seg = get_contiguous_beginning(range);
 2130|   274k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   274k|                seg_it != seg.end()) {
 2132|   274k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   274k|            }
 2134|   274k|            ranges::advance(it, seg.size());
 2135|   274k|        }
 2136|       |
 2137|   274k|        return read_while_code_point(
 2138|   274k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   274k|    }
 2140|   274k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   545k|{
 1683|   545k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   545k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   545k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   545k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   545k|    }
 1688|   545k|    else {
 1689|   545k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   545k|    }
 1691|   545k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   545k|    {
 1490|   545k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  9.81k|    {
  304|  9.81k|        ranges::advance(x, n);
  305|  9.81k|        return x;
  306|  9.81k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   303k|    {
  268|   303k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   303k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   303k|    {
  181|   571k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 268k, False: 303k]
  ------------------
  182|   268k|            ++i;
  183|   268k|        }
  184|   303k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   151k|    {
 1587|   151k|        return m_storage.has_value();
 1588|   151k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.35k|    {
 1592|  2.35k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.35k|        return *m_storage;
 1594|  2.35k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  66.0k|    {
 6193|  66.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  66.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  66.0k|            auto rd = make_reader<T, char_type>();
 6198|  66.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  66.0k|                return unexpected(e);
 6200|  66.0k|            }
 6201|       |
 6202|  66.0k|            return impl(rd, range, value);
 6203|  66.0k|        }
 6204|  66.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  66.0k|            auto rd = make_reader<T, char_type>();
 6206|  66.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 64.0k]
  |  |  ------------------
  ------------------
 6207|  2.00k|                return unexpected(e);
 6208|  2.00k|            }
 6209|       |
 6210|  64.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 64.0k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  64.0k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  64.0k|                return impl(rd, range, value);
 6213|  64.0k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  66.0k|        else {
 6221|  66.0k|            SCN_EXPECT(false);
 6222|  66.0k|            SCN_UNREACHABLE;
 6223|  66.0k|        }
 6224|  66.0k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   300k|{
 5809|   300k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   300k|        return reader_impl_for_bool<CharT>{};
 5811|   300k|    }
 5812|   300k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   300k|        return reader_impl_for_char<CharT>{};
 5814|   300k|    }
 5815|   300k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   300k|        return reader_impl_for_wchar<CharT>{};
 5817|   300k|    }
 5818|   300k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   300k|        return reader_impl_for_code_point<CharT>{};
 5820|   300k|    }
 5821|   300k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   300k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   300k|        return reader_impl_for_string<CharT>{};
 5824|   300k|    }
 5825|   300k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   300k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   300k|        return reader_impl_for_string<CharT>{};
 5828|   300k|    }
 5829|   300k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   300k|                       std::is_same_v<T, wregex_matches>) {
 5831|   300k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   300k|    }
 5833|   300k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   300k|        return reader_impl_for_voidptr<CharT>{};
 5835|   300k|    }
 5836|   300k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   300k|        return reader_impl_for_float<CharT>{};
 5838|   300k|    }
 5839|   300k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   300k|                       !std::is_same_v<T, wchar_t> &&
 5841|   300k|                       !std::is_same_v<T, char32_t> &&
 5842|   300k|                       !std::is_same_v<T, bool>) {
 5843|   300k|        return reader_impl_for_int<CharT>{};
 5844|   300k|    }
 5845|   300k|    else {
 5846|   300k|        return reader_impl_for_monostate<CharT>{};
 5847|   300k|    }
 5848|   300k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   443k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   185k|    {
 3040|   185k|        reader_error_handler eh{};
 3041|   185k|        get_derived().check_specs_impl(specs, eh);
 3042|   185k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 179k]
  |  |  ------------------
  ------------------
 3043|  6.00k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.00k|        }
 3045|   179k|        return {};
 3046|   185k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   185k|    {
 3051|   185k|        return static_cast<Derived&>(*this);
 3052|   185k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   185k|    {
 5210|   185k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   185k|        SCN_GCC_PUSH
 5213|   185k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   185k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   185k|        SCN_CLANG_PUSH
 5217|   185k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   185k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   185k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 185k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 185k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   171k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 171k, False: 14.6k]
  ------------------
 5226|   171k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 171k]
  ------------------
 5227|   171k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 171k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   171k|                else {
 5231|   171k|                    m_type = reader_type::word;
 5232|   171k|                }
 5233|   171k|                break;
 5234|      0|            }
 5235|       |
 5236|  6.00k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 6.00k, False: 179k]
  ------------------
 5237|  6.00k|                m_type = reader_type::character;
 5238|  6.00k|                break;
 5239|       |
 5240|  8.65k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 8.65k, False: 177k]
  ------------------
 5241|  8.65k|                m_type = reader_type::character_set;
 5242|  8.65k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 185k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 185k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   185k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   185k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  64.0k|    {
 6124|  64.0k|        const bool need_skipped_width =
 6125|  64.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 64.0k]
  |  Branch (6125:33): [True: 0, False: 64.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  64.0k|        auto it = rng.begin();
 6129|  64.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  64.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 64.0k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  64.0k|        else {
 6138|  64.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  64.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  64.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  64.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 964, False: 63.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    964|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    964|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    964|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    964|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    964|    }                                                  \
  |  |  |  | 3671|  64.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  63.0k|            std::tie(it, prefix_width) = prefix_result;
 6140|  63.0k|        }
 6141|  63.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  63.0k|        std::ptrdiff_t value_width = 0;
 6145|  63.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 63.0k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  63.0k|        else {
 6161|  63.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  63.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  63.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.04k, False: 60.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.04k|    }                                                  \
  |  | 3671|  63.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  60.0k|                                             specs, value, loc));
 6163|       |
 6164|  60.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 60.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  60.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  60.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  60.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 59.5k, False: 486]
  ------------------
 6174|  59.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  59.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  59.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  59.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  59.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  59.5k|                                 value_width));
 6178|  59.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  59.5k|        }
 6180|       |
 6181|  60.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  60.0k|                                                 value_width, postfix_width);
 6183|  60.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 60.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  60.0k|        return it;
 6188|  60.0k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   603k|    {
 5259|   603k|        return m_type == reader_type::word;
 5260|   603k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   425k|{
 1132|   425k|    auto it = src.begin();
 1133|  2.99M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.57M, False: 416k]
  ------------------
 1134|  2.57M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.57M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 4.95k, False: 2.57M]
  ------------------
 1136|  4.95k|            return false;
 1137|  4.95k|        }
 1138|  2.57M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 918, False: 2.57M]
  ------------------
 1139|    918|            return false;
 1140|    918|        }
 1141|  2.57M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.57M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.57M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 3.22k, False: 2.57M]
  ------------------
 1144|  3.22k|            return false;
 1145|  3.22k|        }
 1146|  2.57M|        it += len;
 1147|  2.57M|    }
 1148|   416k|    return true;
 1149|   425k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   148k|{
 2993|   148k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   148k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.35k, False: 146k]
  ------------------
 2995|  2.35k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.35k|    static_cast<    \
  |  |  929|  2.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.35k|        }
 2997|   146k|        else {
 2998|   146k|            dest.assign(source.view());
 2999|   146k|        }
 3000|   148k|    }
 3001|   148k|    else {
 3002|   148k|        return transcode_impl(source.view(), dest);
 3003|   148k|    }
 3004|       |
 3005|   148k|    return {};
 3006|   148k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  8.65k|        {
 5103|  8.65k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 8.65k, False: 0]
  ------------------
 5104|  8.65k|                return {};
 5105|  8.65k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  17.7k|        {
 5076|  17.7k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  17.7k|            const auto val =
 5078|  17.7k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  17.7k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  17.7k|                    (val % 8)) &
 5081|  17.7k|                   1u;
 5082|  17.7k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  19.4k|        {
 5129|  19.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.78k, False: 17.7k]
  ------------------
 5130|  1.78k|                return false;
 5131|  1.78k|            }
 5132|       |
 5133|  17.7k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  19.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  8.65k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  63.0k|    {
 5277|  63.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  63.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  63.0k|        return read_impl(range, specs, value);
 5279|  63.0k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  63.0k|    {
 5295|  63.0k|        SCN_CLANG_PUSH
 5296|  63.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  63.0k|        switch (m_type) {
 5299|  60.2k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 60.2k, False: 2.88k]
  ------------------
 5300|  60.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 63.0k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 63.0k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.88k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.88k, False: 60.2k]
  ------------------
 5310|  2.88k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.88k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 63.0k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 63.0k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 63.0k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  63.0k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  63.0k|        }
 5331|       |
 5332|  63.0k|        SCN_CLANG_POP
 5333|  63.0k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   150k|    {
 4820|   150k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   150k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   150k|{
 4752|   150k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   150k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   150k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 2.78k, False: 148k]
  ------------------
 4756|  2.78k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  2.78k|                                     "Invalid encoding in scanned string");
 4758|  2.78k|    }
 4759|   148k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   148k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   148k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   148k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   150k|{
 2088|   150k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   150k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   150k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   150k|        auto buf = make_contiguous_buffer(range);
 2092|   150k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   150k|        return ranges::next(range.begin(),
 2094|   150k|                            ranges::distance(buf.view().begin(), it));
 2095|   150k|    }
 2096|   150k|    else {
 2097|   150k|        auto it = range.begin();
 2098|       |
 2099|   150k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   150k|            auto seg = get_contiguous_beginning(range);
 2101|   150k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   150k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 150k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   150k|            ranges::advance(it, seg.size());
 2106|   150k|        }
 2107|       |
 2108|   150k|        return read_until_code_point(
 2109|   150k|            ranges::subrange{it, range.end()},
 2110|   150k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   150k|    }
 2112|   150k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   303k|{
 1039|   303k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   303k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   303k|        return r;
 1042|   303k|    }
 1043|   303k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   303k|                           ranges::const_iterator_t<Range>,
 1045|   303k|                           typename detail::basic_scan_buffer<
 1046|   303k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   303k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   303k|            auto seg = r.begin().contiguous_segment();
 1049|   303k|            auto dist =
 1050|   303k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   303k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   303k|        }
 1053|   303k|        else {
 1054|   303k|            return r.begin().contiguous_segment();
 1055|   303k|        }
 1056|   303k|    }
 1057|   303k|    else {
 1058|   303k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   303k|    }
 1060|   303k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   293k|{
 2061|   293k|    auto it = range.begin();
 2062|  1.65M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.65M, False: 3.98k]
  ------------------
 2063|  1.65M|        const auto val =
 2064|  1.65M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.65M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.63M, False: 14.9k]
  |  |  ------------------
  ------------------
 2066|  1.63M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.63M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.63M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 289k, False: 1.34M]
  ------------------
 2069|   289k|                return it;
 2070|   289k|            }
 2071|  1.63M|        }
 2072|  1.36M|        it = val.iterator;
 2073|  1.36M|    }
 2074|       |
 2075|  3.98k|    return it;
 2076|   293k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.65M|{
 1899|  1.65M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.65M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.65M|    auto it = range.begin();
 1903|  1.65M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.65M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 1.63M]
  |  |  ------------------
  ------------------
 1906|  14.9k|        ++it;
 1907|  14.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  14.9k|        return {it, {}};
 1909|  14.9k|    }
 1910|       |
 1911|  1.63M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.54M, False: 91.9k]
  ------------------
 1912|  1.54M|        ++it;
 1913|  1.54M|        return {it, string_type(1, *range.begin())};
 1914|  1.54M|    }
 1915|       |
 1916|  91.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  91.9k|    return {it, string_type{range.begin(), it}};
 1918|  1.63M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  14.9k|{
 1155|  14.9k|    auto it = input.begin();
 1156|  37.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 37.2k, False: 417]
  ------------------
 1157|  37.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 14.5k, False: 22.7k]
  ------------------
 1158|  14.5k|            break;
 1159|  14.5k|        }
 1160|  37.2k|    }
 1161|  14.9k|    return it;
 1162|  14.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  91.9k|    {
  283|  91.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  91.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  91.9k|    {
  252|  91.9k|        constexpr iter_difference_t<I> zero{0};
  253|  91.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|   338k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 246k, False: 91.3k]
  |  Branch (255:30): [True: 246k, False: 566]
  ------------------
  256|   246k|            ++i;
  257|   246k|            ++counter;
  258|   246k|        }
  259|       |
  260|  91.9k|        return counter;
  261|  91.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.65M|    {
 1890|  1.65M|        return !codepoint.empty();
 1891|  1.65M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   939k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   939k|              cvref<T> obj = *get<T>(fn);
  745|   939k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   939k|                  obj(static_cast<decltype(args)>(args)...);
  747|   939k|              }
  748|   939k|              else {
  749|   939k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   939k|              }
  751|   939k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   939k|    {
  684|   939k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   939k|            return static_cast<T*>(s.m_cp);
  686|   939k|        }
  687|   939k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   939k|            return static_cast<T*>(s.m_p);
  689|   939k|        }
  690|   939k|        else {
  691|   939k|            return reinterpret_cast<T*>(s.m_fp);
  692|   939k|        }
  693|   939k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   939k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.88k|    {
 5048|  2.88k|        auto it = read_source_impl(range, {specs});
 5049|  2.88k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 882]
  |  |  ------------------
  ------------------
 5050|  2.00k|            return unexpected(it.error());
 5051|  2.00k|        }
 5052|       |
 5053|    882|        return read_string_impl(range, *it, value);
 5054|  2.88k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.88k|    {
 5153|  2.88k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.88k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.88k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.88k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.88k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.88k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.88k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.88k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.88k|        };
 5178|       |
 5179|  2.88k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.88k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.88k|        auto it = read_while_code_unit(range, cb);
 5184|  2.88k|        return check_nonempty(it, range);
 5185|  2.88k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.88k|    {
 5191|  2.88k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 2.00k, False: 882]
  ------------------
 5192|  2.00k|            return unexpected_scan_error(
 5193|  2.00k|                scan_error::invalid_scanned_value,
 5194|  2.00k|                "No characters matched in [character set]");
 5195|  2.00k|        }
 5196|       |
 5197|    882|        return it;
 5198|  2.88k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   142k|{
 2082|   142k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   142k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.88k|    {
  754|  2.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  6.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.49k|              cvref<T> obj = *get<T>(fn);
  745|  6.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.49k|              }
  748|  6.49k|              else {
  749|  6.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.49k|              }
  751|  6.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.49k|    {
  684|  6.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.49k|            return static_cast<T*>(s.m_cp);
  686|  6.49k|        }
  687|  6.49k|        else if constexpr (std::is_object_v<T>) {
  688|  6.49k|            return static_cast<T*>(s.m_p);
  689|  6.49k|        }
  690|  6.49k|        else {
  691|  6.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.49k|        }
  693|  6.49k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  6.49k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.49k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.49k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.88k|        {
  667|  2.88k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    882|{
 4752|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    882|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    882|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 882]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    882|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    882|    static_cast<    \
  |  |  929|    882|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    882|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    882|    return SCN_MOVE(result);
  ------------------
  |  |  928|    882|    static_cast<    \
  |  |  929|    882|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    882|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  57.2k|    {
 5277|  57.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  57.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  57.2k|        return read_impl(range, specs, value);
 5279|  57.2k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  57.2k|    {
 5295|  57.2k|        SCN_CLANG_PUSH
 5296|  57.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  57.2k|        switch (m_type) {
 5299|  54.3k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 54.3k, False: 2.88k]
  ------------------
 5300|  54.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 57.2k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 57.2k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.88k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.88k, False: 54.3k]
  ------------------
 5310|  2.88k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.88k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 57.2k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 57.2k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 57.2k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  57.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  57.2k|        }
 5331|       |
 5332|  57.2k|        SCN_CLANG_POP
 5333|  57.2k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   135k|    {
 4820|   135k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   135k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   135k|{
 4752|   135k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   135k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   135k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.15k, False: 132k]
  ------------------
 4756|  3.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.15k|                                     "Invalid encoding in scanned string");
 4758|  3.15k|    }
 4759|   132k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   132k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   132k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   132k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   133k|{
 3012|   133k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   133k|        dest.assign(source.view());
 3014|   133k|    }
 3015|   133k|    else {
 3016|   133k|        return transcode_impl(source.view(), dest);
 3017|   133k|    }
 3018|       |
 3019|   133k|    return {};
 3020|   133k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   271k|{
 2088|   271k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   271k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   271k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   271k|        auto buf = make_contiguous_buffer(range);
 2092|   271k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   271k|        return ranges::next(range.begin(),
 2094|   271k|                            ranges::distance(buf.view().begin(), it));
 2095|   271k|    }
 2096|   271k|    else {
 2097|   271k|        auto it = range.begin();
 2098|       |
 2099|   271k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   271k|            auto seg = get_contiguous_beginning(range);
 2101|   271k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   271k|                seg_it != seg.end()) {
 2103|   271k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   271k|            }
 2105|   271k|            ranges::advance(it, seg.size());
 2106|   271k|        }
 2107|       |
 2108|   271k|        return read_until_code_point(
 2109|   271k|            ranges::subrange{it, range.end()},
 2110|   271k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   271k|    }
 2112|   271k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.88k|    {
 5048|  2.88k|        auto it = read_source_impl(range, {specs});
 5049|  2.88k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 882]
  |  |  ------------------
  ------------------
 5050|  2.00k|            return unexpected(it.error());
 5051|  2.00k|        }
 5052|       |
 5053|    882|        return read_string_impl(range, *it, value);
 5054|  2.88k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  5.76k|    {
 5153|  5.76k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  5.76k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  5.76k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  5.76k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  5.76k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 5.76k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  5.76k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.76k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.76k|        };
 5178|       |
 5179|  5.76k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 5.76k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  5.76k|        auto it = read_while_code_unit(range, cb);
 5184|  5.76k|        return check_nonempty(it, range);
 5185|  5.76k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  5.76k|    {
 5191|  5.76k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 4.00k, False: 1.76k]
  ------------------
 5192|  4.00k|            return unexpected_scan_error(
 5193|  4.00k|                scan_error::invalid_scanned_value,
 5194|  4.00k|                "No characters matched in [character set]");
 5195|  4.00k|        }
 5196|       |
 5197|  1.76k|        return it;
 5198|  5.76k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  5.76k|    {
  754|  5.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  12.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.9k|              cvref<T> obj = *get<T>(fn);
  745|  12.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.9k|              }
  748|  12.9k|              else {
  749|  12.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.9k|              }
  751|  12.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  12.9k|    {
  684|  12.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.9k|            return static_cast<T*>(s.m_cp);
  686|  12.9k|        }
  687|  12.9k|        else if constexpr (std::is_object_v<T>) {
  688|  12.9k|            return static_cast<T*>(s.m_p);
  689|  12.9k|        }
  690|  12.9k|        else {
  691|  12.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.9k|        }
  693|  12.9k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  12.9k|        const auto cb = [&](SourceCharT ch) {
 5176|  12.9k|            return cb_wrapper.on_ascii_only(ch);
 5177|  12.9k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  5.76k|        {
  667|  5.76k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    882|{
 4752|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    882|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    882|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 882]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    882|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    882|    static_cast<    \
  |  |  929|    882|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    882|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    882|    return SCN_MOVE(result);
  ------------------
  |  |  928|    882|    static_cast<    \
  |  |  929|    882|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    882|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   142k|{
 5809|   142k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   142k|        return reader_impl_for_bool<CharT>{};
 5811|   142k|    }
 5812|   142k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   142k|        return reader_impl_for_char<CharT>{};
 5814|   142k|    }
 5815|   142k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   142k|        return reader_impl_for_wchar<CharT>{};
 5817|   142k|    }
 5818|   142k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   142k|        return reader_impl_for_code_point<CharT>{};
 5820|   142k|    }
 5821|   142k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   142k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   142k|        return reader_impl_for_string<CharT>{};
 5824|   142k|    }
 5825|   142k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   142k|                       std::is_same_v<T, std::wstring>) {
 5827|   142k|        return reader_impl_for_string<CharT>{};
 5828|   142k|    }
 5829|   142k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   142k|                       std::is_same_v<T, wregex_matches>) {
 5831|   142k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   142k|    }
 5833|   142k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   142k|        return reader_impl_for_voidptr<CharT>{};
 5835|   142k|    }
 5836|   142k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   142k|        return reader_impl_for_float<CharT>{};
 5838|   142k|    }
 5839|   142k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   142k|                       !std::is_same_v<T, wchar_t> &&
 5841|   142k|                       !std::is_same_v<T, char32_t> &&
 5842|   142k|                       !std::is_same_v<T, bool>) {
 5843|   142k|        return reader_impl_for_int<CharT>{};
 5844|   142k|    }
 5845|   142k|    else {
 5846|   142k|        return reader_impl_for_monostate<CharT>{};
 5847|   142k|    }
 5848|   142k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  57.2k|    {
 5277|  57.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  57.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  57.2k|        return read_impl(range, specs, value);
 5279|  57.2k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  57.2k|    {
 5295|  57.2k|        SCN_CLANG_PUSH
 5296|  57.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  57.2k|        switch (m_type) {
 5299|  54.3k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 54.3k, False: 2.88k]
  ------------------
 5300|  54.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 57.2k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 57.2k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.88k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.88k, False: 54.3k]
  ------------------
 5310|  2.88k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.88k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 57.2k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 57.2k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 57.2k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  57.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  57.2k|        }
 5331|       |
 5332|  57.2k|        SCN_CLANG_POP
 5333|  57.2k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   135k|    {
 4827|   135k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   135k|                                     value);
 4829|   135k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   135k|{
 4773|   135k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   135k|    auto src = [&]() {
 4776|   135k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   135k|            return make_contiguous_buffer(
 4778|   135k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   135k|        }
 4780|   135k|        else {
 4781|   135k|            return make_contiguous_buffer(
 4782|   135k|                ranges::subrange{range.begin(), result});
 4783|   135k|        }
 4784|   135k|    }();
 4785|   135k|    using src_type = decltype(src);
 4786|       |
 4787|   135k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   135k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   135k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   135k|                                     "Cannot read a string_view from "
 4796|   135k|                                     "this source range (would require "
 4797|   135k|                                     "transcoding)");
 4798|   135k|    }
 4799|   135k|    else {
 4800|   135k|        const auto view = src.view();
 4801|   135k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   135k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.15k, False: 132k]
  ------------------
 4804|  3.15k|            return unexpected_scan_error(
 4805|  3.15k|                scan_error::invalid_scanned_value,
 4806|  3.15k|                "Invalid encoding in scanned string_view");
 4807|  3.15k|        }
 4808|       |
 4809|   132k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   135k|    }
 4811|   135k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   135k|    auto src = [&]() {
 4776|   135k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   135k|            return make_contiguous_buffer(
 4778|   135k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   135k|        }
 4780|   135k|        else {
 4781|   135k|            return make_contiguous_buffer(
 4782|   135k|                ranges::subrange{range.begin(), result});
 4783|   135k|        }
 4784|   135k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.88k|    {
 5062|  2.88k|        auto it = read_source_impl(range, {specs});
 5063|  2.88k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 882]
  |  |  ------------------
  ------------------
 5064|  2.00k|            return unexpected(it.error());
 5065|  2.00k|        }
 5066|       |
 5067|    882|        return read_string_view_impl(range, *it, value);
 5068|  2.88k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    882|{
 4773|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    882|    auto src = [&]() {
 4776|    882|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    882|            return make_contiguous_buffer(
 4778|    882|                ranges::subrange{range.begin().base(), result.base()});
 4779|    882|        }
 4780|    882|        else {
 4781|    882|            return make_contiguous_buffer(
 4782|    882|                ranges::subrange{range.begin(), result});
 4783|    882|        }
 4784|    882|    }();
 4785|    882|    using src_type = decltype(src);
 4786|       |
 4787|    882|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    882|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    882|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    882|                                     "Cannot read a string_view from "
 4796|    882|                                     "this source range (would require "
 4797|    882|                                     "transcoding)");
 4798|    882|    }
 4799|    882|    else {
 4800|    882|        const auto view = src.view();
 4801|    882|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    882|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 882]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    882|        return SCN_MOVE(result);
  ------------------
  |  |  928|    882|    static_cast<    \
  |  |  929|    882|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    882|    }
 4811|    882|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    882|    auto src = [&]() {
 4776|    882|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    882|            return make_contiguous_buffer(
 4778|    882|                ranges::subrange{range.begin().base(), result.base()});
 4779|    882|        }
 4780|    882|        else {
 4781|    882|            return make_contiguous_buffer(
 4782|    882|                ranges::subrange{range.begin(), result});
 4783|    882|        }
 4784|    882|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   152k|{
 2951|   152k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 152k, False: 0]
  ------------------
 2952|   152k|        auto it = read_while_classic_space(range);
 2953|   152k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   152k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.54k, False: 150k]
  |  |  ------------------
  ------------------
 2955|  1.54k|            return unexpected(e);
 2956|  1.54k|        }
 2957|       |
 2958|   150k|        return it;
 2959|   152k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   152k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   152k|{
 2117|   152k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   152k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   152k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   152k|        auto buf = make_contiguous_buffer(range);
 2121|   152k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   152k|        return ranges::next(range.begin(),
 2123|   152k|                            ranges::distance(buf.view().begin(), it));
 2124|   152k|    }
 2125|   152k|    else {
 2126|   152k|        auto it = range.begin();
 2127|       |
 2128|   152k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   152k|            auto seg = get_contiguous_beginning(range);
 2130|   152k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   152k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 9.81k, False: 142k]
  ------------------
 2132|  9.81k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.81k|            }
 2134|   142k|            ranges::advance(it, seg.size());
 2135|   142k|        }
 2136|       |
 2137|   142k|        return read_while_code_point(
 2138|   142k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   152k|    }
 2140|   152k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   142k|    {
  754|   142k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   698k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   698k|              cvref<T> obj = *get<T>(fn);
  745|   698k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   698k|                  obj(static_cast<decltype(args)>(args)...);
  747|   698k|              }
  748|   698k|              else {
  749|   698k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   698k|              }
  751|   698k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   698k|    {
  684|   698k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   698k|            return static_cast<T*>(s.m_cp);
  686|   698k|        }
  687|   698k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   698k|            return static_cast<T*>(s.m_p);
  689|   698k|        }
  690|   698k|        else {
  691|   698k|            return reinterpret_cast<T*>(s.m_fp);
  692|   698k|        }
  693|   698k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   698k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   142k|        {
  662|   142k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   749k|{
  981|   749k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   749k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   749k|        return true;
  984|   749k|    }
  985|   749k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   749k|                           ranges::const_iterator_t<Range>,
  987|   749k|                           typename detail::basic_scan_buffer<
  988|   749k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   749k|        auto beg = r.begin();
  990|   749k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 749k, False: 0]
  ------------------
  991|   749k|            return false;
  992|   749k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   749k|    else {
 1006|   749k|        return false;
 1007|   749k|    }
 1008|   749k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  25.4k|    {
  763|  25.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  25.4k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|  12.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.7k|              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  12.7k|    {
  684|  12.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.7k|            return static_cast<T*>(s.m_cp);
  686|  12.7k|        }
  687|  12.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.7k|            return static_cast<T*>(s.m_p);
  689|  12.7k|        }
  690|  12.7k|        else {
  691|  12.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.7k|        }
  693|  12.7k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   302k|    {
 6037|   302k|        const bool need_skipped_width =
 6038|   302k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 302k]
  |  Branch (6038:33): [True: 0, False: 302k]
  ------------------
 6039|   302k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   302k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 302k]
  ------------------
 6043|   302k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 302k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   302k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 302k, False: 0]
  |  Branch (6047:56): [True: 297k, False: 4.09k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   297k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 297k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   594k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   594k|                            make_eof_scan_error));
 6058|       |
 6059|   594k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 296k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   296k|            return result_type{it, 0};
 6067|   594k|        }
 6068|       |
 6069|  4.09k|        return result_type{rng.begin(), 0};
 6070|   302k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.09k|{
 1976|  4.09k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.09k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.09k|{
 1957|  4.09k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.09k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.09k|    }
 1960|  4.09k|    else {
 1961|  4.09k|        auto first = range.begin();
 1962|  4.29k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 4.23k, False: 52]
  ------------------
 1963|  4.23k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.04k, False: 196]
  ------------------
 1964|  4.04k|                return first;
 1965|  4.04k|            }
 1966|  4.23k|        }
 1967|     52|        return first;
 1968|  4.09k|    }
 1969|  4.09k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   294k|    {
  108|   294k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   294k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   294k|    {
   94|   294k|        iter_difference_t<I> counter{0};
   95|  9.80M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 9.51M, False: 294k]
  ------------------
   96|  9.51M|            ++i;
   97|  9.51M|            ++counter;
   98|  9.51M|        }
   99|   294k|        return counter;
  100|   294k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.19M|{
  950|  1.19M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.52k, False: 1.18M]
  |  |  ------------------
  ------------------
  951|  2.52k|        return eof_error::eof;
  952|  2.52k|    }
  953|  1.18M|    return eof_error::good;
  954|  1.19M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  26.8M|{
  944|  26.8M|    return is_range_eof(r.begin(), r.end());
  945|  26.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  26.8M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  26.8M|    {
  937|  26.8M|        return begin == end;
  938|  26.8M|    }
  939|  26.8M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|   742k|{
 1683|   742k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   742k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   742k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   742k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   742k|    }
 1688|   742k|    else {
 1689|   742k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   742k|    }
 1691|   742k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   742k|    {
 1537|   742k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   742k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   742k|    {
 1621|   742k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   742k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   742k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   742k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   742k|            m_storage.reset();
 1627|   742k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   742k|        }
 1629|   742k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   742k|                                          std::basic_string<CharT>>) {
 1631|   742k|            m_storage.emplace(SCN_FWD(range));
 1632|   742k|            m_view = string_view_type{*m_storage};
 1633|   742k|        }
 1634|   742k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   742k|                                          typename detail::basic_scan_buffer<
 1636|   742k|                                              value_t>::forward_iterator> &&
 1637|   742k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   742k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   742k|            auto end_seg = range.end().contiguous_segment();
 1640|   742k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.78k, False: 738k]
  |  |  ------------------
  ------------------
 1641|   742k|                             detail::to_address(end_seg.end()))) {
 1642|  3.78k|                auto& str = m_storage.emplace();
 1643|  3.78k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.78k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.78k|                m_view = string_view_type{str};
 1646|  3.78k|                return;
 1647|  3.78k|            }
 1648|       |
 1649|   738k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   738k|                                                            end_seg.data());
 1651|   738k|            m_storage.reset();
 1652|   738k|        }
 1653|   742k|        else {
 1654|   742k|            auto& str = m_storage.emplace();
 1655|   742k|            if constexpr (ranges::sized_range<Range>) {
 1656|   742k|                str.reserve(range.size());
 1657|   742k|            }
 1658|   742k|            if constexpr (ranges::common_range<Range>) {
 1659|   742k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   742k|                          std::back_inserter(str));
 1661|   742k|            }
 1662|   742k|            else {
 1663|   742k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   742k|                     ++it) {
 1665|   742k|                    str.push_back(*it);
 1666|   742k|                }
 1667|   742k|            }
 1668|   742k|            m_view = string_view_type{str};
 1669|   742k|        }
 1670|   742k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.47M|    {
 1582|  1.47M|        return m_view;
 1583|  1.47M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|   742k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   293k|    {
 6079|   293k|        const bool need_skipped_width =
 6080|   293k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 293k]
  |  Branch (6080:33): [True: 0, False: 293k]
  ------------------
 6081|   293k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   293k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 293k]
  ------------------
 6084|   293k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 293k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   293k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 293k, False: 0]
  ------------------
 6093|   293k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 64, False: 293k]
  ------------------
 6094|   293k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 64]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     64|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 64]
  ------------------
 6096|     64|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   293k|        return result_type{rng.begin(), 0};
 6118|   293k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  51.4M|{
 1899|  51.4M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  51.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  51.4M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  51.4M|    auto it = range.begin();
 1903|  51.4M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  51.4M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  51.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.4M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  51.4M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 51.4M, False: 0]
  ------------------
 1912|  51.4M|        ++it;
 1913|  51.4M|        return {it, string_type(1, *range.begin())};
 1914|  51.4M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  51.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  53.7M|{
  944|  53.7M|    return is_range_eof(r.begin(), r.end());
  945|  53.7M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  53.7M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  53.7M|    {
  937|  53.7M|        return begin == end;
  938|  53.7M|    }
  939|  53.7M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  51.4M|    {
 1890|  51.4M|        return !codepoint.empty();
 1891|  51.4M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.38M|{
  950|  2.38M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.05k, False: 2.37M]
  |  |  ------------------
  ------------------
  951|  5.05k|        return eof_error::eof;
  952|  5.05k|    }
  953|  2.37M|    return eof_error::good;
  954|  2.38M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  1.48M|{
 1683|  1.48M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.48M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.48M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.48M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.48M|    }
 1688|  1.48M|    else {
 1689|  1.48M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.48M|    }
 1691|  1.48M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  1.48M|    {
 1490|  1.48M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  2.21M|    {
 1503|  2.21M|        return sv;
 1504|  2.21M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  8.18k|{
 1976|  8.18k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  8.18k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  8.18k|{
 1957|  8.18k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  8.18k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  8.18k|    }
 1960|  8.18k|    else {
 1961|  8.18k|        auto first = range.begin();
 1962|  8.18k|        for (; first != range.end(); ++first) {
 1963|  8.18k|            if (pred(*first)) {
 1964|  8.18k|                return first;
 1965|  8.18k|            }
 1966|  8.18k|        }
 1967|  8.18k|        return first;
 1968|  8.18k|    }
 1969|  8.18k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.48M|{
 2951|  1.48M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.48M, False: 0]
  ------------------
 2952|  1.48M|        auto it = read_while_classic_space(range);
 2953|  1.48M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.48M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.57k, False: 1.48M]
  |  |  ------------------
  ------------------
 2955|  2.57k|            return unexpected(e);
 2956|  2.57k|        }
 2957|       |
 2958|  1.48M|        return it;
 2959|  1.48M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.48M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.48M|{
 2117|  1.48M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.48M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.48M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.48M|        auto buf = make_contiguous_buffer(range);
 2121|  1.48M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.48M|        return ranges::next(range.begin(),
 2123|  1.48M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.48M|    }
 2125|  1.48M|    else {
 2126|  1.48M|        auto it = range.begin();
 2127|       |
 2128|  1.48M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.48M|            auto seg = get_contiguous_beginning(range);
 2130|  1.48M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.48M|                seg_it != seg.end()) {
 2132|  1.48M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.48M|            }
 2134|  1.48M|            ranges::advance(it, seg.size());
 2135|  1.48M|        }
 2136|       |
 2137|  1.48M|        return read_while_code_point(
 2138|  1.48M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.48M|    }
 2140|  1.48M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  1.48M|{
 2082|  1.48M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.48M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.97M|{
 2061|  2.97M|    auto it = range.begin();
 2062|  51.4M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 51.4M, False: 13.6k]
  ------------------
 2063|  51.4M|        const auto val =
 2064|  51.4M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  51.4M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  51.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 51.4M, False: 0]
  |  |  ------------------
  ------------------
 2066|  51.4M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  51.4M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  51.4M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.95M, False: 48.4M]
  ------------------
 2069|  2.95M|                return it;
 2070|  2.95M|            }
 2071|  51.4M|        }
 2072|  48.4M|        it = val.iterator;
 2073|  48.4M|    }
 2074|       |
 2075|  13.6k|    return it;
 2076|  2.97M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  3.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.38M|              cvref<T> obj = *get<T>(fn);
  745|  3.38M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.38M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.38M|              }
  748|  3.38M|              else {
  749|  3.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.38M|              }
  751|  3.38M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.38M|    {
  684|  3.38M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.38M|            return static_cast<T*>(s.m_cp);
  686|  3.38M|        }
  687|  3.38M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.38M|            return static_cast<T*>(s.m_p);
  689|  3.38M|        }
  690|  3.38M|        else {
  691|  3.38M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.38M|        }
  693|  3.38M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  3.38M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  1.48M|        {
  662|  1.48M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   736k|    {
 1587|   736k|        return m_storage.has_value();
 1588|   736k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  1.26k|    {
 1592|  1.26k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.26k|        return *m_storage;
 1594|  1.26k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  2.25M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   918k|    {
 3040|   918k|        reader_error_handler eh{};
 3041|   918k|        get_derived().check_specs_impl(specs, eh);
 3042|   918k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 906k]
  |  |  ------------------
  ------------------
 3043|  12.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  12.0k|        }
 3045|   906k|        return {};
 3046|   918k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|   918k|    {
 3051|   918k|        return static_cast<Derived&>(*this);
 3052|   918k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   918k|    {
 5210|   918k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   918k|        SCN_GCC_PUSH
 5213|   918k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   918k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   918k|        SCN_CLANG_PUSH
 5217|   918k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   918k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   918k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 918k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 918k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   893k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 893k, False: 24.2k]
  ------------------
 5226|   893k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 893k]
  ------------------
 5227|   893k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 893k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   893k|                else {
 5231|   893k|                    m_type = reader_type::word;
 5232|   893k|                }
 5233|   893k|                break;
 5234|      0|            }
 5235|       |
 5236|  12.0k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 12.0k, False: 906k]
  ------------------
 5237|  12.0k|                m_type = reader_type::character;
 5238|  12.0k|                break;
 5239|       |
 5240|  12.2k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 12.2k, False: 905k]
  ------------------
 5241|  12.2k|                m_type = reader_type::character_set;
 5242|  12.2k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 918k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 918k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   918k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   918k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  3.12M|    {
 5259|  3.12M|        return m_type == reader_type::word;
 5260|  3.12M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.22M|{
 1132|  2.22M|    auto it = src.begin();
 1133|  70.7M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 68.5M, False: 2.20M]
  ------------------
 1134|  68.5M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  68.5M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 68.5M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  68.5M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 68.5M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  68.5M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  68.5M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  68.5M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 22.4k, False: 68.5M]
  ------------------
 1144|  22.4k|            return false;
 1145|  22.4k|        }
 1146|  68.5M|        it += len;
 1147|  68.5M|    }
 1148|  2.20M|    return true;
 1149|  2.22M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  12.2k|        {
 5103|  12.2k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 12.2k, False: 0]
  ------------------
 5104|  12.2k|                return {};
 5105|  12.2k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  7.27k|        {
 5076|  7.27k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  7.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  7.27k|            const auto val =
 5078|  7.27k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  7.27k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  7.27k|                    (val % 8)) &
 5081|  7.27k|                   1u;
 5082|  7.27k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  12.7k|        {
 5129|  12.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 5.44k, False: 7.27k]
  ------------------
 5130|  5.44k|                return false;
 5131|  5.44k|            }
 5132|       |
 5133|  7.27k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  12.7k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  12.2k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   742k|{
 2088|   742k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   742k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   742k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   742k|        auto buf = make_contiguous_buffer(range);
 2092|   742k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   742k|        return ranges::next(range.begin(),
 2094|   742k|                            ranges::distance(buf.view().begin(), it));
 2095|   742k|    }
 2096|   742k|    else {
 2097|   742k|        auto it = range.begin();
 2098|       |
 2099|   742k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   742k|            auto seg = get_contiguous_beginning(range);
 2101|   742k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   742k|                seg_it != seg.end()) {
 2103|   742k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   742k|            }
 2105|   742k|            ranges::advance(it, seg.size());
 2106|   742k|        }
 2107|       |
 2108|   742k|        return read_until_code_point(
 2109|   742k|            ranges::subrange{it, range.end()},
 2110|   742k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   742k|    }
 2112|   742k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.48M|{
 2061|  1.48M|    auto it = range.begin();
 2062|  25.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 25.7M, False: 6.80k]
  ------------------
 2063|  25.7M|        const auto val =
 2064|  25.7M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  25.7M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  25.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.7M, False: 0]
  |  |  ------------------
  ------------------
 2066|  25.7M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  25.7M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  25.7M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.47M, False: 24.2M]
  ------------------
 2069|  1.47M|                return it;
 2070|  1.47M|            }
 2071|  25.7M|        }
 2072|  24.2M|        it = val.iterator;
 2073|  24.2M|    }
 2074|       |
 2075|  6.80k|    return it;
 2076|  1.48M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  25.7M|{
 1899|  25.7M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  25.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  25.7M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  25.7M|    auto it = range.begin();
 1903|  25.7M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  25.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  25.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  25.7M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 25.7M, False: 0]
  ------------------
 1912|  25.7M|        ++it;
 1913|  25.7M|        return {it, string_type(1, *range.begin())};
 1914|  25.7M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  25.7M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  25.7M|    {
 1890|  25.7M|        return !codepoint.empty();
 1891|  25.7M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   742k|    {
  754|   742k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  24.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.0M|              cvref<T> obj = *get<T>(fn);
  745|  24.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.0M|              }
  748|  24.0M|              else {
  749|  24.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.0M|              }
  751|  24.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  24.0M|    {
  684|  24.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.0M|            return static_cast<T*>(s.m_cp);
  686|  24.0M|        }
  687|  24.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.0M|            return static_cast<T*>(s.m_p);
  689|  24.0M|        }
  690|  24.0M|        else {
  691|  24.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.0M|        }
  693|  24.0M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  24.0M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   742k|        {
  662|   742k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  4.09k|    {
 5153|  4.09k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.09k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.09k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.09k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.09k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.09k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.09k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.09k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.09k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.09k|        };
 5178|       |
 5179|  4.09k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.09k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.09k|        auto it = read_while_code_unit(range, cb);
 5184|  4.09k|        return check_nonempty(it, range);
 5185|  4.09k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  4.09k|    {
 5191|  4.09k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 4.00k, False: 90]
  ------------------
 5192|  4.00k|            return unexpected_scan_error(
 5193|  4.00k|                scan_error::invalid_scanned_value,
 5194|  4.00k|                "No characters matched in [character set]");
 5195|  4.00k|        }
 5196|       |
 5197|     90|        return it;
 5198|  4.09k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   743k|{
 2082|   743k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   743k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  4.09k|    {
  754|  4.09k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  4.23k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.23k|              cvref<T> obj = *get<T>(fn);
  745|  4.23k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.23k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.23k|              }
  748|  4.23k|              else {
  749|  4.23k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.23k|              }
  751|  4.23k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.23k|    {
  684|  4.23k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.23k|            return static_cast<T*>(s.m_cp);
  686|  4.23k|        }
  687|  4.23k|        else if constexpr (std::is_object_v<T>) {
  688|  4.23k|            return static_cast<T*>(s.m_p);
  689|  4.23k|        }
  690|  4.23k|        else {
  691|  4.23k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.23k|        }
  693|  4.23k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  4.23k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.23k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.23k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  4.09k|        {
  667|  4.09k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  1.48M|{
 2088|  1.48M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.48M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.48M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.48M|        auto buf = make_contiguous_buffer(range);
 2092|  1.48M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.48M|        return ranges::next(range.begin(),
 2094|  1.48M|                            ranges::distance(buf.view().begin(), it));
 2095|  1.48M|    }
 2096|  1.48M|    else {
 2097|  1.48M|        auto it = range.begin();
 2098|       |
 2099|  1.48M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.48M|            auto seg = get_contiguous_beginning(range);
 2101|  1.48M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.48M|                seg_it != seg.end()) {
 2103|  1.48M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  1.48M|            }
 2105|  1.48M|            ranges::advance(it, seg.size());
 2106|  1.48M|        }
 2107|       |
 2108|  1.48M|        return read_until_code_point(
 2109|  1.48M|            ranges::subrange{it, range.end()},
 2110|  1.48M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.48M|    }
 2112|  1.48M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  48.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.0M|              cvref<T> obj = *get<T>(fn);
  745|  48.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  48.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.0M|              }
  748|  48.0M|              else {
  749|  48.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.0M|              }
  751|  48.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  48.0M|    {
  684|  48.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  48.0M|            return static_cast<T*>(s.m_cp);
  686|  48.0M|        }
  687|  48.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  48.0M|            return static_cast<T*>(s.m_p);
  689|  48.0M|        }
  690|  48.0M|        else {
  691|  48.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  48.0M|        }
  693|  48.0M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  48.0M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  1.48M|        {
  662|  1.48M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  8.18k|    {
 5153|  8.18k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  8.18k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  8.18k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.18k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  8.18k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  8.18k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 8.18k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  8.18k|        const auto cb = [&](SourceCharT ch) {
 5176|  8.18k|            return cb_wrapper.on_ascii_only(ch);
 5177|  8.18k|        };
 5178|       |
 5179|  8.18k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 8.18k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  8.18k|        auto it = read_while_code_unit(range, cb);
 5184|  8.18k|        return check_nonempty(it, range);
 5185|  8.18k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  8.18k|    {
 5191|  8.18k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 8.00k, False: 180]
  ------------------
 5192|  8.00k|            return unexpected_scan_error(
 5193|  8.00k|                scan_error::invalid_scanned_value,
 5194|  8.00k|                "No characters matched in [character set]");
 5195|  8.00k|        }
 5196|       |
 5197|    180|        return it;
 5198|  8.18k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  8.18k|    {
  754|  8.18k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  8.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.47k|              cvref<T> obj = *get<T>(fn);
  745|  8.47k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.47k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.47k|              }
  748|  8.47k|              else {
  749|  8.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.47k|              }
  751|  8.47k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  8.47k|    {
  684|  8.47k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.47k|            return static_cast<T*>(s.m_cp);
  686|  8.47k|        }
  687|  8.47k|        else if constexpr (std::is_object_v<T>) {
  688|  8.47k|            return static_cast<T*>(s.m_p);
  689|  8.47k|        }
  690|  8.47k|        else {
  691|  8.47k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.47k|        }
  693|  8.47k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  8.47k|        const auto cb = [&](SourceCharT ch) {
 5176|  8.47k|            return cb_wrapper.on_ascii_only(ch);
 5177|  8.47k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  8.18k|        {
  667|  8.18k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   306k|    {
 6193|   306k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   306k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   306k|            auto rd = make_reader<T, char_type>();
 6198|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   306k|                return unexpected(e);
 6200|   306k|            }
 6201|       |
 6202|   306k|            return impl(rd, range, value);
 6203|   306k|        }
 6204|   306k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   306k|            auto rd = make_reader<T, char_type>();
 6206|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 302k]
  |  |  ------------------
  ------------------
 6207|  4.00k|                return unexpected(e);
 6208|  4.00k|            }
 6209|       |
 6210|   302k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 302k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   302k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   302k|                return impl(rd, range, value);
 6213|   302k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   306k|        else {
 6221|   306k|            SCN_EXPECT(false);
 6222|   306k|            SCN_UNREACHABLE;
 6223|   306k|        }
 6224|   306k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  1.50M|{
 5809|  1.50M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.50M|        return reader_impl_for_bool<CharT>{};
 5811|  1.50M|    }
 5812|  1.50M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.50M|        return reader_impl_for_char<CharT>{};
 5814|  1.50M|    }
 5815|  1.50M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.50M|        return reader_impl_for_wchar<CharT>{};
 5817|  1.50M|    }
 5818|  1.50M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.50M|        return reader_impl_for_code_point<CharT>{};
 5820|  1.50M|    }
 5821|  1.50M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.50M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.50M|        return reader_impl_for_string<CharT>{};
 5824|  1.50M|    }
 5825|  1.50M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.50M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.50M|        return reader_impl_for_string<CharT>{};
 5828|  1.50M|    }
 5829|  1.50M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.50M|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.50M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.50M|    }
 5833|  1.50M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.50M|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.50M|    }
 5836|  1.50M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.50M|        return reader_impl_for_float<CharT>{};
 5838|  1.50M|    }
 5839|  1.50M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.50M|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.50M|                       !std::is_same_v<T, char32_t> &&
 5842|  1.50M|                       !std::is_same_v<T, bool>) {
 5843|  1.50M|        return reader_impl_for_int<CharT>{};
 5844|  1.50M|    }
 5845|  1.50M|    else {
 5846|  1.50M|        return reader_impl_for_monostate<CharT>{};
 5847|  1.50M|    }
 5848|  1.50M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|   302k|    {
 6124|   302k|        const bool need_skipped_width =
 6125|   302k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 302k]
  |  Branch (6125:33): [True: 0, False: 302k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   302k|        auto it = rng.begin();
 6129|   302k|        std::ptrdiff_t prefix_width = 0;
 6130|   302k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 302k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   302k|        else {
 6138|   302k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   301k|            std::tie(it, prefix_width) = prefix_result;
 6140|   301k|        }
 6141|   301k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   301k|        std::ptrdiff_t value_width = 0;
 6145|   301k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 301k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   301k|        else {
 6161|   301k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.99k, False: 294k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.99k|    }                                                  \
  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   294k|                                             specs, value, loc));
 6163|       |
 6164|   294k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 294k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   294k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   294k|        std::ptrdiff_t postfix_width = 0;
 6173|   294k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 293k, False: 852]
  ------------------
 6174|   293k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   293k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   293k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   293k|                                 value_width));
 6178|   293k|            std::tie(it, postfix_width) = postfix_result;
 6179|   293k|        }
 6180|       |
 6181|   294k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   294k|                                                 value_width, postfix_width);
 6183|   294k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 294k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   294k|        return it;
 6188|   294k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   735k|{
 2993|   735k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   735k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 1.26k, False: 733k]
  ------------------
 2995|  1.26k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.26k|    static_cast<    \
  |  |  929|  1.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  1.26k|        }
 2997|   733k|        else {
 2998|   733k|            dest.assign(source.view());
 2999|   733k|        }
 3000|   735k|    }
 3001|   735k|    else {
 3002|   735k|        return transcode_impl(source.view(), dest);
 3003|   735k|    }
 3004|       |
 3005|   735k|    return {};
 3006|   735k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|   301k|    {
 5277|   301k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   301k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   301k|        return read_impl(range, specs, value);
 5279|   301k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|   301k|    {
 5295|   301k|        SCN_CLANG_PUSH
 5296|   301k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   301k|        switch (m_type) {
 5299|   296k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296k, False: 4.09k]
  ------------------
 5300|   296k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 301k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 301k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.09k, False: 296k]
  ------------------
 5310|  4.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 301k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 301k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 301k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   301k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   301k|        }
 5331|       |
 5332|   301k|        SCN_CLANG_POP
 5333|   301k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   742k|    {
 4820|   742k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   742k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   742k|{
 4752|   742k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   742k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   742k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 7.48k, False: 734k]
  ------------------
 4756|  7.48k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  7.48k|                                     "Invalid encoding in scanned string");
 4758|  7.48k|    }
 4759|   734k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   734k|    static_cast<    \
  |  |  929|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   734k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   734k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   734k|    static_cast<    \
  |  |  929|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   734k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  4.09k|    {
 5048|  4.09k|        auto it = read_source_impl(range, {specs});
 5049|  4.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 90]
  |  |  ------------------
  ------------------
 5050|  4.00k|            return unexpected(it.error());
 5051|  4.00k|        }
 5052|       |
 5053|     90|        return read_string_impl(range, *it, value);
 5054|  4.09k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     90|{
 4752|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 90]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     90|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     90|    static_cast<    \
  |  |  929|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     90|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     90|    return SCN_MOVE(result);
  ------------------
  |  |  928|     90|    static_cast<    \
  |  |  929|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     90|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|   301k|    {
 5277|   301k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   301k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   301k|        return read_impl(range, specs, value);
 5279|   301k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|   301k|    {
 5295|   301k|        SCN_CLANG_PUSH
 5296|   301k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   301k|        switch (m_type) {
 5299|   296k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296k, False: 4.09k]
  ------------------
 5300|   296k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 301k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 301k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.09k, False: 296k]
  ------------------
 5310|  4.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 301k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 301k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 301k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   301k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   301k|        }
 5331|       |
 5332|   301k|        SCN_CLANG_POP
 5333|   301k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   742k|    {
 4820|   742k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   742k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   742k|{
 4752|   742k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   742k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   742k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 7.48k, False: 734k]
  ------------------
 4756|  7.48k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  7.48k|                                     "Invalid encoding in scanned string");
 4758|  7.48k|    }
 4759|   734k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   734k|    static_cast<    \
  |  |  929|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   734k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   734k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   734k|    static_cast<    \
  |  |  929|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   734k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   735k|{
 3012|   735k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   735k|        dest.assign(source.view());
 3014|   735k|    }
 3015|   735k|    else {
 3016|   735k|        return transcode_impl(source.view(), dest);
 3017|   735k|    }
 3018|       |
 3019|   735k|    return {};
 3020|   735k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  4.09k|    {
 5048|  4.09k|        auto it = read_source_impl(range, {specs});
 5049|  4.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 90]
  |  |  ------------------
  ------------------
 5050|  4.00k|            return unexpected(it.error());
 5051|  4.00k|        }
 5052|       |
 5053|     90|        return read_string_impl(range, *it, value);
 5054|  4.09k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     90|{
 4752|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 90]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     90|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     90|    static_cast<    \
  |  |  929|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     90|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     90|    return SCN_MOVE(result);
  ------------------
  |  |  928|     90|    static_cast<    \
  |  |  929|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     90|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|   753k|{
 5809|   753k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   753k|        return reader_impl_for_bool<CharT>{};
 5811|   753k|    }
 5812|   753k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   753k|        return reader_impl_for_char<CharT>{};
 5814|   753k|    }
 5815|   753k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   753k|        return reader_impl_for_wchar<CharT>{};
 5817|   753k|    }
 5818|   753k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   753k|        return reader_impl_for_code_point<CharT>{};
 5820|   753k|    }
 5821|   753k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   753k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   753k|        return reader_impl_for_string<CharT>{};
 5824|   753k|    }
 5825|   753k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   753k|                       std::is_same_v<T, std::wstring>) {
 5827|   753k|        return reader_impl_for_string<CharT>{};
 5828|   753k|    }
 5829|   753k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   753k|                       std::is_same_v<T, wregex_matches>) {
 5831|   753k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   753k|    }
 5833|   753k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   753k|        return reader_impl_for_voidptr<CharT>{};
 5835|   753k|    }
 5836|   753k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   753k|        return reader_impl_for_float<CharT>{};
 5838|   753k|    }
 5839|   753k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   753k|                       !std::is_same_v<T, wchar_t> &&
 5841|   753k|                       !std::is_same_v<T, char32_t> &&
 5842|   753k|                       !std::is_same_v<T, bool>) {
 5843|   753k|        return reader_impl_for_int<CharT>{};
 5844|   753k|    }
 5845|   753k|    else {
 5846|   753k|        return reader_impl_for_monostate<CharT>{};
 5847|   753k|    }
 5848|   753k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|   301k|    {
 5277|   301k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   301k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   301k|        return read_impl(range, specs, value);
 5279|   301k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|   301k|    {
 5295|   301k|        SCN_CLANG_PUSH
 5296|   301k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   301k|        switch (m_type) {
 5299|   296k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296k, False: 4.09k]
  ------------------
 5300|   296k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 301k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 301k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.09k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.09k, False: 296k]
  ------------------
 5310|  4.09k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.09k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 301k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 301k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 301k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   301k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   301k|        }
 5331|       |
 5332|   301k|        SCN_CLANG_POP
 5333|   301k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   742k|    {
 4827|   742k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   742k|                                     value);
 4829|   742k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   742k|{
 4773|   742k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   742k|    auto src = [&]() {
 4776|   742k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   742k|            return make_contiguous_buffer(
 4778|   742k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   742k|        }
 4780|   742k|        else {
 4781|   742k|            return make_contiguous_buffer(
 4782|   742k|                ranges::subrange{range.begin(), result});
 4783|   742k|        }
 4784|   742k|    }();
 4785|   742k|    using src_type = decltype(src);
 4786|       |
 4787|   742k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   742k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   742k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   742k|                                     "Cannot read a string_view from "
 4796|   742k|                                     "this source range (would require "
 4797|   742k|                                     "transcoding)");
 4798|   742k|    }
 4799|   742k|    else {
 4800|   742k|        const auto view = src.view();
 4801|   742k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   742k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 7.48k, False: 734k]
  ------------------
 4804|  7.48k|            return unexpected_scan_error(
 4805|  7.48k|                scan_error::invalid_scanned_value,
 4806|  7.48k|                "Invalid encoding in scanned string_view");
 4807|  7.48k|        }
 4808|       |
 4809|   734k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   734k|    static_cast<    \
  |  |  929|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   742k|    }
 4811|   742k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   742k|    auto src = [&]() {
 4776|   742k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   742k|            return make_contiguous_buffer(
 4778|   742k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   742k|        }
 4780|   742k|        else {
 4781|   742k|            return make_contiguous_buffer(
 4782|   742k|                ranges::subrange{range.begin(), result});
 4783|   742k|        }
 4784|   742k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  4.09k|    {
 5062|  4.09k|        auto it = read_source_impl(range, {specs});
 5063|  4.09k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 90]
  |  |  ------------------
  ------------------
 5064|  4.00k|            return unexpected(it.error());
 5065|  4.00k|        }
 5066|       |
 5067|     90|        return read_string_view_impl(range, *it, value);
 5068|  4.09k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     90|{
 4773|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     90|    auto src = [&]() {
 4776|     90|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     90|            return make_contiguous_buffer(
 4778|     90|                ranges::subrange{range.begin().base(), result.base()});
 4779|     90|        }
 4780|     90|        else {
 4781|     90|            return make_contiguous_buffer(
 4782|     90|                ranges::subrange{range.begin(), result});
 4783|     90|        }
 4784|     90|    }();
 4785|     90|    using src_type = decltype(src);
 4786|       |
 4787|     90|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     90|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     90|                                     "Cannot read a string_view from "
 4796|     90|                                     "this source range (would require "
 4797|     90|                                     "transcoding)");
 4798|     90|    }
 4799|     90|    else {
 4800|     90|        const auto view = src.view();
 4801|     90|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     90|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 90]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     90|        return SCN_MOVE(result);
  ------------------
  |  |  928|     90|    static_cast<    \
  |  |  929|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     90|    }
 4811|     90|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     90|    auto src = [&]() {
 4776|     90|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     90|            return make_contiguous_buffer(
 4778|     90|                ranges::subrange{range.begin().base(), result.base()});
 4779|     90|        }
 4780|     90|        else {
 4781|     90|            return make_contiguous_buffer(
 4782|     90|                ranges::subrange{range.begin(), result});
 4783|     90|        }
 4784|     90|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   743k|{
 2951|   743k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 743k, False: 0]
  ------------------
 2952|   743k|        auto it = read_while_classic_space(range);
 2953|   743k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   743k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28k, False: 742k]
  |  |  ------------------
  ------------------
 2955|  1.28k|            return unexpected(e);
 2956|  1.28k|        }
 2957|       |
 2958|   742k|        return it;
 2959|   743k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   743k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   743k|{
 2117|   743k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   743k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   743k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   743k|        auto buf = make_contiguous_buffer(range);
 2121|   743k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   743k|        return ranges::next(range.begin(),
 2123|   743k|                            ranges::distance(buf.view().begin(), it));
 2124|   743k|    }
 2125|   743k|    else {
 2126|   743k|        auto it = range.begin();
 2127|       |
 2128|   743k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   743k|            auto seg = get_contiguous_beginning(range);
 2130|   743k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   743k|                seg_it != seg.end()) {
 2132|   743k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   743k|            }
 2134|   743k|            ranges::advance(it, seg.size());
 2135|   743k|        }
 2136|       |
 2137|   743k|        return read_while_code_point(
 2138|   743k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   743k|    }
 2140|   743k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   743k|    {
  754|   743k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|  1.69M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.69M|              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.69M|    {
  684|  1.69M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.69M|            return static_cast<T*>(s.m_cp);
  686|  1.69M|        }
  687|  1.69M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.69M|            return static_cast<T*>(s.m_p);
  689|  1.69M|        }
  690|  1.69M|        else {
  691|  1.69M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.69M|        }
  693|  1.69M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.69M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   743k|        {
  662|   743k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   165k|{
 5795|   165k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.13k, False: 164k]
  |  |  ------------------
  ------------------
 5796|  1.13k|        return unexpected(e);
 5797|  1.13k|    }
 5798|       |
 5799|   164k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 164k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   164k|    return skip_classic_whitespace(range);
 5804|   164k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  82.6k|    {
 5871|  82.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  82.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  82.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  82.6k|            auto rd = make_reader<T, char_type>();
 5876|  82.6k|            return impl(rd, range, value);
 5877|  82.6k|        }
 5878|  82.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  82.6k|            auto rd = make_reader<T, char_type>();
 5880|  82.6k|            if (!is_segment_contiguous(range)) {
 5881|  82.6k|                return impl(rd, range, value);
 5882|  82.6k|            }
 5883|  82.6k|            auto crange = get_as_contiguous(range);
 5884|  82.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  82.6k|            return ranges::next(range.begin(),
 5886|  82.6k|                                ranges::distance(crange.begin(), it));
 5887|  82.6k|        }
 5888|  82.6k|        else {
 5889|  82.6k|            SCN_EXPECT(false);
 5890|  82.6k|            SCN_UNREACHABLE;
 5891|  82.6k|        }
 5892|  82.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  82.6k|    {
 5863|  82.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 81.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.11k|    }                                                  \
  |  |  |  | 3671|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  81.4k|                        .transform_error(make_eof_scan_error));
 5865|  81.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  82.6k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  81.4k|    {
 5266|  81.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  81.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  81.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  81.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  82.6k|    {
 5871|  82.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  82.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  82.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  82.6k|            auto rd = make_reader<T, char_type>();
 5876|  82.6k|            return impl(rd, range, value);
 5877|  82.6k|        }
 5878|  82.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  82.6k|            auto rd = make_reader<T, char_type>();
 5880|  82.6k|            if (!is_segment_contiguous(range)) {
 5881|  82.6k|                return impl(rd, range, value);
 5882|  82.6k|            }
 5883|  82.6k|            auto crange = get_as_contiguous(range);
 5884|  82.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  82.6k|            return ranges::next(range.begin(),
 5886|  82.6k|                                ranges::distance(crange.begin(), it));
 5887|  82.6k|        }
 5888|  82.6k|        else {
 5889|  82.6k|            SCN_EXPECT(false);
 5890|  82.6k|            SCN_UNREACHABLE;
 5891|  82.6k|        }
 5892|  82.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  82.6k|    {
 5863|  82.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 81.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.11k|    }                                                  \
  |  |  |  | 3671|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  81.4k|                        .transform_error(make_eof_scan_error));
 5865|  81.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  82.6k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  81.4k|    {
 5266|  81.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  81.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  81.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  81.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  91.8k|{
 5795|  91.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 681, False: 91.2k]
  |  |  ------------------
  ------------------
 5796|    681|        return unexpected(e);
 5797|    681|    }
 5798|       |
 5799|  91.2k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 91.2k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  91.2k|    return skip_classic_whitespace(range);
 5804|  91.2k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  91.8k|    {
 5871|  91.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  91.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  91.8k|            auto rd = make_reader<T, char_type>();
 5876|  91.8k|            return impl(rd, range, value);
 5877|  91.8k|        }
 5878|  91.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  91.8k|            auto rd = make_reader<T, char_type>();
 5880|  91.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 91.8k, False: 0]
  ------------------
 5881|  91.8k|                return impl(rd, range, value);
 5882|  91.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  91.8k|        else {
 5889|  91.8k|            SCN_EXPECT(false);
 5890|  91.8k|            SCN_UNREACHABLE;
 5891|  91.8k|        }
 5892|  91.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  91.8k|    {
 5863|  91.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.25k, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.25k|    }                                                  \
  |  |  |  | 3671|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  90.6k|                        .transform_error(make_eof_scan_error));
 5865|  90.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  91.8k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  90.6k|    {
 5266|  90.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  90.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  90.6k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   127k|    {
 2879|   127k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   355k|    {
 2883|   355k|        return m_current;
 2884|   355k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   227k|    {
 2888|   227k|        return m_range.end();
 2889|   227k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   107k|    {
 2903|   107k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   107k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   107k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 107k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   107k|        }
 2909|   107k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   107k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   119k|    {
 2893|   119k|        return ranges::subrange{begin(), end()};
 2894|   119k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   115k|    {
 6037|   115k|        const bool need_skipped_width =
 6038|   115k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 115k]
  |  Branch (6038:33): [True: 0, False: 115k]
  ------------------
 6039|   115k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   115k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 115k]
  ------------------
 6043|   115k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 115k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   115k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 115k, False: 0]
  |  Branch (6047:56): [True: 110k, False: 5.76k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   110k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 110k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.48k|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   218k|                            make_eof_scan_error));
 6058|       |
 6059|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 108k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   108k|            return result_type{it, 0};
 6067|   218k|        }
 6068|       |
 6069|  5.76k|        return result_type{rng.begin(), 0};
 6070|   115k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   107k|    {
 6079|   107k|        const bool need_skipped_width =
 6080|   107k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 107k]
  |  Branch (6080:33): [True: 0, False: 107k]
  ------------------
 6081|   107k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   107k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 107k]
  ------------------
 6084|   107k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 107k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   107k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 107k, False: 0]
  ------------------
 6093|   107k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.70k, False: 105k]
  ------------------
 6094|   107k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.70k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.70k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.70k]
  ------------------
 6096|  1.70k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   107k|        return result_type{rng.begin(), 0};
 6118|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  59.9k|    {
 6193|  59.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  59.9k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  59.9k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  59.9k|            auto rd = make_reader<T, char_type>();
 6198|  59.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 57.9k]
  |  |  ------------------
  ------------------
 6199|  2.00k|                return unexpected(e);
 6200|  2.00k|            }
 6201|       |
 6202|  57.9k|            return impl(rd, range, value);
 6203|  59.9k|        }
 6204|  59.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  59.9k|            auto rd = make_reader<T, char_type>();
 6206|  59.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  59.9k|                return unexpected(e);
 6208|  59.9k|            }
 6209|       |
 6210|  59.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  59.9k|                specs.width != 0) {
 6212|  59.9k|                return impl(rd, range, value);
 6213|  59.9k|            }
 6214|       |
 6215|  59.9k|            auto crange = get_as_contiguous(range);
 6216|  59.9k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  59.9k|            return ranges::next(range.begin(),
 6218|  59.9k|                                ranges::distance(crange.begin(), it));
 6219|  59.9k|        }
 6220|  59.9k|        else {
 6221|  59.9k|            SCN_EXPECT(false);
 6222|  59.9k|            SCN_UNREACHABLE;
 6223|  59.9k|        }
 6224|  59.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  57.9k|    {
 6124|  57.9k|        const bool need_skipped_width =
 6125|  57.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 57.9k]
  |  Branch (6125:33): [True: 0, False: 57.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  57.9k|        auto it = rng.begin();
 6129|  57.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  57.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 57.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  57.9k|        else {
 6138|  57.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 57.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    740|    }                                                  \
  |  |  |  | 3671|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  57.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  57.2k|        }
 6141|  57.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  57.2k|        std::ptrdiff_t value_width = 0;
 6145|  57.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 57.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  57.2k|        else {
 6161|  57.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  57.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  57.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.26k, False: 53.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.26k|    }                                                  \
  |  | 3671|  57.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  53.9k|                                             specs, value, loc));
 6163|       |
 6164|  53.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 53.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  53.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  53.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  53.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 53.5k, False: 410]
  ------------------
 6174|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  53.5k|                                 value_width));
 6178|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  53.5k|        }
 6180|       |
 6181|  53.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  53.9k|                                                 value_width, postfix_width);
 6183|  53.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 53.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  53.9k|        return it;
 6188|  53.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  59.9k|    {
 6193|  59.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  59.9k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  59.9k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  59.9k|            auto rd = make_reader<T, char_type>();
 6198|  59.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 57.9k]
  |  |  ------------------
  ------------------
 6199|  2.00k|                return unexpected(e);
 6200|  2.00k|            }
 6201|       |
 6202|  57.9k|            return impl(rd, range, value);
 6203|  59.9k|        }
 6204|  59.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  59.9k|            auto rd = make_reader<T, char_type>();
 6206|  59.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  59.9k|                return unexpected(e);
 6208|  59.9k|            }
 6209|       |
 6210|  59.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  59.9k|                specs.width != 0) {
 6212|  59.9k|                return impl(rd, range, value);
 6213|  59.9k|            }
 6214|       |
 6215|  59.9k|            auto crange = get_as_contiguous(range);
 6216|  59.9k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  59.9k|            return ranges::next(range.begin(),
 6218|  59.9k|                                ranges::distance(crange.begin(), it));
 6219|  59.9k|        }
 6220|  59.9k|        else {
 6221|  59.9k|            SCN_EXPECT(false);
 6222|  59.9k|            SCN_UNREACHABLE;
 6223|  59.9k|        }
 6224|  59.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  57.9k|    {
 6124|  57.9k|        const bool need_skipped_width =
 6125|  57.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 57.9k]
  |  Branch (6125:33): [True: 0, False: 57.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  57.9k|        auto it = rng.begin();
 6129|  57.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  57.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 57.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  57.9k|        else {
 6138|  57.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 57.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    740|    }                                                  \
  |  |  |  | 3671|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  57.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  57.2k|        }
 6141|  57.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  57.2k|        std::ptrdiff_t value_width = 0;
 6145|  57.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 57.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  57.2k|        else {
 6161|  57.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  57.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  57.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.26k, False: 53.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.26k|    }                                                  \
  |  | 3671|  57.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  53.9k|                                             specs, value, loc));
 6163|       |
 6164|  53.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 53.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  53.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  53.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  53.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 53.5k, False: 410]
  ------------------
 6174|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  53.5k|                                 value_width));
 6178|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  53.5k|        }
 6180|       |
 6181|  53.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  53.9k|                                                 value_width, postfix_width);
 6183|  53.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 53.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  53.9k|        return it;
 6188|  53.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   893k|{
 5795|   893k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.47k, False: 891k]
  |  |  ------------------
  ------------------
 5796|  2.47k|        return unexpected(e);
 5797|  2.47k|    }
 5798|       |
 5799|   891k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 891k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   891k|    return skip_classic_whitespace(range);
 5804|   891k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   446k|    {
 5871|   446k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   446k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   446k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   446k|            auto rd = make_reader<T, char_type>();
 5876|   446k|            return impl(rd, range, value);
 5877|   446k|        }
 5878|   446k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   446k|            auto rd = make_reader<T, char_type>();
 5880|   446k|            if (!is_segment_contiguous(range)) {
 5881|   446k|                return impl(rd, range, value);
 5882|   446k|            }
 5883|   446k|            auto crange = get_as_contiguous(range);
 5884|   446k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   446k|            return ranges::next(range.begin(),
 5886|   446k|                                ranges::distance(crange.begin(), it));
 5887|   446k|        }
 5888|   446k|        else {
 5889|   446k|            SCN_EXPECT(false);
 5890|   446k|            SCN_UNREACHABLE;
 5891|   446k|        }
 5892|   446k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   446k|    {
 5863|   446k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   446k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   446k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   446k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   446k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   445k|                        .transform_error(make_eof_scan_error));
 5865|   445k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   446k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|   445k|    {
 5266|   445k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   445k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   445k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   445k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   446k|    {
 5871|   446k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   446k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   446k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   446k|            auto rd = make_reader<T, char_type>();
 5876|   446k|            return impl(rd, range, value);
 5877|   446k|        }
 5878|   446k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   446k|            auto rd = make_reader<T, char_type>();
 5880|   446k|            if (!is_segment_contiguous(range)) {
 5881|   446k|                return impl(rd, range, value);
 5882|   446k|            }
 5883|   446k|            auto crange = get_as_contiguous(range);
 5884|   446k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   446k|            return ranges::next(range.begin(),
 5886|   446k|                                ranges::distance(crange.begin(), it));
 5887|   446k|        }
 5888|   446k|        else {
 5889|   446k|            SCN_EXPECT(false);
 5890|   446k|            SCN_UNREACHABLE;
 5891|   446k|        }
 5892|   446k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   446k|    {
 5863|   446k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   446k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   446k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   446k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   446k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   445k|                        .transform_error(make_eof_scan_error));
 5865|   445k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   446k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|   445k|    {
 5266|   445k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   445k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   445k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   445k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   628k|    {
 2879|   628k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.82M|    {
 2883|  1.82M|        return m_current;
 2884|  1.82M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.20M|    {
 2888|  1.20M|        return m_range.end();
 2889|  1.20M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   588k|    {
 2903|   588k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   588k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   588k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   588k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   588k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 588k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   588k|        }
 2909|   588k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   588k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   612k|    {
 2893|   612k|        return ranges::subrange{begin(), end()};
 2894|   612k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   604k|    {
 6037|   604k|        const bool need_skipped_width =
 6038|   604k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 604k]
  |  Branch (6038:33): [True: 0, False: 604k]
  ------------------
 6039|   604k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   604k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 604k]
  ------------------
 6043|   604k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 604k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   604k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 604k, False: 0]
  |  Branch (6047:56): [True: 595k, False: 8.18k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   595k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 595k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.18M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 593k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.02k|    }                                                  \
  |  |  |  | 3671|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.18M|                            make_eof_scan_error));
 6058|       |
 6059|  1.18M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 593k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   593k|            return result_type{it, 0};
 6067|  1.18M|        }
 6068|       |
 6069|  8.18k|        return result_type{rng.begin(), 0};
 6070|   604k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   586k|    {
 6079|   586k|        const bool need_skipped_width =
 6080|   586k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 586k]
  |  Branch (6080:33): [True: 0, False: 586k]
  ------------------
 6081|   586k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   586k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 586k]
  ------------------
 6084|   586k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 586k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   586k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 586k, False: 0]
  ------------------
 6093|   586k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 128, False: 586k]
  ------------------
 6094|   586k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 128]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    128|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 128]
  ------------------
 6096|    128|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   586k|        return result_type{rng.begin(), 0};
 6118|   586k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   306k|    {
 6193|   306k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   306k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   306k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   306k|            auto rd = make_reader<T, char_type>();
 6198|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 302k]
  |  |  ------------------
  ------------------
 6199|  4.00k|                return unexpected(e);
 6200|  4.00k|            }
 6201|       |
 6202|   302k|            return impl(rd, range, value);
 6203|   306k|        }
 6204|   306k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   306k|            auto rd = make_reader<T, char_type>();
 6206|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   306k|                return unexpected(e);
 6208|   306k|            }
 6209|       |
 6210|   306k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   306k|                specs.width != 0) {
 6212|   306k|                return impl(rd, range, value);
 6213|   306k|            }
 6214|       |
 6215|   306k|            auto crange = get_as_contiguous(range);
 6216|   306k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   306k|            return ranges::next(range.begin(),
 6218|   306k|                                ranges::distance(crange.begin(), it));
 6219|   306k|        }
 6220|   306k|        else {
 6221|   306k|            SCN_EXPECT(false);
 6222|   306k|            SCN_UNREACHABLE;
 6223|   306k|        }
 6224|   306k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|   302k|    {
 6124|   302k|        const bool need_skipped_width =
 6125|   302k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 302k]
  |  Branch (6125:33): [True: 0, False: 302k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   302k|        auto it = rng.begin();
 6129|   302k|        std::ptrdiff_t prefix_width = 0;
 6130|   302k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 302k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   302k|        else {
 6138|   302k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   301k|            std::tie(it, prefix_width) = prefix_result;
 6140|   301k|        }
 6141|   301k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   301k|        std::ptrdiff_t value_width = 0;
 6145|   301k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 301k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   301k|        else {
 6161|   301k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.99k, False: 294k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.99k|    }                                                  \
  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   294k|                                             specs, value, loc));
 6163|       |
 6164|   294k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 294k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   294k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   294k|        std::ptrdiff_t postfix_width = 0;
 6173|   294k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 293k, False: 852]
  ------------------
 6174|   293k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   293k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   293k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   293k|                                 value_width));
 6178|   293k|            std::tie(it, postfix_width) = postfix_result;
 6179|   293k|        }
 6180|       |
 6181|   294k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   294k|                                                 value_width, postfix_width);
 6183|   294k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 294k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   294k|        return it;
 6188|   294k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   306k|    {
 6193|   306k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   306k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   306k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   306k|            auto rd = make_reader<T, char_type>();
 6198|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 302k]
  |  |  ------------------
  ------------------
 6199|  4.00k|                return unexpected(e);
 6200|  4.00k|            }
 6201|       |
 6202|   302k|            return impl(rd, range, value);
 6203|   306k|        }
 6204|   306k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   306k|            auto rd = make_reader<T, char_type>();
 6206|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   306k|                return unexpected(e);
 6208|   306k|            }
 6209|       |
 6210|   306k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   306k|                specs.width != 0) {
 6212|   306k|                return impl(rd, range, value);
 6213|   306k|            }
 6214|       |
 6215|   306k|            auto crange = get_as_contiguous(range);
 6216|   306k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   306k|            return ranges::next(range.begin(),
 6218|   306k|                                ranges::distance(crange.begin(), it));
 6219|   306k|        }
 6220|   306k|        else {
 6221|   306k|            SCN_EXPECT(false);
 6222|   306k|            SCN_UNREACHABLE;
 6223|   306k|        }
 6224|   306k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|   302k|    {
 6124|   302k|        const bool need_skipped_width =
 6125|   302k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 302k]
  |  Branch (6125:33): [True: 0, False: 302k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   302k|        auto it = rng.begin();
 6129|   302k|        std::ptrdiff_t prefix_width = 0;
 6130|   302k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 302k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   302k|        else {
 6138|   302k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   301k|            std::tie(it, prefix_width) = prefix_result;
 6140|   301k|        }
 6141|   301k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   301k|        std::ptrdiff_t value_width = 0;
 6145|   301k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 301k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   301k|        else {
 6161|   301k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.99k, False: 294k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.99k|    }                                                  \
  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   294k|                                             specs, value, loc));
 6163|       |
 6164|   294k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 294k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   294k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   294k|        std::ptrdiff_t postfix_width = 0;
 6173|   294k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 293k, False: 852]
  ------------------
 6174|   293k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   293k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   293k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   293k|                                 value_width));
 6178|   293k|            std::tie(it, postfix_width) = postfix_result;
 6179|   293k|        }
 6180|       |
 6181|   294k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   294k|                                                 value_width, postfix_width);
 6183|   294k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 294k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   294k|        return it;
 6188|   294k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   446k|{
 5795|   446k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.23k, False: 445k]
  |  |  ------------------
  ------------------
 5796|  1.23k|        return unexpected(e);
 5797|  1.23k|    }
 5798|       |
 5799|   445k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 445k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   445k|    return skip_classic_whitespace(range);
 5804|   445k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|   446k|    {
 5871|   446k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   446k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   446k|            auto rd = make_reader<T, char_type>();
 5876|   446k|            return impl(rd, range, value);
 5877|   446k|        }
 5878|   446k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   446k|            auto rd = make_reader<T, char_type>();
 5880|   446k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 446k, False: 0]
  ------------------
 5881|   446k|                return impl(rd, range, value);
 5882|   446k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   446k|        else {
 5889|   446k|            SCN_EXPECT(false);
 5890|   446k|            SCN_UNREACHABLE;
 5891|   446k|        }
 5892|   446k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   446k|    {
 5863|   446k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   446k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   446k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   446k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   446k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   445k|                        .transform_error(make_eof_scan_error));
 5865|   445k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   446k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   445k|    {
 5266|   445k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   445k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   445k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   445k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.00k|{
   52|  1.00k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.00k|    string_buffer.resize(size);
   56|  1.00k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.00k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.00k|    const auto wsv_reinterpret_size =
   61|  1.00k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 183, False: 818]
  ------------------
   62|  1.00k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.00k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.00k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.00k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.00k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.00k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.00k|{
  122|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.00k|    buf.resize(sizeof...(Args));
  125|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.00k|    return buf;
  127|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.00k|{
  108|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.00k|        return format_string_view_buffer;
  110|  1.00k|    }
  111|  1.00k|    else {
  112|  1.00k|        return wformat_string_view_buffer;
  113|  1.00k|    }
  114|  1.00k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.00k|{
  185|  1.00k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.00k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.00k|                                   format_strings);
  188|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  59.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.5k|            auto result = scn::scan<T>(
  139|  59.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.5k|                scn::runtime_format(f));
  141|  59.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 53.5k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  53.5k|            it = result->begin();
  145|  53.5k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  59.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.5k|            auto result = scn::scan<T>(
  154|  59.5k|                global_locale,
  155|  59.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.5k|                scn::runtime_format(f));
  157|  59.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 53.5k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  53.5k|            it = result->begin();
  161|  53.5k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  27.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.5k|            auto result = scn::scan_value<T>(
  170|  27.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 26.5k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  26.5k|            it = result->begin();
  175|  26.5k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  59.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.5k|            auto result = scn::scan<T>(
  139|  59.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.5k|                scn::runtime_format(f));
  141|  59.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 53.5k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  53.5k|            it = result->begin();
  145|  53.5k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  59.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.5k|            auto result = scn::scan<T>(
  154|  59.5k|                global_locale,
  155|  59.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.5k|                scn::runtime_format(f));
  157|  59.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 53.5k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  53.5k|            it = result->begin();
  161|  53.5k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  27.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.5k|            auto result = scn::scan_value<T>(
  170|  27.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 26.5k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  26.5k|            it = result->begin();
  175|  26.5k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  65.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  65.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  65.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  65.6k|            auto result = scn::scan<T>(
  139|  65.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  65.6k|                scn::runtime_format(f));
  141|  65.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 59.6k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  59.6k|            it = result->begin();
  145|  59.6k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  65.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  65.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  65.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  65.6k|            auto result = scn::scan<T>(
  154|  65.6k|                global_locale,
  155|  65.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  65.6k|                scn::runtime_format(f));
  157|  65.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 59.6k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  59.6k|            it = result->begin();
  161|  59.6k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 29.6k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  29.6k|            it = result->begin();
  175|  29.6k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.00k|{
   90|  1.00k|    using char_type = ranges::range_value_t<Source>;
   91|  1.00k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.00k|    deque.clear();
   93|  1.00k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.00k|              std::back_inserter(deque));
   95|  1.00k|    return deque;
   96|  1.00k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.00k|{
   79|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.00k|        return noncontiguous_buffer;
   81|  1.00k|    }
   82|  1.00k|    else {
   83|  1.00k|        return wnoncontiguous_buffer;
   84|  1.00k|    }
   85|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.00k|{
  122|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.00k|    buf.resize(sizeof...(Args));
  125|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.00k|    return buf;
  127|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.00k|{
  108|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.00k|        return format_string_view_buffer;
  110|  1.00k|    }
  111|  1.00k|    else {
  112|  1.00k|        return wformat_string_view_buffer;
  113|  1.00k|    }
  114|  1.00k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.00k|{
  185|  2.00k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.00k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.00k|                                   format_strings);
  188|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   306k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   306k|            auto result = scn::scan<T>(
  139|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   306k|                scn::runtime_format(f));
  141|   306k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 294k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   294k|            it = result->begin();
  145|   294k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   306k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   306k|            auto result = scn::scan<T>(
  154|   306k|                global_locale,
  155|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   306k|                scn::runtime_format(f));
  157|   306k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 294k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   294k|            it = result->begin();
  161|   294k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   148k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   148k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   148k|            auto result = scn::scan_value<T>(
  170|   148k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   148k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 146k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   146k|            it = result->begin();
  175|   146k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   306k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   306k|            auto result = scn::scan<T>(
  139|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   306k|                scn::runtime_format(f));
  141|   306k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 294k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   294k|            it = result->begin();
  145|   294k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   306k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   306k|            auto result = scn::scan<T>(
  154|   306k|                global_locale,
  155|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   306k|                scn::runtime_format(f));
  157|   306k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 294k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   294k|            it = result->begin();
  161|   294k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   148k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   148k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   148k|            auto result = scn::scan_value<T>(
  170|   148k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   148k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 146k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   146k|            it = result->begin();
  175|   146k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   306k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   306k|            auto result = scn::scan<T>(
  139|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   306k|                scn::runtime_format(f));
  141|   306k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 294k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   294k|            it = result->begin();
  145|   294k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   306k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   306k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   306k|            auto result = scn::scan<T>(
  154|   306k|                global_locale,
  155|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   306k|                scn::runtime_format(f));
  157|   306k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 294k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   294k|            it = result->begin();
  161|   294k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   148k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   148k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   148k|            auto result = scn::scan_value<T>(
  170|   148k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   148k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 146k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   146k|            it = result->begin();
  175|   146k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.00k|{
   90|  2.00k|    using char_type = ranges::range_value_t<Source>;
   91|  2.00k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.00k|    deque.clear();
   93|  2.00k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.00k|              std::back_inserter(deque));
   95|  2.00k|    return deque;
   96|  2.00k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.00k|{
   79|  2.00k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.00k|        return noncontiguous_buffer;
   81|  2.00k|    }
   82|  2.00k|    else {
   83|  2.00k|        return wnoncontiguous_buffer;
   84|  2.00k|    }
   85|  2.00k|}

LLVMFuzzerTestOneInput:
   57|  1.00k|{
   58|  1.00k|    scn::fuzz::run(data, size);
   59|  1.00k|    return 0;
   60|  1.00k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.00k|{
   36|  1.00k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.00k]
  |  Branch (36:35): [True: 0, False: 1.00k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.00k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.00k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.00k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.00k|    do_basic_run(sv, f);
   45|       |
   46|  1.00k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.00k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.00k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.00k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.00k, False: 0]
  ------------------
   50|  1.00k|        do_basic_run(wsv_transcode, wf);
   51|  1.00k|    }
   52|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|  1.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.00k|            source, format_strings);
   30|  1.00k|    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|  1.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.00k|            source, format_strings);
   30|  1.00k|    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.00k|{
   25|  2.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.00k|                                                           format_strings);
   27|  2.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.00k|            source, format_strings);
   30|  2.00k|    }
   31|  2.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.00k|{
   25|  2.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.00k|                                                           format_strings);
   27|  2.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.00k|            source, format_strings);
   30|  2.00k|    }
   31|  2.00k|}

