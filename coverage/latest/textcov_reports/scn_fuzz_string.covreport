_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  4.01M|{
 4068|  4.01M|    if constexpr (sizeof(U) == 1) {
 4069|  4.01M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  4.01M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  4.01M|{
 4032|  4.01M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  4.01M|    SCN_GCC_COMPAT_PUSH
 4035|  4.01M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  4.01M|    constexpr char lengths[] =
 4037|  4.01M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  4.01M|        "\1\1\1\1\1\1\1\1"
 4039|  4.01M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  4.01M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  4.01M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  4.01M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  4.01M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  4.01M|    SCN_GCC_COMPAT_POP
 4046|  4.01M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  3.86M|{
 4274|  3.86M|    if constexpr (sizeof(CharT) == 1) {
 4275|  3.86M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  3.86M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  3.86M|{
 4087|  3.86M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  3.86M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  3.86M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  3.86M|    };
 4092|       |
 4093|  3.86M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 3.48M, False: 381k]
  ------------------
 4094|  3.48M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 298, False: 3.48M]
  ------------------
 4095|    298|            SCN_UNLIKELY_ATTR
 4096|    298|            return invalid_code_point;
 4097|    298|        }
 4098|  3.48M|        return static_cast<char32_t>(input[0]);
 4099|  3.48M|    }
 4100|       |
 4101|   381k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 121k, False: 260k]
  ------------------
 4102|   121k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 144, False: 120k]
  ------------------
 4103|    144|            SCN_UNLIKELY_ATTR
 4104|    144|            return invalid_code_point;
 4105|    144|        }
 4106|   120k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 10.7k, False: 110k]
  ------------------
 4107|  10.7k|            SCN_UNLIKELY_ATTR
 4108|  10.7k|            return invalid_code_point;
 4109|  10.7k|        }
 4110|       |
 4111|   110k|        char32_t cp{};
 4112|   110k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   110k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   110k|        return cp;
 4115|   120k|    }
 4116|       |
 4117|   260k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 251k, False: 8.76k]
  ------------------
 4118|   251k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 30, False: 251k]
  ------------------
 4119|     30|            SCN_UNLIKELY_ATTR
 4120|     30|            return invalid_code_point;
 4121|     30|        }
 4122|   251k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 3.93k, False: 247k]
  ------------------
 4123|   251k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 812, False: 247k]
  ------------------
 4124|  4.74k|            SCN_UNLIKELY_ATTR
 4125|  4.74k|            return invalid_code_point;
 4126|  4.74k|        }
 4127|       |
 4128|   247k|        char32_t cp{};
 4129|   247k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   247k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   247k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   247k|        return cp;
 4133|   251k|    }
 4134|       |
 4135|  8.76k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 8.76k, False: 0]
  ------------------
 4136|  8.76k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 8.76k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  8.76k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 1.66k, False: 7.10k]
  ------------------
 4141|  1.66k|            SCN_UNLIKELY_ATTR
 4142|  1.66k|            return invalid_code_point;
 4143|  1.66k|        }
 4144|  7.10k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.21k, False: 4.88k]
  ------------------
 4145|  7.10k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 132, False: 4.75k]
  ------------------
 4146|  7.10k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 115, False: 4.63k]
  ------------------
 4147|  2.46k|            SCN_UNLIKELY_ATTR
 4148|  2.46k|            return invalid_code_point;
 4149|  2.46k|        }
 4150|       |
 4151|  4.63k|        char32_t cp{};
 4152|  4.63k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  4.63k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  4.63k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  4.63k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  4.63k|        return cp;
 4157|  7.10k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   637k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   637k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   637k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  3.43M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  3.43M|    else {
 3966|  3.43M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  3.43M|                                       to_address(first), to_address(last)))};
 3968|  3.43M|    }
 3969|  3.43M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  10.6M|{
  316|  10.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  10.6M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  12.0M|{
  294|  12.0M|    return p;
  295|  12.0M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.74M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.74M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.74M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.74M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.74M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  24.6k|    {
 2869|  24.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  24.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  24.6k|    {
 2850|  24.6k|        return decay_copy(t.begin());
 2851|  24.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  2.18M|{
 2094|  2.18M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.18M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   464k|    {
 2926|   464k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   464k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   464k|    {
 2908|   464k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   464k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  47.1k|{
 9705|  47.1k|    auto result = make_scan_result<Source, Args...>();
 9706|  47.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  47.1k|                                   make_scan_args(result->values())));
 9708|  47.1k|    return result;
 9709|  47.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9660|   115k|{
 9661|   115k|    return scan_result_type<Source, Args...>();
 9662|   115k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   115k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   115k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   115k|    {
  613|   115k|        construct();
  614|   115k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   115k|    {
  694|   115k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   115k|        m_has_value = true;
  696|   115k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   115k|{
  396|   115k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   115k|        T(std::forward<Args>(args)...);
  398|   115k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|   115k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   231k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   231k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6384|   254k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   555k|    {
  718|   555k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   555k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   555k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   115k|{
 9646|   115k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.8k, False: 103k]
  |  |  ------------------
  ------------------
 9647|  11.8k|        out = unexpected(in.error());
 9648|  11.8k|    }
 9649|   103k|    else {
 9650|   103k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   103k|    }
 9652|   115k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   231k|    {
 1740|   231k|        return has_value();
 1741|   231k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   463k|    {
  490|   463k|        return m_has_value;
  491|   463k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  23.7k|    {
 1746|  23.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.7k|        return this->get_unexpected().error();
 1748|  23.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.7k|    {
  473|  23.7k|        return m_unexpected;
  474|  23.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.02M|    {
  365|  1.02M|        return m_unexpected;
  366|  1.02M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   448k|        : m_unexpected(std::forward<Err>(e))
  350|   448k|    {
  351|   448k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   448k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   448k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.8k|        : m_has_value(false)
  637|  11.8k|    {
  638|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  71.2k|{
  396|  71.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  71.2k|        T(std::forward<Args>(args)...);
  398|  71.2k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   588k|        : m_unexpected(std::forward<Args>(args)...)
  359|   588k|    {
  360|   588k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   588k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   588k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  59.4k|    {
  730|  59.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  59.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  59.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.8k|    {
 1316|  11.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.8k|    {
  903|  11.8k|        assign_common(std::move(other));
  904|  11.8k|        return *this;
  905|  11.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.8k|    {
  950|  11.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.8k, False: 0]
  ------------------
  951|  11.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   590k|    {
  687|   590k|        return m_has_value;
  688|   590k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   323k|    {
  653|   323k|        return *value_ptr();
  654|   323k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.8k|    {
 1046|  11.8k|        this->destroy_value();
 1047|  11.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   115k|    {
  708|   115k|        scn::detail::destroy_at(value_ptr());
  709|   115k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   115k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   115k|    else {
  408|   115k|        p->~T();
  409|   115k|    }
  410|   115k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|   115k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   106k|{
  396|   106k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   106k|        T(std::forward<Args>(args)...);
  398|   106k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.8k|    {
  678|  11.8k|        return std::move(*unexpected_ptr());
  679|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.7k|    {
  712|  23.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   142k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   142k|    else {
  408|   142k|        p->~T();
  409|   142k|    }
  410|   142k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   207k|    {
 6485|   207k|        m_range = std::forward<Other>(r);
 6486|   207k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   207k|    {
 1795|   207k|        return value();
 1796|   207k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   207k|    {
 1769|   207k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   207k|        return this->get_value();
 1771|   207k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   207k|    {
  456|   207k|        return m_value;
  457|   207k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  94.2k|{
 9485|  94.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  94.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  94.2k|{
 9422|  94.2k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  94.2k|    auto result = vscan_impl(buffer, format, args);
 9425|  94.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 83.2k]
  |  |  ------------------
  ------------------
 9426|  10.9k|        return unexpected(result.error());
 9427|  10.9k|    }
 9428|  83.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  94.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   231k|{
 5381|   231k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   231k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   231k|                  "\n"
 5385|   231k|                  "Unsupported range type given as input to a scanning "
 5386|   231k|                  "function.\n"
 5387|   231k|                  "A range needs to have a character type (value type) "
 5388|   231k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   231k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   231k|                  "to be included.\n"
 5391|   231k|                  "See the scnlib documentation for more details.");
 5392|   231k|    static_assert(
 5393|   231k|        !std::is_same_v<T, custom_char_traits>,
 5394|   231k|        "\n"
 5395|   231k|        "Unsupported range type given as input to a scanning "
 5396|   231k|        "function.\n"
 5397|   231k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   231k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   231k|        "not supported.");
 5400|   231k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   231k|                  "\n"
 5402|   231k|                  "Unsupported range type given as input to a scanning "
 5403|   231k|                  "function.\n"
 5404|   231k|                  "file_marker_found cannot be used as an "
 5405|   231k|                  "source range type to scn::scan.\n"
 5406|   231k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   231k|                  "and do not provide an explicit source range, "
 5408|   231k|                  "or use scn::scan with a FILE* directly.");
 5409|   231k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   231k|                  "\n"
 5411|   231k|                  "Unsupported range type given as input to a scanning "
 5412|   231k|                  "function.\n"
 5413|   231k|                  "In order to be scannable, a range needs to satisfy "
 5414|   231k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   231k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   231k|                  "\n"
 5417|   231k|                  "Unsupported range type given as input to a scanning "
 5418|   231k|                  "function.\n"
 5419|   231k|                  "A range needs to model forward_range and have a valid "
 5420|   231k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   231k|                  "Examples of scannable ranges are std::string, "
 5422|   231k|                  "std::string_view, "
 5423|   231k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   231k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   231k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   231k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   231k|{
 5320|   231k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   231k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   231k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   231k|    {
 3000|   231k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   231k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   231k|    {
 2981|   231k|        return t.data();
 2982|   231k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   231k|    {
 3383|   231k|        return detail::to_address(ranges::begin(derived()));
 3384|   231k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.33M|{
  316|  1.33M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.33M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   439k|    {
 2869|   439k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   439k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   439k|    {
 2850|   439k|        return decay_copy(t.begin());
 2851|   439k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  2.76M|    {
 3480|  2.76M|        return m_iterator;
 3481|  2.76M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   231k|    {
 3339|   231k|        return static_cast<const D&>(*this);
 3340|   231k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   231k|    {
 3075|   231k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   231k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   231k|    {
 3041|   231k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   231k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.54M|{
 2094|  2.54M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.54M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   973k|    {
 3496|   973k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   973k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  3.63M|    {
 1740|  3.63M|        return has_value();
 1741|  3.63M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.24M|    {
  490|  7.24M|        return m_has_value;
  491|  7.24M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   106k|    {
 1746|   106k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   106k|        return this->get_unexpected().error();
 1748|   106k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   106k|    {
  473|   106k|        return m_unexpected;
  474|   106k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  23.7k|        : base(unexpect, std::move(e.error())),
 1616|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.7k|    {
 1618|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  23.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.7k|          m_has_value(false)
  451|  23.7k|    {
  452|  23.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   231k|    {
 1316|   231k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   207k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   207k|                      ranges::iterator_t<SourceRange>>) {
 6717|   207k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   207k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.05M|    {
 2869|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.05M|    {
 2850|  1.05M|        return decay_copy(t.begin());
 2851|  1.05M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   207k|{
 6702|   207k|    return ranges::end(source);
 6703|   207k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   207k|    {
 2926|   207k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   207k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   207k|    {
 2908|   207k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   207k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.33M|    {
 3484|  1.33M|        return m_sentinel;
 3485|  1.33M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  3.49M|    {
 1795|  3.49M|        return value();
 1796|  3.49M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  3.49M|    {
 1769|  3.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.49M|        return this->get_value();
 1771|  3.49M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.49M|    {
  456|  3.49M|        return m_value;
  457|  3.49M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   207k|        : base(std::in_place, std::forward<U>(val)),
 1570|   207k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   207k|    {
 1572|   207k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   207k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   207k|    {
  442|   207k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8782|  94.2k|    {
 8783|  94.2k|        return m_str;
 8784|  94.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   206k|{
 6115|   206k|    detail::check_scan_arg_types<Args...>();
 6116|   206k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   206k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5829|   254k|{
 5830|   254k|    constexpr bool default_constructible_constraint =
 5831|   254k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   254k|    static_assert(default_constructible_constraint,
 5833|   254k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   254k|    constexpr bool destructible_constraint =
 5836|   254k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   254k|    static_assert(destructible_constraint,
 5838|   254k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   254k|    constexpr bool non_reference_constraint =
 5841|   254k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   254k|    static_assert(non_reference_constraint,
 5843|   254k|                  "Scan argument types must not be references");
 5844|       |
 5845|   254k|    constexpr bool movable_constraint =
 5846|   254k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   254k|    static_assert(movable_constraint,
 5848|   254k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   254k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   254k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   254k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|   206k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   206k|    {
 6092|   206k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   206k|    {
 6100|   206k|        return {detail::make_arg<
 6101|   206k|            kind, Context,
 6102|   206k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   206k|                                 typename Context::char_type>::value>(args)...};
 6104|   206k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|   206k|{
 5880|   206k|    return make_value<Context>(value).ref_value;
 5881|   206k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|   254k|{
 5815|   254k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   254k|                                  needs_context_tag>) {
 5819|   254k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   254k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|   254k|    {                                                                        \
 5654|   254k|        return val;                                                          \
 5655|   254k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5783|   254k|{
 5784|   254k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   254k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   254k|    constexpr bool scannable_char =
 5788|   254k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   254k|    static_assert(scannable_char,
 5790|   254k|                  "Cannot scan an argument of an unsupported character "
 5791|   254k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   254k|    constexpr bool scannable_const =
 5794|   254k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   254k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   254k|    constexpr bool scannable_disabled =
 5798|   254k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   254k|    static_assert(scannable_disabled,
 5800|   254k|                  "Cannot scan an argument that has been disabled by "
 5801|   254k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   254k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   254k|    static_assert(
 5805|   254k|        scannable,
 5806|   254k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   254k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   254k|    return arg_value{arg};
 5810|   254k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5596|   254k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   254k|    {
 5598|   254k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6393|   206k|    {
 6394|   206k|        return m_values;
 6395|   206k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   206k|        : basic_scan_args(store.desc, store.args.data())
 6141|   206k|    {
 6142|   206k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|   300k|        : m_desc(desc), m_builtin_values(data)
 6193|   300k|    {
 6194|   300k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.59M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.59M|    static_cast<    \
  |  |  935|  1.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.59M|    static_cast<    \
  |  |  935|  1.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.59M|    {
 3466|  1.59M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   300k|{
 8444|   300k|    return s;
 8445|   300k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   300k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  94.2k|        : m_str(r.str)
 8778|  94.2k|    {
 8779|  94.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   115k|    {
 1740|   115k|        return has_value();
 1741|   115k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   323k|    {
 1815|   323k|        return &value();
 1816|   323k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   323k|    {
 1769|   323k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   323k|        return this->get_value();
 1771|   323k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   207k|    {
 6474|   207k|        return ranges::begin(m_range);
 6475|   207k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   127k|    {
  643|   127k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 103k, False: 23.7k]
  ------------------
  644|   103k|            destroy_value();
  645|   103k|        }
  646|  23.7k|        else {
  647|  23.7k|            destroy_unexpected();
  648|  23.7k|        }
  649|   127k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  47.1k|{
 9774|  47.1k|    auto result = make_scan_result<Source, Args...>();
 9775|  47.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  47.1k|                                   make_scan_args(result->values())));
 9777|  47.1k|    return result;
 9778|  47.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  94.2k|{
 9503|  94.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  94.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  94.2k|{
 9438|  94.2k|#if !SCN_DISABLE_LOCALE
 9439|  94.2k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  94.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  94.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  94.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  94.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 83.2k]
  |  |  ------------------
  ------------------
 9446|  10.9k|        return unexpected(result.error());
 9447|  10.9k|    }
 9448|  83.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  94.2k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|  21.5k|{
 9815|  21.5k|    auto result = make_scan_result<Source, T>();
 9816|  21.5k|    fill_scan_result(
 9817|  21.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  21.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  21.5k|    return result;
 9820|  21.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  43.1k|{
 9516|  43.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  43.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  43.1k|{
 9462|  43.1k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  43.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  43.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 41.2k]
  |  |  ------------------
  ------------------
 9466|  1.82k|        return unexpected(result.error());
 9467|  1.82k|    }
 9468|  41.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  43.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  47.5k|{
 5865|  47.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  47.5k|    basic_scan_arg<Context> arg;
 5868|  47.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  47.5k|    arg.m_value = make_value<Context>(value);
 5870|  47.5k|    return arg;
 5871|  47.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   369k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  2.71M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  47.5k|    {
 6416|  47.5k|        return std::get<0>(m_values);
 6417|  47.5k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9704|  47.1k|{
 9705|  47.1k|    auto result = make_scan_result<Source, Args...>();
 9706|  47.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  47.1k|                                   make_scan_args(result->values())));
 9708|  47.1k|    return result;
 9709|  47.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9660|   115k|{
 9661|   115k|    return scan_result_type<Source, Args...>();
 9662|   115k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   115k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   115k|        : m_value(T{}), m_has_value(true)
  427|   115k|    {
  428|   115k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6610|   115k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6384|   115k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   115k|{
 9646|   115k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.8k, False: 103k]
  |  |  ------------------
  ------------------
 9647|  11.8k|        out = unexpected(in.error());
 9648|  11.8k|    }
 9649|   103k|    else {
 9650|   103k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   103k|    }
 9652|   115k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  11.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.8k|          m_has_value(false)
  451|  11.8k|    {
  452|  11.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.8k|    {
 1316|  11.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  11.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  11.8k|    {
  903|  11.8k|        assign_common(std::move(other));
  904|  11.8k|        return *this;
  905|  11.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  11.8k|    {
  950|  11.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.8k, False: 0]
  ------------------
  951|  11.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   463k|    {
  490|   463k|        return m_has_value;
  491|   463k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   323k|    {
  456|   323k|        return m_value;
  457|   323k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  11.8k|    {
 1046|  11.8k|        this->destroy_value();
 1047|  11.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  11.8k|    {
  504|  11.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.8k|                                  std::forward<Args>(args)...);
  506|  11.8k|        m_has_value = false;
  507|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.8k|    {
  473|  11.8k|        return m_unexpected;
  474|  11.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.8k|    {
  481|  11.8k|        return std::move(m_unexpected);
  482|  11.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8782|  94.2k|    {
 8783|  94.2k|        return m_str;
 8784|  94.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  94.2k|{
 6115|  94.2k|    detail::check_scan_arg_types<Args...>();
 6116|  94.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  94.2k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5829|   115k|{
 5830|   115k|    constexpr bool default_constructible_constraint =
 5831|   115k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   115k|    static_assert(default_constructible_constraint,
 5833|   115k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   115k|    constexpr bool destructible_constraint =
 5836|   115k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   115k|    static_assert(destructible_constraint,
 5838|   115k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   115k|    constexpr bool non_reference_constraint =
 5841|   115k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   115k|    static_assert(non_reference_constraint,
 5843|   115k|                  "Scan argument types must not be references");
 5844|       |
 5845|   115k|    constexpr bool movable_constraint =
 5846|   115k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   115k|    static_assert(movable_constraint,
 5848|   115k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   115k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   115k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   115k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|  94.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  94.2k|    {
 6092|  94.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  94.2k|    {
 6100|  94.2k|        return {detail::make_arg<
 6101|  94.2k|            kind, Context,
 6102|  94.2k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  94.2k|                                 typename Context::char_type>::value>(args)...};
 6104|  94.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5879|  94.2k|{
 5880|  94.2k|    return make_value<Context>(value).ref_value;
 5881|  94.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5814|   115k|{
 5815|   115k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   115k|                                  needs_context_tag>) {
 5819|   115k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   115k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5653|   115k|    {                                                                        \
 5654|   115k|        return val;                                                          \
 5655|   115k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5783|   115k|{
 5784|   115k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   115k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   115k|    constexpr bool scannable_char =
 5788|   115k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   115k|    static_assert(scannable_char,
 5790|   115k|                  "Cannot scan an argument of an unsupported character "
 5791|   115k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   115k|    constexpr bool scannable_const =
 5794|   115k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   115k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   115k|    constexpr bool scannable_disabled =
 5798|   115k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   115k|    static_assert(scannable_disabled,
 5800|   115k|                  "Cannot scan an argument that has been disabled by "
 5801|   115k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   115k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   115k|    static_assert(
 5805|   115k|        scannable,
 5806|   115k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   115k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   115k|    return arg_value{arg};
 5810|   115k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5596|   115k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   115k|    {
 5598|   115k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6393|  94.2k|    {
 6394|  94.2k|        return m_values;
 6395|  94.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  94.2k|        : basic_scan_args(store.desc, store.args.data())
 6141|  94.2k|    {
 6142|  94.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  94.2k|        : m_str(r.str)
 8778|  94.2k|    {
 8779|  94.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   115k|    {
 1740|   115k|        return has_value();
 1741|   115k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   323k|    {
 1815|   323k|        return &value();
 1816|   323k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   323k|    {
 1769|   323k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   323k|        return this->get_value();
 1771|   323k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9773|  47.1k|{
 9774|  47.1k|    auto result = make_scan_result<Source, Args...>();
 9775|  47.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  47.1k|                                   make_scan_args(result->values())));
 9777|  47.1k|    return result;
 9778|  47.1k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9814|  21.5k|{
 9815|  21.5k|    auto result = make_scan_result<Source, T>();
 9816|  21.5k|    fill_scan_result(
 9817|  21.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  21.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  21.5k|    return result;
 9820|  21.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  21.5k|{
 5865|  21.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  21.5k|    basic_scan_arg<Context> arg;
 5868|  21.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  21.5k|    arg.m_value = make_value<Context>(value);
 5870|  21.5k|    return arg;
 5871|  21.5k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  21.5k|    {
 6416|  21.5k|        return std::get<0>(m_values);
 6417|  21.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.8k|    {
 2869|  11.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.8k|    {
 2850|  11.8k|        return decay_copy(t.begin());
 2851|  11.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  5.34M|{
 2094|  5.34M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.34M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   276k|    {
 2926|   276k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   276k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   276k|    {
 2908|   276k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   276k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9704|  56.1k|{
 9705|  56.1k|    auto result = make_scan_result<Source, Args...>();
 9706|  56.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  56.1k|                                   make_scan_args(result->values())));
 9708|  56.1k|    return result;
 9709|  56.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9660|   138k|{
 9661|   138k|    return scan_result_type<Source, Args...>();
 9662|   138k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   138k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   138k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   138k|    {
  613|   138k|        construct();
  614|   138k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   138k|    {
  694|   138k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   138k|        m_has_value = true;
  696|   138k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   138k|{
  396|   138k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   138k|        T(std::forward<Args>(args)...);
  398|   138k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6610|   138k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|   138k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   138k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   667k|    {
  718|   667k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   667k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   667k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   138k|{
 9646|   138k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.8k, False: 126k]
  |  |  ------------------
  ------------------
 9647|  11.8k|        out = unexpected(in.error());
 9648|  11.8k|    }
 9649|   126k|    else {
 9650|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   126k|    static_cast<    \
  |  |  935|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   126k|    }
 9652|   138k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   138k|    {
 1740|   138k|        return has_value();
 1741|   138k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   276k|    {
  490|   276k|        return m_has_value;
  491|   276k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  11.8k|    {
 1746|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.8k|        return this->get_unexpected().error();
 1748|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.8k|    {
  473|  11.8k|        return m_unexpected;
  474|  11.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  11.8k|        : m_has_value(false)
  637|  11.8k|    {
  638|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  59.4k|    {
  730|  59.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  59.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  59.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.8k|    {
 1316|  11.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  11.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  11.8k|    {
  903|  11.8k|        assign_common(std::move(other));
  904|  11.8k|        return *this;
  905|  11.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  11.8k|    {
  950|  11.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.8k, False: 0]
  ------------------
  951|  11.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   703k|    {
  687|   703k|        return m_has_value;
  688|   703k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   391k|    {
  653|   391k|        return *value_ptr();
  654|   391k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  11.8k|    {
 1046|  11.8k|        this->destroy_value();
 1047|  11.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   138k|    {
  708|   138k|        scn::detail::destroy_at(value_ptr());
  709|   138k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   138k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   138k|    else {
  408|   138k|        p->~T();
  409|   138k|    }
  410|   138k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6617|   138k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.8k|    {
  678|  11.8k|        return std::move(*unexpected_ptr());
  679|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.7k|    {
  712|  23.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   126k|    {
 6485|   126k|        m_range = std::forward<Other>(r);
 6486|   126k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   126k|    {
 1795|   126k|        return value();
 1796|   126k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   126k|    {
 1769|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   126k|        return this->get_value();
 1771|   126k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   126k|    {
  456|   126k|        return m_value;
  457|   126k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  56.1k|{
 9485|  56.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  56.1k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  56.1k|{
 9422|  56.1k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  56.1k|    auto result = vscan_impl(buffer, format, args);
 9425|  56.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.48k, False: 50.6k]
  |  |  ------------------
  ------------------
 9426|  5.48k|        return unexpected(result.error());
 9427|  5.48k|    }
 9428|  50.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  56.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   138k|{
 5381|   138k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   138k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   138k|                  "\n"
 5385|   138k|                  "Unsupported range type given as input to a scanning "
 5386|   138k|                  "function.\n"
 5387|   138k|                  "A range needs to have a character type (value type) "
 5388|   138k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   138k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   138k|                  "to be included.\n"
 5391|   138k|                  "See the scnlib documentation for more details.");
 5392|   138k|    static_assert(
 5393|   138k|        !std::is_same_v<T, custom_char_traits>,
 5394|   138k|        "\n"
 5395|   138k|        "Unsupported range type given as input to a scanning "
 5396|   138k|        "function.\n"
 5397|   138k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   138k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   138k|        "not supported.");
 5400|   138k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   138k|                  "\n"
 5402|   138k|                  "Unsupported range type given as input to a scanning "
 5403|   138k|                  "function.\n"
 5404|   138k|                  "file_marker_found cannot be used as an "
 5405|   138k|                  "source range type to scn::scan.\n"
 5406|   138k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   138k|                  "and do not provide an explicit source range, "
 5408|   138k|                  "or use scn::scan with a FILE* directly.");
 5409|   138k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   138k|                  "\n"
 5411|   138k|                  "Unsupported range type given as input to a scanning "
 5412|   138k|                  "function.\n"
 5413|   138k|                  "In order to be scannable, a range needs to satisfy "
 5414|   138k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   138k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   138k|                  "\n"
 5417|   138k|                  "Unsupported range type given as input to a scanning "
 5418|   138k|                  "function.\n"
 5419|   138k|                  "A range needs to model forward_range and have a valid "
 5420|   138k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   138k|                  "Examples of scannable ranges are std::string, "
 5422|   138k|                  "std::string_view, "
 5423|   138k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   138k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   138k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   138k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   138k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   138k|    else {
 5366|   138k|        return make_forward_scan_buffer(r);
 5367|   138k|    }
 5368|   138k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   138k|{
 5185|   138k|    return basic_scan_forward_buffer_impl(range);
 5186|   138k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   138k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   138k|          m_cursor(ranges::begin(*m_range))
 4766|   138k|    {
 4767|   138k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   138k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   138k|    {
 4738|   138k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   138k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   138k|    {
 4429|   138k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   138k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   264k|    {
 2869|   264k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   264k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   264k|    {
 2850|   264k|        return decay_copy(t.begin());
 2851|   264k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   391k|    {
 3480|   391k|        return m_iterator;
 3481|   391k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.52M|    {
 4771|  1.52M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 17.5k, False: 1.50M]
  ------------------
 4772|  17.5k|            return false;
 4773|  17.5k|        }
 4774|  1.50M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.50M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.50M|        }
 4777|  1.50M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.37M, False: 131k]
  ------------------
 4778|  1.37M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.37M|                                          this->m_current_view.begin(),
 4780|  1.37M|                                          this->m_current_view.end());
 4781|  1.37M|        }
 4782|  1.50M|        m_latest = *m_cursor;
 4783|  1.50M|        ++m_cursor;
 4784|  1.50M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.50M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.50M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.50M|        }
 4788|  1.50M|        return true;
 4789|  1.52M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.54M|    {
 2926|  4.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.54M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.54M|    {
 2908|  4.54M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.54M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  4.66M|    {
 3484|  4.66M|        return m_sentinel;
 3485|  4.66M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   138k|    {
 4346|   138k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   138k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   138k|        return true;
 4348|   138k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  11.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.8k|          m_has_value(false)
  451|  11.8k|    {
  452|  11.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   138k|    {
 1316|   138k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   126k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   126k|                      ranges::iterator_t<SourceRange>>) {
 6717|   126k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   126k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   126k|    {
 2869|   126k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   126k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   126k|    {
 2850|   126k|        return decay_copy(t.begin());
 2851|   126k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   126k|{
 6702|   126k|    return ranges::end(source);
 6703|   126k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   126k|    {
 2926|   126k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   126k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   126k|    {
 2908|   126k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   126k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   126k|        : base(std::in_place, std::forward<U>(val)),
 1570|   126k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   126k|    {
 1572|   126k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   126k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   126k|    {
  442|   126k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8782|   112k|    {
 8783|   112k|        return m_str;
 8784|   112k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   264k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   264k|    {
 3466|   264k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   112k|        : m_str(r.str)
 8778|   112k|    {
 8779|   112k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   138k|    {
 1740|   138k|        return has_value();
 1741|   138k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   391k|    {
 1815|   391k|        return &value();
 1816|   391k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   391k|    {
 1769|   391k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   391k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   391k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   391k|        return this->get_value();
 1771|   391k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   126k|    {
 6474|   126k|        return ranges::begin(m_range);
 6475|   126k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   150k|    {
  643|   150k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 126k, False: 23.7k]
  ------------------
  644|   126k|            destroy_value();
  645|   126k|        }
  646|  23.7k|        else {
  647|  23.7k|            destroy_unexpected();
  648|  23.7k|        }
  649|   150k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9773|  56.1k|{
 9774|  56.1k|    auto result = make_scan_result<Source, Args...>();
 9775|  56.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  56.1k|                                   make_scan_args(result->values())));
 9777|  56.1k|    return result;
 9778|  56.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  56.1k|{
 9503|  56.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  56.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  56.1k|{
 9438|  56.1k|#if !SCN_DISABLE_LOCALE
 9439|  56.1k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  56.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  56.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  56.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  56.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.48k, False: 50.6k]
  |  |  ------------------
  ------------------
 9446|  5.48k|        return unexpected(result.error());
 9447|  5.48k|    }
 9448|  50.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  56.1k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9814|  25.9k|{
 9815|  25.9k|    auto result = make_scan_result<Source, T>();
 9816|  25.9k|    fill_scan_result(
 9817|  25.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  25.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  25.9k|    return result;
 9820|  25.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  25.9k|{
 9516|  25.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  25.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  25.9k|{
 9462|  25.9k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  25.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  25.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 914, False: 25.0k]
  |  |  ------------------
  ------------------
 9466|    914|        return unexpected(result.error());
 9467|    914|    }
 9468|  25.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  25.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  49.3k|    {
 2869|  49.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  49.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  49.3k|    {
 2850|  49.3k|        return decay_copy(t.begin());
 2851|  49.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  12.1M|{
 2094|  12.1M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.1M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.13M|    {
 2926|  3.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.13M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.13M|    {
 2908|  3.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.13M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9660|   782k|{
 9661|   782k|    return scan_result_type<Source, Args...>();
 9662|   782k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   782k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   782k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   782k|    {
  613|   782k|        construct();
  614|   782k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   782k|    {
  694|   782k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   782k|        m_has_value = true;
  696|   782k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   782k|{
  396|   782k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   782k|        T(std::forward<Args>(args)...);
  398|   782k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|   782k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  1.56M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.56M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6384|  1.56M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.86M|    {
  718|  3.86M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.86M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.86M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   782k|{
 9646|   782k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.7k, False: 758k]
  |  |  ------------------
  ------------------
 9647|  23.7k|        out = unexpected(in.error());
 9648|  23.7k|    }
 9649|   758k|    else {
 9650|   758k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   758k|    }
 9652|   782k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.56M|    {
 1740|  1.56M|        return has_value();
 1741|  1.56M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.13M|    {
  490|  3.13M|        return m_has_value;
  491|  3.13M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  47.5k|    {
 1746|  47.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  47.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  47.5k|        return this->get_unexpected().error();
 1748|  47.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  47.5k|    {
  473|  47.5k|        return m_unexpected;
  474|  47.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.7k|        : base(unexpect, std::move(e.error())),
 1616|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.7k|    {
 1618|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.7k|        : m_has_value(false)
  637|  23.7k|    {
  638|  23.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  23.7k|    {
  701|  23.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.7k|                                  std::forward<Args>(args)...);
  703|  23.7k|        m_has_value = false;
  704|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   118k|    {
  730|   118k|        return reinterpret_cast<unexpected<E>*>(
  731|   118k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   118k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   118k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.7k|    {
 1316|  23.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.7k|    {
  903|  23.7k|        assign_common(std::move(other));
  904|  23.7k|        return *this;
  905|  23.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.7k|    {
  950|  23.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.7k, False: 0]
  ------------------
  951|  23.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.93M|    {
  687|  3.93M|        return m_has_value;
  688|  3.93M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.30M|    {
  653|  2.30M|        return *value_ptr();
  654|  2.30M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.7k|    {
 1046|  23.7k|        this->destroy_value();
 1047|  23.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   782k|    {
  708|   782k|        scn::detail::destroy_at(value_ptr());
  709|   782k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   782k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   782k|    else {
  408|   782k|        p->~T();
  409|   782k|    }
  410|   782k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|   782k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.7k|    {
  701|  23.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.7k|                                  std::forward<Args>(args)...);
  703|  23.7k|        m_has_value = false;
  704|  23.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.7k|    {
  678|  23.7k|        return std::move(*unexpected_ptr());
  679|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  47.5k|    {
  712|  47.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  47.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  1.51M|    {
 6485|  1.51M|        m_range = std::forward<Other>(r);
 6486|  1.51M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.51M|    {
 1795|  1.51M|        return value();
 1796|  1.51M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.51M|    {
 1769|  1.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.51M|        return this->get_value();
 1771|  1.51M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.51M|    {
  456|  1.51M|        return m_value;
  457|  1.51M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   629k|{
 9422|   629k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   629k|    auto result = vscan_impl(buffer, format, args);
 9425|   629k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.9k, False: 607k]
  |  |  ------------------
  ------------------
 9426|  21.9k|        return unexpected(result.error());
 9427|  21.9k|    }
 9428|   607k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   629k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.56M|{
 5381|  1.56M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.56M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.56M|                  "\n"
 5385|  1.56M|                  "Unsupported range type given as input to a scanning "
 5386|  1.56M|                  "function.\n"
 5387|  1.56M|                  "A range needs to have a character type (value type) "
 5388|  1.56M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.56M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.56M|                  "to be included.\n"
 5391|  1.56M|                  "See the scnlib documentation for more details.");
 5392|  1.56M|    static_assert(
 5393|  1.56M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.56M|        "\n"
 5395|  1.56M|        "Unsupported range type given as input to a scanning "
 5396|  1.56M|        "function.\n"
 5397|  1.56M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.56M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.56M|        "not supported.");
 5400|  1.56M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.56M|                  "\n"
 5402|  1.56M|                  "Unsupported range type given as input to a scanning "
 5403|  1.56M|                  "function.\n"
 5404|  1.56M|                  "file_marker_found cannot be used as an "
 5405|  1.56M|                  "source range type to scn::scan.\n"
 5406|  1.56M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.56M|                  "and do not provide an explicit source range, "
 5408|  1.56M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.56M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.56M|                  "\n"
 5411|  1.56M|                  "Unsupported range type given as input to a scanning "
 5412|  1.56M|                  "function.\n"
 5413|  1.56M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.56M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.56M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.56M|                  "\n"
 5417|  1.56M|                  "Unsupported range type given as input to a scanning "
 5418|  1.56M|                  "function.\n"
 5419|  1.56M|                  "A range needs to model forward_range and have a valid "
 5420|  1.56M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.56M|                  "Examples of scannable ranges are std::string, "
 5422|  1.56M|                  "std::string_view, "
 5423|  1.56M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.56M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.56M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.56M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.56M|{
 5320|  1.56M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.56M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.56M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.56M|    {
 3000|  1.56M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.56M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.56M|    {
 2981|  1.56M|        return t.data();
 2982|  1.56M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.56M|    {
 3383|  1.56M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.56M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  5.91M|{
  316|  5.91M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  5.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  5.91M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   192M|{
  294|   192M|    return p;
  295|   192M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.08M|    {
 2869|  3.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.08M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.08M|    {
 2850|  3.08M|        return decay_copy(t.begin());
 2851|  3.08M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   160M|    {
 3480|   160M|        return m_iterator;
 3481|   160M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.56M|    {
 3339|  1.56M|        return static_cast<const D&>(*this);
 3340|  1.56M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.56M|    {
 3075|  1.56M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.56M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.56M|    {
 3041|  1.56M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.56M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.74M|    {
 3496|  3.74M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.74M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  47.5k|        : base(unexpect, std::move(e.error())),
 1616|  47.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  47.5k|    {
 1618|  47.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  47.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  47.5k|          m_has_value(false)
  451|  47.5k|    {
  452|  47.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.56M|    {
 1316|  1.56M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  1.51M|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.51M|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.51M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.51M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.33M|    {
 2869|  4.33M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.33M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.33M|    {
 2850|  4.33M|        return decay_copy(t.begin());
 2851|  4.33M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  1.51M|{
 6702|  1.51M|    return ranges::end(source);
 6703|  1.51M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.51M|    {
 2926|  1.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.51M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.51M|    {
 2908|  1.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.51M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   152M|    {
 3484|   152M|        return m_sentinel;
 3485|   152M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.51M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.51M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.51M|    {
 1572|  1.51M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.51M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.51M|    {
  442|  1.51M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8782|   629k|    {
 8783|   629k|        return m_str;
 8784|   629k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  1.25M|{
 6115|  1.25M|    detail::check_scan_arg_types<Args...>();
 6116|  1.25M|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  1.25M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5829|  1.56M|{
 5830|  1.56M|    constexpr bool default_constructible_constraint =
 5831|  1.56M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.56M|    static_assert(default_constructible_constraint,
 5833|  1.56M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.56M|    constexpr bool destructible_constraint =
 5836|  1.56M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.56M|    static_assert(destructible_constraint,
 5838|  1.56M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.56M|    constexpr bool non_reference_constraint =
 5841|  1.56M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.56M|    static_assert(non_reference_constraint,
 5843|  1.56M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.56M|    constexpr bool movable_constraint =
 5846|  1.56M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.56M|    static_assert(movable_constraint,
 5848|  1.56M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.56M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.56M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.56M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  1.25M|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  1.25M|    {
 6092|  1.25M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  1.25M|    {
 6100|  1.25M|        return {detail::make_arg<
 6101|  1.25M|            kind, Context,
 6102|  1.25M|            mapped_type_constant<remove_cvref_t<A>,
 6103|  1.25M|                                 typename Context::char_type>::value>(args)...};
 6104|  1.25M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  1.25M|{
 5880|  1.25M|    return make_value<Context>(value).ref_value;
 5881|  1.25M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  1.56M|{
 5815|  1.56M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  1.56M|                                  needs_context_tag>) {
 5819|  1.56M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  1.56M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  1.56M|    {                                                                        \
 5654|  1.56M|        return val;                                                          \
 5655|  1.56M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5783|  1.56M|{
 5784|  1.56M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.56M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.56M|    constexpr bool scannable_char =
 5788|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.56M|    static_assert(scannable_char,
 5790|  1.56M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.56M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.56M|    constexpr bool scannable_const =
 5794|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.56M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.56M|    constexpr bool scannable_disabled =
 5798|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.56M|    static_assert(scannable_disabled,
 5800|  1.56M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.56M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.56M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.56M|    static_assert(
 5805|  1.56M|        scannable,
 5806|  1.56M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.56M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.56M|    return arg_value{arg};
 5810|  1.56M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5596|  1.56M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.56M|    {
 5598|  1.56M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6393|  1.25M|    {
 6394|  1.25M|        return m_values;
 6395|  1.25M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  1.25M|        : basic_scan_args(store.desc, store.args.data())
 6141|  1.25M|    {
 6142|  1.25M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.88M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.88M|    {
 6194|  1.88M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  59.6M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  59.6M|    static_cast<    \
  |  |  935|  59.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  59.6M|    static_cast<    \
  |  |  935|  59.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  59.6M|    {
 3466|  59.6M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.88M|{
 8449|  1.88M|    return s;
 8450|  1.88M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.88M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   629k|        : m_str(r.str)
 8778|   629k|    {
 8779|   629k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   782k|    {
 1740|   782k|        return has_value();
 1741|   782k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.30M|    {
 1815|  2.30M|        return &value();
 1816|  2.30M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  2.30M|    {
 1769|  2.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.30M|        return this->get_value();
 1771|  2.30M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  1.51M|    {
 6474|  1.51M|        return ranges::begin(m_range);
 6475|  1.51M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   806k|    {
  643|   806k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 758k, False: 47.5k]
  ------------------
  644|   758k|            destroy_value();
  645|   758k|        }
  646|  47.5k|        else {
  647|  47.5k|            destroy_unexpected();
  648|  47.5k|        }
  649|   806k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   629k|{
 9438|   629k|#if !SCN_DISABLE_LOCALE
 9439|   629k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   629k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   629k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   629k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   629k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.9k, False: 607k]
  |  |  ------------------
  ------------------
 9446|  21.9k|        return unexpected(result.error());
 9447|  21.9k|    }
 9448|   607k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   629k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   307k|{
 9462|   307k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   307k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   307k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 303k]
  |  |  ------------------
  ------------------
 9466|  3.65k|        return unexpected(result.error());
 9467|  3.65k|    }
 9468|   303k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   307k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   307k|{
 5865|   307k|    check_scan_arg_types<T>();
 5866|       |
 5867|   307k|    basic_scan_arg<Context> arg;
 5868|   307k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   307k|    arg.m_value = make_value<Context>(value);
 5870|   307k|    return arg;
 5871|   307k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  2.34M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   307k|    {
 6416|   307k|        return std::get<0>(m_values);
 6417|   307k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9660|   782k|{
 9661|   782k|    return scan_result_type<Source, Args...>();
 9662|   782k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   782k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   782k|        : m_value(T{}), m_has_value(true)
  427|   782k|    {
  428|   782k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6610|   782k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6384|   782k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   782k|{
 9646|   782k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.7k, False: 758k]
  |  |  ------------------
  ------------------
 9647|  23.7k|        out = unexpected(in.error());
 9648|  23.7k|    }
 9649|   758k|    else {
 9650|   758k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   758k|    }
 9652|   782k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  23.7k|        : base(unexpect, std::move(e.error())),
 1616|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.7k|    {
 1618|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  23.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.7k|          m_has_value(false)
  451|  23.7k|    {
  452|  23.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.7k|    {
 1316|  23.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  23.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  23.7k|    {
  903|  23.7k|        assign_common(std::move(other));
  904|  23.7k|        return *this;
  905|  23.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  23.7k|    {
  950|  23.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.7k, False: 0]
  ------------------
  951|  23.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.13M|    {
  490|  3.13M|        return m_has_value;
  491|  3.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.30M|    {
  456|  2.30M|        return m_value;
  457|  2.30M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  23.7k|    {
 1046|  23.7k|        this->destroy_value();
 1047|  23.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  23.7k|    {
  504|  23.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.7k|                                  std::forward<Args>(args)...);
  506|  23.7k|        m_has_value = false;
  507|  23.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.7k|    {
  473|  23.7k|        return m_unexpected;
  474|  23.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.7k|    {
  481|  23.7k|        return std::move(m_unexpected);
  482|  23.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8782|   629k|    {
 8783|   629k|        return m_str;
 8784|   629k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   629k|{
 6115|   629k|    detail::check_scan_arg_types<Args...>();
 6116|   629k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   629k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5829|   782k|{
 5830|   782k|    constexpr bool default_constructible_constraint =
 5831|   782k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   782k|    static_assert(default_constructible_constraint,
 5833|   782k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   782k|    constexpr bool destructible_constraint =
 5836|   782k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   782k|    static_assert(destructible_constraint,
 5838|   782k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   782k|    constexpr bool non_reference_constraint =
 5841|   782k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   782k|    static_assert(non_reference_constraint,
 5843|   782k|                  "Scan argument types must not be references");
 5844|       |
 5845|   782k|    constexpr bool movable_constraint =
 5846|   782k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   782k|    static_assert(movable_constraint,
 5848|   782k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   782k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   782k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   782k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|   629k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   629k|    {
 6092|   629k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   629k|    {
 6100|   629k|        return {detail::make_arg<
 6101|   629k|            kind, Context,
 6102|   629k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   629k|                                 typename Context::char_type>::value>(args)...};
 6104|   629k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5879|   629k|{
 5880|   629k|    return make_value<Context>(value).ref_value;
 5881|   629k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5814|   782k|{
 5815|   782k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   782k|                                  needs_context_tag>) {
 5819|   782k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   782k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5653|   782k|    {                                                                        \
 5654|   782k|        return val;                                                          \
 5655|   782k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5783|   782k|{
 5784|   782k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   782k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   782k|    constexpr bool scannable_char =
 5788|   782k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   782k|    static_assert(scannable_char,
 5790|   782k|                  "Cannot scan an argument of an unsupported character "
 5791|   782k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   782k|    constexpr bool scannable_const =
 5794|   782k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   782k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   782k|    constexpr bool scannable_disabled =
 5798|   782k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   782k|    static_assert(scannable_disabled,
 5800|   782k|                  "Cannot scan an argument that has been disabled by "
 5801|   782k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   782k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   782k|    static_assert(
 5805|   782k|        scannable,
 5806|   782k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   782k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   782k|    return arg_value{arg};
 5810|   782k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5596|   782k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   782k|    {
 5598|   782k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6393|   629k|    {
 6394|   629k|        return m_values;
 6395|   629k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   629k|        : basic_scan_args(store.desc, store.args.data())
 6141|   629k|    {
 6142|   629k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   629k|        : m_str(r.str)
 8778|   629k|    {
 8779|   629k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   782k|    {
 1740|   782k|        return has_value();
 1741|   782k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.30M|    {
 1815|  2.30M|        return &value();
 1816|  2.30M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  2.30M|    {
 1769|  2.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.30M|        return this->get_value();
 1771|  2.30M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   153k|{
 5865|   153k|    check_scan_arg_types<T>();
 5866|       |
 5867|   153k|    basic_scan_arg<Context> arg;
 5868|   153k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   153k|    arg.m_value = make_value<Context>(value);
 5870|   153k|    return arg;
 5871|   153k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   153k|    {
 6416|   153k|        return std::get<0>(m_values);
 6417|   153k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  23.7k|    {
 2869|  23.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  23.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  23.7k|    {
 2850|  23.7k|        return decay_copy(t.begin());
 2851|  23.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  75.2M|{
 2094|  75.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  75.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  75.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.56M|    {
 2926|  1.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.56M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.56M|    {
 2908|  1.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.56M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9660|   782k|{
 9661|   782k|    return scan_result_type<Source, Args...>();
 9662|   782k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   782k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   782k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   782k|    {
  613|   782k|        construct();
  614|   782k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   782k|    {
  694|   782k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   782k|        m_has_value = true;
  696|   782k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   782k|{
  396|   782k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   782k|        T(std::forward<Args>(args)...);
  398|   782k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6610|   782k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   782k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   782k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.86M|    {
  718|  3.86M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.86M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.86M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   782k|{
 9646|   782k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.7k, False: 758k]
  |  |  ------------------
  ------------------
 9647|  23.7k|        out = unexpected(in.error());
 9648|  23.7k|    }
 9649|   758k|    else {
 9650|   758k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   758k|    }
 9652|   782k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   782k|    {
 1740|   782k|        return has_value();
 1741|   782k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.56M|    {
  490|  1.56M|        return m_has_value;
  491|  1.56M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  23.7k|    {
 1746|  23.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.7k|        return this->get_unexpected().error();
 1748|  23.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.7k|    {
  473|  23.7k|        return m_unexpected;
  474|  23.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  23.7k|        : base(unexpect, std::move(e.error())),
 1616|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.7k|    {
 1618|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  23.7k|        : m_has_value(false)
  637|  23.7k|    {
  638|  23.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  23.7k|    {
  701|  23.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.7k|                                  std::forward<Args>(args)...);
  703|  23.7k|        m_has_value = false;
  704|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   118k|    {
  730|   118k|        return reinterpret_cast<unexpected<E>*>(
  731|   118k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   118k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   118k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.7k|    {
 1316|  23.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  23.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  23.7k|    {
  903|  23.7k|        assign_common(std::move(other));
  904|  23.7k|        return *this;
  905|  23.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  23.7k|    {
  950|  23.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.7k, False: 0]
  ------------------
  951|  23.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.93M|    {
  687|  3.93M|        return m_has_value;
  688|  3.93M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.30M|    {
  653|  2.30M|        return *value_ptr();
  654|  2.30M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  23.7k|    {
 1046|  23.7k|        this->destroy_value();
 1047|  23.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   782k|    {
  708|   782k|        scn::detail::destroy_at(value_ptr());
  709|   782k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   782k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   782k|    else {
  408|   782k|        p->~T();
  409|   782k|    }
  410|   782k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6617|   782k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  23.7k|    {
  701|  23.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.7k|                                  std::forward<Args>(args)...);
  703|  23.7k|        m_has_value = false;
  704|  23.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.7k|    {
  678|  23.7k|        return std::move(*unexpected_ptr());
  679|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  47.5k|    {
  712|  47.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  47.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   758k|    {
 6485|   758k|        m_range = std::forward<Other>(r);
 6486|   758k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   758k|    {
 1795|   758k|        return value();
 1796|   758k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   758k|    {
 1769|   758k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   758k|        return this->get_value();
 1771|   758k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   758k|    {
  456|   758k|        return m_value;
  457|   758k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   314k|{
 9422|   314k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   314k|    auto result = vscan_impl(buffer, format, args);
 9425|   314k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 303k]
  |  |  ------------------
  ------------------
 9426|  10.9k|        return unexpected(result.error());
 9427|  10.9k|    }
 9428|   303k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   314k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   782k|{
 5381|   782k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   782k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   782k|                  "\n"
 5385|   782k|                  "Unsupported range type given as input to a scanning "
 5386|   782k|                  "function.\n"
 5387|   782k|                  "A range needs to have a character type (value type) "
 5388|   782k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   782k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   782k|                  "to be included.\n"
 5391|   782k|                  "See the scnlib documentation for more details.");
 5392|   782k|    static_assert(
 5393|   782k|        !std::is_same_v<T, custom_char_traits>,
 5394|   782k|        "\n"
 5395|   782k|        "Unsupported range type given as input to a scanning "
 5396|   782k|        "function.\n"
 5397|   782k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   782k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   782k|        "not supported.");
 5400|   782k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   782k|                  "\n"
 5402|   782k|                  "Unsupported range type given as input to a scanning "
 5403|   782k|                  "function.\n"
 5404|   782k|                  "file_marker_found cannot be used as an "
 5405|   782k|                  "source range type to scn::scan.\n"
 5406|   782k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   782k|                  "and do not provide an explicit source range, "
 5408|   782k|                  "or use scn::scan with a FILE* directly.");
 5409|   782k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   782k|                  "\n"
 5411|   782k|                  "Unsupported range type given as input to a scanning "
 5412|   782k|                  "function.\n"
 5413|   782k|                  "In order to be scannable, a range needs to satisfy "
 5414|   782k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   782k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   782k|                  "\n"
 5417|   782k|                  "Unsupported range type given as input to a scanning "
 5418|   782k|                  "function.\n"
 5419|   782k|                  "A range needs to model forward_range and have a valid "
 5420|   782k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   782k|                  "Examples of scannable ranges are std::string, "
 5422|   782k|                  "std::string_view, "
 5423|   782k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   782k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   782k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   782k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   782k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   782k|    else {
 5366|   782k|        return make_forward_scan_buffer(r);
 5367|   782k|    }
 5368|   782k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   782k|{
 5185|   782k|    return basic_scan_forward_buffer_impl(range);
 5186|   782k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   782k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   782k|          m_cursor(ranges::begin(*m_range))
 4766|   782k|    {
 4767|   782k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   782k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   782k|    {
 4738|   782k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   782k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   782k|    {
 4429|   782k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   782k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.54M|    {
 2869|  1.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.54M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.54M|    {
 2850|  1.54M|        return decay_copy(t.begin());
 2851|  1.54M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  2.30M|    {
 3480|  2.30M|        return m_iterator;
 3481|  2.30M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  23.5M|    {
 4771|  23.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 21.2k, False: 23.5M]
  ------------------
 4772|  21.2k|            return false;
 4773|  21.2k|        }
 4774|  23.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  23.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  23.5M|        }
 4777|  23.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 22.7M, False: 769k]
  ------------------
 4778|  22.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  22.7M|                                          this->m_current_view.begin(),
 4780|  22.7M|                                          this->m_current_view.end());
 4781|  22.7M|        }
 4782|  23.5M|        m_latest = *m_cursor;
 4783|  23.5M|        ++m_cursor;
 4784|  23.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  23.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  23.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  23.5M|        }
 4788|  23.5M|        return true;
 4789|  23.5M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  70.5M|    {
 2926|  70.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  70.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  70.5M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  70.5M|    {
 2908|  70.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  70.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  70.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  71.3M|    {
 3484|  71.3M|        return m_sentinel;
 3485|  71.3M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   782k|    {
 4346|   782k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   782k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   782k|        return true;
 4348|   782k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  23.7k|        : base(unexpect, std::move(e.error())),
 1616|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.7k|    {
 1618|  23.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  23.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.7k|          m_has_value(false)
  451|  23.7k|    {
  452|  23.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   782k|    {
 1316|   782k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   758k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   758k|                      ranges::iterator_t<SourceRange>>) {
 6717|   758k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   758k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   758k|    {
 2869|   758k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   758k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   758k|    {
 2850|   758k|        return decay_copy(t.begin());
 2851|   758k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   758k|{
 6702|   758k|    return ranges::end(source);
 6703|   758k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   758k|    {
 2926|   758k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   758k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   758k|    {
 2908|   758k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   758k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   758k|        : base(std::in_place, std::forward<U>(val)),
 1570|   758k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   758k|    {
 1572|   758k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   758k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   758k|    {
  442|   758k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8782|   629k|    {
 8783|   629k|        return m_str;
 8784|   629k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.54M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.54M|    static_cast<    \
  |  |  935|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.54M|    static_cast<    \
  |  |  935|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.54M|    {
 3466|  1.54M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   629k|        : m_str(r.str)
 8778|   629k|    {
 8779|   629k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   782k|    {
 1740|   782k|        return has_value();
 1741|   782k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.30M|    {
 1815|  2.30M|        return &value();
 1816|  2.30M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  2.30M|    {
 1769|  2.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.30M|        return this->get_value();
 1771|  2.30M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   758k|    {
 6474|   758k|        return ranges::begin(m_range);
 6475|   758k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   806k|    {
  643|   806k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 758k, False: 47.5k]
  ------------------
  644|   758k|            destroy_value();
  645|   758k|        }
  646|  47.5k|        else {
  647|  47.5k|            destroy_unexpected();
  648|  47.5k|        }
  649|   806k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   314k|{
 9438|   314k|#if !SCN_DISABLE_LOCALE
 9439|   314k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   314k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   314k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   314k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   314k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 303k]
  |  |  ------------------
  ------------------
 9446|  10.9k|        return unexpected(result.error());
 9447|  10.9k|    }
 9448|   303k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   314k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   153k|{
 9462|   153k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   153k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   153k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 151k]
  |  |  ------------------
  ------------------
 9466|  1.82k|        return unexpected(result.error());
 9467|  1.82k|    }
 9468|   151k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   153k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   139k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   139k|    {
 3742|   139k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   139k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   139k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   125k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   125k|    else {
 3981|   125k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   125k|    }
 3983|   125k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  5.10M|    {
 3480|  5.10M|        return m_iterator;
 3481|  5.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  77.3M|    {
 3480|  77.3M|        return m_iterator;
 3481|  77.3M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  8.54M|    {
  572|  8.54M|        return m_has_value;
  573|  8.54M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  98.7k|    {
  555|  98.7k|        return m_unexpected;
  556|  98.7k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  98.7k|    {
 1746|  98.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  98.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  98.7k|        return this->get_unexpected().error();
 1748|  98.7k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  1.12M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7037|  32.9k|    {
 7038|  32.9k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7038:13): [True: 0, False: 32.9k]
  |  Branch (7038:39): [True: 0, False: 0]
  ------------------
 7039|       |            // clang-format off
 7040|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7041|       |            // clang-format on
 7042|      0|        }
 7043|       |
 7044|  32.9k|        m_specs.width = width;
 7045|  32.9k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.09M|    {
 7059|  1.09M|        m_specs.type = type;
 7060|  1.09M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7075|  37.7k|    {
 7076|  37.7k|        const auto begin_value = static_cast<unsigned>(begin);
 7077|  37.7k|        const auto end_value = static_cast<unsigned>(end);
 7078|  37.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7079|       |
 7080|  37.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  37.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 37.7k, False: 0]
  |  |  ------------------
  ------------------
 7081|       |            // No need to bit-twiddle with a mask, because with the
 7082|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7083|  37.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  37.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7084|  1.01M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7084:40): [True: 981k, False: 37.7k]
  ------------------
 7085|   981k|                m_specs.charset_literals[v / 8] |=
 7086|   981k|                    static_cast<unsigned char>(1ul << (v % 8));
 7087|   981k|            }
 7088|  37.7k|        }
 7089|      0|        else {
 7090|      0|            m_specs.charset_has_nonascii = true;
 7091|      0|        }
 7092|  37.7k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  32.9k|    {
 7121|  32.9k|        SCN_UNLIKELY_ATTR
 7122|  32.9k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  32.9k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  1.18M|    {
 7132|  1.18M|        return m_error;
 7133|  1.18M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   127k|{
 3918|   127k|    return unexpected(scan_error{c, m});
 3919|   127k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  72.2M|{
 4308|       |    // Pattern_White_Space property
 4309|  72.2M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 14.0M, False: 58.2M]
  |  Branch (4309:27): [True: 2.79M, False: 11.2M]
  ------------------
 4310|  72.2M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 2.18M, False: 67.3M]
  ------------------
 4311|  72.2M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 385k, False: 66.9M]
  ------------------
 4312|  72.2M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 175k, False: 66.7M]
  ------------------
 4313|  72.2M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 279k, False: 66.4M]
  ------------------
 4314|  72.2M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 185k, False: 66.2M]
  ------------------
 4315|  72.2M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 66.2M]
  ------------------
 4316|  72.2M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|  16.4k|{
 7815|  16.4k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 16.4k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 16.4k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 16.4k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 16.4k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 16.4k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 16.4k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 16.4k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 16.4k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 16.4k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 16.4k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 16.4k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 16.4k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 16.4k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 16.4k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 16.4k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 16.4k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 16.4k]
  ------------------
 7843|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 16.4k]
  ------------------
 7844|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 16.4k]
  ------------------
 7845|      0|            return arg_type_category::floating;
 7846|       |
 7847|  1.82k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 1.82k, False: 14.6k]
  ------------------
 7848|  5.48k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 3.65k, False: 12.7k]
  ------------------
 7849|  9.14k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 3.65k, False: 12.7k]
  ------------------
 7850|  16.4k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 7.31k, False: 9.14k]
  ------------------
 7851|  16.4k|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 16.4k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 16.4k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|  16.4k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|  16.4k|            SCN_CLANG_POP
 7862|  16.4k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|  16.4k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  8.44M|    {
 1740|  8.44M|        return has_value();
 1741|  8.44M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7956|  1.09M|{
 7957|  1.09M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 1.09M]
  ------------------
 7958|  1.09M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7958:9): [True: 1.06M, False: 35.3k]
  ------------------
 7959|  1.09M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7959:9): [True: 18.8k, False: 16.4k]
  ------------------
 7960|  1.09M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7960:9): [True: 0, False: 16.4k]
  ------------------
 7961|  1.09M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7961:9): [True: 0, False: 16.4k]
  ------------------
 7962|  1.07M|        return;
 7963|  1.07M|    }
 7964|  16.4k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7964:9): [True: 16.4k, False: 0]
  ------------------
 7965|  16.4k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.4k, False: 0]
  |  |  ------------------
  ------------------
 7966|       |            // clang-format off
 7967|  16.4k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7968|       |            // clang-format on
 7969|  16.4k|        }
 7970|      0|        return;
 7971|  16.4k|    }
 7972|      0|    SCN_UNLIKELY_ATTR
 7973|      0|    handler.on_error("Invalid type specifier for string");
 7974|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  27.3M|    {
 4473|  27.3M|        assert(m_begin);
 4474|  27.3M|        return m_end == nullptr;
 4475|  27.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   647k|    {
 4490|   647k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 647k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   647k|        return parent()->get_segment_starting_at(position());
 4496|   647k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  15.9M|    {
 4484|  15.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  15.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  15.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  15.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   647k|    {
 4377|   647k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   647k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 365k, False: 281k]
  |  |  ------------------
  ------------------
 4378|   647k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   365k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   365k|        }
 4381|   281k|        const auto start = pos - m_putback_buffer.size();
 4382|   281k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   281k|        return m_current_view.substr(start);
 4384|   281k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   728k|    {
 4468|   728k|        return m_position;
 4469|   728k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   414k|    {
 4399|   414k|        return m_is_contiguous;
 4400|   414k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   426M|    {
 4473|   426M|        assert(m_begin);
 4474|   426M|        return m_end == nullptr;
 4475|   426M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   762k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   762k|    else {
 3981|   762k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   762k|    }
 3983|   762k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  2.30M|    {
 4490|  2.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 2.30M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  2.30M|        return parent()->get_segment_starting_at(position());
 4496|  2.30M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   248M|    {
 4484|   248M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   248M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   248M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   248M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   248M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  2.30M|    {
 4377|  2.30M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.52M, False: 779k]
  |  |  ------------------
  ------------------
 4378|  2.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.52M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.52M|        }
 4381|   779k|        const auto start = pos - m_putback_buffer.size();
 4382|   779k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   779k|        return m_current_view.substr(start);
 4384|   779k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  2.76M|    {
 4468|  2.76M|        return m_position;
 4469|  2.76M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  2.34M|    {
 4399|  2.34M|        return m_is_contiguous;
 4400|  2.34M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   844k|    {
 3334|   844k|        return static_cast<D&>(*this);
 3335|   844k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   844k|    {
 3375|   844k|        return detail::to_address(ranges::begin(derived()));
 3376|   844k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.81M|    {
 3334|  2.81M|        return static_cast<D&>(*this);
 3335|  2.81M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.81M|    {
 3375|  2.81M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.81M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|  56.7k|    {
 8980|  56.7k|        return ranges::subrange{begin(), end()};
 8981|  56.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|  56.7k|    {
 8972|  56.7k|        return ranges::default_sentinel;
 8973|  56.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  1.88M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.88M|    static_cast<    \
  |  |  935|  1.88M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.88M|    static_cast<    \
  |  |  935|  1.88M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.88M|    {
 3466|  1.88M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  2.70M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   130k|    {
 1979|   130k|        return detail::transform_error_impl(std::move(*this),
 1980|   130k|                                            std::forward<F>(f));
 1981|   130k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   130k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   130k|    else {
 1472|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 127k, False: 2.31k]
  |  |  ------------------
  ------------------
 1474|   130k|                   ? result(*std::forward<Exp>(exp))
 1475|   130k|                   : result(unexpect,
 1476|  2.31k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.31k|                                           std::forward<Exp>(exp).error()));
 1478|   130k|    }
 1479|   130k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   260k|    {
  490|   260k|        return m_has_value;
  491|   260k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   305k|        : base(std::in_place, std::forward<U>(val)),
 1570|   305k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   305k|    {
 1572|   305k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   305k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   305k|    {
  442|   305k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   321k|    {
 1316|   321k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  12.7k|{
 1350|  12.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  12.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.31k|    {
 1756|  2.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.31k|        return std::move(this->get_unexpected().error());
 1758|  2.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.31k|    {
  473|  2.31k|        return m_unexpected;
  474|  2.31k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  25.5k|    {
  365|  25.5k|        return m_unexpected;
  366|  25.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.31k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.31k|    {
 1628|  2.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  15.0k|          m_has_value(false)
  451|  15.0k|    {
  452|  15.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   314k|    {
 8980|   314k|        return ranges::subrange{begin(), end()};
 8981|   314k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   314k|    {
 8972|   314k|        return ranges::default_sentinel;
 8973|   314k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  27.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  27.2M|    static_cast<    \
  |  |  935|  27.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  27.2M|    static_cast<    \
  |  |  935|  27.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  27.2M|    {
 3466|  27.2M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   768k|    {
 1979|   768k|        return detail::transform_error_impl(std::move(*this),
 1980|   768k|                                            std::forward<F>(f));
 1981|   768k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   768k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   768k|    else {
 1472|   768k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   768k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   768k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 765k, False: 2.32k]
  |  |  ------------------
  ------------------
 1474|   768k|                   ? result(*std::forward<Exp>(exp))
 1475|   768k|                   : result(unexpect,
 1476|  2.32k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.32k|                                           std::forward<Exp>(exp).error()));
 1478|   768k|    }
 1479|   768k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.53M|    {
  490|  1.53M|        return m_has_value;
  491|  1.53M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   765k|    {
 1805|   765k|        return std::move(value());
 1806|   765k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   765k|    {
 1769|   765k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   765k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   765k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   765k|        return this->get_value();
 1771|   765k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   765k|    {
  456|   765k|        return m_value;
  457|   765k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.82M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.82M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.82M|    {
 1572|  1.82M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.82M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.82M|    {
  442|  1.82M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.85M|    {
 1316|  1.85M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.32k|    {
 1756|  2.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.32k|        return std::move(this->get_unexpected().error());
 1758|  2.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.32k|    {
  473|  2.32k|        return m_unexpected;
  474|  2.32k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.32k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.32k|    {
 1628|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   127k|        : m_unexpected(std::forward<Err>(e))
  350|   127k|    {
  351|   127k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   127k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   106k|        : base(unexpect, std::move(e.error())),
 1616|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   106k|    {
 1618|   106k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   106k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   106k|          m_has_value(false)
  451|   106k|    {
  452|   106k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71M|    {
 1316|  2.71M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  29.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.5k|          m_has_value(false)
  451|  29.5k|    {
  452|  29.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   534k|    {
 1316|   534k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   503k|        : base(std::in_place, std::forward<U>(val)),
 1570|   503k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   503k|    {
 1572|   503k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   503k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   503k|    {
  442|   503k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   534k|    {
 1740|   534k|        return has_value();
 1741|   534k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.06M|    {
  490|  1.06M|        return m_has_value;
  491|  1.06M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  29.5k|    {
 1746|  29.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  29.5k|        return this->get_unexpected().error();
 1748|  29.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.5k|    {
  473|  29.5k|        return m_unexpected;
  474|  29.5k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   505k|    {
 1769|   505k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   505k|        return this->get_value();
 1771|   505k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   505k|    {
  456|   505k|        return m_value;
  457|   505k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  52.9k|        : base(unexpect, std::move(e.error())),
 1616|  52.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  52.9k|    {
 1618|  52.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  57.6k|          m_has_value(false)
  451|  57.6k|    {
  452|  57.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.71M|    {
 1316|  3.71M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  3.65M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.65M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.65M|    {
 1572|  3.65M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.65M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.65M|    {
  442|  3.65M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  3.71M|    {
 1740|  3.71M|        return has_value();
 1741|  3.71M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.42M|    {
  490|  7.42M|        return m_has_value;
  491|  7.42M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  57.6k|    {
 1746|  57.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  57.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  57.6k|        return this->get_unexpected().error();
 1748|  57.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  57.6k|    {
  473|  57.6k|        return m_unexpected;
  474|  57.6k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.04M|    {
 1805|  3.04M|        return std::move(value());
 1806|  3.04M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.65M|    {
 1769|  3.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.65M|        return this->get_value();
 1771|  3.65M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.65M|    {
  456|  3.65M|        return m_value;
  457|  3.65M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   215k|    {
 1979|   215k|        return detail::transform_error_impl(std::move(*this),
 1980|   215k|                                            std::forward<F>(f));
 1981|   215k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   215k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   215k|    else {
 1472|   215k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   215k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   215k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 212k, False: 3.52k]
  |  |  ------------------
  ------------------
 1474|   215k|                   ? result(*std::forward<Exp>(exp))
 1475|   215k|                   : result(unexpect,
 1476|  3.52k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.52k|                                           std::forward<Exp>(exp).error()));
 1478|   215k|    }
 1479|   215k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   431k|    {
  490|   431k|        return m_has_value;
  491|   431k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   212k|    {
 1805|   212k|        return std::move(value());
 1806|   212k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   212k|    {
 1769|   212k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   212k|        return this->get_value();
 1771|   212k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   212k|    {
  456|   212k|        return m_value;
  457|   212k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.52k|    {
 1756|  3.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.52k|        return std::move(this->get_unexpected().error());
 1758|  3.52k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.52k|    {
  473|  3.52k|        return m_unexpected;
  474|  3.52k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.52k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.52k|    {
 1628|  3.52k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   168k|    {
 8964|   168k|        return m_current;
 8965|   168k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   151k|    {
 8857|   151k|        return m_locale;
 8858|   151k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   162k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   162k|    static_cast<    \
  |  |  935|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   162k|    static_cast<    \
  |  |  935|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   162k|    {
 8864|   162k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  12.7k|        : base(unexpect, std::move(e.error())),
 1616|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.7k|    {
 1618|  12.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   940k|    {
 8964|   940k|        return m_current;
 8965|   940k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   943k|    {
 8857|   943k|        return m_locale;
 8858|   943k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   965k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   965k|    static_cast<    \
  |  |  935|   965k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   965k|    static_cast<    \
  |  |  935|   965k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   965k|    {
 8864|   965k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  26.4k|        : base(unexpect, std::move(e.error())),
 1616|  26.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.4k|    {
 1618|  26.4k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   131k|        : base(unexpect, std::move(e.error())),
 1616|   131k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   131k|    {
 1618|   131k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   131k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   131k|          m_has_value(false)
  550|   131k|    {
  551|   131k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   131k|    {
 1316|   131k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  7.29M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  7.29M|        : m_deferred_init(), m_has_value(true)
  529|  7.29M|    {
  530|  7.29M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.44M|    {
 4559|  1.44M|        return x.is_at_end();
 4560|  1.44M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  2.95M|    {
 4603|  2.95M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 2.95M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  2.95M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 2.95M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  2.95M|        return !read_at_position();
 4610|  2.95M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  8.07M|    {
 4583|  8.07M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  8.07M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 8.07M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  8.07M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  8.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.55M, False: 1.52M]
  |  |  ------------------
  ------------------
 4590|  6.55M|            return true;
 4591|  6.55M|        }
 4592|       |
 4593|  3.03M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.52M, False: 1.50M]
  ------------------
 4594|  1.52M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 17.5k, False: 1.50M]
  ------------------
 4595|  17.5k|                return false;
 4596|  17.5k|            }
 4597|  1.52M|        }
 4598|  1.50M|        return true;
 4599|  1.52M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  2.65M|    {
 4518|  2.65M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  2.65M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 2.65M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  2.65M|        auto res = read_at_position();
 4527|  2.65M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  2.65M|        return parent()->get_character_at(m_position);
 4529|  2.65M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  2.65M|    {
 4388|  2.65M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.44M, False: 1.21M]
  |  |  ------------------
  ------------------
 4389|  2.65M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.44M|            return m_putback_buffer[pos];
 4391|  1.44M|        }
 4392|  1.21M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.21M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.21M|        return m_current_view[start];
 4395|  1.21M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.31k|        : base(unexpect, std::move(e.error())),
 1616|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.31k|    {
 1618|  2.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.31k|          m_has_value(false)
  451|  2.31k|    {
  452|  2.31k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  12.7k|        : m_unexpected(std::forward<Args>(args)...)
  359|  12.7k|    {
  360|  12.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  12.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  2.46M|    {
 4504|  2.46M|        ++m_position;
 4505|  2.46M|        (void)read_at_position();
 4506|  2.46M|        return *this;
 4507|  2.46M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  1.08M|    {
 4553|  1.08M|        return !(lhs == rhs);
 4554|  1.08M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  1.08M|    {
 4548|  1.08M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 1.08M, False: 0]
  |  Branch (4548:46): [True: 193k, False: 891k]
  ------------------
 4549|  1.08M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  12.7k|        : m_unexpected(std::forward<Err>(e))
  350|  12.7k|    {
  351|  12.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    996|        : base(unexpect, std::move(e.error())),
 1616|    996|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    996|    {
 1618|    996|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    996|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    996|          m_has_value(false)
  451|    996|    {
  452|    996|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   105k|    {
 1316|   105k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   104k|        : base(std::in_place, std::forward<U>(val)),
 1570|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   104k|    {
 1572|   104k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   104k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   104k|    {
  442|   104k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   105k|    {
 1740|   105k|        return has_value();
 1741|   105k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   211k|    {
  490|   211k|        return m_has_value;
  491|   211k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    996|    {
 1746|    996|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    996|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    996|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    996|        return this->get_unexpected().error();
 1748|    996|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    996|    {
  473|    996|        return m_unexpected;
  474|    996|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   104k|    {
 1805|   104k|        return std::move(value());
 1806|   104k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   104k|    {
 1769|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   104k|        return this->get_value();
 1771|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   104k|    {
  456|   104k|        return m_value;
  457|   104k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  4.52M|    {
 3484|  4.52M|        return m_sentinel;
 3485|  4.52M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   321k|    {
 1740|   321k|        return has_value();
 1741|   321k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   642k|    {
  490|   642k|        return m_has_value;
  491|   642k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  15.0k|    {
 1746|  15.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  15.0k|        return this->get_unexpected().error();
 1748|  15.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  15.0k|    {
  473|  15.0k|        return m_unexpected;
  474|  15.0k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   254k|    {
 1805|   254k|        return std::move(value());
 1806|   254k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   306k|    {
 1769|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   306k|        return this->get_value();
 1771|   306k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   306k|    {
  456|   306k|        return m_value;
  457|   306k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   134k|    {
 3480|   134k|        return m_iterator;
 3481|   134k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   134k|    {
 3484|   134k|        return m_sentinel;
 3485|   134k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   128k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   128k|    static_cast<    \
  |  |  935|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   128k|    static_cast<    \
  |  |  935|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   128k|    {
 3466|   128k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.51M|    {
 4570|  1.51M|        return !x.is_at_end();
 4571|  1.51M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.52k|        : base(unexpect, std::move(e.error())),
 1616|  3.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.52k|    {
 1618|  3.52k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.52k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.52k|          m_has_value(false)
  451|  3.52k|    {
  452|  3.52k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   215k|    {
 1316|   215k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   212k|        : base(std::in_place, std::forward<U>(val)),
 1570|   212k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   212k|    {
 1572|   212k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   212k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   212k|    {
  442|   212k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.40k|        : base(unexpect, std::move(e.error())),
 1616|  1.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.40k|    {
 1618|  1.40k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.40k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.40k|          m_has_value(false)
  451|  1.40k|    {
  452|  1.40k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   174k|    {
 1316|   174k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   172k|        : base(std::in_place, std::forward<U>(val)),
 1570|   172k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   172k|    {
 1572|   172k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   172k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   172k|    {
  442|   172k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   174k|    {
 1740|   174k|        return has_value();
 1741|   174k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   348k|    {
  490|   348k|        return m_has_value;
  491|   348k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.40k|    {
 1746|  1.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.40k|        return this->get_unexpected().error();
 1748|  1.40k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.40k|    {
  473|  1.40k|        return m_unexpected;
  474|  1.40k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   172k|    {
 1805|   172k|        return std::move(value());
 1806|   172k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   172k|    {
 1769|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   172k|        return this->get_value();
 1771|   172k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   172k|    {
  456|   172k|        return m_value;
  457|   172k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   844k|    {
 3000|   844k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   844k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   844k|    {
 2981|   844k|        return t.data();
 2982|   844k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.61M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.61M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.61M|    {
 1572|  2.61M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.61M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.61M|    {
  442|  2.61M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  51.9k|    {
 1795|  51.9k|        return value();
 1796|  51.9k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  85.3k|    {
 1795|  85.3k|        return value();
 1796|  85.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    684|        : base(std::in_place, std::forward<U>(val)),
 1570|    684|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    684|    {
 1572|    684|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    684|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    684|    {
  442|    684|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.36k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.36k|    {
 1572|  1.36k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.36k|    {
  442|  1.36k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  24.7M|    {
 4559|  24.7M|        return x.is_at_end();
 4560|  24.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  48.5M|    {
 4603|  48.5M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 48.5M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  48.5M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 48.5M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  48.5M|        return !read_at_position();
 4610|  48.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   128M|    {
 4583|   128M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   128M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   128M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 128M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   128M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   128M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 104M, False: 23.5M]
  |  |  ------------------
  ------------------
 4590|   104M|            return true;
 4591|   104M|        }
 4592|       |
 4593|  47.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 23.5M, False: 23.5M]
  ------------------
 4594|  23.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 21.2k, False: 23.5M]
  ------------------
 4595|  21.2k|                return false;
 4596|  21.2k|            }
 4597|  23.5M|        }
 4598|  23.5M|        return true;
 4599|  23.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   175M|    {
 4357|   175M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   175M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  47.3M|    {
 4518|  47.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  47.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  47.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 47.3M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  47.3M|        auto res = read_at_position();
 4527|  47.3M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  47.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  47.3M|        return parent()->get_character_at(m_position);
 4529|  47.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  47.3M|    {
 4388|  47.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  47.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.5M, False: 22.7M]
  |  |  ------------------
  ------------------
 4389|  47.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  24.5M|            return m_putback_buffer[pos];
 4391|  24.5M|        }
 4392|  22.7M|        const auto start = pos - m_putback_buffer.size();
 4393|  22.7M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  22.7M|        return m_current_view[start];
 4395|  22.7M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   765k|        : base(std::in_place, std::forward<U>(val)),
 1570|   765k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   765k|    {
 1572|   765k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   765k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   765k|    {
  442|   765k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   768k|    {
 1316|   768k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.32k|        : base(unexpect, std::move(e.error())),
 1616|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.32k|    {
 1618|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.32k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.32k|          m_has_value(false)
  451|  2.32k|    {
  452|  2.32k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  32.4M|    {
 4504|  32.4M|        ++m_position;
 4505|  32.4M|        (void)read_at_position();
 4506|  32.4M|        return *this;
 4507|  32.4M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  9.29M|    {
 4553|  9.29M|        return !(lhs == rhs);
 4554|  9.29M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  9.29M|    {
 4548|  9.29M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 9.29M, False: 0]
  |  Branch (4548:46): [True: 310k, False: 8.98M]
  ------------------
 4549|  9.29M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   132M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   132M|    else {
 4075|       |        // utf-32
 4076|   132M|        static_assert(sizeof(U) == 4);
 4077|   132M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   132M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   132M|        return 1;
 4079|   132M|    }
 4080|   132M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   132M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   132M|    else {
 4281|   132M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   132M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   132M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   132M|        auto cp = static_cast<char32_t>(input.front());
 4283|   132M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   132M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 737k, False: 131M]
  |  |  ------------------
  ------------------
 4284|   737k|            return invalid_code_point;
 4285|   737k|        }
 4286|   131M|        return cp;
 4287|   132M|    }
 4288|   132M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    928|        : base(unexpect, std::move(e.error())),
 1616|    928|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    928|    {
 1618|    928|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    928|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    928|          m_has_value(false)
  451|    928|    {
  452|    928|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   613k|    {
 1316|   613k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   612k|        : base(std::in_place, std::forward<U>(val)),
 1570|   612k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   612k|    {
 1572|   612k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   612k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   612k|    {
  442|   612k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   613k|    {
 1740|   613k|        return has_value();
 1741|   613k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    928|    {
 1746|    928|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    928|        return this->get_unexpected().error();
 1748|    928|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    928|    {
  473|    928|        return m_unexpected;
  474|    928|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   612k|    {
 1805|   612k|        return std::move(value());
 1806|   612k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   612k|    {
 1769|   612k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   612k|        return this->get_value();
 1771|   612k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   612k|    {
  456|   612k|        return m_value;
  457|   612k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  74.6M|    {
 3484|  74.6M|        return m_sentinel;
 3485|  74.6M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.85M|    {
 1740|  1.85M|        return has_value();
 1741|  1.85M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.71M|    {
  490|  3.71M|        return m_has_value;
  491|  3.71M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  28.8k|    {
 1746|  28.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  28.8k|        return this->get_unexpected().error();
 1748|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.52M|    {
 1805|  1.52M|        return std::move(value());
 1806|  1.52M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.82M|    {
 1769|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82M|        return this->get_value();
 1771|  1.82M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.82M|    {
  456|  1.82M|        return m_value;
  457|  1.82M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  62.1M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  62.1M|    else {
 3966|  62.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  62.1M|                                       to_address(first), to_address(last)))};
 3968|  62.1M|    }
 3969|  62.1M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   186M|{
  316|   186M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   186M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   186M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   772k|    {
 3480|   772k|        return m_iterator;
 3481|   772k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   772k|    {
 3484|   772k|        return m_sentinel;
 3485|   772k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   765k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   765k|    static_cast<    \
  |  |  935|   765k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   765k|    static_cast<    \
  |  |  935|   765k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   765k|    {
 3466|   765k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  23.8M|    {
 4570|  23.8M|        return !x.is_at_end();
 4571|  23.8M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  4.64k|        : base(unexpect, std::move(e.error())),
 1616|  4.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.64k|    {
 1618|  4.64k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.64k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.64k|          m_has_value(false)
  451|  4.64k|    {
  452|  4.64k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.53M|    {
 1316|  1.53M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.53M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.53M|    {
 1572|  1.53M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.53M|    {
  442|  1.53M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.07M|    {
  490|  3.07M|        return m_has_value;
  491|  3.07M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.53M|    {
 1769|  1.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.53M|        return this->get_value();
 1771|  1.53M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.53M|    {
  456|  1.53M|        return m_value;
  457|  1.53M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.85k|        : base(unexpect, std::move(e.error())),
 1616|  1.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.85k|    {
 1618|  1.85k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.85k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.85k|          m_has_value(false)
  451|  1.85k|    {
  452|  1.85k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.22M|    {
 1316|  1.22M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.22M|    {
 1572|  1.22M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.22M|    {
  442|  1.22M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.53M|    {
 1979|  1.53M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.53M|                                            std::forward<F>(f));
 1981|  1.53M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.53M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.53M|    else {
 1472|  1.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.53M, False: 4.64k]
  |  |  ------------------
  ------------------
 1474|  1.53M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.53M|                   : result(unexpect,
 1476|  4.64k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.64k|                                           std::forward<Exp>(exp).error()));
 1478|  1.53M|    }
 1479|  1.53M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.53M|    {
 1805|  1.53M|        return std::move(value());
 1806|  1.53M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  4.64k|    {
 1756|  4.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.64k|        return std::move(this->get_unexpected().error());
 1758|  4.64k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.64k|    {
  473|  4.64k|        return m_unexpected;
  474|  4.64k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.64k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.64k|    {
 1628|  4.64k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.22M|    {
 1740|  1.22M|        return has_value();
 1741|  1.22M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.45M|    {
  490|  2.45M|        return m_has_value;
  491|  2.45M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.85k|    {
 1746|  1.85k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.85k|        return this->get_unexpected().error();
 1748|  1.85k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.85k|    {
  473|  1.85k|        return m_unexpected;
  474|  1.85k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.22M|    {
 1805|  1.22M|        return std::move(value());
 1806|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.81M|    {
 3000|  2.81M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.81M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.81M|    {
 2981|  2.81M|        return t.data();
 2982|  2.81M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   303k|    {
 1795|   303k|        return value();
 1796|   303k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   607k|    {
 1795|   607k|        return value();
 1796|   607k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    122|        : base(std::in_place, std::forward<U>(val)),
 1570|    122|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    122|    {
 1572|    122|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    122|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    122|    {
  442|    122|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    244|        : base(std::in_place, std::forward<U>(val)),
 1570|    244|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    244|    {
 1572|    244|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    244|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    244|    {
  442|    244|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  11.1M|    {
 4357|  11.1M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  11.1M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   300k|    {
 6182|   300k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   300k|        return static_cast<std::size_t>(m_desc &
 6187|   300k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   300k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   601k|    {
 6208|   601k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   601k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   300k|    {
 6150|   300k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   300k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   300k|        const auto t = type(id);
 6162|   300k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   300k|        basic_scan_arg<Context> arg;
 6167|   300k|        arg.m_type = t;
 6168|   300k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 300k, False: 0]
  ------------------
 6169|   300k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   300k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   300k|        return arg;
 6175|   300k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   300k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   300k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   300k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   300k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   300k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   300k|    {
 6212|   300k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   300k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   521k|    {
 5966|   521k|        return m_type != detail::arg_type::none_type;
 5967|   521k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   129k|{
 9324|   129k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   129k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   129k|{
 9225|   129k|#define SCN_VISIT(Type)                                                \
 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   129k|    }                                                                  \
 9229|   129k|    else {                                                             \
 9230|   129k|        return vis(monostate_val);                                     \
 9231|   129k|    }
 9232|       |
 9233|   129k|    monostate monostate_val{};
 9234|       |
 9235|   129k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 129k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 129k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 129k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 129k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 129k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 129k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 129k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 129k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 129k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 129k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 129k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 129k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 129k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 129k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 129k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 129k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 129k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 129k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  64.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 64.6k, False: 64.6k]
  ------------------
 9273|  64.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  64.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  64.6k|    }                                                                  \
  |  | 9229|  64.6k|    else {                                                             \
  |  | 9230|  64.6k|        return vis(monostate_val);                                     \
  |  | 9231|  64.6k|    }
  ------------------
 9274|   129k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 64.6k, False: 64.6k]
  ------------------
 9275|   129k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   129k|    }                                                                  \
  |  | 9229|   129k|    else {                                                             \
  |  | 9230|   129k|        return vis(monostate_val);                                     \
  |  | 9231|   129k|    }
  ------------------
 9276|   129k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 129k]
  ------------------
 9277|   129k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   129k|    }                                                                  \
  |  | 9229|   129k|    else {                                                             \
  |  | 9230|   129k|        return vis(monostate_val);                                     \
  |  | 9231|   129k|    }
  ------------------
 9278|   129k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 129k]
  ------------------
 9279|   129k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   129k|    }                                                                  \
  |  | 9229|   129k|    else {                                                             \
  |  | 9230|   129k|        return vis(monostate_val);                                     \
  |  | 9231|   129k|    }
  ------------------
 9280|   129k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 129k]
  ------------------
 9281|   129k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   129k|    }                                                                  \
  |  | 9229|   129k|    else {                                                             \
  |  | 9230|   129k|        return vis(monostate_val);                                     \
  |  | 9231|   129k|    }
  ------------------
 9282|   129k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 129k]
  ------------------
 9283|   129k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   129k|    }                                                                  \
  |  | 9229|   129k|    else {                                                             \
  |  | 9230|   129k|        return vis(monostate_val);                                     \
  |  | 9231|   129k|    }
  ------------------
 9284|       |
 9285|   129k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 129k]
  ------------------
 9286|   129k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   129k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   129k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 129k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 129k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   129k|            SCN_CLANG_POP
 9303|   129k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   684k|{
 6011|   684k|    return arg.m_type;
 6012|   684k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   358k|{
 6023|   358k|    return arg.m_value;
 6024|   358k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|  60.4k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  60.4k|    {
 8949|  60.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   138k|{
 4691|   138k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 138k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   138k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   138k|                            ranges::default_sentinel};
 4697|   138k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   138k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   138k|    {
 4455|   138k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   138k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   138k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  77.8k|{
 9324|  77.8k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  77.8k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  77.8k|{
 9225|  77.8k|#define SCN_VISIT(Type)                                                \
 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  77.8k|    }                                                                  \
 9229|  77.8k|    else {                                                             \
 9230|  77.8k|        return vis(monostate_val);                                     \
 9231|  77.8k|    }
 9232|       |
 9233|  77.8k|    monostate monostate_val{};
 9234|       |
 9235|  77.8k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 77.8k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 77.8k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 77.8k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 77.8k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 77.8k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 77.8k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 77.8k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 77.8k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 77.8k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 77.8k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 77.8k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 77.8k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 77.8k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 77.8k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 77.8k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 77.8k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 77.8k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 77.8k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 77.8k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  77.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 77.8k, False: 0]
  ------------------
 9275|  77.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  77.8k|    }                                                                  \
  |  | 9229|  77.8k|    else {                                                             \
  |  | 9230|  77.8k|        return vis(monostate_val);                                     \
  |  | 9231|  77.8k|    }
  ------------------
 9276|  77.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 77.8k]
  ------------------
 9277|  77.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  77.8k|    }                                                                  \
  |  | 9229|  77.8k|    else {                                                             \
  |  | 9230|  77.8k|        return vis(monostate_val);                                     \
  |  | 9231|  77.8k|    }
  ------------------
 9278|  77.8k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 77.8k]
  ------------------
 9279|  77.8k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  77.8k|    }                                                                  \
  |  | 9229|  77.8k|    else {                                                             \
  |  | 9230|  77.8k|        return vis(monostate_val);                                     \
  |  | 9231|  77.8k|    }
  ------------------
 9280|  77.8k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 77.8k]
  ------------------
 9281|  77.8k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  77.8k|    }                                                                  \
  |  | 9229|  77.8k|    else {                                                             \
  |  | 9230|  77.8k|        return vis(monostate_val);                                     \
  |  | 9231|  77.8k|    }
  ------------------
 9282|  77.8k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 77.8k]
  ------------------
 9283|  77.8k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  77.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  77.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  77.8k|    }                                                                  \
  |  | 9229|  77.8k|    else {                                                             \
  |  | 9230|  77.8k|        return vis(monostate_val);                                     \
  |  | 9231|  77.8k|    }
  ------------------
 9284|       |
 9285|  77.8k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 77.8k]
  ------------------
 9286|  77.8k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  77.8k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  77.8k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 77.8k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 77.8k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  77.8k|            SCN_CLANG_POP
 9303|  77.8k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   102k|        : m_format{format},
 6280|   102k|          m_next_arg_id{next_arg_id},
 6281|   102k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   102k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   102k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   102k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   102k|    {
 6287|   102k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   102k|    {
 3075|   102k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   102k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   102k|    {
 3041|   102k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   102k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   102k|{
 7796|   102k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   102k|    handler.check_args_exhausted();
 7798|   102k|    return handler.get_error();
 7799|   102k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   102k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   102k|    auto begin = format.data();
 7764|   102k|    auto it = begin;
 7765|   102k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   186k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 102k, False: 83.9k]
  ------------------
 7768|   102k|        const auto ch = *it++;
 7769|   102k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 102k, False: 0]
  ------------------
 7770|   102k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   102k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   102k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 18.2k, False: 83.9k]
  ------------------
 7774|  18.2k|                return;
 7775|  18.2k|            }
 7776|   102k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   102k|    }
 7787|       |
 7788|  83.9k|    handler.on_literal_text(begin, end);
 7789|  83.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   102k|{
 7693|   102k|    struct id_adapter {
 7694|   102k|        constexpr void operator()()
 7695|   102k|        {
 7696|   102k|            arg_id = handler.on_arg_id();
 7697|   102k|        }
 7698|   102k|        constexpr void operator()(std::size_t id)
 7699|   102k|        {
 7700|   102k|            arg_id = handler.on_arg_id(id);
 7701|   102k|        }
 7702|       |
 7703|   102k|        constexpr void on_error(const char* msg)
 7704|   102k|        {
 7705|   102k|            SCN_UNLIKELY_ATTR
 7706|   102k|            handler.on_error(msg);
 7707|   102k|        }
 7708|       |
 7709|   102k|        Handler& handler;
 7710|   102k|        std::size_t arg_id;
 7711|   102k|    };
 7712|       |
 7713|   102k|    ++begin;
 7714|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   102k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 102k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   102k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 102k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   102k|    else {
 7726|   102k|        auto adapter = id_adapter{handler, 0};
 7727|   102k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   102k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   102k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 102k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   102k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 102k, False: 0]
  ------------------
 7738|   102k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   102k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   102k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.31k, False: 94.9k]
  |  |  |  Branch (865:45): [True: 0, False: 102k]
  |  |  |  Branch (865:45): [True: 7.31k, False: 94.9k]
  |  |  ------------------
  ------------------
 7744|  7.31k|                handler.on_error("Unknown format specifier");
 7745|  7.31k|                return begin;
 7746|  7.31k|            }
 7747|   102k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   102k|    }
 7754|  94.9k|    return begin + 1;
 7755|   102k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   162k|    {
 8847|   162k|        return m_args.get(id);
 8848|   162k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   162k|    {
 6315|   162k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   162k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   162k|        do_check_arg_id(id);
 6323|   162k|        return id;
 6324|   162k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   162k|{
 6809|   162k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   162k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   162k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   102k|{
 7194|   102k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   102k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 102k, False: 0]
  |  Branch (7195:26): [True: 0, False: 102k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   102k|    handler();
 7200|   102k|    return begin;
 7201|   102k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7142|  10.9k|{
 7143|  10.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  10.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  10.9k|    unsigned long long value = 0;
 7147|  21.9k|    do {
 7148|  21.9k|        value *= 10;
 7149|  21.9k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  21.9k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 21.9k]
  ------------------
 7151|  21.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  21.9k|        ++begin;
 7155|  21.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 21.9k, False: 0]
  |  Branch (7155:30): [True: 21.9k, False: 0]
  |  Branch (7155:47): [True: 10.9k, False: 10.9k]
  ------------------
 7156|  10.9k|    return static_cast<int>(value);
 7157|  10.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   102k|        {
 7696|   102k|            arg_id = handler.on_arg_id();
 7697|   102k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   151k|    {
 6310|   151k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   151k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   314k|    {
 6299|   314k|        return m_format.data();
 6300|   314k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   102k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   102k|    {
 7874|   102k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   102k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   102k|{
 7609|   102k|    auto do_presentation = [&]() -> const CharT* {
 7610|   102k|        if (*begin == CharT{'['}) {
 7611|   102k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   102k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   102k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   102k|                return begin;
 7617|   102k|            }
 7618|   102k|            handler.on_character_set_string(set);
 7619|   102k|            return begin;
 7620|   102k|        }
 7621|   102k|        if (*begin == CharT{'/'}) {
 7622|   102k|            return parse_presentation_regex(begin, end, handler);
 7623|   102k|        }
 7624|   102k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   102k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   102k|            handler.on_error("Invalid type specifier in format string");
 7627|   102k|            return begin;
 7628|   102k|        }
 7629|   102k|        handler.on_type(type);
 7630|   102k|        return begin;
 7631|   102k|    };
 7632|       |
 7633|   102k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 102k, False: 0]
  |  Branch (7633:28): [True: 89.8k, False: 12.3k]
  ------------------
 7634|   102k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 89.8k, False: 0]
  |  Branch (7634:36): [True: 86.2k, False: 3.65k]
  ------------------
 7635|  86.2k|        return do_presentation();
 7636|  86.2k|    }
 7637|       |
 7638|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  15.9k|    begin = parse_align(begin, end, handler);
 7644|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  15.9k|    begin = parse_width(begin, end, handler);
 7650|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  15.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 15.9k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  15.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.65k, False: 12.3k]
  ------------------
 7669|  3.65k|        handler.on_localized();
 7670|  3.65k|        ++begin;
 7671|  3.65k|    }
 7672|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  15.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 15.9k, False: 0]
  |  Branch (7677:25): [True: 12.3k, False: 3.65k]
  ------------------
 7678|  12.3k|        do_presentation();
 7679|  12.3k|    }
 7680|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  15.9k|    return begin;
 7686|  15.9k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|   144k|{
 7258|   144k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 138k, False: 5.48k]
  |  Branch (7258:33): [True: 138k, False: 0]
  ------------------
 7259|   144k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 5.48k, False: 0]
  |  Branch (7259:33): [True: 5.48k, False: 0]
  ------------------
 7260|   144k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|  98.5k|    auto do_presentation = [&]() -> const CharT* {
 7610|  98.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 5.02k, False: 93.5k]
  ------------------
 7611|  5.02k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  5.02k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  5.02k|            handler.on_character_set_string(set);
 7619|  5.02k|            return begin;
 7620|  5.02k|        }
 7621|  93.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 93.5k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  93.5k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  93.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 89.8k]
  |  |  ------------------
  ------------------
 7626|  3.65k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.65k|            return begin;
 7628|  3.65k|        }
 7629|  89.8k|        handler.on_type(type);
 7630|  89.8k|        return begin;
 7631|  93.5k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  5.02k|{
 7448|  5.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  5.02k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  5.02k|    auto start = begin;
 7452|  5.02k|    ++begin;
 7453|       |
 7454|  5.02k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  5.02k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 5.02k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  5.02k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 5.02k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  15.0k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 15.0k, False: 0]
  ------------------
 7479|  15.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  15.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 5.02k, False: 10.0k]
  ------------------
 7484|  5.02k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  5.02k|        }
 7486|       |
 7487|  10.0k|        parse_presentation_set_literal(begin, end, handler);
 7488|  10.0k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  5.02k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7411|  10.0k|{
 7412|  10.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  10.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  10.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  10.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 10.0k, False: 0]
  |  Branch (7419:25): [True: 10.0k, False: 0]
  |  Branch (7419:49): [True: 10.0k, False: 0]
  ------------------
 7420|  10.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 10.0k, False: 0]
  ------------------
 7421|  10.0k|        ++begin;
 7422|       |
 7423|  10.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  10.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  10.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  10.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  10.0k|        return;
 7437|  10.0k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7387|  20.0k|{
 7388|  20.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  20.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  20.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  40.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.0k]
  |  |  |  Branch (865:45): [True: 0, False: 20.0k]
  |  |  |  Branch (865:45): [True: 0, False: 20.0k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  20.0k|    const auto cp =
 7397|  20.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  20.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.0k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  20.0k|    begin += len;
 7404|  20.0k|    return cp;
 7405|  20.0k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  7.53k|    {
 7102|  7.53k|        m_specs.charset_string_data = fmt.data();
 7103|  7.53k|        m_specs.charset_string_size = fmt.size();
 7104|  7.53k|        on_type(presentation_type::string_set);
 7105|  7.53k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|   149k|{
 7206|   149k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 149k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 149k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 149k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 149k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 149k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 149k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 149k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 149k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 149k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 149k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 149k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 149k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 149k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 149k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 149k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 149k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 149k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 149k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   138k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 138k, False: 10.9k]
  ------------------
 7237|   138k|            return presentation_type::string;
 7238|  5.48k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 5.48k, False: 144k]
  ------------------
 7239|  5.48k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 149k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 149k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 149k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 149k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  5.48k|        default:
  ------------------
  |  Branch (7250:9): [True: 5.48k, False: 144k]
  ------------------
 7251|  5.48k|            return presentation_type::none;
 7252|   149k|    }
 7253|   149k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  15.9k|{
 7283|  15.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  15.9k|    auto check_align = [](wchar_t ch) {
 7286|  15.9k|        switch (ch) {
 7287|  15.9k|            case L'<':
 7288|  15.9k|                return align_type::left;
 7289|  15.9k|            case L'>':
 7290|  15.9k|                return align_type::right;
 7291|  15.9k|            case L'^':
 7292|  15.9k|                return align_type::center;
 7293|  15.9k|            default:
 7294|  15.9k|                return align_type::none;
 7295|  15.9k|        }
 7296|  15.9k|    };
 7297|       |
 7298|  15.9k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  15.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  |  Branch (865:45): [True: 0, False: 15.9k]
  |  |  |  Branch (865:45): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7300|  15.9k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  15.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  15.9k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  15.9k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  15.9k|    const auto begin_before_fill = begin;
 7310|  15.9k|    begin += potential_fill_len;
 7311|       |
 7312|  15.9k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 15.9k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  15.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  15.9k|    const auto begin_after_fill = begin;
 7318|  15.9k|    ++begin;
 7319|       |
 7320|  15.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 15.9k, False: 0]
  ------------------
 7321|  15.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  15.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 5.02k, False: 10.9k]
  ------------------
 7326|  5.02k|            return begin_before_fill;
 7327|  5.02k|        }
 7328|  15.9k|    }
 7329|       |
 7330|  10.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 10.9k, False: 0]
  ------------------
 7331|  10.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 10.9k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  10.9k|        return begin_before_fill;
 7336|  10.9k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  10.9k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|  23.9k|{
 7265|  23.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|  23.9k|    else {
 7270|  23.9k|        const auto lengths =
 7271|  23.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|  23.9k|            "\3\4";
 7273|  23.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|  23.9k|        return len;
 7275|  23.9k|    }
 7276|  23.9k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  31.9k|    auto check_align = [](wchar_t ch) {
 7286|  31.9k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 31.9k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 31.9k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 31.9k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  31.9k|            default:
  ------------------
  |  Branch (7293:13): [True: 31.9k, False: 0]
  ------------------
 7294|  31.9k|                return align_type::none;
 7295|  31.9k|        }
 7296|  31.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  15.9k|{
 7348|  15.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  15.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 15.9k, False: 0]
  |  Branch (7350:33): [True: 7.31k, False: 8.68k]
  ------------------
 7351|  7.31k|        int width = parse_simple_int(begin, end);
 7352|  7.31k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  7.31k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.31k, False: 0]
  |  |  ------------------
  ------------------
 7353|  7.31k|            handler.on_width(width);
 7354|  7.31k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  7.31k|    }
 7360|  15.9k|    return begin;
 7361|  15.9k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|  3.65k|    {
 7879|  3.65k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.65k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.65k, False: 0]
  ------------------
 7881|  3.65k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.65k, False: 0]
  ------------------
 7882|  3.65k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.65k, False: 0]
  ------------------
 7883|  3.65k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.65k, False: 0]
  ------------------
 7884|  3.65k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.65k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.65k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  94.9k|{
 9324|  94.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  94.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  94.9k|{
 9225|  94.9k|#define SCN_VISIT(Type)                                                \
 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  94.9k|    }                                                                  \
 9229|  94.9k|    else {                                                             \
 9230|  94.9k|        return vis(monostate_val);                                     \
 9231|  94.9k|    }
 9232|       |
 9233|  94.9k|    monostate monostate_val{};
 9234|       |
 9235|  94.9k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 94.9k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 94.9k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 94.9k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 94.9k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 94.9k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 94.9k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 94.9k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 94.9k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 94.9k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 94.9k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 94.9k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 94.9k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 94.9k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 94.9k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 94.9k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 94.9k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 94.9k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 94.9k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  47.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 47.4k, False: 47.4k]
  ------------------
 9273|  47.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  47.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  47.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  47.4k|    }                                                                  \
  |  | 9229|  47.4k|    else {                                                             \
  |  | 9230|  47.4k|        return vis(monostate_val);                                     \
  |  | 9231|  47.4k|    }
  ------------------
 9274|  94.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 47.4k, False: 47.4k]
  ------------------
 9275|  94.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.9k|    }                                                                  \
  |  | 9229|  94.9k|    else {                                                             \
  |  | 9230|  94.9k|        return vis(monostate_val);                                     \
  |  | 9231|  94.9k|    }
  ------------------
 9276|  94.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 94.9k]
  ------------------
 9277|  94.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.9k|    }                                                                  \
  |  | 9229|  94.9k|    else {                                                             \
  |  | 9230|  94.9k|        return vis(monostate_val);                                     \
  |  | 9231|  94.9k|    }
  ------------------
 9278|  94.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 94.9k]
  ------------------
 9279|  94.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.9k|    }                                                                  \
  |  | 9229|  94.9k|    else {                                                             \
  |  | 9230|  94.9k|        return vis(monostate_val);                                     \
  |  | 9231|  94.9k|    }
  ------------------
 9280|  94.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 94.9k]
  ------------------
 9281|  94.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.9k|    }                                                                  \
  |  | 9229|  94.9k|    else {                                                             \
  |  | 9230|  94.9k|        return vis(monostate_val);                                     \
  |  | 9231|  94.9k|    }
  ------------------
 9282|  94.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 94.9k]
  ------------------
 9283|  94.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.9k|    }                                                                  \
  |  | 9229|  94.9k|    else {                                                             \
  |  | 9230|  94.9k|        return vis(monostate_val);                                     \
  |  | 9231|  94.9k|    }
  ------------------
 9284|       |
 9285|  94.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 94.9k]
  ------------------
 9286|  94.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  94.9k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  94.9k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 94.9k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 94.9k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  94.9k|            SCN_CLANG_POP
 9303|  94.9k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  60.4k|        : m_format{format},
 6280|  60.4k|          m_next_arg_id{next_arg_id},
 6281|  60.4k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  60.4k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  60.4k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  60.4k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  60.4k|    {
 6287|  60.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  60.4k|{
 7796|  60.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  60.4k|    handler.check_args_exhausted();
 7798|  60.4k|    return handler.get_error();
 7799|  60.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  60.4k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  60.4k|    auto begin = format.data();
 7764|  60.4k|    auto it = begin;
 7765|  60.4k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   111k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 60.4k, False: 51.2k]
  ------------------
 7768|  60.4k|        const auto ch = *it++;
 7769|  60.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 60.4k, False: 0]
  ------------------
 7770|  60.4k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  60.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  60.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 9.14k, False: 51.2k]
  ------------------
 7774|  9.14k|                return;
 7775|  9.14k|            }
 7776|  60.4k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  60.4k|    }
 7787|       |
 7788|  51.2k|    handler.on_literal_text(begin, end);
 7789|  51.2k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|  51.2k|    {
 8986|  51.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  51.2k|    static_cast<    \
  |  |  935|  51.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  51.2k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  60.4k|{
 7693|  60.4k|    struct id_adapter {
 7694|  60.4k|        constexpr void operator()()
 7695|  60.4k|        {
 7696|  60.4k|            arg_id = handler.on_arg_id();
 7697|  60.4k|        }
 7698|  60.4k|        constexpr void operator()(std::size_t id)
 7699|  60.4k|        {
 7700|  60.4k|            arg_id = handler.on_arg_id(id);
 7701|  60.4k|        }
 7702|       |
 7703|  60.4k|        constexpr void on_error(const char* msg)
 7704|  60.4k|        {
 7705|  60.4k|            SCN_UNLIKELY_ATTR
 7706|  60.4k|            handler.on_error(msg);
 7707|  60.4k|        }
 7708|       |
 7709|  60.4k|        Handler& handler;
 7710|  60.4k|        std::size_t arg_id;
 7711|  60.4k|    };
 7712|       |
 7713|  60.4k|    ++begin;
 7714|  60.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  60.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 60.4k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  60.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 60.4k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  60.4k|    else {
 7726|  60.4k|        auto adapter = id_adapter{handler, 0};
 7727|  60.4k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  60.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  60.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 60.4k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  60.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 60.4k, False: 0]
  ------------------
 7738|  60.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  60.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  60.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 56.7k]
  |  |  |  Branch (865:45): [True: 0, False: 60.4k]
  |  |  |  Branch (865:45): [True: 3.65k, False: 56.7k]
  |  |  ------------------
  ------------------
 7744|  3.65k|                handler.on_error("Unknown format specifier");
 7745|  3.65k|                return begin;
 7746|  3.65k|            }
 7747|  60.4k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  60.4k|    }
 7754|  56.7k|    return begin + 1;
 7755|  60.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  60.4k|{
 7194|  60.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  60.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  60.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  60.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 60.4k, False: 0]
  |  Branch (7195:26): [True: 0, False: 60.4k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  60.4k|    handler();
 7200|  60.4k|    return begin;
 7201|  60.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  60.4k|        {
 7696|  60.4k|            arg_id = handler.on_arg_id();
 7697|  60.4k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|  60.4k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  60.4k|    {
 7874|  60.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  60.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  60.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  60.4k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|  60.4k|{
 7609|  60.4k|    auto do_presentation = [&]() -> const CharT* {
 7610|  60.4k|        if (*begin == CharT{'['}) {
 7611|  60.4k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  60.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  60.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  60.4k|                return begin;
 7617|  60.4k|            }
 7618|  60.4k|            handler.on_character_set_string(set);
 7619|  60.4k|            return begin;
 7620|  60.4k|        }
 7621|  60.4k|        if (*begin == CharT{'/'}) {
 7622|  60.4k|            return parse_presentation_regex(begin, end, handler);
 7623|  60.4k|        }
 7624|  60.4k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  60.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  60.4k|            handler.on_error("Invalid type specifier in format string");
 7627|  60.4k|            return begin;
 7628|  60.4k|        }
 7629|  60.4k|        handler.on_type(type);
 7630|  60.4k|        return begin;
 7631|  60.4k|    };
 7632|       |
 7633|  60.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 60.4k, False: 0]
  |  Branch (7633:28): [True: 54.2k, False: 6.16k]
  ------------------
 7634|  60.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 54.2k, False: 0]
  |  Branch (7634:36): [True: 52.4k, False: 1.82k]
  ------------------
 7635|  52.4k|        return do_presentation();
 7636|  52.4k|    }
 7637|       |
 7638|  7.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  7.99k|    begin = parse_align(begin, end, handler);
 7644|  7.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  7.99k|    begin = parse_width(begin, end, handler);
 7650|  7.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  7.99k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 7.99k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  7.99k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 1.82k, False: 6.16k]
  ------------------
 7669|  1.82k|        handler.on_localized();
 7670|  1.82k|        ++begin;
 7671|  1.82k|    }
 7672|  7.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  7.99k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 7.99k, False: 0]
  |  Branch (7677:25): [True: 6.16k, False: 1.82k]
  ------------------
 7678|  6.16k|        do_presentation();
 7679|  6.16k|    }
 7680|  7.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  7.99k|    return begin;
 7686|  7.99k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|  58.5k|    auto do_presentation = [&]() -> const CharT* {
 7610|  58.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 2.51k, False: 56.0k]
  ------------------
 7611|  2.51k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  2.51k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  2.51k|            handler.on_character_set_string(set);
 7619|  2.51k|            return begin;
 7620|  2.51k|        }
 7621|  56.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 56.0k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  56.0k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  56.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 54.2k]
  |  |  ------------------
  ------------------
 7626|  1.82k|            handler.on_error("Invalid type specifier in format string");
 7627|  1.82k|            return begin;
 7628|  1.82k|        }
 7629|  54.2k|        handler.on_type(type);
 7630|  54.2k|        return begin;
 7631|  56.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  2.51k|{
 7448|  2.51k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  2.51k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  2.51k|    auto start = begin;
 7452|  2.51k|    ++begin;
 7453|       |
 7454|  2.51k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  2.51k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 2.51k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  2.51k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 2.51k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  7.53k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 7.53k, False: 0]
  ------------------
 7479|  7.53k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  7.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.53k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  7.53k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 2.51k, False: 5.02k]
  ------------------
 7484|  2.51k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  2.51k|        }
 7486|       |
 7487|  5.02k|        parse_presentation_set_literal(begin, end, handler);
 7488|  5.02k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  2.51k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7411|  5.02k|{
 7412|  5.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  5.02k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  5.02k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  5.02k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 5.02k, False: 0]
  |  Branch (7419:25): [True: 5.02k, False: 0]
  |  Branch (7419:49): [True: 5.02k, False: 0]
  ------------------
 7420|  5.02k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 5.02k, False: 0]
  ------------------
 7421|  5.02k|        ++begin;
 7422|       |
 7423|  5.02k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  5.02k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  5.02k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  5.02k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  5.02k|        return;
 7437|  5.02k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7387|  10.0k|{
 7388|  10.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  10.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  10.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.0k]
  |  |  |  Branch (865:45): [True: 0, False: 10.0k]
  |  |  |  Branch (865:45): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  10.0k|    const auto cp =
 7397|  10.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  10.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  10.0k|    begin += len;
 7404|  10.0k|    return cp;
 7405|  10.0k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|  7.99k|{
 7283|  7.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  7.99k|    auto check_align = [](wchar_t ch) {
 7286|  7.99k|        switch (ch) {
 7287|  7.99k|            case L'<':
 7288|  7.99k|                return align_type::left;
 7289|  7.99k|            case L'>':
 7290|  7.99k|                return align_type::right;
 7291|  7.99k|            case L'^':
 7292|  7.99k|                return align_type::center;
 7293|  7.99k|            default:
 7294|  7.99k|                return align_type::none;
 7295|  7.99k|        }
 7296|  7.99k|    };
 7297|       |
 7298|  7.99k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  7.99k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  |  Branch (865:45): [True: 0, False: 7.99k]
  |  |  |  Branch (865:45): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7300|  7.99k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  7.99k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  7.99k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  7.99k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  7.99k|    const auto begin_before_fill = begin;
 7310|  7.99k|    begin += potential_fill_len;
 7311|       |
 7312|  7.99k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 7.99k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  7.99k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  7.99k|    const auto begin_after_fill = begin;
 7318|  7.99k|    ++begin;
 7319|       |
 7320|  7.99k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 7.99k, False: 0]
  ------------------
 7321|  7.99k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  7.99k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 2.51k, False: 5.48k]
  ------------------
 7326|  2.51k|            return begin_before_fill;
 7327|  2.51k|        }
 7328|  7.99k|    }
 7329|       |
 7330|  5.48k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 5.48k, False: 0]
  ------------------
 7331|  5.48k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 5.48k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  5.48k|        return begin_before_fill;
 7336|  5.48k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  5.48k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  15.9k|    auto check_align = [](wchar_t ch) {
 7286|  15.9k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 15.9k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 15.9k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 15.9k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  15.9k|            default:
  ------------------
  |  Branch (7293:13): [True: 15.9k, False: 0]
  ------------------
 7294|  15.9k|                return align_type::none;
 7295|  15.9k|        }
 7296|  15.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|  7.99k|{
 7348|  7.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  7.99k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 7.99k, False: 0]
  |  Branch (7350:33): [True: 3.65k, False: 4.34k]
  ------------------
 7351|  3.65k|        int width = parse_simple_int(begin, end);
 7352|  3.65k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.65k, False: 0]
  |  |  ------------------
  ------------------
 7353|  3.65k|            handler.on_width(width);
 7354|  3.65k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  3.65k|    }
 7360|  7.99k|    return begin;
 7361|  7.99k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|  1.82k|    {
 7879|  1.82k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  1.82k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 1.82k, False: 0]
  ------------------
 7881|  1.82k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 1.82k, False: 0]
  ------------------
 7882|  1.82k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 1.82k, False: 0]
  ------------------
 7883|  1.82k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 1.82k, False: 0]
  ------------------
 7884|  1.82k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  1.82k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  1.82k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|  56.7k|{
 9324|  56.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  56.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  56.7k|{
 9225|  56.7k|#define SCN_VISIT(Type)                                                \
 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  56.7k|    }                                                                  \
 9229|  56.7k|    else {                                                             \
 9230|  56.7k|        return vis(monostate_val);                                     \
 9231|  56.7k|    }
 9232|       |
 9233|  56.7k|    monostate monostate_val{};
 9234|       |
 9235|  56.7k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 56.7k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 56.7k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 56.7k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 56.7k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 56.7k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 56.7k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 56.7k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 56.7k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 56.7k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 56.7k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 56.7k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 56.7k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 56.7k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 56.7k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 56.7k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 56.7k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 56.7k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 56.7k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 56.7k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  56.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 56.7k, False: 0]
  ------------------
 9275|  56.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.7k|    }                                                                  \
  |  | 9229|  56.7k|    else {                                                             \
  |  | 9230|  56.7k|        return vis(monostate_val);                                     \
  |  | 9231|  56.7k|    }
  ------------------
 9276|  56.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 56.7k]
  ------------------
 9277|  56.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.7k|    }                                                                  \
  |  | 9229|  56.7k|    else {                                                             \
  |  | 9230|  56.7k|        return vis(monostate_val);                                     \
  |  | 9231|  56.7k|    }
  ------------------
 9278|  56.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 56.7k]
  ------------------
 9279|  56.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.7k|    }                                                                  \
  |  | 9229|  56.7k|    else {                                                             \
  |  | 9230|  56.7k|        return vis(monostate_val);                                     \
  |  | 9231|  56.7k|    }
  ------------------
 9280|  56.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 56.7k]
  ------------------
 9281|  56.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.7k|    }                                                                  \
  |  | 9229|  56.7k|    else {                                                             \
  |  | 9230|  56.7k|        return vis(monostate_val);                                     \
  |  | 9231|  56.7k|    }
  ------------------
 9282|  56.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 56.7k]
  ------------------
 9283|  56.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  56.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.7k|    }                                                                  \
  |  | 9229|  56.7k|    else {                                                             \
  |  | 9230|  56.7k|        return vis(monostate_val);                                     \
  |  | 9231|  56.7k|    }
  ------------------
 9284|       |
 9285|  56.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 56.7k]
  ------------------
 9286|  56.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  56.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  56.7k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 56.7k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 56.7k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  56.7k|            SCN_CLANG_POP
 9303|  56.7k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  11.8k|    {
 4352|  11.8k|        return sync(0);
 4353|  11.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.88M|    {
 6182|  1.88M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.88M|        return static_cast<std::size_t>(m_desc &
 6187|  1.88M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.88M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  3.77M|    {
 6208|  3.77M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.77M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.88M|    {
 6150|  1.88M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.88M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.88M|        const auto t = type(id);
 6162|  1.88M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.88M|        basic_scan_arg<Context> arg;
 6167|  1.88M|        arg.m_type = t;
 6168|  1.88M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.88M, False: 0]
  ------------------
 6169|  1.88M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.88M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.88M|        return arg;
 6175|  1.88M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.88M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.88M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.88M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.88M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.88M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.88M|    {
 6212|  1.88M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.88M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  3.29M|    {
 5966|  3.29M|        return m_type != detail::arg_type::none_type;
 5967|  3.29M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   921k|{
 9324|   921k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   921k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   921k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   921k|{
 9225|   921k|#define SCN_VISIT(Type)                                                \
 9226|   921k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   921k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   921k|    }                                                                  \
 9229|   921k|    else {                                                             \
 9230|   921k|        return vis(monostate_val);                                     \
 9231|   921k|    }
 9232|       |
 9233|   921k|    monostate monostate_val{};
 9234|       |
 9235|   921k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 921k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 921k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 921k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 921k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 921k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 921k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 921k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 921k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 921k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 921k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 921k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 921k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 921k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 921k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 921k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 921k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 921k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 921k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 921k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 921k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   460k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 460k, False: 460k]
  ------------------
 9277|   460k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   460k|    }                                                                  \
  |  | 9229|   460k|    else {                                                             \
  |  | 9230|   460k|        return vis(monostate_val);                                     \
  |  | 9231|   460k|    }
  ------------------
 9278|   921k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 460k, False: 460k]
  ------------------
 9279|   921k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   921k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   921k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   921k|    }                                                                  \
  |  | 9229|   921k|    else {                                                             \
  |  | 9230|   921k|        return vis(monostate_val);                                     \
  |  | 9231|   921k|    }
  ------------------
 9280|   921k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 921k]
  ------------------
 9281|   921k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   921k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   921k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   921k|    }                                                                  \
  |  | 9229|   921k|    else {                                                             \
  |  | 9230|   921k|        return vis(monostate_val);                                     \
  |  | 9231|   921k|    }
  ------------------
 9282|   921k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 921k]
  ------------------
 9283|   921k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   921k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   921k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   921k|    }                                                                  \
  |  | 9229|   921k|    else {                                                             \
  |  | 9230|   921k|        return vis(monostate_val);                                     \
  |  | 9231|   921k|    }
  ------------------
 9284|       |
 9285|   921k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 921k]
  ------------------
 9286|   921k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   921k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   921k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 921k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 921k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   921k|            SCN_CLANG_POP
 9303|   921k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.25M|{
 6011|  4.25M|    return arg.m_type;
 6012|  4.25M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.32M|{
 6023|  2.32M|    return arg.m_value;
 6024|  2.32M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   321k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   321k|    {
 8949|   321k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   643k|        : m_format{format},
 6280|   643k|          m_next_arg_id{next_arg_id},
 6281|   643k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   643k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   643k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   643k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   643k|    {
 6287|   643k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   643k|    {
 3075|   643k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   643k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   643k|    {
 3041|   643k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   643k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   643k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   643k|{
 7796|   643k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   643k|    handler.check_args_exhausted();
 7798|   643k|    return handler.get_error();
 7799|   643k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   643k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   643k|    auto begin = format.data();
 7764|   643k|    auto it = begin;
 7765|   643k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.25M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 643k, False: 607k]
  ------------------
 7768|   643k|        const auto ch = *it++;
 7769|   643k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 643k, False: 0]
  ------------------
 7770|   643k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   643k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   643k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 36.5k, False: 607k]
  ------------------
 7774|  36.5k|                return;
 7775|  36.5k|            }
 7776|   643k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   643k|    }
 7787|       |
 7788|   607k|    handler.on_literal_text(begin, end);
 7789|   607k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   643k|{
 7693|   643k|    struct id_adapter {
 7694|   643k|        constexpr void operator()()
 7695|   643k|        {
 7696|   643k|            arg_id = handler.on_arg_id();
 7697|   643k|        }
 7698|   643k|        constexpr void operator()(std::size_t id)
 7699|   643k|        {
 7700|   643k|            arg_id = handler.on_arg_id(id);
 7701|   643k|        }
 7702|       |
 7703|   643k|        constexpr void on_error(const char* msg)
 7704|   643k|        {
 7705|   643k|            SCN_UNLIKELY_ATTR
 7706|   643k|            handler.on_error(msg);
 7707|   643k|        }
 7708|       |
 7709|   643k|        Handler& handler;
 7710|   643k|        std::size_t arg_id;
 7711|   643k|    };
 7712|       |
 7713|   643k|    ++begin;
 7714|   643k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 643k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   643k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 643k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   643k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 643k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   643k|    else {
 7726|   643k|        auto adapter = id_adapter{handler, 0};
 7727|   643k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   643k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 643k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   643k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 643k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   643k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 643k, False: 0]
  ------------------
 7738|   643k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 643k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   643k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   643k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 629k]
  |  |  |  Branch (865:45): [True: 0, False: 643k]
  |  |  |  Branch (865:45): [True: 14.6k, False: 629k]
  |  |  ------------------
  ------------------
 7744|  14.6k|                handler.on_error("Unknown format specifier");
 7745|  14.6k|                return begin;
 7746|  14.6k|            }
 7747|   643k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   643k|    }
 7754|   629k|    return begin + 1;
 7755|   643k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   965k|    {
 8847|   965k|        return m_args.get(id);
 8848|   965k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   965k|    {
 6315|   965k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   965k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 965k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   965k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   965k|        do_check_arg_id(id);
 6323|   965k|        return id;
 6324|   965k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   965k|{
 6809|   965k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   965k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   965k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   643k|{
 7194|   643k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   643k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 643k, False: 0]
  |  Branch (7195:26): [True: 0, False: 643k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   643k|    handler();
 7200|   643k|    return begin;
 7201|   643k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7142|  21.9k|{
 7143|  21.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  21.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  21.9k|    unsigned long long value = 0;
 7147|  43.8k|    do {
 7148|  43.8k|        value *= 10;
 7149|  43.8k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  43.8k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 43.8k]
  ------------------
 7151|  43.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  43.8k|        ++begin;
 7155|  43.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 43.8k, False: 0]
  |  Branch (7155:30): [True: 43.8k, False: 0]
  |  Branch (7155:47): [True: 21.9k, False: 21.9k]
  ------------------
 7156|  21.9k|    return static_cast<int>(value);
 7157|  21.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   643k|        {
 7696|   643k|            arg_id = handler.on_arg_id();
 7697|   643k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   943k|    {
 6310|   943k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   943k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   782k|{
 4691|   782k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 782k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   782k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   782k|                            ranges::default_sentinel};
 4697|   782k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   782k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   782k|    {
 4455|   782k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   782k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   782k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.90M|    {
 6299|  1.90M|        return m_format.data();
 6300|  1.90M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   643k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   643k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   643k|    {
 7874|   643k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   643k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   643k|{
 7609|   643k|    auto do_presentation = [&]() -> const CharT* {
 7610|   643k|        if (*begin == CharT{'['}) {
 7611|   643k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   643k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   643k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   643k|                return begin;
 7617|   643k|            }
 7618|   643k|            handler.on_character_set_string(set);
 7619|   643k|            return begin;
 7620|   643k|        }
 7621|   643k|        if (*begin == CharT{'/'}) {
 7622|   643k|            return parse_presentation_regex(begin, end, handler);
 7623|   643k|        }
 7624|   643k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   643k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   643k|            handler.on_error("Invalid type specifier in format string");
 7627|   643k|            return begin;
 7628|   643k|        }
 7629|   643k|        handler.on_type(type);
 7630|   643k|        return begin;
 7631|   643k|    };
 7632|       |
 7633|   643k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 643k, False: 0]
  |  Branch (7633:28): [True: 621k, False: 22.1k]
  ------------------
 7634|   643k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 621k, False: 0]
  |  Branch (7634:36): [True: 614k, False: 7.31k]
  ------------------
 7635|   614k|        return do_presentation();
 7636|   614k|    }
 7637|       |
 7638|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  29.4k|    begin = parse_align(begin, end, handler);
 7644|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  29.4k|    begin = parse_width(begin, end, handler);
 7650|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  29.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 29.4k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  29.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 7.31k, False: 22.1k]
  ------------------
 7669|  7.31k|        handler.on_localized();
 7670|  7.31k|        ++begin;
 7671|  7.31k|    }
 7672|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  29.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 29.4k, False: 0]
  |  Branch (7677:25): [True: 22.1k, False: 7.31k]
  ------------------
 7678|  22.1k|        do_presentation();
 7679|  22.1k|    }
 7680|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  29.4k|    return begin;
 7686|  29.4k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   932k|{
 7258|   932k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 921k, False: 10.9k]
  |  Branch (7258:33): [True: 921k, False: 0]
  ------------------
 7259|   932k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 10.9k, False: 0]
  |  Branch (7259:33): [True: 10.9k, False: 0]
  ------------------
 7260|   932k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   636k|    auto do_presentation = [&]() -> const CharT* {
 7610|   636k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 7.55k, False: 629k]
  ------------------
 7611|  7.55k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  7.55k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  7.55k|            handler.on_character_set_string(set);
 7619|  7.55k|            return begin;
 7620|  7.55k|        }
 7621|   629k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 629k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   629k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   629k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.31k, False: 621k]
  |  |  ------------------
  ------------------
 7626|  7.31k|            handler.on_error("Invalid type specifier in format string");
 7627|  7.31k|            return begin;
 7628|  7.31k|        }
 7629|   621k|        handler.on_type(type);
 7630|   621k|        return begin;
 7631|   629k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  7.55k|{
 7448|  7.55k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  7.55k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  7.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  7.55k|    auto start = begin;
 7452|  7.55k|    ++begin;
 7453|       |
 7454|  7.55k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  7.55k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 7.55k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  7.55k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 7.55k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  22.6k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 22.6k, False: 0]
  ------------------
 7479|  22.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  22.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 7.55k, False: 15.1k]
  ------------------
 7484|  7.55k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  7.55k|        }
 7486|       |
 7487|  15.1k|        parse_presentation_set_literal(begin, end, handler);
 7488|  15.1k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  7.55k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7411|  15.1k|{
 7412|  15.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  15.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  15.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  15.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 15.1k, False: 0]
  |  Branch (7419:25): [True: 15.1k, False: 0]
  |  Branch (7419:49): [True: 15.1k, False: 0]
  ------------------
 7420|  15.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 15.1k, False: 0]
  ------------------
 7421|  15.1k|        ++begin;
 7422|       |
 7423|  15.1k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  15.1k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  15.1k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  15.1k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  15.1k|        return;
 7437|  15.1k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7387|  30.2k|{
 7388|  30.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  30.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  30.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 30.2k]
  |  |  |  Branch (865:45): [True: 0, False: 30.2k]
  |  |  |  Branch (865:45): [True: 0, False: 30.2k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  30.2k|    const auto cp =
 7397|  30.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  30.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 30.2k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  30.2k|    begin += len;
 7404|  30.2k|    return cp;
 7405|  30.2k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  11.3k|    {
 7102|  11.3k|        m_specs.charset_string_data = fmt.data();
 7103|  11.3k|        m_specs.charset_string_size = fmt.size();
 7104|  11.3k|        on_type(presentation_type::string_set);
 7105|  11.3k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   943k|{
 7206|   943k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 943k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 943k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 943k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 943k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 943k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 943k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 943k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 943k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 943k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 943k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 943k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 943k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 943k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 943k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 943k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 943k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 943k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 943k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   921k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 921k, False: 21.9k]
  ------------------
 7237|   921k|            return presentation_type::string;
 7238|  10.9k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 10.9k, False: 932k]
  ------------------
 7239|  10.9k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 943k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 943k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 943k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 943k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  10.9k|        default:
  ------------------
  |  Branch (7250:9): [True: 10.9k, False: 932k]
  ------------------
 7251|  10.9k|            return presentation_type::none;
 7252|   943k|    }
 7253|   943k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  29.4k|{
 7283|  29.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  29.4k|    auto check_align = [](wchar_t ch) {
 7286|  29.4k|        switch (ch) {
 7287|  29.4k|            case L'<':
 7288|  29.4k|                return align_type::left;
 7289|  29.4k|            case L'>':
 7290|  29.4k|                return align_type::right;
 7291|  29.4k|            case L'^':
 7292|  29.4k|                return align_type::center;
 7293|  29.4k|            default:
 7294|  29.4k|                return align_type::none;
 7295|  29.4k|        }
 7296|  29.4k|    };
 7297|       |
 7298|  29.4k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  29.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  |  Branch (865:45): [True: 0, False: 29.4k]
  |  |  |  Branch (865:45): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7300|  29.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  29.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  29.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  29.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  29.4k|    const auto begin_before_fill = begin;
 7310|  29.4k|    begin += potential_fill_len;
 7311|       |
 7312|  29.4k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 29.4k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  29.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  29.4k|    const auto begin_after_fill = begin;
 7318|  29.4k|    ++begin;
 7319|       |
 7320|  29.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 29.4k, False: 0]
  ------------------
 7321|  29.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  29.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 7.55k, False: 21.9k]
  ------------------
 7326|  7.55k|            return begin_before_fill;
 7327|  7.55k|        }
 7328|  29.4k|    }
 7329|       |
 7330|  21.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 21.9k, False: 0]
  ------------------
 7331|  21.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 21.9k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  21.9k|        return begin_before_fill;
 7336|  21.9k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  21.9k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|  44.2k|{
 7265|  44.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  44.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|  44.2k|    if constexpr (sizeof(CharT) != 1) {
 7267|  44.2k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|  44.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  58.9k|    auto check_align = [](wchar_t ch) {
 7286|  58.9k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 58.9k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 58.9k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 58.9k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  58.9k|            default:
  ------------------
  |  Branch (7293:13): [True: 58.9k, False: 0]
  ------------------
 7294|  58.9k|                return align_type::none;
 7295|  58.9k|        }
 7296|  58.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  29.4k|{
 7348|  29.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  29.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 29.4k, False: 0]
  |  Branch (7350:33): [True: 14.6k, False: 14.8k]
  ------------------
 7351|  14.6k|        int width = parse_simple_int(begin, end);
 7352|  14.6k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  14.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 7353|  14.6k|            handler.on_width(width);
 7354|  14.6k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  14.6k|    }
 7360|  29.4k|    return begin;
 7361|  29.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|  7.31k|    {
 7879|  7.31k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  7.31k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 7.31k, False: 0]
  ------------------
 7881|  7.31k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 7.31k, False: 0]
  ------------------
 7882|  7.31k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 7.31k, False: 0]
  ------------------
 7883|  7.31k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 7.31k, False: 0]
  ------------------
 7884|  7.31k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  7.31k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  7.31k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   629k|{
 9324|   629k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   629k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   629k|{
 9225|   629k|#define SCN_VISIT(Type)                                                \
 9226|   629k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   629k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   629k|    }                                                                  \
 9229|   629k|    else {                                                             \
 9230|   629k|        return vis(monostate_val);                                     \
 9231|   629k|    }
 9232|       |
 9233|   629k|    monostate monostate_val{};
 9234|       |
 9235|   629k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 629k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 629k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 629k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 629k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 629k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 629k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 629k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 629k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 629k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 629k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 629k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 629k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 629k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 629k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 629k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 629k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 629k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 629k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 629k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 629k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   314k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 314k, False: 314k]
  ------------------
 9277|   314k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   314k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   314k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   314k|    }                                                                  \
  |  | 9229|   314k|    else {                                                             \
  |  | 9230|   314k|        return vis(monostate_val);                                     \
  |  | 9231|   314k|    }
  ------------------
 9278|   629k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 314k, False: 314k]
  ------------------
 9279|   629k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   629k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   629k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   629k|    }                                                                  \
  |  | 9229|   629k|    else {                                                             \
  |  | 9230|   629k|        return vis(monostate_val);                                     \
  |  | 9231|   629k|    }
  ------------------
 9280|   629k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 629k]
  ------------------
 9281|   629k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   629k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   629k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   629k|    }                                                                  \
  |  | 9229|   629k|    else {                                                             \
  |  | 9230|   629k|        return vis(monostate_val);                                     \
  |  | 9231|   629k|    }
  ------------------
 9282|   629k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 629k]
  ------------------
 9283|   629k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   629k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   629k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   629k|    }                                                                  \
  |  | 9229|   629k|    else {                                                             \
  |  | 9230|   629k|        return vis(monostate_val);                                     \
  |  | 9231|   629k|    }
  ------------------
 9284|       |
 9285|   629k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 629k]
  ------------------
 9286|   629k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   629k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   629k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 629k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 629k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   629k|            SCN_CLANG_POP
 9303|   629k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   460k|{
 9324|   460k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   460k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   460k|{
 9225|   460k|#define SCN_VISIT(Type)                                                \
 9226|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   460k|    }                                                                  \
 9229|   460k|    else {                                                             \
 9230|   460k|        return vis(monostate_val);                                     \
 9231|   460k|    }
 9232|       |
 9233|   460k|    monostate monostate_val{};
 9234|       |
 9235|   460k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 460k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 460k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 460k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 460k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 460k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 460k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 460k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 460k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 460k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 460k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 460k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 460k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 460k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 460k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 460k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 460k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 460k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 460k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 460k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 460k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 460k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   460k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 460k, False: 0]
  ------------------
 9279|   460k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   460k|    }                                                                  \
  |  | 9229|   460k|    else {                                                             \
  |  | 9230|   460k|        return vis(monostate_val);                                     \
  |  | 9231|   460k|    }
  ------------------
 9280|   460k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 460k]
  ------------------
 9281|   460k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   460k|    }                                                                  \
  |  | 9229|   460k|    else {                                                             \
  |  | 9230|   460k|        return vis(monostate_val);                                     \
  |  | 9231|   460k|    }
  ------------------
 9282|   460k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 460k]
  ------------------
 9283|   460k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   460k|    }                                                                  \
  |  | 9229|   460k|    else {                                                             \
  |  | 9230|   460k|        return vis(monostate_val);                                     \
  |  | 9231|   460k|    }
  ------------------
 9284|       |
 9285|   460k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 460k]
  ------------------
 9286|   460k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   460k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   460k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 460k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 460k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   460k|            SCN_CLANG_POP
 9303|   460k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   321k|        : m_format{format},
 6280|   321k|          m_next_arg_id{next_arg_id},
 6281|   321k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   321k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   321k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   321k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   321k|    {
 6287|   321k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   321k|{
 7796|   321k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   321k|    handler.check_args_exhausted();
 7798|   321k|    return handler.get_error();
 7799|   321k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   321k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   321k|    auto begin = format.data();
 7764|   321k|    auto it = begin;
 7765|   321k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   625k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 321k, False: 303k]
  ------------------
 7768|   321k|        const auto ch = *it++;
 7769|   321k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 321k, False: 0]
  ------------------
 7770|   321k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   321k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   321k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 18.2k, False: 303k]
  ------------------
 7774|  18.2k|                return;
 7775|  18.2k|            }
 7776|   321k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   321k|    }
 7787|       |
 7788|   303k|    handler.on_literal_text(begin, end);
 7789|   303k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   303k|    {
 8986|   303k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   303k|    static_cast<    \
  |  |  935|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   303k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   321k|{
 7693|   321k|    struct id_adapter {
 7694|   321k|        constexpr void operator()()
 7695|   321k|        {
 7696|   321k|            arg_id = handler.on_arg_id();
 7697|   321k|        }
 7698|   321k|        constexpr void operator()(std::size_t id)
 7699|   321k|        {
 7700|   321k|            arg_id = handler.on_arg_id(id);
 7701|   321k|        }
 7702|       |
 7703|   321k|        constexpr void on_error(const char* msg)
 7704|   321k|        {
 7705|   321k|            SCN_UNLIKELY_ATTR
 7706|   321k|            handler.on_error(msg);
 7707|   321k|        }
 7708|       |
 7709|   321k|        Handler& handler;
 7710|   321k|        std::size_t arg_id;
 7711|   321k|    };
 7712|       |
 7713|   321k|    ++begin;
 7714|   321k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   321k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 321k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   321k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 321k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   321k|    else {
 7726|   321k|        auto adapter = id_adapter{handler, 0};
 7727|   321k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   321k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   321k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 321k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   321k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 321k, False: 0]
  ------------------
 7738|   321k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   321k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   321k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.31k, False: 314k]
  |  |  |  Branch (865:45): [True: 0, False: 321k]
  |  |  |  Branch (865:45): [True: 7.31k, False: 314k]
  |  |  ------------------
  ------------------
 7744|  7.31k|                handler.on_error("Unknown format specifier");
 7745|  7.31k|                return begin;
 7746|  7.31k|            }
 7747|   321k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   321k|    }
 7754|   314k|    return begin + 1;
 7755|   321k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   321k|{
 7194|   321k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   321k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 321k, False: 0]
  |  Branch (7195:26): [True: 0, False: 321k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   321k|    handler();
 7200|   321k|    return begin;
 7201|   321k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   321k|        {
 7696|   321k|            arg_id = handler.on_arg_id();
 7697|   321k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   321k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   321k|    {
 7874|   321k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   321k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   321k|{
 7609|   321k|    auto do_presentation = [&]() -> const CharT* {
 7610|   321k|        if (*begin == CharT{'['}) {
 7611|   321k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   321k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   321k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   321k|                return begin;
 7617|   321k|            }
 7618|   321k|            handler.on_character_set_string(set);
 7619|   321k|            return begin;
 7620|   321k|        }
 7621|   321k|        if (*begin == CharT{'/'}) {
 7622|   321k|            return parse_presentation_regex(begin, end, handler);
 7623|   321k|        }
 7624|   321k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   321k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   321k|            handler.on_error("Invalid type specifier in format string");
 7627|   321k|            return begin;
 7628|   321k|        }
 7629|   321k|        handler.on_type(type);
 7630|   321k|        return begin;
 7631|   321k|    };
 7632|       |
 7633|   321k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 321k, False: 0]
  |  Branch (7633:28): [True: 310k, False: 11.0k]
  ------------------
 7634|   321k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 310k, False: 0]
  |  Branch (7634:36): [True: 307k, False: 3.65k]
  ------------------
 7635|   307k|        return do_presentation();
 7636|   307k|    }
 7637|       |
 7638|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  14.7k|    begin = parse_align(begin, end, handler);
 7644|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  14.7k|    begin = parse_width(begin, end, handler);
 7650|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  14.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 14.7k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  14.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.65k, False: 11.0k]
  ------------------
 7669|  3.65k|        handler.on_localized();
 7670|  3.65k|        ++begin;
 7671|  3.65k|    }
 7672|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  14.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 14.7k, False: 0]
  |  Branch (7677:25): [True: 11.0k, False: 3.65k]
  ------------------
 7678|  11.0k|        do_presentation();
 7679|  11.0k|    }
 7680|  14.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  14.7k|    return begin;
 7686|  14.7k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   318k|    auto do_presentation = [&]() -> const CharT* {
 7610|   318k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 3.77k, False: 314k]
  ------------------
 7611|  3.77k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  3.77k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  3.77k|            handler.on_character_set_string(set);
 7619|  3.77k|            return begin;
 7620|  3.77k|        }
 7621|   314k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 314k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   314k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   314k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 310k]
  |  |  ------------------
  ------------------
 7626|  3.65k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.65k|            return begin;
 7628|  3.65k|        }
 7629|   310k|        handler.on_type(type);
 7630|   310k|        return begin;
 7631|   314k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  3.77k|{
 7448|  3.77k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  3.77k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  3.77k|    auto start = begin;
 7452|  3.77k|    ++begin;
 7453|       |
 7454|  3.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  3.77k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 3.77k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  3.77k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 3.77k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  11.3k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 11.3k, False: 0]
  ------------------
 7479|  11.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  11.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 3.77k, False: 7.55k]
  ------------------
 7484|  3.77k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  3.77k|        }
 7486|       |
 7487|  7.55k|        parse_presentation_set_literal(begin, end, handler);
 7488|  7.55k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  3.77k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7411|  7.55k|{
 7412|  7.55k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  7.55k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  7.55k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  7.55k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 7.55k, False: 0]
  |  Branch (7419:25): [True: 7.55k, False: 0]
  |  Branch (7419:49): [True: 7.55k, False: 0]
  ------------------
 7420|  7.55k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 7.55k, False: 0]
  ------------------
 7421|  7.55k|        ++begin;
 7422|       |
 7423|  7.55k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  7.55k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  7.55k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  7.55k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  7.55k|        return;
 7437|  7.55k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7387|  15.1k|{
 7388|  15.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  15.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  15.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.1k]
  |  |  |  Branch (865:45): [True: 0, False: 15.1k]
  |  |  |  Branch (865:45): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  15.1k|    const auto cp =
 7397|  15.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  15.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  15.1k|    begin += len;
 7404|  15.1k|    return cp;
 7405|  15.1k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|  14.7k|{
 7283|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  14.7k|    auto check_align = [](wchar_t ch) {
 7286|  14.7k|        switch (ch) {
 7287|  14.7k|            case L'<':
 7288|  14.7k|                return align_type::left;
 7289|  14.7k|            case L'>':
 7290|  14.7k|                return align_type::right;
 7291|  14.7k|            case L'^':
 7292|  14.7k|                return align_type::center;
 7293|  14.7k|            default:
 7294|  14.7k|                return align_type::none;
 7295|  14.7k|        }
 7296|  14.7k|    };
 7297|       |
 7298|  14.7k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  14.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  |  Branch (865:45): [True: 0, False: 14.7k]
  |  |  |  Branch (865:45): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7300|  14.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  14.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  14.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  14.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  14.7k|    const auto begin_before_fill = begin;
 7310|  14.7k|    begin += potential_fill_len;
 7311|       |
 7312|  14.7k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 14.7k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  14.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  14.7k|    const auto begin_after_fill = begin;
 7318|  14.7k|    ++begin;
 7319|       |
 7320|  14.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 14.7k, False: 0]
  ------------------
 7321|  14.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  14.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 3.77k, False: 10.9k]
  ------------------
 7326|  3.77k|            return begin_before_fill;
 7327|  3.77k|        }
 7328|  14.7k|    }
 7329|       |
 7330|  10.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 10.9k, False: 0]
  ------------------
 7331|  10.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 10.9k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  10.9k|        return begin_before_fill;
 7336|  10.9k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  10.9k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  29.4k|    auto check_align = [](wchar_t ch) {
 7286|  29.4k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 29.4k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 29.4k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 29.4k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  29.4k|            default:
  ------------------
  |  Branch (7293:13): [True: 29.4k, False: 0]
  ------------------
 7294|  29.4k|                return align_type::none;
 7295|  29.4k|        }
 7296|  29.4k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|  14.7k|{
 7348|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  14.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 14.7k, False: 0]
  |  Branch (7350:33): [True: 7.31k, False: 7.43k]
  ------------------
 7351|  7.31k|        int width = parse_simple_int(begin, end);
 7352|  7.31k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  7.31k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.31k, False: 0]
  |  |  ------------------
  ------------------
 7353|  7.31k|            handler.on_width(width);
 7354|  7.31k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  7.31k|    }
 7360|  14.7k|    return begin;
 7361|  14.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|  3.65k|    {
 7879|  3.65k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.65k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.65k, False: 0]
  ------------------
 7881|  3.65k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.65k, False: 0]
  ------------------
 7882|  3.65k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.65k, False: 0]
  ------------------
 7883|  3.65k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.65k, False: 0]
  ------------------
 7884|  3.65k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.65k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.65k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   314k|{
 9324|   314k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   314k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   314k|{
 9225|   314k|#define SCN_VISIT(Type)                                                \
 9226|   314k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   314k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   314k|    }                                                                  \
 9229|   314k|    else {                                                             \
 9230|   314k|        return vis(monostate_val);                                     \
 9231|   314k|    }
 9232|       |
 9233|   314k|    monostate monostate_val{};
 9234|       |
 9235|   314k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 314k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 314k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 314k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 314k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 314k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 314k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 314k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 314k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 314k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 314k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 314k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 314k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 314k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 314k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 314k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 314k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 314k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 314k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 314k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 314k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 314k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   314k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 314k, False: 0]
  ------------------
 9279|   314k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   314k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   314k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   314k|    }                                                                  \
  |  | 9229|   314k|    else {                                                             \
  |  | 9230|   314k|        return vis(monostate_val);                                     \
  |  | 9231|   314k|    }
  ------------------
 9280|   314k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 314k]
  ------------------
 9281|   314k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   314k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   314k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   314k|    }                                                                  \
  |  | 9229|   314k|    else {                                                             \
  |  | 9230|   314k|        return vis(monostate_val);                                     \
  |  | 9231|   314k|    }
  ------------------
 9282|   314k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 314k]
  ------------------
 9283|   314k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   314k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   314k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   314k|    }                                                                  \
  |  | 9229|   314k|    else {                                                             \
  |  | 9230|   314k|        return vis(monostate_val);                                     \
  |  | 9231|   314k|    }
  ------------------
 9284|       |
 9285|   314k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 314k]
  ------------------
 9286|   314k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   314k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   314k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 314k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 314k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   314k|            SCN_CLANG_POP
 9303|   314k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  23.7k|    {
 4352|  23.7k|        return sync(0);
 4353|  23.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  69.0k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   460k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   314k|{
   89|   314k|    auto result = make_scan_result<Source, Args...>();
   90|   314k|    fill_scan_result(result,
   91|   314k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   314k|                           make_scan_args<wscan_context>(result->values())));
   93|   314k|    return result;
   94|   314k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   629k|{
   44|   629k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   629k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   314k|{
  131|   314k|    auto result = make_scan_result<Source, Args...>();
  132|   314k|    fill_scan_result(result,
  133|   314k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   314k|                           make_scan_args<wscan_context>(result->values())));
  135|   314k|    return result;
  136|   314k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   629k|{
   60|   629k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   629k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   153k|{
  171|   153k|    auto result = make_scan_result<Source, T>();
  172|   153k|    fill_scan_result(
  173|   153k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   153k|                            detail::make_arg<wscan_context>(result->value())));
  175|   153k|    return result;
  176|   153k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   307k|{
   72|   307k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   307k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   314k|{
   89|   314k|    auto result = make_scan_result<Source, Args...>();
   90|   314k|    fill_scan_result(result,
   91|   314k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   314k|                           make_scan_args<wscan_context>(result->values())));
   93|   314k|    return result;
   94|   314k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   314k|{
  131|   314k|    auto result = make_scan_result<Source, Args...>();
  132|   314k|    fill_scan_result(result,
  133|   314k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   314k|                           make_scan_args<wscan_context>(result->values())));
  135|   314k|    return result;
  136|   314k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   153k|{
  171|   153k|    auto result = make_scan_result<Source, T>();
  172|   153k|    fill_scan_result(
  173|   153k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   153k|                            detail::make_arg<wscan_context>(result->value())));
  175|   153k|    return result;
  176|   153k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   314k|{
   89|   314k|    auto result = make_scan_result<Source, Args...>();
   90|   314k|    fill_scan_result(result,
   91|   314k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   314k|                           make_scan_args<wscan_context>(result->values())));
   93|   314k|    return result;
   94|   314k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   314k|{
   44|   314k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   314k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   314k|{
  131|   314k|    auto result = make_scan_result<Source, Args...>();
  132|   314k|    fill_scan_result(result,
  133|   314k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   314k|                           make_scan_args<wscan_context>(result->values())));
  135|   314k|    return result;
  136|   314k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   314k|{
   60|   314k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   314k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   153k|{
  171|   153k|    auto result = make_scan_result<Source, T>();
  172|   153k|    fill_scan_result(
  173|   153k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   153k|                            detail::make_arg<wscan_context>(result->value())));
  175|   153k|    return result;
  176|   153k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   153k|{
   72|   153k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   153k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.09M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.09M|{
  309|  1.09M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.09M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  94.2k|{
 1903|  94.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  94.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  56.1k|{
 1911|  56.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  56.1k|    return sync_after_vscan(source, n);
 1913|  56.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   629k|{
 1921|   629k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   629k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   314k|{
 1929|   314k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   314k|    return sync_after_vscan(source, n);
 1931|   314k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   340k|{
  207|   340k|    return find_classic_impl(
  208|   340k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   340k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   340k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   343k|{
  215|   343k|    return find_classic_impl(
  216|   343k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   343k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   343k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  94.2k|{
 1872|  94.2k|    return vscan_internal(source, format, args);
 1873|  94.2k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  56.1k|{
 1878|  56.1k|    auto n = vscan_internal(source, format, args);
 1879|  56.1k|    return sync_after_vscan(source, n);
 1880|  56.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   629k|{
 1886|   629k|    return vscan_internal(source, format, args);
 1887|   629k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   314k|{
 1892|   314k|    auto n = vscan_internal(source, format, args);
 1893|   314k|    return sync_after_vscan(source, n);
 1894|   314k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  43.1k|{
 1958|  43.1k|    return vscan_value_internal(source, arg);
 1959|  43.1k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  25.9k|{
 1963|  25.9k|    auto n = vscan_value_internal(source, arg);
 1964|  25.9k|    return sync_after_vscan(source, n);
 1965|  25.9k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|   307k|{
 1971|   307k|    return vscan_value_internal(source, arg);
 1972|   307k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|   153k|{
 1977|   153k|    auto n = vscan_value_internal(source, arg);
 1978|   153k|    return sync_after_vscan(source, n);
 1979|   153k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   340k|{
  131|   340k|    auto it = source.begin();
  132|       |
  133|   601k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 468k, False: 132k]
  ------------------
  134|   468k|        auto sv =
  135|   468k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   468k|                .substr(0, 8);
  137|       |
  138|   468k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 321k, False: 147k]
  ------------------
  139|   321k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   321k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   321k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 137k, False: 183k]
  ------------------
  142|   137k|                break;
  143|   137k|            }
  144|   183k|            continue;
  145|   321k|        }
  146|       |
  147|   437k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 360k, False: 77.5k]
  ------------------
  148|   360k|            auto tmp =
  149|   360k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   360k|            auto res = get_next_code_point(tmp);
  151|   360k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 69.9k, False: 290k]
  ------------------
  152|  69.9k|                return it;
  153|  69.9k|            }
  154|   290k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   290k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   290k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   290k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   290k|        }
  158|   147k|    }
  159|       |
  160|   270k|    return detail::make_string_view_iterator(source, it);
  161|   340k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   782k|{
  118|   782k|    static_assert(sizeof(*source.data()) == 1);
  119|   782k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   782k|    uint64_t word{};
  121|   782k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   782k|    return has_byte_greater(word, 127) != 0;
  124|   782k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.16M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   360k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   343k|{
  131|   343k|    auto it = source.begin();
  132|       |
  133|   431k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 314k, False: 117k]
  ------------------
  134|   314k|        auto sv =
  135|   314k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   314k|                .substr(0, 8);
  137|       |
  138|   314k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 225k, False: 88.5k]
  ------------------
  139|   225k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   225k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   225k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 141k, False: 84.2k]
  ------------------
  142|   141k|                break;
  143|   141k|            }
  144|  84.2k|            continue;
  145|   225k|        }
  146|       |
  147|   171k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 168k, False: 3.44k]
  ------------------
  148|   168k|            auto tmp =
  149|   168k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   168k|            auto res = get_next_code_point(tmp);
  151|   168k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 85.1k, False: 83.0k]
  ------------------
  152|  85.1k|                return it;
  153|  85.1k|            }
  154|  83.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  83.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  83.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  83.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  83.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  83.0k|        }
  158|  88.5k|    }
  159|       |
  160|   258k|    return detail::make_string_view_iterator(source, it);
  161|   343k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   547k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   168k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   112k|{
 1769|   112k|    const auto argcount = args.size();
 1770|   112k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 51.9k, False: 60.4k]
  |  Branch (1770:60): [True: 51.9k, False: 0]
  ------------------
 1771|  51.9k|        auto arg = args.get(0);
 1772|  51.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  51.9k|    static_cast<    \
  |  |  935|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  51.9k|    }
 1774|       |
 1775|  60.4k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 60.4k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  60.4k|    SCN_UNLIKELY_ATTR
 1783|  60.4k|    {
 1784|  60.4k|        auto handler = format_handler<false, CharT>{
 1785|  60.4k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  60.4k|        return vscan_parse_format_string(format, handler);
 1787|  60.4k|    }
 1788|  60.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   300k|{
 1317|   300k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 162k, False: 138k]
  ------------------
 1318|   162k|        return false;
 1319|   162k|    }
 1320|   138k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 138k, False: 0]
  |  Branch (1320:39): [True: 138k, False: 0]
  ------------------
 1321|   300k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  77.8k|{
 1350|  77.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  77.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  77.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  77.8k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  77.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  77.8k|    static_cast<    \
  |  |  935|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  77.8k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.74k, False: 75.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.74k|    }                                                  \
  |  |  |  | 3939|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  75.1k|    return it.position();
 1367|  77.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   102k|        : format_handler_base{argcount},
 1593|   102k|          parse_ctx{source_tag<Source&&>, format},
 1594|   102k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   102k|    static_cast<    \
  |  |  935|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   102k|    static_cast<    \
  |  |  935|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   102k|    {
 1596|   102k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.12M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.12M|    {
 1412|  1.12M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   102k|        : contiguous_ctx(source, args, loc)
 1544|   102k|    {
 1545|   102k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   102k|{
 1734|   102k|    const auto beg = handler.get_ctx().begin();
 1735|   102k|    detail::parse_format_string<false>(format, handler);
 1736|   102k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.2k, False: 83.9k]
  |  |  ------------------
  ------------------
 1737|  18.2k|        return unexpected(err.error());
 1738|  18.2k|    }
 1739|  83.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   664k|    {
 1718|   664k|        return ctx.get();
 1719|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   664k|    {
 1549|   664k|        return contiguous_ctx;
 1550|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   186k|    {
 1600|   186k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 186k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   186k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  49.3k|    {
 1460|  49.3k|        error = unexpected(err);
 1461|  49.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   102k|{
 1372|   102k|    auto arg = ctx.arg(id);
 1373|   102k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   102k|    return arg;
 1377|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.12M|    {
 1486|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.12M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.12M|            visited_args_lower64 |= (1ull << id);
 1499|  1.12M|            return;
 1500|  1.12M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.12M|    {
 1470|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.12M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.12M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   102k|    {
 1640|   102k|        return parse_ctx.next_arg_id();
 1641|   102k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   102k|    {
 1680|   102k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   102k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   102k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 102k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   102k|        auto specs = detail::format_specs{};
 1693|   102k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   102k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   102k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   102k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   102k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 102k]
  |  Branch (1698:29): [True: 0, False: 102k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   102k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.31k, False: 94.9k]
  |  |  ------------------
  ------------------
 1705|  7.31k|            return parse_ctx.begin();
 1706|  7.31k|        }
 1707|  94.9k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  94.9k|        on_visit_scan_arg(
 1710|  94.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  94.9k|                                           get_ctx().locale()},
 1712|  94.9k|            arg);
 1713|  94.9k|        return parse_ctx.begin();
 1714|   102k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   102k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   102k|    {
 1391|   102k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  94.9k|    {
 1651|  94.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 94.9k]
  |  Branch (1651:13): [True: 0, False: 94.9k]
  |  Branch (1651:29): [True: 0, False: 94.9k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  94.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  94.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 83.9k]
  |  |  ------------------
  ------------------
 1658|  10.9k|            on_error(r.error());
 1659|  10.9k|        }
 1660|  83.9k|        else {
 1661|  83.9k|            get_ctx().advance_to(*r);
 1662|  83.9k|        }
 1663|  94.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  32.9k|    {
 1454|  32.9k|        SCN_UNLIKELY_ATTR
 1455|  32.9k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  32.9k|                                              msg);
 1457|  32.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.12M|    {
 1419|  1.12M|        {
 1420|  1.12M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.12M]
  ------------------
 1421|  1.12M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.12M]
  ------------------
 1422|  1.12M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.12M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.12M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.12M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.12M|        }
 1430|       |
 1431|  1.12M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.12M, False: 0]
  ------------------
 1432|  1.12M|            return;
 1433|  1.12M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  4.48M|    {
 1465|  4.48M|        return error;
 1466|  4.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  60.4k|        : format_handler_base{argcount},
 1593|  60.4k|          parse_ctx{source_tag<Source&&>, format},
 1594|  60.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  60.4k|    {
 1596|  60.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  60.4k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  60.4k|    static_cast<    \
  |  |  935|  60.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  60.4k|    {
 1521|  60.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  60.4k|{
 1734|  60.4k|    const auto beg = handler.get_ctx().begin();
 1735|  60.4k|    detail::parse_format_string<false>(format, handler);
 1736|  60.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.14k, False: 51.2k]
  |  |  ------------------
  ------------------
 1737|  9.14k|        return unexpected(err.error());
 1738|  9.14k|    }
 1739|  51.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  60.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   397k|    {
 1718|   397k|        return ctx.get();
 1719|   397k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   397k|    {
 1525|   397k|        return ctx;
 1526|   397k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   111k|    {
 1600|   111k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 111k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  60.4k|{
 1372|  60.4k|    auto arg = ctx.arg(id);
 1373|  60.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  60.4k|    return arg;
 1377|  60.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  60.4k|    {
 1640|  60.4k|        return parse_ctx.next_arg_id();
 1641|  60.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  60.4k|    {
 1680|  60.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  60.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  60.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 60.4k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  60.4k|        auto specs = detail::format_specs{};
 1693|  60.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  60.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  60.4k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  60.4k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  60.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 60.4k]
  |  Branch (1698:29): [True: 0, False: 60.4k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  60.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 56.7k]
  |  |  ------------------
  ------------------
 1705|  3.65k|            return parse_ctx.begin();
 1706|  3.65k|        }
 1707|  56.7k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  56.7k|        on_visit_scan_arg(
 1710|  56.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  56.7k|                                           get_ctx().locale()},
 1712|  56.7k|            arg);
 1713|  56.7k|        return parse_ctx.begin();
 1714|  60.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|  60.4k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  60.4k|    {
 1391|  60.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  56.7k|    {
 1651|  56.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 56.7k]
  |  Branch (1651:13): [True: 0, False: 56.7k]
  |  Branch (1651:29): [True: 0, False: 56.7k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  56.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  56.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.48k, False: 51.2k]
  |  |  ------------------
  ------------------
 1658|  5.48k|            on_error(r.error());
 1659|  5.48k|        }
 1660|  51.2k|        else {
 1661|  51.2k|            get_ctx().advance_to(*r);
 1662|  51.2k|        }
 1663|  56.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   188k|{
 1749|   188k|    const auto argcount = args.size();
 1750|   188k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 86.2k, False: 102k]
  |  Branch (1750:60): [True: 86.2k, False: 0]
  ------------------
 1751|  86.2k|        auto arg = args.get(0);
 1752|  86.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  86.2k|    static_cast<    \
  |  |  935|  86.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  86.2k|    }
 1754|       |
 1755|   102k|    auto handler = format_handler<true, CharT>{
 1756|   102k|        ranges::subrange<const CharT*>{source.data(),
 1757|   102k|                                       source.data() + source.size()},
 1758|   102k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   102k|    static_cast<    \
  |  |  935|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   102k|    static_cast<    \
  |  |  935|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   102k|    return vscan_parse_format_string(format, handler);
 1760|   188k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   129k|{
 1330|   129k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   129k|    auto reader =
 1336|   129k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   129k|            ranges::subrange<const CharT*>{source.data(),
 1338|   129k|                                           source.data() + source.size()},
 1339|   129k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   129k|    static_cast<    \
  |  |  935|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   129k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.48k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.48k|    }                                                  \
  |  |  |  | 3939|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   123k|    return ranges::distance(source.data(), it);
 1342|   129k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   138k|{
 1849|   138k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   138k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 126k, False: 11.8k]
  |  |  ------------------
  ------------------
 1850|   126k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   126k|    }
 1856|  11.8k|    else {
 1857|  11.8k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  11.8k|    }
 1863|   138k|    return result;
 1864|   138k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  1.25M|{
 1749|  1.25M|    const auto argcount = args.size();
 1750|  1.25M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 614k, False: 643k]
  |  Branch (1750:60): [True: 614k, False: 0]
  ------------------
 1751|   614k|        auto arg = args.get(0);
 1752|   614k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   614k|    static_cast<    \
  |  |  935|   614k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   614k|    }
 1754|       |
 1755|   643k|    auto handler = format_handler<true, CharT>{
 1756|   643k|        ranges::subrange<const CharT*>{source.data(),
 1757|   643k|                                       source.data() + source.size()},
 1758|   643k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   643k|    static_cast<    \
  |  |  935|   643k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   643k|    static_cast<    \
  |  |  935|   643k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   643k|    return vscan_parse_format_string(format, handler);
 1760|  1.25M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.88M|{
 1317|  1.88M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 965k, False: 921k]
  ------------------
 1318|   965k|        return false;
 1319|   965k|    }
 1320|   921k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 921k, False: 0]
  |  Branch (1320:39): [True: 921k, False: 0]
  ------------------
 1321|  1.88M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   921k|{
 1330|   921k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 921k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   921k|    auto reader =
 1336|   921k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   921k|            ranges::subrange<const CharT*>{source.data(),
 1338|   921k|                                           source.data() + source.size()},
 1339|   921k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   921k|    static_cast<    \
  |  |  935|   921k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   921k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   921k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   921k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   921k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.9k, False: 910k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.9k|    }                                                  \
  |  |  |  | 3939|   921k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   910k|    return ranges::distance(source.data(), it);
 1342|   921k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   643k|        : format_handler_base{argcount},
 1593|   643k|          parse_ctx{source_tag<Source&&>, format},
 1594|   643k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   643k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   643k|    static_cast<    \
  |  |  935|   643k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   643k|    static_cast<    \
  |  |  935|   643k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   643k|    {
 1596|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   643k|        : contiguous_ctx(source, args, loc)
 1544|   643k|    {
 1545|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   643k|{
 1734|   643k|    const auto beg = handler.get_ctx().begin();
 1735|   643k|    detail::parse_format_string<false>(format, handler);
 1736|   643k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36.5k, False: 607k]
  |  |  ------------------
  ------------------
 1737|  36.5k|        return unexpected(err.error());
 1738|  36.5k|    }
 1739|   607k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   643k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  4.40M|    {
 1718|  4.40M|        return ctx.get();
 1719|  4.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  4.40M|    {
 1549|  4.40M|        return contiguous_ctx;
 1550|  4.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  1.25M|    {
 1600|  1.25M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.25M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.25M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   643k|{
 1372|   643k|    auto arg = ctx.arg(id);
 1373|   643k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 643k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   643k|    return arg;
 1377|   643k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   643k|    {
 1640|   643k|        return parse_ctx.next_arg_id();
 1641|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   643k|    {
 1680|   643k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   643k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   643k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 643k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   643k|        auto specs = detail::format_specs{};
 1693|   643k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   643k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   643k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   643k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   643k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 643k]
  |  Branch (1698:29): [True: 0, False: 643k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   643k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 629k]
  |  |  ------------------
  ------------------
 1705|  14.6k|            return parse_ctx.begin();
 1706|  14.6k|        }
 1707|   629k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   629k|        on_visit_scan_arg(
 1710|   629k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   629k|                                           get_ctx().locale()},
 1712|   629k|            arg);
 1713|   629k|        return parse_ctx.begin();
 1714|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   643k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   643k|    {
 1391|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   629k|    {
 1651|   629k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 629k]
  |  Branch (1651:13): [True: 0, False: 629k]
  |  Branch (1651:29): [True: 0, False: 629k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   629k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   629k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.9k, False: 607k]
  |  |  ------------------
  ------------------
 1658|  21.9k|            on_error(r.error());
 1659|  21.9k|        }
 1660|   607k|        else {
 1661|   607k|            get_ctx().advance_to(*r);
 1662|   607k|        }
 1663|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   629k|{
 1769|   629k|    const auto argcount = args.size();
 1770|   629k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 307k, False: 321k]
  |  Branch (1770:60): [True: 307k, False: 0]
  ------------------
 1771|   307k|        auto arg = args.get(0);
 1772|   307k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   307k|    }
 1774|       |
 1775|   321k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 321k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   321k|    SCN_UNLIKELY_ATTR
 1783|   321k|    {
 1784|   321k|        auto handler = format_handler<false, CharT>{
 1785|   321k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   321k|        return vscan_parse_format_string(format, handler);
 1787|   321k|    }
 1788|   321k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   460k|{
 1350|   460k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   460k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   460k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   460k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   460k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   460k|    static_cast<    \
  |  |  935|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   460k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.48k, False: 455k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.48k|    }                                                  \
  |  |  |  | 3939|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   455k|    return it.position();
 1367|   460k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   321k|        : format_handler_base{argcount},
 1593|   321k|          parse_ctx{source_tag<Source&&>, format},
 1594|   321k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   321k|    {
 1596|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   321k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   321k|    static_cast<    \
  |  |  935|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   321k|    {
 1521|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   321k|{
 1734|   321k|    const auto beg = handler.get_ctx().begin();
 1735|   321k|    detail::parse_format_string<false>(format, handler);
 1736|   321k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.2k, False: 303k]
  |  |  ------------------
  ------------------
 1737|  18.2k|        return unexpected(err.error());
 1738|  18.2k|    }
 1739|   303k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   321k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.20M|    {
 1718|  2.20M|        return ctx.get();
 1719|  2.20M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.20M|    {
 1525|  2.20M|        return ctx;
 1526|  2.20M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   625k|    {
 1600|   625k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 625k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   625k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   321k|{
 1372|   321k|    auto arg = ctx.arg(id);
 1373|   321k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   321k|    return arg;
 1377|   321k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   321k|    {
 1640|   321k|        return parse_ctx.next_arg_id();
 1641|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   321k|    {
 1680|   321k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   321k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   321k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 321k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   321k|        auto specs = detail::format_specs{};
 1693|   321k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   321k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   321k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   321k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   321k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 321k]
  |  Branch (1698:29): [True: 0, False: 321k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   321k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.31k, False: 314k]
  |  |  ------------------
  ------------------
 1705|  7.31k|            return parse_ctx.begin();
 1706|  7.31k|        }
 1707|   314k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   314k|        on_visit_scan_arg(
 1710|   314k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   314k|                                           get_ctx().locale()},
 1712|   314k|            arg);
 1713|   314k|        return parse_ctx.begin();
 1714|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   321k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   321k|    {
 1391|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   314k|    {
 1651|   314k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 314k]
  |  Branch (1651:13): [True: 0, False: 314k]
  |  Branch (1651:29): [True: 0, False: 314k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   314k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   314k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 303k]
  |  |  ------------------
  ------------------
 1658|  10.9k|            on_error(r.error());
 1659|  10.9k|        }
 1660|   303k|        else {
 1661|   303k|            get_ctx().advance_to(*r);
 1662|   303k|        }
 1663|   314k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   782k|{
 1849|   782k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   782k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 758k, False: 23.7k]
  |  |  ------------------
  ------------------
 1850|   758k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 758k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   758k|    }
 1856|  23.7k|    else {
 1857|  23.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  23.7k|    }
 1863|   782k|    return result;
 1864|   782k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  43.1k|{
 1795|  43.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  43.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  25.9k|{
 1795|  25.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  25.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   307k|{
 1795|   307k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   307k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   153k|{
 1795|   153k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   153k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    914|{
 1462|    914|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    914|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    914|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    914|            return transcode_to_string_impl_to32(src, dest);
 1473|    914|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    914|    SCN_EXPECT(false);
  ------------------
  |  |  930|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    914|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    914|{
 1355|    914|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    914|    auto it = src.begin();
 1358|   292k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 291k, False: 914]
  ------------------
 1359|   291k|        auto res = get_next_code_point(
 1360|   291k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   291k|                                                                 src.end()));
 1362|   291k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.98k, False: 288k]
  |  |  ------------------
  ------------------
 1363|  2.98k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.98k|        }
 1365|   288k|        else {
 1366|   288k|            dest.push_back(res.value);
 1367|   288k|        }
 1368|   291k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   291k|    }
 1370|    914|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   820k|{
 1279|   820k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   820k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   820k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.3k, False: 806k]
  |  |  ------------------
  ------------------
 1283|  13.3k|        return {get_start_for_next_code_point(input),
 1284|  13.3k|                detail::invalid_code_point};
 1285|  13.3k|    }
 1286|   806k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.2k, False: 780k]
  |  |  ------------------
  ------------------
 1287|  26.2k|        return {input.end(), detail::invalid_code_point};
 1288|  26.2k|    }
 1289|       |
 1290|   780k|    return {input.begin() + len,
 1291|   780k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   806k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  13.3k|{
 1265|  13.3k|    auto it = input.begin();
 1266|  59.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 57.0k, False: 1.98k]
  ------------------
 1267|  57.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.3k, False: 45.6k]
  ------------------
 1268|  11.3k|            break;
 1269|  11.3k|        }
 1270|  57.0k|    }
 1271|  13.3k|    return it;
 1272|  13.3k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  16.4k|    {
 3046|  16.4k|        SCN_UNLIKELY_ATTR
 3047|  16.4k|        m_msg = msg;
 3048|  16.4k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  1.09M|    {
 3051|  1.09M|        return m_msg == nullptr;
 3052|  1.09M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.71M|{
  458|  1.71M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.71M|        static_cast<unsigned char>(ch))];
  460|  1.71M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  37.6k|{
  469|  37.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  37.6k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.1k|{
  474|  14.1k|#if WCHAR_MIN < 0
  475|  14.1k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.9k, False: 1.29k]
  |  Branch (475:23): [True: 8.91k, False: 3.99k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.1k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   782k|{
  539|   782k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   782k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.23M|{
  784|  4.23M|    return e != eof_error::good;
  785|  4.23M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  12.7k|{
  798|  12.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  12.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  12.7k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.04M|{
 6047|  1.04M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.04M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.04M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.04M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.04M|    return {};
 6061|  1.04M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   426k|    {
  304|   426k|        ranges::advance(x, n);
  305|   426k|        return x;
  306|   426k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   426k|    {
  268|   426k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   426k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   426k|    {
  151|   426k|        i += n;
  152|   426k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.02M|    {
  108|  1.02M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.02M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.02M|    {
   87|  1.02M|        return s - i;
   88|  1.02M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.51M|    {
  108|  1.51M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.51M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.51M|    {
   87|  1.51M|        return s - i;
   88|  1.51M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   281k|    {
 2993|   281k|        return m_current;
 2994|   281k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.88M|    {
 2993|  1.88M|        return m_current;
 2994|  1.88M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   132k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   132k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   132k|        auto beg = r.begin();
  991|   132k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 132k, False: 0]
  ------------------
  992|   132k|            return false;
  993|   132k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   132k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  30.4k|    {
  763|  30.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.53k|        : m_fptr([](storage fn,
  743|  7.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.53k|              cvref<T> obj = *get<T>(fn);
  745|  7.53k|              if constexpr (std::is_void_v<R>) {
  746|  7.53k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.53k|              }
  748|  7.53k|              else {
  749|  7.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.53k|              }
  751|  7.53k|          }),
  752|  7.53k|          m_storage(std::addressof(f))
  753|  7.53k|    {
  754|  7.53k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.2k|        else if constexpr (std::is_object_v<T>) {
  688|  15.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.2k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.53k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.53k|        {
  662|  7.53k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  77.6M|    {
  763|  77.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  77.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  77.6M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.41M|        : m_fptr([](storage fn,
  743|  2.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.41M|              cvref<T> obj = *get<T>(fn);
  745|  2.41M|              if constexpr (std::is_void_v<R>) {
  746|  2.41M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.41M|              }
  748|  2.41M|              else {
  749|  2.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.41M|              }
  751|  2.41M|          }),
  752|  2.41M|          m_storage(std::addressof(f))
  753|  2.41M|    {
  754|  2.41M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.85M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.85M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.85M|              else {
  749|  5.85M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.85M|              }
  751|  5.85M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.85M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.85M|        else if constexpr (std::is_object_v<T>) {
  688|  5.85M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.85M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.41M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.41M|        {
  662|  2.41M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|  54.9k|    {
 6075|  54.9k|        const bool need_skipped_width =
 6076|  54.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 54.9k]
  |  Branch (6076:33): [True: 0, False: 54.9k]
  ------------------
 6077|  54.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  54.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 54.9k]
  ------------------
 6081|  54.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 54.9k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  54.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 54.9k, False: 0]
  |  Branch (6085:56): [True: 52.4k, False: 2.51k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  52.4k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 52.4k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   103k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 996, False: 51.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    996|    }                                                  \
  |  |  |  | 3939|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   103k|                            make_eof_scan_error));
 6096|       |
 6097|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 51.4k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  51.4k|            return result_type{it, 0};
 6105|   103k|        }
 6106|       |
 6107|  2.51k|        return result_type{rng.begin(), 0};
 6108|  54.9k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.51k|{
 2075|  2.51k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.51k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.51k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.51k|    else {
 2060|  2.51k|        auto first = range.begin();
 2061|  5.15k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.06k, False: 84]
  ------------------
 2062|  5.06k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.42k, False: 2.64k]
  ------------------
 2063|  2.42k|                return first;
 2064|  2.42k|            }
 2065|  5.06k|        }
 2066|     84|        return first;
 2067|  2.51k|    }
 2068|  2.51k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  51.2k|    {
  108|  51.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  51.2k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  51.2k|    {
   94|  51.2k|        iter_difference_t<I> counter{0};
   95|   524k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 472k, False: 51.2k]
  ------------------
   96|   472k|            ++i;
   97|   472k|            ++counter;
   98|   472k|        }
   99|  51.2k|        return counter;
  100|  51.2k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   207k|{
  951|   207k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.31k, False: 205k]
  |  |  ------------------
  ------------------
  952|  2.31k|        return eof_error::eof;
  953|  2.31k|    }
  954|   205k|    return eof_error::good;
  955|   207k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.44M|{
  945|  1.44M|    return is_range_eof(r.begin(), r.end());
  946|  1.44M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.44M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.44M|    {
  938|  1.44M|        return begin == end;
  939|  1.44M|    }
  940|  1.44M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   128k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   128k|    else {
 1788|   128k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   128k|    }
 1790|   128k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   128k|    {
 1636|   128k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   128k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   128k|    {
 1720|   128k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   128k|                           ranges::common_range<Range>) {
 1737|   128k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   128k|            auto end_seg = range.end().contiguous_segment();
 1739|   128k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.11k, False: 125k]
  |  |  ------------------
  ------------------
 1740|   128k|                             detail::to_address(end_seg.end()))) {
 1741|  3.11k|                auto& str = m_storage.emplace();
 1742|  3.11k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.11k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.11k|                m_view = string_view_type{str};
 1745|  3.11k|                return;
 1746|  3.11k|            }
 1747|       |
 1748|   125k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   125k|                                                            end_seg.data());
 1750|   125k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   128k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   253k|    {
 1681|   253k|        return m_view;
 1682|   253k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   128k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  50.7k|    {
 6117|  50.7k|        const bool need_skipped_width =
 6118|  50.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 50.7k]
  |  Branch (6118:33): [True: 0, False: 50.7k]
  ------------------
 6119|  50.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  50.7k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 50.7k]
  ------------------
 6122|  50.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 50.7k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  50.7k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 50.7k, False: 0]
  ------------------
 6131|  50.7k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 642, False: 50.1k]
  ------------------
 6132|  50.7k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 642]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    642|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 642]
  ------------------
 6134|    642|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  50.7k|        return result_type{rng.begin(), 0};
 6156|  50.7k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   343k|{
  951|   343k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.52k, False: 340k]
  |  |  ------------------
  ------------------
  952|  3.52k|        return eof_error::eof;
  953|  3.52k|    }
  954|   340k|    return eof_error::good;
  955|   343k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   343k|{
  945|   343k|    return is_range_eof(r.begin(), r.end());
  946|   343k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   343k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   343k|    {
  938|   343k|        return begin == end;
  939|   343k|    }
  940|   343k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   213k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   213k|                  ranges::sized_range<Range>) {
 1785|   213k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   213k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   213k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   213k|    {
 1589|   213k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.17M|    {
 1602|  1.17M|        return sv;
 1603|  1.17M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  5.02k|{
 2075|  5.02k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  5.02k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  5.02k|{
 2056|  5.02k|    if constexpr (ranges::common_range<Range>) {
 2057|  5.02k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  5.02k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   214k|{
 3066|   214k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 214k, False: 0]
  ------------------
 3067|   214k|        auto it = read_while_classic_space(range);
 3068|   214k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   214k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.31k, False: 212k]
  |  |  ------------------
  ------------------
 3070|  2.31k|            return unexpected(e);
 3071|  2.31k|        }
 3072|       |
 3073|   212k|        return it;
 3074|   214k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   214k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   214k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   214k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   214k|        auto buf = make_contiguous_buffer(range);
 2220|   214k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   214k|        return ranges::next(range.begin(),
 2222|   214k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   214k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   426k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   426k|                  ranges::sized_range<Range>) {
 1785|   426k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   426k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   426k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   426k|    {
 1589|   426k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  14.3k|    {
  304|  14.3k|        ranges::advance(x, n);
  305|  14.3k|        return x;
  306|  14.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   257k|    {
  268|   257k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   257k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   257k|    {
  181|   467k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 210k, False: 257k]
  ------------------
  182|   210k|            ++i;
  183|   210k|        }
  184|   257k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   128k|    {
 1686|   128k|        return m_storage.has_value();
 1687|   128k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.99k|    {
 1691|  1.99k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.99k|        return *m_storage;
 1693|  1.99k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  56.7k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  56.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  56.7k|            auto rd = make_reader<T, char_type>();
 6237|  56.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  56.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.82k, False: 54.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.82k|    }
  ------------------
 6238|       |
 6239|  54.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 54.9k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  54.9k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  54.9k|                return impl(rd, range, value);
 6242|  54.9k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  56.7k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   246k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   246k|                       std::is_same_v<T, std::wstring>) {
 5867|   246k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   246k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   358k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   151k|    {
 3156|   151k|        reader_error_handler eh{};
 3157|   151k|        get_derived().check_specs_impl(specs, eh);
 3158|   151k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.48k, False: 146k]
  |  |  ------------------
  ------------------
 3159|  5.48k|            return detail::unexpected_scan_error(
 3160|  5.48k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  5.48k|        }
 3162|   146k|        return {};
 3163|   151k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   151k|    {
 3168|   151k|        return static_cast<Derived&>(*this);
 3169|   151k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   151k|    {
 5247|   151k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   151k|        SCN_GCC_PUSH
 5250|   151k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   151k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   151k|        SCN_CLANG_PUSH
 5254|   151k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   151k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   151k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 151k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 151k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   138k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 138k, False: 13.0k]
  ------------------
 5263|   138k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 138k]
  ------------------
 5264|   138k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 138k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   138k|                else {
 5268|   138k|                    m_type = reader_type::word;
 5269|   138k|                }
 5270|   138k|                break;
 5271|      0|            }
 5272|       |
 5273|  5.48k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 5.48k, False: 146k]
  ------------------
 5274|  5.48k|                m_type = reader_type::character;
 5275|  5.48k|                break;
 5276|       |
 5277|  7.53k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 7.53k, False: 144k]
  ------------------
 5278|  7.53k|                m_type = reader_type::character_set;
 5279|  7.53k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 151k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 151k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   151k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   151k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|  54.9k|    {
 6162|  54.9k|        const bool need_skipped_width =
 6163|  54.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 54.9k]
  |  Branch (6163:33): [True: 0, False: 54.9k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  54.9k|        auto it = rng.begin();
 6167|  54.9k|        std::ptrdiff_t prefix_width = 0;
 6168|  54.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 54.9k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  54.9k|        else {
 6176|  54.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 996, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    996|    }                                                  \
  |  |  |  | 3939|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  53.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  53.9k|        }
 6179|  53.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  53.9k|        std::ptrdiff_t value_width = 0;
 6183|  53.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 53.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  53.9k|        else {
 6199|  53.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  53.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  53.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.66k, False: 51.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.66k|    }                                                  \
  |  | 3939|  53.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  51.2k|                                             specs, value, loc));
 6201|       |
 6202|  51.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 51.2k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  51.2k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  51.2k|        std::ptrdiff_t postfix_width = 0;
 6211|  51.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 50.7k, False: 534]
  ------------------
 6212|  50.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  50.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  50.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  50.7k|                                 value_width));
 6216|  50.7k|            std::tie(it, postfix_width) = postfix_result;
 6217|  50.7k|        }
 6218|       |
 6219|  51.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  51.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  51.2k|            specs, prefix_width, value_width, postfix_width));
 6221|  51.2k|        return it;
 6222|  51.2k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   487k|    {
 5296|   487k|        return m_type == reader_type::word;
 5297|   487k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   342k|{
 1242|   342k|    auto it = src.begin();
 1243|  2.17M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.84M, False: 334k]
  ------------------
 1244|  1.84M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.84M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.79k, False: 1.83M]
  ------------------
 1246|  4.79k|            return false;
 1247|  4.79k|        }
 1248|  1.83M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 674, False: 1.83M]
  ------------------
 1249|    674|            return false;
 1250|    674|        }
 1251|  1.83M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.83M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.83M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.40k, False: 1.83M]
  ------------------
 1254|  2.40k|            return false;
 1255|  2.40k|        }
 1256|  1.83M|        it += len;
 1257|  1.83M|    }
 1258|   334k|    return true;
 1259|   342k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   126k|{
 3108|   126k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   126k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.99k, False: 124k]
  ------------------
 3110|  1.99k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.99k|    static_cast<    \
  |  |  935|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.99k|        }
 3112|   124k|        else {
 3113|   124k|            dest.assign(source.view());
 3114|   124k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   126k|    return {};
 3121|   126k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  7.53k|        {
 5144|  7.53k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 7.53k, False: 0]
  ------------------
 5145|  7.53k|                return {};
 5146|  7.53k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  13.5k|        {
 5117|  13.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  13.5k|            const auto val =
 5119|  13.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  13.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  13.5k|                    (val % 8)) &
 5122|  13.5k|                   1u;
 5123|  13.5k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  15.2k|        {
 5168|  15.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.62k, False: 13.5k]
  ------------------
 5169|  1.62k|                return false;
 5170|  1.62k|            }
 5171|       |
 5172|  13.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  15.2k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  7.53k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  53.9k|    {
 5314|  53.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  53.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  53.9k|        return read_impl(range, specs, value);
 5316|  53.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  53.9k|    {
 5332|  53.9k|        SCN_CLANG_PUSH
 5333|  53.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  53.9k|        switch (m_type) {
 5336|  51.4k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 51.4k, False: 2.51k]
  ------------------
 5337|  51.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 53.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 53.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.51k, False: 51.4k]
  ------------------
 5347|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.51k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 53.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 53.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 53.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  53.9k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  53.9k|        }
 5368|       |
 5369|  53.9k|        SCN_CLANG_POP
 5370|  53.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   127k|    {
 4861|   127k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   127k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   127k|{
 4795|   127k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   127k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   127k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.25k, False: 125k]
  ------------------
 4799|  2.25k|        return detail::unexpected_scan_error(
 4800|  2.25k|            scan_error::invalid_scanned_value,
 4801|  2.25k|            "Invalid encoding in scanned string");
 4802|  2.25k|    }
 4803|       |
 4804|   125k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   125k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   125k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   125k|    static_cast<    \
  |  |  935|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   125k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   127k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   127k|    else {
 2196|   127k|        auto it = range.begin();
 2197|       |
 2198|   127k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   127k|            auto seg = get_contiguous_beginning(range);
 2200|   127k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   127k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 127k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   127k|            ranges::advance(it, seg.size());
 2205|   127k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   127k|            ranges::subrange{it, range.end()},
 2209|   127k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   127k|    }
 2211|   127k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   257k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   257k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   257k|        else {
 1055|   257k|            return r.begin().contiguous_segment();
 1056|   257k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   257k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   243k|{
 2160|   243k|    auto it = range.begin();
 2161|  1.23M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.23M, False: 3.96k]
  ------------------
 2162|  1.23M|        const auto val =
 2163|  1.23M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.23M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.21M, False: 16.8k]
  |  |  ------------------
  ------------------
 2165|  1.21M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.21M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.21M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 239k, False: 977k]
  ------------------
 2168|   239k|                return it;
 2169|   239k|            }
 2170|  1.21M|        }
 2171|   994k|        it = val.iterator;
 2172|   994k|    }
 2173|       |
 2174|  3.96k|    return it;
 2175|   243k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.23M|{
 1998|  1.23M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.23M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.23M|    auto it = range.begin();
 2002|  1.23M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.23M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.8k, False: 1.21M]
  |  |  ------------------
  ------------------
 2005|  16.8k|        ++it;
 2006|  16.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  16.8k|        return {it, {}};
 2008|  16.8k|    }
 2009|       |
 2010|  1.21M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.14M, False: 68.5k]
  ------------------
 2011|  1.14M|        ++it;
 2012|  1.14M|        return {it, string_type(1, *range.begin())};
 2013|  1.14M|    }
 2014|       |
 2015|  68.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  68.5k|    return {it, string_type{range.begin(), it}};
 2017|  1.21M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  16.8k|{
 1265|  16.8k|    auto it = input.begin();
 1266|  34.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 33.7k, False: 503]
  ------------------
 1267|  33.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 16.3k, False: 17.3k]
  ------------------
 1268|  16.3k|            break;
 1269|  16.3k|        }
 1270|  33.7k|    }
 1271|  16.8k|    return it;
 1272|  16.8k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  68.5k|    {
  283|  68.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  68.5k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  68.5k|    {
  252|  68.5k|        constexpr iter_difference_t<I> zero{0};
  253|  68.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|   250k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 182k, False: 68.0k]
  |  Branch (255:30): [True: 181k, False: 472]
  ------------------
  256|   181k|            ++i;
  257|   181k|            ++counter;
  258|   181k|        }
  259|       |
  260|  68.5k|        return counter;
  261|  68.5k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.23M|    {
 1989|  1.23M|        return !codepoint.empty();
 1990|  1.23M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   127k|        : m_fptr([](storage fn,
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|   127k|              if constexpr (std::is_void_v<R>) {
  746|   127k|                  obj(static_cast<decltype(args)>(args)...);
  747|   127k|              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
  752|   127k|          m_storage(std::addressof(f))
  753|   127k|    {
  754|   127k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   719k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   719k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   719k|              else {
  749|   719k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   719k|              }
  751|   719k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   719k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   719k|        else if constexpr (std::is_object_v<T>) {
  688|   719k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   719k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   719k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   127k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   127k|        {
  662|   127k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.51k|    {
 5089|  2.51k|        auto it = read_source_impl(range, {specs});
 5090|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 684]
  |  |  ------------------
  ------------------
 5091|  1.82k|            return unexpected(it.error());
 5092|  1.82k|        }
 5093|       |
 5094|    684|        return read_string_impl(range, *it, value);
 5095|  2.51k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.51k|    {
 5192|  2.51k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.51k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.51k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.51k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.51k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.51k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.51k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.51k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.51k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.51k|        };
 5215|       |
 5216|  2.51k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.51k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.51k|        auto it = read_while_code_unit(range, cb);
 5221|  2.51k|        return check_nonempty(it, range);
 5222|  2.51k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.51k|    {
 5228|  2.51k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.82k, False: 684]
  ------------------
 5229|  1.82k|            return detail::unexpected_scan_error(
 5230|  1.82k|                scan_error::invalid_scanned_value,
 5231|  1.82k|                "No characters matched in [character set]");
 5232|  1.82k|        }
 5233|       |
 5234|    684|        return it;
 5235|  2.51k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   115k|{
 2181|   115k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   115k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.51k|        : m_fptr([](storage fn,
  743|  2.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.51k|              cvref<T> obj = *get<T>(fn);
  745|  2.51k|              if constexpr (std::is_void_v<R>) {
  746|  2.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.51k|              }
  748|  2.51k|              else {
  749|  2.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.51k|              }
  751|  2.51k|          }),
  752|  2.51k|          m_storage(std::addressof(f))
  753|  2.51k|    {
  754|  2.51k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.06k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.06k|              else {
  749|  5.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.06k|              }
  751|  5.06k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.06k|    {
  684|  5.06k|        if constexpr (std::is_const_v<T>) {
  685|  5.06k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.06k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.06k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.06k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.06k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.51k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.51k|        {
  667|  2.51k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    684|{
 4795|    684|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    684|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    684|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 684]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    684|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    684|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 684]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    684|    return SCN_MOVE(result);
  ------------------
  |  |  934|    684|    static_cast<    \
  |  |  935|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    684|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  44.9k|    {
 5314|  44.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  44.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  44.9k|        return read_impl(range, specs, value);
 5316|  44.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  44.9k|    {
 5332|  44.9k|        SCN_CLANG_PUSH
 5333|  44.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  44.9k|        switch (m_type) {
 5336|  42.4k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 42.4k, False: 2.51k]
  ------------------
 5337|  42.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 44.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 44.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.51k, False: 42.4k]
  ------------------
 5347|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.51k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 44.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 44.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 44.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  44.9k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  44.9k|        }
 5368|       |
 5369|  44.9k|        SCN_CLANG_POP
 5370|  44.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   106k|    {
 4861|   106k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   106k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   106k|{
 4795|   106k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   106k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   106k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.81k, False: 103k]
  ------------------
 4799|  2.81k|        return detail::unexpected_scan_error(
 4800|  2.81k|            scan_error::invalid_scanned_value,
 4801|  2.81k|            "Invalid encoding in scanned string");
 4802|  2.81k|    }
 4803|       |
 4804|   103k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   103k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   103k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   103k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   103k|{
 3128|   103k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   103k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   103k|    return {};
 3136|   103k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   212k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   212k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   212k|        auto buf = make_contiguous_buffer(range);
 2191|   212k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   212k|        return ranges::next(range.begin(),
 2193|   212k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   212k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.51k|    {
 5089|  2.51k|        auto it = read_source_impl(range, {specs});
 5090|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 684]
  |  |  ------------------
  ------------------
 5091|  1.82k|            return unexpected(it.error());
 5092|  1.82k|        }
 5093|       |
 5094|    684|        return read_string_impl(range, *it, value);
 5095|  2.51k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  5.02k|    {
 5192|  5.02k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  5.02k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  5.02k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  5.02k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 5.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  5.02k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  5.02k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 5.02k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  5.02k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.02k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.02k|        };
 5215|       |
 5216|  5.02k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 5.02k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  5.02k|        auto it = read_while_code_unit(range, cb);
 5221|  5.02k|        return check_nonempty(it, range);
 5222|  5.02k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  5.02k|    {
 5228|  5.02k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.65k, False: 1.36k]
  ------------------
 5229|  3.65k|            return detail::unexpected_scan_error(
 5230|  3.65k|                scan_error::invalid_scanned_value,
 5231|  3.65k|                "No characters matched in [character set]");
 5232|  3.65k|        }
 5233|       |
 5234|  1.36k|        return it;
 5235|  5.02k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.02k|        : m_fptr([](storage fn,
  743|  5.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.02k|              cvref<T> obj = *get<T>(fn);
  745|  5.02k|              if constexpr (std::is_void_v<R>) {
  746|  5.02k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.02k|              }
  748|  5.02k|              else {
  749|  5.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.02k|              }
  751|  5.02k|          }),
  752|  5.02k|          m_storage(std::addressof(f))
  753|  5.02k|    {
  754|  5.02k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.1k|              else {
  749|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.1k|              }
  751|  10.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.1k|    {
  684|  10.1k|        if constexpr (std::is_const_v<T>) {
  685|  10.1k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.1k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  10.1k|        const auto cb = [&](SourceCharT ch) {
 5213|  10.1k|            return cb_wrapper.on_ascii_only(ch);
 5214|  10.1k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.02k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.02k|        {
  667|  5.02k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    684|{
 4795|    684|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    684|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    684|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 684]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    684|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    684|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 684]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    684|    return SCN_MOVE(result);
  ------------------
  |  |  934|    684|    static_cast<    \
  |  |  935|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    684|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|   112k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   112k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   112k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   112k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  44.9k|    {
 5314|  44.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  44.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  44.9k|        return read_impl(range, specs, value);
 5316|  44.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  44.9k|    {
 5332|  44.9k|        SCN_CLANG_PUSH
 5333|  44.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  44.9k|        switch (m_type) {
 5336|  42.4k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 42.4k, False: 2.51k]
  ------------------
 5337|  42.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 44.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 44.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.51k, False: 42.4k]
  ------------------
 5347|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.51k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 44.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 44.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 44.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  44.9k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  44.9k|        }
 5368|       |
 5369|  44.9k|        SCN_CLANG_POP
 5370|  44.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   106k|    {
 4868|   106k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   106k|                                     value);
 4870|   106k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   106k|{
 4814|   106k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   106k|    auto src = [&]() {
 4817|   106k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   106k|            return make_contiguous_buffer(
 4819|   106k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   106k|        }
 4821|   106k|        else {
 4822|   106k|            return make_contiguous_buffer(
 4823|   106k|                ranges::subrange{range.begin(), result});
 4824|   106k|        }
 4825|   106k|    }();
 4826|   106k|    using src_type = decltype(src);
 4827|       |
 4828|   106k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   106k|    else {
 4841|   106k|        const auto view = src.view();
 4842|   106k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   106k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 2.81k, False: 103k]
  ------------------
 4845|  2.81k|            return detail::unexpected_scan_error(
 4846|  2.81k|                scan_error::invalid_scanned_value,
 4847|  2.81k|                "Invalid encoding in scanned string_view");
 4848|  2.81k|        }
 4849|       |
 4850|   103k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   106k|    }
 4852|   106k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   106k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   106k|        else {
 4822|   106k|            return make_contiguous_buffer(
 4823|   106k|                ranges::subrange{range.begin(), result});
 4824|   106k|        }
 4825|   106k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.51k|    {
 5103|  2.51k|        auto it = read_source_impl(range, {specs});
 5104|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 684]
  |  |  ------------------
  ------------------
 5105|  1.82k|            return unexpected(it.error());
 5106|  1.82k|        }
 5107|       |
 5108|    684|        return read_string_view_impl(range, *it, value);
 5109|  2.51k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    684|{
 4814|    684|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    684|    auto src = [&]() {
 4817|    684|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    684|            return make_contiguous_buffer(
 4819|    684|                ranges::subrange{range.begin().base(), result.base()});
 4820|    684|        }
 4821|    684|        else {
 4822|    684|            return make_contiguous_buffer(
 4823|    684|                ranges::subrange{range.begin(), result});
 4824|    684|        }
 4825|    684|    }();
 4826|    684|    using src_type = decltype(src);
 4827|       |
 4828|    684|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    684|    else {
 4841|    684|        const auto view = src.view();
 4842|    684|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    684|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 684]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    684|        return SCN_MOVE(result);
  ------------------
  |  |  934|    684|    static_cast<    \
  |  |  935|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    684|    }
 4852|    684|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    684|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    684|        else {
 4822|    684|            return make_contiguous_buffer(
 4823|    684|                ranges::subrange{range.begin(), result});
 4824|    684|        }
 4825|    684|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   129k|{
 3066|   129k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 129k, False: 0]
  ------------------
 3067|   129k|        auto it = read_while_classic_space(range);
 3068|   129k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   129k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 127k]
  |  |  ------------------
  ------------------
 3070|  1.55k|            return unexpected(e);
 3071|  1.55k|        }
 3072|       |
 3073|   127k|        return it;
 3074|   129k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   129k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   129k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   129k|    else {
 2225|   129k|        auto it = range.begin();
 2226|       |
 2227|   129k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   129k|            auto seg = get_contiguous_beginning(range);
 2229|   129k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   129k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 14.3k, False: 115k]
  ------------------
 2231|  14.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  14.3k|            }
 2233|   115k|            ranges::advance(it, seg.size());
 2234|   115k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   129k|            return detail::is_cp_space(cp);
 2238|   129k|        });
 2239|   129k|    }
 2240|   129k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   497k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   497k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   497k|              else {
  749|   497k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   497k|              }
  751|   497k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   497k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   497k|        else if constexpr (std::is_object_v<T>) {
  688|   497k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   497k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   497k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   497k|            return detail::is_cp_space(cp);
 2238|   497k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   771k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   771k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   771k|        auto beg = r.begin();
  991|   771k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 771k, False: 0]
  ------------------
  992|   771k|            return false;
  993|   771k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   771k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  28.3k|    {
  763|  28.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.3k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  11.3k|        : m_fptr([](storage fn,
  743|  11.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.3k|              cvref<T> obj = *get<T>(fn);
  745|  11.3k|              if constexpr (std::is_void_v<R>) {
  746|  11.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.3k|              }
  748|  11.3k|              else {
  749|  11.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.3k|              }
  751|  11.3k|          }),
  752|  11.3k|          m_storage(std::addressof(f))
  753|  11.3k|    {
  754|  11.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  14.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  11.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.3k|        {
  662|  11.3k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   310k|    {
 6075|   310k|        const bool need_skipped_width =
 6076|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 310k]
  |  Branch (6076:33): [True: 0, False: 310k]
  ------------------
 6077|   310k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   310k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 310k]
  ------------------
 6081|   310k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 310k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   310k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 310k, False: 0]
  |  Branch (6085:56): [True: 307k, False: 3.77k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   307k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 307k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   613k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   307k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   307k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   307k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 928, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    928|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    928|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    928|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    928|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    928|    }                                                  \
  |  |  |  | 3939|   307k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   613k|                            make_eof_scan_error));
 6096|       |
 6097|   613k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 306k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   306k|            return result_type{it, 0};
 6105|   613k|        }
 6106|       |
 6107|  3.77k|        return result_type{rng.begin(), 0};
 6108|   310k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.77k|{
 2075|  3.77k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  3.77k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  3.77k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  3.77k|    else {
 2060|  3.77k|        auto first = range.begin();
 2061|  4.78k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.73k, False: 52]
  ------------------
 2062|  4.73k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 3.72k, False: 1.00k]
  ------------------
 2063|  3.72k|                return first;
 2064|  3.72k|            }
 2065|  4.73k|        }
 2066|     52|        return first;
 2067|  3.77k|    }
 2068|  3.77k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   303k|    {
  108|   303k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   303k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   303k|    {
   94|   303k|        iter_difference_t<I> counter{0};
   95|  8.98M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.68M, False: 303k]
  ------------------
   96|  8.68M|            ++i;
   97|  8.68M|            ++counter;
   98|  8.68M|        }
   99|   303k|        return counter;
  100|   303k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.22M|{
  951|  1.22M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 1.22M]
  |  |  ------------------
  ------------------
  952|  2.32k|        return eof_error::eof;
  953|  2.32k|    }
  954|  1.22M|    return eof_error::good;
  955|  1.22M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  24.7M|{
  945|  24.7M|    return is_range_eof(r.begin(), r.end());
  946|  24.7M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  24.7M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  24.7M|    {
  938|  24.7M|        return begin == end;
  939|  24.7M|    }
  940|  24.7M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   765k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   765k|    else {
 1788|   765k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   765k|    }
 1790|   765k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   765k|    {
 1636|   765k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   765k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   765k|    {
 1720|   765k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   765k|                           ranges::common_range<Range>) {
 1737|   765k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   765k|            auto end_seg = range.end().contiguous_segment();
 1739|   765k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.51k, False: 762k]
  |  |  ------------------
  ------------------
 1740|   765k|                             detail::to_address(end_seg.end()))) {
 1741|  3.51k|                auto& str = m_storage.emplace();
 1742|  3.51k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.51k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.51k|                m_view = string_view_type{str};
 1745|  3.51k|                return;
 1746|  3.51k|            }
 1747|       |
 1748|   762k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   762k|                                                            end_seg.data());
 1750|   762k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   765k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.52M|    {
 1681|  1.52M|        return m_view;
 1682|  1.52M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   765k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   302k|    {
 6117|   302k|        const bool need_skipped_width =
 6118|   302k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 302k]
  |  Branch (6118:33): [True: 0, False: 302k]
  ------------------
 6119|   302k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   302k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 302k]
  ------------------
 6122|   302k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 302k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   302k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 302k, False: 0]
  ------------------
 6131|   302k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 96, False: 302k]
  ------------------
 6132|   302k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 96]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|     96|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 96]
  ------------------
 6134|     96|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   302k|        return result_type{rng.begin(), 0};
 6156|   302k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  47.0M|{
 1998|  47.0M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  47.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  47.0M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  47.0M|    auto it = range.begin();
 2002|  47.0M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  47.0M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  47.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 47.0M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  47.0M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 47.0M, False: 0]
  ------------------
 2011|  47.0M|        ++it;
 2012|  47.0M|        return {it, string_type(1, *range.begin())};
 2013|  47.0M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  47.0M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  49.4M|{
  945|  49.4M|    return is_range_eof(r.begin(), r.end());
  946|  49.4M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  49.4M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  49.4M|    {
  938|  49.4M|        return begin == end;
  939|  49.4M|    }
  940|  49.4M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  47.0M|    {
 1989|  47.0M|        return !codepoint.empty();
 1990|  47.0M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.45M|{
  951|  2.45M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.64k, False: 2.45M]
  |  |  ------------------
  ------------------
  952|  4.64k|        return eof_error::eof;
  953|  4.64k|    }
  954|  2.45M|    return eof_error::good;
  955|  2.45M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.53M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.53M|                  ranges::sized_range<Range>) {
 1785|  1.53M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.53M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.53M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.53M|    {
 1589|  1.53M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.29M|    {
 1602|  2.29M|        return sv;
 1603|  2.29M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.55k|{
 2075|  7.55k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  7.55k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  7.55k|{
 2056|  7.55k|    if constexpr (ranges::common_range<Range>) {
 2057|  7.55k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  7.55k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.53M|{
 3066|  1.53M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.53M, False: 0]
  ------------------
 3067|  1.53M|        auto it = read_while_classic_space(range);
 3068|  1.53M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.53M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.43k, False: 1.53M]
  |  |  ------------------
  ------------------
 3070|  2.43k|            return unexpected(e);
 3071|  2.43k|        }
 3072|       |
 3073|  1.53M|        return it;
 3074|  1.53M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.53M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.53M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.53M|    else {
 2225|  1.53M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.53M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.53M|            return detail::is_cp_space(cp);
 2238|  1.53M|        });
 2239|  1.53M|    }
 2240|  1.53M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.53M|{
 2181|  1.53M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.53M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.06M|{
 2160|  3.06M|    auto it = range.begin();
 2161|  47.0M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 47.0M, False: 12.6k]
  ------------------
 2162|  47.0M|        const auto val =
 2163|  47.0M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  47.0M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  47.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 47.0M, False: 0]
  |  |  ------------------
  ------------------
 2165|  47.0M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  47.0M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  47.0M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.05M, False: 43.9M]
  ------------------
 2168|  3.05M|                return it;
 2169|  3.05M|            }
 2170|  47.0M|        }
 2171|  43.9M|        it = val.iterator;
 2172|  43.9M|    }
 2173|       |
 2174|  12.6k|    return it;
 2175|  3.06M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.53M|        : m_fptr([](storage fn,
  743|  1.53M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.53M|              cvref<T> obj = *get<T>(fn);
  745|  1.53M|              if constexpr (std::is_void_v<R>) {
  746|  1.53M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.53M|              }
  748|  1.53M|              else {
  749|  1.53M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.53M|              }
  751|  1.53M|          }),
  752|  1.53M|          m_storage(std::addressof(f))
  753|  1.53M|    {
  754|  1.53M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.57M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.57M|              else {
  749|  3.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.57M|              }
  751|  3.57M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.57M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.57M|        else if constexpr (std::is_object_v<T>) {
  688|  3.57M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.57M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.57M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.57M|            return detail::is_cp_space(cp);
 2238|  3.57M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.53M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.53M|        {
  662|  1.53M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   760k|    {
 1686|   760k|        return m_storage.has_value();
 1687|   760k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.11k|    {
 1691|  1.11k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.11k|        return *m_storage;
 1693|  1.11k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  2.32M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   943k|    {
 3156|   943k|        reader_error_handler eh{};
 3157|   943k|        get_derived().check_specs_impl(specs, eh);
 3158|   943k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.9k, False: 932k]
  |  |  ------------------
  ------------------
 3159|  10.9k|            return detail::unexpected_scan_error(
 3160|  10.9k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  10.9k|        }
 3162|   932k|        return {};
 3163|   943k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|   943k|    {
 3168|   943k|        return static_cast<Derived&>(*this);
 3169|   943k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   943k|    {
 5247|   943k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   943k|        SCN_GCC_PUSH
 5250|   943k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   943k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   943k|        SCN_CLANG_PUSH
 5254|   943k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   943k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   943k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 943k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 943k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   921k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 921k, False: 22.3k]
  ------------------
 5263|   921k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 921k]
  ------------------
 5264|   921k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 921k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   921k|                else {
 5268|   921k|                    m_type = reader_type::word;
 5269|   921k|                }
 5270|   921k|                break;
 5271|      0|            }
 5272|       |
 5273|  10.9k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 10.9k, False: 932k]
  ------------------
 5274|  10.9k|                m_type = reader_type::character;
 5275|  10.9k|                break;
 5276|       |
 5277|  11.3k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 11.3k, False: 932k]
  ------------------
 5278|  11.3k|                m_type = reader_type::character_set;
 5279|  11.3k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 943k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 943k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   943k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   943k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  3.22M|    {
 5296|  3.22M|        return m_type == reader_type::word;
 5297|  3.22M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.29M|{
 1242|  2.29M|    auto it = src.begin();
 1243|  64.3M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 62.1M, False: 2.27M]
  ------------------
 1244|  62.1M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  62.1M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 62.1M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  62.1M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 62.1M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  62.1M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  62.1M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  62.1M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 20.4k, False: 62.0M]
  ------------------
 1254|  20.4k|            return false;
 1255|  20.4k|        }
 1256|  62.0M|        it += len;
 1257|  62.0M|    }
 1258|  2.27M|    return true;
 1259|  2.29M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  11.3k|        {
 5144|  11.3k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 11.3k, False: 0]
  ------------------
 5145|  11.3k|                return {};
 5146|  11.3k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  8.91k|        {
 5117|  8.91k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  8.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  8.91k|            const auto val =
 5119|  8.91k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  8.91k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  8.91k|                    (val % 8)) &
 5122|  8.91k|                   1u;
 5123|  8.91k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  14.1k|        {
 5168|  14.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 5.28k, False: 8.91k]
  ------------------
 5169|  5.28k|                return false;
 5170|  5.28k|            }
 5171|       |
 5172|  8.91k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  14.1k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  11.3k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   765k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   765k|    else {
 2196|   765k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   765k|        return read_until_code_point(
 2208|   765k|            ranges::subrange{it, range.end()},
 2209|   765k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   765k|    }
 2211|   765k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.53M|{
 2160|  1.53M|    auto it = range.begin();
 2161|  23.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 23.5M, False: 6.32k]
  ------------------
 2162|  23.5M|        const auto val =
 2163|  23.5M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  23.5M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  23.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 23.5M, False: 0]
  |  |  ------------------
  ------------------
 2165|  23.5M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  23.5M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  23.5M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.52M, False: 21.9M]
  ------------------
 2168|  1.52M|                return it;
 2169|  1.52M|            }
 2170|  23.5M|        }
 2171|  21.9M|        it = val.iterator;
 2172|  21.9M|    }
 2173|       |
 2174|  6.32k|    return it;
 2175|  1.53M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  23.5M|{
 1998|  23.5M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  23.5M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  23.5M|    auto it = range.begin();
 2002|  23.5M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  23.5M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  23.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.5M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  23.5M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 23.5M, False: 0]
  ------------------
 2011|  23.5M|        ++it;
 2012|  23.5M|        return {it, string_type(1, *range.begin())};
 2013|  23.5M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  23.5M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  23.5M|    {
 1989|  23.5M|        return !codepoint.empty();
 1990|  23.5M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   765k|        : m_fptr([](storage fn,
  743|   765k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   765k|              cvref<T> obj = *get<T>(fn);
  745|   765k|              if constexpr (std::is_void_v<R>) {
  746|   765k|                  obj(static_cast<decltype(args)>(args)...);
  747|   765k|              }
  748|   765k|              else {
  749|   765k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   765k|              }
  751|   765k|          }),
  752|   765k|          m_storage(std::addressof(f))
  753|   765k|    {
  754|   765k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.7M|              else {
  749|  21.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.7M|              }
  751|  21.7M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.7M|        else if constexpr (std::is_object_v<T>) {
  688|  21.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.7M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  21.7M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   765k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   765k|        {
  662|   765k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  3.77k|    {
 5192|  3.77k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.77k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.77k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  3.77k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.77k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  3.77k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.77k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 3.77k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  3.77k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.77k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.77k|        };
 5215|       |
 5216|  3.77k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 3.77k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  3.77k|        auto it = read_while_code_unit(range, cb);
 5221|  3.77k|        return check_nonempty(it, range);
 5222|  3.77k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  3.77k|    {
 5228|  3.77k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.65k, False: 122]
  ------------------
 5229|  3.65k|            return detail::unexpected_scan_error(
 5230|  3.65k|                scan_error::invalid_scanned_value,
 5231|  3.65k|                "No characters matched in [character set]");
 5232|  3.65k|        }
 5233|       |
 5234|    122|        return it;
 5235|  3.77k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   766k|{
 2181|   766k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   766k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.77k|        : m_fptr([](storage fn,
  743|  3.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.77k|              cvref<T> obj = *get<T>(fn);
  745|  3.77k|              if constexpr (std::is_void_v<R>) {
  746|  3.77k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.77k|              }
  748|  3.77k|              else {
  749|  3.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.77k|              }
  751|  3.77k|          }),
  752|  3.77k|          m_storage(std::addressof(f))
  753|  3.77k|    {
  754|  3.77k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.73k|              else {
  749|  4.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.73k|              }
  751|  4.73k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.73k|    {
  684|  4.73k|        if constexpr (std::is_const_v<T>) {
  685|  4.73k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.73k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  4.73k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.73k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.73k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.77k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.77k|        {
  667|  3.77k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.53M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.53M|    else {
 2196|  1.53M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.53M|        return read_until_code_point(
 2208|  1.53M|            ranges::subrange{it, range.end()},
 2209|  1.53M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.53M|    }
 2211|  1.53M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.53M|        : m_fptr([](storage fn,
  743|  1.53M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.53M|              cvref<T> obj = *get<T>(fn);
  745|  1.53M|              if constexpr (std::is_void_v<R>) {
  746|  1.53M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.53M|              }
  748|  1.53M|              else {
  749|  1.53M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.53M|              }
  751|  1.53M|          }),
  752|  1.53M|          m_storage(std::addressof(f))
  753|  1.53M|    {
  754|  1.53M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  43.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.4M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.4M|              else {
  749|  43.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.4M|              }
  751|  43.4M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  43.4M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.4M|        else if constexpr (std::is_object_v<T>) {
  688|  43.4M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.4M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  43.4M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.53M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.53M|        {
  662|  1.53M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  7.55k|    {
 5192|  7.55k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  7.55k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  7.55k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  7.55k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  7.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 7.55k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  7.55k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  7.55k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 7.55k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  7.55k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.55k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.55k|        };
 5215|       |
 5216|  7.55k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 7.55k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  7.55k|        auto it = read_while_code_unit(range, cb);
 5221|  7.55k|        return check_nonempty(it, range);
 5222|  7.55k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  7.55k|    {
 5228|  7.55k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 7.31k, False: 244]
  ------------------
 5229|  7.31k|            return detail::unexpected_scan_error(
 5230|  7.31k|                scan_error::invalid_scanned_value,
 5231|  7.31k|                "No characters matched in [character set]");
 5232|  7.31k|        }
 5233|       |
 5234|    244|        return it;
 5235|  7.55k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.55k|        : m_fptr([](storage fn,
  743|  7.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.55k|              cvref<T> obj = *get<T>(fn);
  745|  7.55k|              if constexpr (std::is_void_v<R>) {
  746|  7.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.55k|              }
  748|  7.55k|              else {
  749|  7.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.55k|              }
  751|  7.55k|          }),
  752|  7.55k|          m_storage(std::addressof(f))
  753|  7.55k|    {
  754|  7.55k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.46k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.46k|              else {
  749|  9.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.46k|              }
  751|  9.46k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.46k|    {
  684|  9.46k|        if constexpr (std::is_const_v<T>) {
  685|  9.46k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.46k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  9.46k|        const auto cb = [&](SourceCharT ch) {
 5213|  9.46k|            return cb_wrapper.on_ascii_only(ch);
 5214|  9.46k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.55k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.55k|        {
  667|  7.55k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   314k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   314k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   314k|            auto rd = make_reader<T, char_type>();
 6237|   314k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   314k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.65k, False: 310k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.65k|    }
  ------------------
 6238|       |
 6239|   310k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 310k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   310k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   310k|                return impl(rd, range, value);
 6242|   310k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   314k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.55M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.55M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.55M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.55M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|   310k|    {
 6162|   310k|        const bool need_skipped_width =
 6163|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 310k]
  |  Branch (6163:33): [True: 0, False: 310k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   310k|        auto it = rng.begin();
 6167|   310k|        std::ptrdiff_t prefix_width = 0;
 6168|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 310k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   310k|        else {
 6176|   310k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 928, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    928|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    928|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    928|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    928|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    928|    }                                                  \
  |  |  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   310k|            std::tie(it, prefix_width) = prefix_result;
 6178|   310k|        }
 6179|   310k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   310k|        std::ptrdiff_t value_width = 0;
 6183|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 310k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   310k|        else {
 6199|   310k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.38k, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.38k|    }                                                  \
  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   303k|                                             specs, value, loc));
 6201|       |
 6202|   303k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 303k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   303k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   303k|        std::ptrdiff_t postfix_width = 0;
 6211|   303k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 302k, False: 762]
  ------------------
 6212|   302k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   302k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   302k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   302k|                                 value_width));
 6216|   302k|            std::tie(it, postfix_width) = postfix_result;
 6217|   302k|        }
 6218|       |
 6219|   303k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   303k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   303k|            specs, prefix_width, value_width, postfix_width));
 6221|   303k|        return it;
 6222|   303k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   758k|{
 3108|   758k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   758k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.11k, False: 757k]
  ------------------
 3110|  1.11k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.11k|    static_cast<    \
  |  |  935|  1.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.11k|        }
 3112|   757k|        else {
 3113|   757k|            dest.assign(source.view());
 3114|   757k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   758k|    return {};
 3121|   758k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   310k|    {
 5314|   310k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   310k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   310k|        return read_impl(range, specs, value);
 5316|   310k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   310k|    {
 5332|   310k|        SCN_CLANG_PUSH
 5333|   310k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   310k|        switch (m_type) {
 5336|   306k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306k, False: 3.77k]
  ------------------
 5337|   306k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 310k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 310k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.77k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.77k, False: 306k]
  ------------------
 5347|  3.77k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.77k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 310k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 310k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 310k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   310k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   310k|        }
 5368|       |
 5369|   310k|        SCN_CLANG_POP
 5370|   310k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   765k|    {
 4861|   765k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   765k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   765k|{
 4795|   765k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   765k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   765k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.82k, False: 758k]
  ------------------
 4799|  6.82k|        return detail::unexpected_scan_error(
 4800|  6.82k|            scan_error::invalid_scanned_value,
 4801|  6.82k|            "Invalid encoding in scanned string");
 4802|  6.82k|    }
 4803|       |
 4804|   758k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   758k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 758k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   758k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   758k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  3.77k|    {
 5089|  3.77k|        auto it = read_source_impl(range, {specs});
 5090|  3.77k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 122]
  |  |  ------------------
  ------------------
 5091|  3.65k|            return unexpected(it.error());
 5092|  3.65k|        }
 5093|       |
 5094|    122|        return read_string_impl(range, *it, value);
 5095|  3.77k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    122|{
 4795|    122|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    122|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    122|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 122]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    122|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    122|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    122|    return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    122|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   310k|    {
 5314|   310k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   310k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   310k|        return read_impl(range, specs, value);
 5316|   310k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   310k|    {
 5332|   310k|        SCN_CLANG_PUSH
 5333|   310k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   310k|        switch (m_type) {
 5336|   306k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306k, False: 3.77k]
  ------------------
 5337|   306k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 310k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 310k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.77k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.77k, False: 306k]
  ------------------
 5347|  3.77k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.77k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 310k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 310k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 310k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   310k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   310k|        }
 5368|       |
 5369|   310k|        SCN_CLANG_POP
 5370|   310k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   765k|    {
 4861|   765k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   765k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   765k|{
 4795|   765k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   765k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   765k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.82k, False: 758k]
  ------------------
 4799|  6.82k|        return detail::unexpected_scan_error(
 4800|  6.82k|            scan_error::invalid_scanned_value,
 4801|  6.82k|            "Invalid encoding in scanned string");
 4802|  6.82k|    }
 4803|       |
 4804|   758k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   758k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 758k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   758k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   758k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   758k|{
 3128|   758k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   758k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   758k|    return {};
 3136|   758k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  3.77k|    {
 5089|  3.77k|        auto it = read_source_impl(range, {specs});
 5090|  3.77k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 122]
  |  |  ------------------
  ------------------
 5091|  3.65k|            return unexpected(it.error());
 5092|  3.65k|        }
 5093|       |
 5094|    122|        return read_string_impl(range, *it, value);
 5095|  3.77k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    122|{
 4795|    122|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    122|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    122|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 122]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    122|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    122|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    122|    return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    122|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   775k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   775k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   775k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   775k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   310k|    {
 5314|   310k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   310k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   310k|        return read_impl(range, specs, value);
 5316|   310k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   310k|    {
 5332|   310k|        SCN_CLANG_PUSH
 5333|   310k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   310k|        switch (m_type) {
 5336|   306k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306k, False: 3.77k]
  ------------------
 5337|   306k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 310k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 310k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.77k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.77k, False: 306k]
  ------------------
 5347|  3.77k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.77k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 310k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 310k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 310k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   310k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   310k|        }
 5368|       |
 5369|   310k|        SCN_CLANG_POP
 5370|   310k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   765k|    {
 4868|   765k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   765k|                                     value);
 4870|   765k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   765k|{
 4814|   765k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   765k|    auto src = [&]() {
 4817|   765k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   765k|            return make_contiguous_buffer(
 4819|   765k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   765k|        }
 4821|   765k|        else {
 4822|   765k|            return make_contiguous_buffer(
 4823|   765k|                ranges::subrange{range.begin(), result});
 4824|   765k|        }
 4825|   765k|    }();
 4826|   765k|    using src_type = decltype(src);
 4827|       |
 4828|   765k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   765k|    else {
 4841|   765k|        const auto view = src.view();
 4842|   765k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   765k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6.82k, False: 758k]
  ------------------
 4845|  6.82k|            return detail::unexpected_scan_error(
 4846|  6.82k|                scan_error::invalid_scanned_value,
 4847|  6.82k|                "Invalid encoding in scanned string_view");
 4848|  6.82k|        }
 4849|       |
 4850|   758k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   758k|    static_cast<    \
  |  |  935|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   765k|    }
 4852|   765k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   765k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   765k|        else {
 4822|   765k|            return make_contiguous_buffer(
 4823|   765k|                ranges::subrange{range.begin(), result});
 4824|   765k|        }
 4825|   765k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  3.77k|    {
 5103|  3.77k|        auto it = read_source_impl(range, {specs});
 5104|  3.77k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.65k, False: 122]
  |  |  ------------------
  ------------------
 5105|  3.65k|            return unexpected(it.error());
 5106|  3.65k|        }
 5107|       |
 5108|    122|        return read_string_view_impl(range, *it, value);
 5109|  3.77k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    122|{
 4814|    122|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    122|    auto src = [&]() {
 4817|    122|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    122|            return make_contiguous_buffer(
 4819|    122|                ranges::subrange{range.begin().base(), result.base()});
 4820|    122|        }
 4821|    122|        else {
 4822|    122|            return make_contiguous_buffer(
 4823|    122|                ranges::subrange{range.begin(), result});
 4824|    122|        }
 4825|    122|    }();
 4826|    122|    using src_type = decltype(src);
 4827|       |
 4828|    122|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    122|    else {
 4841|    122|        const auto view = src.view();
 4842|    122|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    122|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 122]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    122|        return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    122|    }
 4852|    122|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    122|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    122|        else {
 4822|    122|            return make_contiguous_buffer(
 4823|    122|                ranges::subrange{range.begin(), result});
 4824|    122|        }
 4825|    122|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   766k|{
 3066|   766k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 766k, False: 0]
  ------------------
 3067|   766k|        auto it = read_while_classic_space(range);
 3068|   766k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   766k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.21k, False: 765k]
  |  |  ------------------
  ------------------
 3070|  1.21k|            return unexpected(e);
 3071|  1.21k|        }
 3072|       |
 3073|   765k|        return it;
 3074|   766k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   766k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   766k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   766k|    else {
 2225|   766k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   766k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   766k|            return detail::is_cp_space(cp);
 2238|   766k|        });
 2239|   766k|    }
 2240|   766k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   766k|        : m_fptr([](storage fn,
  743|   766k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   766k|              cvref<T> obj = *get<T>(fn);
  745|   766k|              if constexpr (std::is_void_v<R>) {
  746|   766k|                  obj(static_cast<decltype(args)>(args)...);
  747|   766k|              }
  748|   766k|              else {
  749|   766k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   766k|              }
  751|   766k|          }),
  752|   766k|          m_storage(std::addressof(f))
  753|   766k|    {
  754|   766k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78M|              else {
  749|  1.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78M|              }
  751|  1.78M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78M|        else if constexpr (std::is_object_v<T>) {
  688|  1.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.78M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.78M|            return detail::is_cp_space(cp);
 2238|  1.78M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   766k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   766k|        {
  662|   766k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   129k|{
 5835|   129k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.20k, False: 128k]
  |  |  ------------------
  ------------------
 5836|  1.20k|        return unexpected(e);
 5837|  1.20k|    }
 5838|       |
 5839|   128k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 128k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   128k|    return skip_classic_whitespace(range);
 5844|   128k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  64.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  64.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  64.6k|            auto rd = make_reader<T, char_type>();
 5916|  64.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  64.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  64.6k|    {
 5903|  64.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.05k, False: 63.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.05k|    }                                                  \
  |  |  |  | 3939|  64.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  63.6k|                        .transform_error(make_eof_scan_error));
 5905|  63.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  64.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  63.6k|    {
 5303|  63.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  63.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  63.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  63.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  64.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  64.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  64.6k|            auto rd = make_reader<T, char_type>();
 5916|  64.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  64.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  64.6k|    {
 5903|  64.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.05k, False: 63.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.05k|    }                                                  \
  |  |  |  | 3939|  64.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  63.6k|                        .transform_error(make_eof_scan_error));
 5905|  63.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  64.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  63.6k|    {
 5303|  63.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  63.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  63.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  63.6k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  77.8k|{
 5835|  77.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 762, False: 77.0k]
  |  |  ------------------
  ------------------
 5836|    762|        return unexpected(e);
 5837|    762|    }
 5838|       |
 5839|  77.0k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 77.0k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  77.0k|    return skip_classic_whitespace(range);
 5844|  77.0k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  77.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  77.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  77.8k|            auto rd = make_reader<T, char_type>();
 5920|  77.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 77.8k, False: 0]
  ------------------
 5921|  77.8k|                return impl(rd, range, value);
 5922|  77.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  77.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  77.8k|    {
 5903|  77.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 76.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  76.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  76.5k|                        .transform_error(make_eof_scan_error));
 5905|  76.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  77.8k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  76.5k|    {
 5303|  76.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  76.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  76.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  76.5k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   102k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   102k|    static_cast<    \
  |  |  935|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   102k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   102k|          m_current(m_range.begin())
 2988|   102k|    {
 2989|   102k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   178k|    {
 2998|   178k|        return m_range.end();
 2999|   178k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  83.9k|    {
 3013|  83.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  83.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  83.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  83.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  83.9k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 83.9k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  83.9k|        }
 3019|  83.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  83.9k|    static_cast<    \
  |  |  935|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  83.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  94.9k|    {
 3003|  94.9k|        return ranges::subrange{begin(), end()};
 3004|  94.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  91.2k|    {
 6075|  91.2k|        const bool need_skipped_width =
 6076|  91.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 91.2k]
  |  Branch (6076:33): [True: 0, False: 91.2k]
  ------------------
 6077|  91.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  91.2k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 91.2k]
  ------------------
 6081|  91.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 91.2k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  91.2k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 91.2k, False: 0]
  |  Branch (6085:56): [True: 86.2k, False: 5.02k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  86.2k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 86.2k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   171k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  86.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  86.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  86.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 84.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.40k|    }                                                  \
  |  |  |  | 3939|  86.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   171k|                            make_eof_scan_error));
 6096|       |
 6097|   171k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 84.8k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  84.8k|            return result_type{it, 0};
 6105|   171k|        }
 6106|       |
 6107|  5.02k|        return result_type{rng.begin(), 0};
 6108|  91.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  83.0k|    {
 6117|  83.0k|        const bool need_skipped_width =
 6118|  83.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 83.0k]
  |  Branch (6118:33): [True: 0, False: 83.0k]
  ------------------
 6119|  83.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  83.0k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.0k]
  ------------------
 6122|  83.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 83.0k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  83.0k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 83.0k, False: 0]
  ------------------
 6131|  83.0k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.28k, False: 81.7k]
  ------------------
 6132|  83.0k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.28k]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|  1.28k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 1.28k]
  ------------------
 6134|  1.28k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  83.0k|        return result_type{rng.begin(), 0};
 6156|  83.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  47.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  47.4k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  47.4k|            auto rd = make_reader<T, char_type>();
 6232|  47.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.82k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.82k|    }
  ------------------
 6233|  45.6k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  47.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  45.6k|    {
 6162|  45.6k|        const bool need_skipped_width =
 6163|  45.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 45.6k]
  |  Branch (6163:33): [True: 0, False: 45.6k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  45.6k|        auto it = rng.begin();
 6167|  45.6k|        std::ptrdiff_t prefix_width = 0;
 6168|  45.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 45.6k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  45.6k|        else {
 6176|  45.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 704, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    704|    }                                                  \
  |  |  |  | 3939|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  44.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  44.9k|        }
 6179|  44.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  44.9k|        std::ptrdiff_t value_width = 0;
 6183|  44.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  44.9k|        else {
 6199|  44.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.95k, False: 41.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.95k|    }                                                  \
  |  | 3939|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  41.9k|                                             specs, value, loc));
 6201|       |
 6202|  41.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 41.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  41.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  41.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  41.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.5k, False: 444]
  ------------------
 6212|  41.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.5k|                                 value_width));
 6216|  41.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.5k|        }
 6218|       |
 6219|  41.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  41.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  41.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  41.9k|        return it;
 6222|  41.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  47.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  47.4k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  47.4k|            auto rd = make_reader<T, char_type>();
 6232|  47.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.82k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.82k|    }
  ------------------
 6233|  45.6k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  47.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  45.6k|    {
 6162|  45.6k|        const bool need_skipped_width =
 6163|  45.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 45.6k]
  |  Branch (6163:33): [True: 0, False: 45.6k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  45.6k|        auto it = rng.begin();
 6167|  45.6k|        std::ptrdiff_t prefix_width = 0;
 6168|  45.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 45.6k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  45.6k|        else {
 6176|  45.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 704, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    704|    }                                                  \
  |  |  |  | 3939|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  44.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  44.9k|        }
 6179|  44.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  44.9k|        std::ptrdiff_t value_width = 0;
 6183|  44.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  44.9k|        else {
 6199|  44.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.95k, False: 41.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.95k|    }                                                  \
  |  | 3939|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  41.9k|                                             specs, value, loc));
 6201|       |
 6202|  41.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 41.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  41.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  41.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  41.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.5k, False: 444]
  ------------------
 6212|  41.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.5k|                                 value_width));
 6216|  41.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.5k|        }
 6218|       |
 6219|  41.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  41.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  41.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  41.9k|        return it;
 6222|  41.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   921k|{
 5835|   921k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.20k, False: 919k]
  |  |  ------------------
  ------------------
 5836|  2.20k|        return unexpected(e);
 5837|  2.20k|    }
 5838|       |
 5839|   919k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 919k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   919k|    return skip_classic_whitespace(range);
 5844|   919k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   460k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   460k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   460k|            auto rd = make_reader<T, char_type>();
 5916|   460k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   460k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   460k|    {
 5903|   460k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   459k|                        .transform_error(make_eof_scan_error));
 5905|   459k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   460k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   459k|    {
 5303|   459k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   459k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   459k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   459k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   460k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   460k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   460k|            auto rd = make_reader<T, char_type>();
 5916|   460k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   460k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   460k|    {
 5903|   460k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   459k|                        .transform_error(make_eof_scan_error));
 5905|   459k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   460k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   459k|    {
 5303|   459k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   459k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   459k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   459k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   643k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   643k|    static_cast<    \
  |  |  935|   643k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   643k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   643k|          m_current(m_range.begin())
 2988|   643k|    {
 2989|   643k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  1.23M|    {
 2998|  1.23M|        return m_range.end();
 2999|  1.23M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   607k|    {
 3013|   607k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   607k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   607k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 607k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   607k|        }
 3019|   607k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   607k|    static_cast<    \
  |  |  935|   607k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   607k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   629k|    {
 3003|   629k|        return ranges::subrange{begin(), end()};
 3004|   629k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   621k|    {
 6075|   621k|        const bool need_skipped_width =
 6076|   621k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 621k]
  |  Branch (6076:33): [True: 0, False: 621k]
  ------------------
 6077|   621k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   621k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 621k]
  ------------------
 6081|   621k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 621k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   621k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 621k, False: 0]
  |  Branch (6085:56): [True: 614k, False: 7.55k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   614k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 614k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.22M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.85k, False: 612k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.85k|    }                                                  \
  |  |  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.22M|                            make_eof_scan_error));
 6096|       |
 6097|  1.22M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 612k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   612k|            return result_type{it, 0};
 6105|  1.22M|        }
 6106|       |
 6107|  7.55k|        return result_type{rng.begin(), 0};
 6108|   621k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   605k|    {
 6117|   605k|        const bool need_skipped_width =
 6118|   605k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 605k]
  |  Branch (6118:33): [True: 0, False: 605k]
  ------------------
 6119|   605k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   605k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 605k]
  ------------------
 6122|   605k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 605k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   605k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 605k, False: 0]
  ------------------
 6131|   605k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 192, False: 605k]
  ------------------
 6132|   605k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 192]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    192|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 192]
  ------------------
 6134|    192|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   605k|        return result_type{rng.begin(), 0};
 6156|   605k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   314k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   314k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   314k|            auto rd = make_reader<T, char_type>();
 6232|   314k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   314k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.65k, False: 310k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.65k|    }
  ------------------
 6233|   310k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   314k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|   310k|    {
 6162|   310k|        const bool need_skipped_width =
 6163|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 310k]
  |  Branch (6163:33): [True: 0, False: 310k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   310k|        auto it = rng.begin();
 6167|   310k|        std::ptrdiff_t prefix_width = 0;
 6168|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 310k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   310k|        else {
 6176|   310k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 928, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    928|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    928|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    928|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    928|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    928|    }                                                  \
  |  |  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   310k|            std::tie(it, prefix_width) = prefix_result;
 6178|   310k|        }
 6179|   310k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   310k|        std::ptrdiff_t value_width = 0;
 6183|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 310k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   310k|        else {
 6199|   310k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.38k, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.38k|    }                                                  \
  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   303k|                                             specs, value, loc));
 6201|       |
 6202|   303k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 303k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   303k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   303k|        std::ptrdiff_t postfix_width = 0;
 6211|   303k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 302k, False: 762]
  ------------------
 6212|   302k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   302k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   302k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   302k|                                 value_width));
 6216|   302k|            std::tie(it, postfix_width) = postfix_result;
 6217|   302k|        }
 6218|       |
 6219|   303k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   303k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   303k|            specs, prefix_width, value_width, postfix_width));
 6221|   303k|        return it;
 6222|   303k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   314k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   314k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   314k|            auto rd = make_reader<T, char_type>();
 6232|   314k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   314k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.65k, False: 310k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.65k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.65k|    }
  ------------------
 6233|   310k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   314k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|   310k|    {
 6162|   310k|        const bool need_skipped_width =
 6163|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 310k]
  |  Branch (6163:33): [True: 0, False: 310k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   310k|        auto it = rng.begin();
 6167|   310k|        std::ptrdiff_t prefix_width = 0;
 6168|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 310k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   310k|        else {
 6176|   310k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 928, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    928|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    928|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    928|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    928|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    928|    }                                                  \
  |  |  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   310k|            std::tie(it, prefix_width) = prefix_result;
 6178|   310k|        }
 6179|   310k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   310k|        std::ptrdiff_t value_width = 0;
 6183|   310k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 310k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   310k|        else {
 6199|   310k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.38k, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.38k|    }                                                  \
  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   303k|                                             specs, value, loc));
 6201|       |
 6202|   303k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 303k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   303k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   303k|        std::ptrdiff_t postfix_width = 0;
 6211|   303k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 302k, False: 762]
  ------------------
 6212|   302k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   302k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   302k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   302k|                                 value_width));
 6216|   302k|            std::tie(it, postfix_width) = postfix_result;
 6217|   302k|        }
 6218|       |
 6219|   303k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   303k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   303k|            specs, prefix_width, value_width, postfix_width));
 6221|   303k|        return it;
 6222|   303k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   460k|{
 5835|   460k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.10k, False: 459k]
  |  |  ------------------
  ------------------
 5836|  1.10k|        return unexpected(e);
 5837|  1.10k|    }
 5838|       |
 5839|   459k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 459k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   459k|    return skip_classic_whitespace(range);
 5844|   459k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   460k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   460k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   460k|            auto rd = make_reader<T, char_type>();
 5920|   460k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 460k, False: 0]
  ------------------
 5921|   460k|                return impl(rd, range, value);
 5922|   460k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   460k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   460k|    {
 5903|   460k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   459k|                        .transform_error(make_eof_scan_error));
 5905|   459k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   460k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   459k|    {
 5303|   459k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   459k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   459k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   459k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    914|{
   53|    914|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    914|    string_buffer.resize(size);
   57|    914|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    914|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    914|    const auto wsv_reinterpret_size =
   62|    914|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 161, False: 753]
  ------------------
   63|    914|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    914|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    914|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    914|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    914|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    914|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    914|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    914|{
  123|    914|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    914|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    914|    buf.resize(sizeof...(Args));
  126|    914|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    914|    return buf;
  128|    914|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    914|{
  109|    914|    if constexpr (std::is_same_v<CharT, char>) {
  110|    914|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    914|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    914|{
  186|    914|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    914|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    914|                                   format_strings);
  189|    914|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    914|{
  134|       |    // Regular scan
  135|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.48k, False: 914]
  ------------------
  136|  5.48k|        auto it = scn::ranges::begin(source);
  137|  47.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  47.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  47.1k|            auto result = scn::scan<T>(
  140|  47.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  47.1k|                scn::runtime_format(f));
  142|  47.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.48k, False: 41.6k]
  ------------------
  143|  5.48k|                break;
  144|  5.48k|            }
  145|  41.6k|            it = result->begin();
  146|  41.6k|        }
  147|  5.48k|    }
  148|       |
  149|       |    // scan localized
  150|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.48k, False: 914]
  ------------------
  151|  5.48k|        auto it = scn::ranges::begin(source);
  152|  47.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  47.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  47.1k|            auto result = scn::scan<T>(
  155|  47.1k|                global_locale,
  156|  47.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  47.1k|                scn::runtime_format(f));
  158|  47.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.48k, False: 41.6k]
  ------------------
  159|  5.48k|                break;
  160|  5.48k|            }
  161|  41.6k|            it = result->begin();
  162|  41.6k|        }
  163|  5.48k|    }
  164|       |
  165|       |    // scan_value
  166|    914|    {
  167|    914|        auto it = scn::ranges::begin(source);
  168|  21.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  21.5k|            auto result = scn::scan_value<T>(
  171|  21.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  21.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 914, False: 20.6k]
  ------------------
  173|    914|                break;
  174|    914|            }
  175|  20.6k|            it = result->begin();
  176|  20.6k|        }
  177|    914|    }
  178|    914|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    914|{
  134|       |    // Regular scan
  135|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.48k, False: 914]
  ------------------
  136|  5.48k|        auto it = scn::ranges::begin(source);
  137|  47.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  47.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  47.1k|            auto result = scn::scan<T>(
  140|  47.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  47.1k|                scn::runtime_format(f));
  142|  47.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.48k, False: 41.6k]
  ------------------
  143|  5.48k|                break;
  144|  5.48k|            }
  145|  41.6k|            it = result->begin();
  146|  41.6k|        }
  147|  5.48k|    }
  148|       |
  149|       |    // scan localized
  150|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.48k, False: 914]
  ------------------
  151|  5.48k|        auto it = scn::ranges::begin(source);
  152|  47.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  47.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  47.1k|            auto result = scn::scan<T>(
  155|  47.1k|                global_locale,
  156|  47.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  47.1k|                scn::runtime_format(f));
  158|  47.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.48k, False: 41.6k]
  ------------------
  159|  5.48k|                break;
  160|  5.48k|            }
  161|  41.6k|            it = result->begin();
  162|  41.6k|        }
  163|  5.48k|    }
  164|       |
  165|       |    // scan_value
  166|    914|    {
  167|    914|        auto it = scn::ranges::begin(source);
  168|  21.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  21.5k|            auto result = scn::scan_value<T>(
  171|  21.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  21.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 914, False: 20.6k]
  ------------------
  173|    914|                break;
  174|    914|            }
  175|  20.6k|            it = result->begin();
  176|  20.6k|        }
  177|    914|    }
  178|    914|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    914|{
  134|       |    // Regular scan
  135|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.48k, False: 914]
  ------------------
  136|  5.48k|        auto it = scn::ranges::begin(source);
  137|  56.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  56.1k|            auto result = scn::scan<T>(
  140|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  56.1k|                scn::runtime_format(f));
  142|  56.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.48k, False: 50.6k]
  ------------------
  143|  5.48k|                break;
  144|  5.48k|            }
  145|  50.6k|            it = result->begin();
  146|  50.6k|        }
  147|  5.48k|    }
  148|       |
  149|       |    // scan localized
  150|  5.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.48k, False: 914]
  ------------------
  151|  5.48k|        auto it = scn::ranges::begin(source);
  152|  56.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  56.1k|            auto result = scn::scan<T>(
  155|  56.1k|                global_locale,
  156|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  56.1k|                scn::runtime_format(f));
  158|  56.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.48k, False: 50.6k]
  ------------------
  159|  5.48k|                break;
  160|  5.48k|            }
  161|  50.6k|            it = result->begin();
  162|  50.6k|        }
  163|  5.48k|    }
  164|       |
  165|       |    // scan_value
  166|    914|    {
  167|    914|        auto it = scn::ranges::begin(source);
  168|  25.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  25.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  25.9k|            auto result = scn::scan_value<T>(
  171|  25.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  25.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 914, False: 25.0k]
  ------------------
  173|    914|                break;
  174|    914|            }
  175|  25.0k|            it = result->begin();
  176|  25.0k|        }
  177|    914|    }
  178|    914|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    914|{
   91|    914|    using char_type = ranges::range_value_t<Source>;
   92|    914|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    914|    deque.clear();
   94|    914|    std::copy(ranges::begin(source), ranges::end(source),
   95|    914|              std::back_inserter(deque));
   96|    914|    return deque;
   97|    914|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    914|{
   80|    914|    if constexpr (std::is_same_v<CharT, char>) {
   81|    914|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    914|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    914|{
  123|    914|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    914|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    914|    buf.resize(sizeof...(Args));
  126|    914|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    914|    return buf;
  128|    914|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    914|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    914|    else {
  113|    914|        return wformat_string_view_buffer;
  114|    914|    }
  115|    914|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.82k|{
  186|  1.82k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.82k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.82k|                                   format_strings);
  189|  1.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.82k|{
  134|       |    // Regular scan
  135|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.9k, False: 1.82k]
  ------------------
  136|  10.9k|        auto it = scn::ranges::begin(source);
  137|   314k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   314k|            auto result = scn::scan<T>(
  140|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   314k|                scn::runtime_format(f));
  142|   314k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.9k, False: 303k]
  ------------------
  143|  10.9k|                break;
  144|  10.9k|            }
  145|   303k|            it = result->begin();
  146|   303k|        }
  147|  10.9k|    }
  148|       |
  149|       |    // scan localized
  150|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.9k, False: 1.82k]
  ------------------
  151|  10.9k|        auto it = scn::ranges::begin(source);
  152|   314k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   314k|            auto result = scn::scan<T>(
  155|   314k|                global_locale,
  156|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   314k|                scn::runtime_format(f));
  158|   314k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 303k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|   303k|            it = result->begin();
  162|   303k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.82k|    {
  167|  1.82k|        auto it = scn::ranges::begin(source);
  168|   153k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   153k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   153k|            auto result = scn::scan_value<T>(
  171|   153k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   153k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.82k, False: 151k]
  ------------------
  173|  1.82k|                break;
  174|  1.82k|            }
  175|   151k|            it = result->begin();
  176|   151k|        }
  177|  1.82k|    }
  178|  1.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.82k|{
  134|       |    // Regular scan
  135|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.9k, False: 1.82k]
  ------------------
  136|  10.9k|        auto it = scn::ranges::begin(source);
  137|   314k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   314k|            auto result = scn::scan<T>(
  140|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   314k|                scn::runtime_format(f));
  142|   314k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.9k, False: 303k]
  ------------------
  143|  10.9k|                break;
  144|  10.9k|            }
  145|   303k|            it = result->begin();
  146|   303k|        }
  147|  10.9k|    }
  148|       |
  149|       |    // scan localized
  150|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.9k, False: 1.82k]
  ------------------
  151|  10.9k|        auto it = scn::ranges::begin(source);
  152|   314k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   314k|            auto result = scn::scan<T>(
  155|   314k|                global_locale,
  156|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   314k|                scn::runtime_format(f));
  158|   314k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 303k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|   303k|            it = result->begin();
  162|   303k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.82k|    {
  167|  1.82k|        auto it = scn::ranges::begin(source);
  168|   153k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   153k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   153k|            auto result = scn::scan_value<T>(
  171|   153k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   153k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.82k, False: 151k]
  ------------------
  173|  1.82k|                break;
  174|  1.82k|            }
  175|   151k|            it = result->begin();
  176|   151k|        }
  177|  1.82k|    }
  178|  1.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.82k|{
  134|       |    // Regular scan
  135|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.9k, False: 1.82k]
  ------------------
  136|  10.9k|        auto it = scn::ranges::begin(source);
  137|   314k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   314k|            auto result = scn::scan<T>(
  140|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   314k|                scn::runtime_format(f));
  142|   314k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.9k, False: 303k]
  ------------------
  143|  10.9k|                break;
  144|  10.9k|            }
  145|   303k|            it = result->begin();
  146|   303k|        }
  147|  10.9k|    }
  148|       |
  149|       |    // scan localized
  150|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.9k, False: 1.82k]
  ------------------
  151|  10.9k|        auto it = scn::ranges::begin(source);
  152|   314k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   314k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   314k|            auto result = scn::scan<T>(
  155|   314k|                global_locale,
  156|   314k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   314k|                scn::runtime_format(f));
  158|   314k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 303k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|   303k|            it = result->begin();
  162|   303k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.82k|    {
  167|  1.82k|        auto it = scn::ranges::begin(source);
  168|   153k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   153k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   153k|            auto result = scn::scan_value<T>(
  171|   153k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   153k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.82k, False: 151k]
  ------------------
  173|  1.82k|                break;
  174|  1.82k|            }
  175|   151k|            it = result->begin();
  176|   151k|        }
  177|  1.82k|    }
  178|  1.82k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.82k|{
   91|  1.82k|    using char_type = ranges::range_value_t<Source>;
   92|  1.82k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.82k|    deque.clear();
   94|  1.82k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.82k|              std::back_inserter(deque));
   96|  1.82k|    return deque;
   97|  1.82k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.82k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.82k|    else {
   84|  1.82k|        return wnoncontiguous_buffer;
   85|  1.82k|    }
   86|  1.82k|}

LLVMFuzzerTestOneInput:
   57|    915|{
   58|    915|    scn::fuzz::run(data, size);
   59|    915|    return 0;
   60|    915|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    915|{
   36|    915|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 914]
  |  Branch (36:35): [True: 0, False: 914]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    914|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    914|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    914|                                             "{:64U}", "{:[A-Za-z]}");
   44|    914|    do_basic_run(sv, f);
   45|       |
   46|    914|    const auto& wf = get_format_strings<wchar_t>(
   47|    914|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    914|    do_basic_run(wsv_reinterpret, wf);
   49|    914|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 914, False: 0]
  ------------------
   50|    914|        do_basic_run(wsv_transcode, wf);
   51|    914|    }
   52|    914|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    914|{
   25|    914|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    914|                                                           format_strings);
   27|    914|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    914|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    914|            source, format_strings);
   30|    914|    }
   31|    914|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    914|{
   25|    914|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    914|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    914|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.82k|{
   25|  1.82k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.82k|                                                           format_strings);
   27|  1.82k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.82k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.82k|            source, format_strings);
   30|  1.82k|    }
   31|  1.82k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.82k|{
   25|  1.82k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.82k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.82k|}

