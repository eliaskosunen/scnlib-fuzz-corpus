_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.90M|{
 3803|  5.90M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  5.90M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  5.90M|    }
 3806|  5.90M|    else if constexpr (sizeof(U) == 2) {
 3807|  5.90M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  5.90M|    }
 3809|  5.90M|    else {
 3810|       |        // utf-32
 3811|  5.90M|        static_assert(sizeof(U) == 4);
 3812|  5.90M|        SCN_UNUSED(ch);
 3813|  5.90M|        return 1;
 3814|  5.90M|    }
 3815|  5.90M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.90M|{
 3767|  5.90M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.90M|    SCN_GCC_COMPAT_PUSH
 3770|  5.90M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.90M|    constexpr char lengths[] =
 3772|  5.90M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.90M|        "\1\1\1\1\1\1\1\1"
 3774|  5.90M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.90M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.90M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.90M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.90M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.90M|    SCN_GCC_COMPAT_POP
 3781|  5.90M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  5.78M|{
 4009|  5.78M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  5.78M|        return decode_utf8_code_point_exhaustive(input);
 4011|  5.78M|    }
 4012|  5.78M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  5.78M|        return decode_utf16_code_point_exhaustive(input);
 4014|  5.78M|    }
 4015|  5.78M|    else {
 4016|  5.78M|        SCN_EXPECT(input.size() == 1);
 4017|  5.78M|        auto cp = static_cast<char32_t>(input.front());
 4018|  5.78M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  5.78M|            return invalid_code_point;
 4020|  5.78M|        }
 4021|  5.78M|        return cp;
 4022|  5.78M|    }
 4023|  5.78M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  5.78M|{
 3822|  5.78M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  5.78M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  5.78M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  5.78M|    };
 3827|       |
 3828|  5.78M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 5.23M, False: 555k]
  ------------------
 3829|  5.23M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 134, False: 5.23M]
  ------------------
 3830|    134|            SCN_UNLIKELY_ATTR
 3831|    134|            return invalid_code_point;
 3832|    134|        }
 3833|  5.23M|        return static_cast<char32_t>(input[0]);
 3834|  5.23M|    }
 3835|       |
 3836|   555k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 224k, False: 331k]
  ------------------
 3837|   224k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 90, False: 224k]
  ------------------
 3838|     90|            SCN_UNLIKELY_ATTR
 3839|     90|            return invalid_code_point;
 3840|     90|        }
 3841|   224k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 14.5k, False: 209k]
  ------------------
 3842|  14.5k|            SCN_UNLIKELY_ATTR
 3843|  14.5k|            return invalid_code_point;
 3844|  14.5k|        }
 3845|       |
 3846|   209k|        char32_t cp{};
 3847|   209k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   209k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   209k|        return cp;
 3850|   224k|    }
 3851|       |
 3852|   331k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 296k, False: 35.0k]
  ------------------
 3853|   296k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 15, False: 296k]
  ------------------
 3854|     15|            SCN_UNLIKELY_ATTR
 3855|     15|            return invalid_code_point;
 3856|     15|        }
 3857|   296k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 20.0k, False: 276k]
  ------------------
 3858|   296k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.44k, False: 274k]
  ------------------
 3859|  21.5k|            SCN_UNLIKELY_ATTR
 3860|  21.5k|            return invalid_code_point;
 3861|  21.5k|        }
 3862|       |
 3863|   274k|        char32_t cp{};
 3864|   274k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   274k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   274k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   274k|        return cp;
 3868|   296k|    }
 3869|       |
 3870|  35.0k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 35.0k, False: 0]
  ------------------
 3871|  35.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 35.0k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  35.0k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 7.83k, False: 27.2k]
  ------------------
 3876|  7.83k|            SCN_UNLIKELY_ATTR
 3877|  7.83k|            return invalid_code_point;
 3878|  7.83k|        }
 3879|  27.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 2.89k, False: 24.3k]
  ------------------
 3880|  27.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 205, False: 24.1k]
  ------------------
 3881|  27.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 203, False: 23.9k]
  ------------------
 3882|  3.30k|            SCN_UNLIKELY_ATTR
 3883|  3.30k|            return invalid_code_point;
 3884|  3.30k|        }
 3885|       |
 3886|  23.9k|        char32_t cp{};
 3887|  23.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  23.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  23.9k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  23.9k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  23.9k|        return cp;
 3892|  27.2k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   872k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   872k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   872k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  5.20M|{
 3695|  5.20M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  5.20M|                                          decltype(first), decltype(last)> &&
 3697|  5.20M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  5.20M|        return {first, last};
 3699|  5.20M|    }
 3700|  5.20M|    else {
 3701|  5.20M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  5.20M|                                       to_address(first), to_address(last)))};
 3703|  5.20M|    }
 3704|  5.20M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  16.0M|{
  322|  16.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  16.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  16.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  16.3M|{
  302|  16.3M|    return p;
  303|  16.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  2.49M|{
 3726|  2.49M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  2.49M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  2.49M|                      decltype(it)> &&
 3729|  2.49M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  2.49M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.49M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  2.49M|        return it;
 3732|  2.49M|    }
 3733|  2.49M|    else {
 3734|  2.49M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  2.49M|    }
 3736|  2.49M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  21.3k|    {
 2720|  21.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  21.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  21.3k|    {
 2701|  21.3k|        return decay_copy(t.begin());
 2702|  21.3k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  2.88M|{
 1945|  2.88M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  2.88M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   662k|    {
 2777|   662k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   662k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   662k|    {
 2759|   662k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   662k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8862|  66.8k|{
 8863|  66.8k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  66.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  66.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  66.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|   269k|{
 5392|   269k|    detail::check_scan_arg_types<Args...>();
 5393|   269k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   269k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5130|   332k|{
 5131|   332k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   332k|                  "Scan argument types must be default constructible");
 5133|   332k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   332k|                  "Scan argument types must be Destructible");
 5135|   332k|    static_assert(
 5136|   332k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   332k|        "Scan argument types must not be references");
 5138|   332k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|   269k|    {
 5345|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|   269k|    {
 5356|   269k|        return {detail::make_arg<
 5357|   269k|            kind, Context,
 5358|   269k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   269k|                                 typename Context::char_type>::value>(args)...};
 5360|   269k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|   269k|{
 5166|   269k|    return make_value<Context>(value).ref_value;
 5167|   269k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|   332k|{
 5116|   332k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   332k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   332k|                                  needs_context_tag>) {
 5120|   332k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   332k|    }
 5122|   332k|    else {
 5123|   332k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   332k|            value, context_tag<Context>{}));
 5125|   332k|    }
 5126|   332k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|   332k|    {                                                                        \
 4955|   332k|        return val;                                                          \
 4956|   332k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5084|   332k|{
 5085|   332k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   332k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   332k|    constexpr bool scannable_char =
 5089|   332k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   332k|    static_assert(scannable_char,
 5091|   332k|                  "Cannot scan an argument of an unsupported character "
 5092|   332k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   332k|    constexpr bool scannable_const =
 5095|   332k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   332k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   332k|    constexpr bool scannable_disabled =
 5099|   332k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   332k|    static_assert(scannable_disabled,
 5101|   332k|                  "Cannot scan an argument that has been disabled by "
 5102|   332k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   332k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   332k|    static_assert(
 5106|   332k|        scannable,
 5107|   332k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   332k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   332k|    return arg_value{arg};
 5111|   332k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4897|   332k|    {
 4898|   332k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|   133k|{
 8650|   133k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|   133k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   133k|{
 8587|   133k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   133k|    auto result = vscan_impl(buffer, format, args);
 8590|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 124k]
  |  |  ------------------
  ------------------
 8591|  9.48k|        return unexpected(result.error());
 8592|  9.48k|    }
 8593|   124k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   133k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|   330k|{
 4716|   330k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   330k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   330k|                  "\n"
 4720|   330k|                  "Unsupported range type given as input to a scanning "
 4721|   330k|                  "function.\n"
 4722|   330k|                  "A range needs to have a character type (value type) "
 4723|   330k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   330k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   330k|                  "to be included.\n"
 4726|   330k|                  "See the scnlib documentation for more details.");
 4727|   330k|    static_assert(
 4728|   330k|        !std::is_same_v<T, custom_char_traits>,
 4729|   330k|        "\n"
 4730|   330k|        "Unsupported range type given as input to a scanning "
 4731|   330k|        "function.\n"
 4732|   330k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   330k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   330k|        "not supported.");
 4735|   330k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   330k|                  "\n"
 4737|   330k|                  "Unsupported range type given as input to a scanning "
 4738|   330k|                  "function.\n"
 4739|   330k|                  "file_marker_found cannot be used as an "
 4740|   330k|                  "source range type to scn::scan.\n"
 4741|   330k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   330k|                  "and do not provide an explicit source range, "
 4743|   330k|                  "or use scn::scan with a FILE* directly.");
 4744|   330k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   330k|                  "\n"
 4746|   330k|                  "Unsupported range type given as input to a scanning "
 4747|   330k|                  "function.\n"
 4748|   330k|                  "In order to be scannable, a range needs to satisfy "
 4749|   330k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   330k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   330k|                  "\n"
 4752|   330k|                  "Unsupported range type given as input to a scanning "
 4753|   330k|                  "function.\n"
 4754|   330k|                  "A range needs to model forward_range and have a valid "
 4755|   330k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   330k|                  "Examples of scannable ranges are std::string, "
 4757|   330k|                  "std::string_view, "
 4758|   330k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   330k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   330k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   330k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   330k|{
 4655|   330k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   330k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   330k|    }
 4658|   330k|    else {
 4659|   330k|        return invalid_char_type{};
 4660|   330k|    }
 4661|   330k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   330k|    {
 2851|   330k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   330k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   330k|    {
 2832|   330k|        return t.data();
 2833|   330k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|   330k|    {
 3227|   330k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 1.90k, False: 328k]
  ------------------
 3228|   330k|                   ? nullptr
 3229|   330k|                   : std::addressof(*ranges::begin(derived()));
 3230|   330k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   330k|    {
 3001|   330k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   330k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   330k|    {
 2974|   330k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   330k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  1.27M|    {
 3335|  1.27M|        return m_iterator == m_sentinel;
 3336|  1.27M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|   659k|    {
 3181|   659k|        return static_cast<const D&>(*this);
 3182|   659k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   639k|    {
 2720|   639k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   639k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   639k|    {
 2701|   639k|        return decay_copy(t.begin());
 2702|   639k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  3.61M|    {
 3326|  3.61M|        return m_iterator;
 3327|  3.61M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   330k|    {
 2926|   330k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   330k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   330k|    {
 2892|   330k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   330k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  42.6M|{
 1945|  42.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  42.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  42.6M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.27M|    {
 3342|  1.27M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.27M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  85.3M|    {
 1594|  85.3M|        return has_value();
 1595|  85.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   170M|    {
  481|   170M|        return m_has_value;
  482|   170M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  92.4k|    {
 1600|  92.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  92.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  92.4k|        return this->get_unexpected().error();
 1602|  92.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  92.4k|    {
  464|  92.4k|        return m_unexpected;
  465|  92.4k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|   696k|    {
  357|   696k|        return m_unexpected;
  358|   696k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   355k|    {
  343|   355k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   355k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   355k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  20.5k|    {
 1472|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  20.5k|    {
  443|  20.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   404k|    {
  352|   404k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   404k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   404k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   330k|    {
 1173|   330k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|   310k|{
 5919|   310k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|   310k|                      ranges::iterator_t<SourceRange>>) {
 5921|   310k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|   310k|    }
 5923|   310k|    else {
 5924|   310k|        auto it = ranges::begin(source);
 5925|   310k|        while (n > 0) {
 5926|   310k|            --n;
 5927|   310k|            ++it;
 5928|   310k|        }
 5929|   310k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|   310k|    }
 5931|   310k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  1.24M|    {
 2720|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.24M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  1.24M|    {
 2701|  1.24M|        return decay_copy(t.begin());
 2702|  1.24M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|   310k|{
 5906|   310k|    return ranges::end(source);
 5907|   310k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   310k|    {
 2777|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   310k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   310k|    {
 2759|   310k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   310k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.96M|    {
 3330|  1.96M|        return m_sentinel;
 3331|  1.96M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  85.1M|    {
 1649|  85.1M|        return value();
 1650|  85.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  85.1M|    {
 1623|  85.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  85.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  85.1M|        return this->get_value();
 1625|  85.1M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  85.1M|    {
  447|  85.1M|        return m_value;
  448|  85.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   310k|    {
 1426|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|   310k|    {
  433|   310k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7970|   133k|    {
 7971|   133k|        return m_str;
 7972|   133k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   269k|    {
 5422|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|   269k|    {
 5375|   269k|        return m_argptrs;
 5376|   269k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|   402k|    {
 5474|   402k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|   133k|{
 8816|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 124k]
  |  |  ------------------
  ------------------
 8817|  9.48k|        return unexpected(result.error());
 8818|  9.48k|    }
 8819|   124k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   133k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|   330k|    {
 1594|   330k|        return has_value();
 1595|   330k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   661k|    {
  481|   661k|        return m_has_value;
  482|   661k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|  20.5k|    {
 1600|  20.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  20.5k|        return this->get_unexpected().error();
 1602|  20.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  20.5k|    {
  464|  20.5k|        return m_unexpected;
  465|  20.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  10.2k|    {
 1472|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  10.2k|    {
  622|  10.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  10.2k|    {
  685|  10.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  10.2k|                                  std::forward<Args>(args)...);
  687|  10.2k|        m_has_value = false;
  688|  10.2k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  61.6k|{
  388|  61.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  61.6k|        T(std::forward<Args>(args)...);
  390|  61.6k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  20.5k|    {
  714|  20.5k|        return reinterpret_cast<unexpected<E>*>(
  715|  20.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  20.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  20.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   165k|    {
 1173|   165k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|   248k|    {
 1649|   248k|        return value();
 1650|   248k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   310k|    {
 1623|   310k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   310k|        return this->get_value();
 1625|   310k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   310k|    {
  447|   310k|        return m_value;
  448|   310k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|   155k|    {
 5826|   155k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|   310k|    {
 5677|   310k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|   312k|    {
 5612|   312k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|   155k|    {
 1426|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|   155k|    {
  612|   155k|        construct(std::forward<Args>(args)...);
  613|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|   155k|    {
  678|   155k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   155k|        m_has_value = true;
  680|   155k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|   155k|{
  388|   155k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   155k|        T(std::forward<Args>(args)...);
  390|   155k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|   155k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   465k|    {
  702|   465k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   465k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   465k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|   310k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|   269k|    {
 5370|   269k|        return m_args;
 5371|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|   269k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  2.17M|    {
 3312|  2.17M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|   402k|{
 7687|   402k|    return s;
 7688|   402k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|   402k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   133k|    {
 7967|   133k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|   165k|    {
 1594|   165k|        return has_value();
 1595|   165k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   486k|    {
  671|   486k|        return m_has_value;
  672|   486k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1668|   155k|    {
 1669|   155k|        return &value();
 1670|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1622|   155k|    {
 1623|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   155k|        return this->get_value();
 1625|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   155k|    {
  637|   155k|        return *value_ptr();
  638|   155k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|   310k|    {
 5694|   310k|        return ranges::begin(m_range);
 5695|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   165k|    {
  627|   165k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 155k, False: 10.2k]
  ------------------
  628|   155k|            destroy_value();
  629|   155k|        }
  630|  10.2k|        else {
  631|  10.2k|            destroy_unexpected();
  632|  10.2k|        }
  633|   165k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   155k|    {
  692|   155k|        scn::detail::destroy_at(value_ptr());
  693|   155k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|   155k|{
  394|   155k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   155k|        for (auto& elem : *p) {
  396|   155k|            scn::detail::destroy_at(&elem);
  397|   155k|        }
  398|   155k|    }
  399|   155k|    else {
  400|   155k|        p->~T();
  401|   155k|    }
  402|   155k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  10.2k|    {
  696|  10.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  10.2k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  61.6k|{
  394|  61.6k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  61.6k|        for (auto& elem : *p) {
  396|  61.6k|            scn::detail::destroy_at(&elem);
  397|  61.6k|        }
  398|  61.6k|    }
  399|  61.6k|    else {
  400|  61.6k|        p->~T();
  401|  61.6k|    }
  402|  61.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8929|  66.8k|{
 8930|  66.8k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  66.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  66.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  66.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|   133k|{
 8668|   133k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|   133k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   133k|{
 8603|   133k|#if !SCN_DISABLE_LOCALE
 8604|   133k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   133k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   133k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   133k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 124k]
  |  |  ------------------
  ------------------
 8611|  9.48k|        return unexpected(result.error());
 8612|  9.48k|    }
 8613|   124k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   133k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8968|  31.6k|{
 8969|  31.6k|    T value;
 8970|  31.6k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  31.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 790, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    790|    }                                                  \
  |  |  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  30.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  31.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5150|  63.7k|{
 5151|  63.7k|    check_scan_arg_types<T>();
 5152|       |
 5153|  63.7k|    basic_scan_arg<Context> arg;
 5154|  63.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  63.7k|    arg.m_value = make_value<Context>(value);
 5156|  63.7k|    return arg;
 5157|  63.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|   498k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  63.9M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|  63.3k|{
 8681|  63.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|  63.3k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  63.3k|{
 8627|  63.3k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  63.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  63.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 61.7k]
  |  |  ------------------
  ------------------
 8631|  1.58k|        return unexpected(result.error());
 8632|  1.58k|    }
 8633|  61.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  63.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  61.7k|    {
 1659|  61.7k|        return std::move(value());
 1660|  61.7k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8862|  66.8k|{
 8863|  66.8k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  66.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  66.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  66.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5391|   133k|{
 5392|   133k|    detail::check_scan_arg_types<Args...>();
 5393|   133k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   133k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5130|   165k|{
 5131|   165k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|   165k|                  "Scan argument types must be default constructible");
 5133|   165k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|   165k|                  "Scan argument types must be Destructible");
 5135|   165k|    static_assert(
 5136|   165k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|   165k|        "Scan argument types must not be references");
 5138|   165k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5344|   133k|    {
 5345|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|   133k|    {
 5356|   133k|        return {detail::make_arg<
 5357|   133k|            kind, Context,
 5358|   133k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   133k|                                 typename Context::char_type>::value>(args)...};
 5360|   133k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5165|   133k|{
 5166|   133k|    return make_value<Context>(value).ref_value;
 5167|   133k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5115|   165k|{
 5116|   165k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   165k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   165k|                                  needs_context_tag>) {
 5120|   165k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   165k|    }
 5122|   165k|    else {
 5123|   165k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   165k|            value, context_tag<Context>{}));
 5125|   165k|    }
 5126|   165k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4954|   165k|    {                                                                        \
 4955|   165k|        return val;                                                          \
 4956|   165k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5084|   165k|{
 5085|   165k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|   165k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|   165k|    constexpr bool scannable_char =
 5089|   165k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|   165k|    static_assert(scannable_char,
 5091|   165k|                  "Cannot scan an argument of an unsupported character "
 5092|   165k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|   165k|    constexpr bool scannable_const =
 5095|   165k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|   165k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|   165k|    constexpr bool scannable_disabled =
 5099|   165k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|   165k|    static_assert(scannable_disabled,
 5101|   165k|                  "Cannot scan an argument that has been disabled by "
 5102|   165k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|   165k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|   165k|    static_assert(
 5106|   165k|        scannable,
 5107|   165k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|   165k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|   165k|    return arg_value{arg};
 5111|   165k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4897|   165k|    {
 4898|   165k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7970|   133k|    {
 7971|   133k|        return m_str;
 7972|   133k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   133k|    {
 5422|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5374|   133k|    {
 5375|   133k|        return m_argptrs;
 5376|   133k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|   133k|{
 8816|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 124k]
  |  |  ------------------
  ------------------
 8817|  9.48k|        return unexpected(result.error());
 8818|  9.48k|    }
 8819|   124k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   133k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  10.2k|    {
 1472|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  10.2k|    {
  443|  10.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   165k|    {
 1173|   165k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|   155k|    {
 5826|   155k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|   155k|    {
 5612|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|   155k|    {
 1426|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|   155k|    {
  433|   155k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5369|   133k|    {
 5370|   133k|        return m_args;
 5371|   133k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   133k|    {
 7967|   133k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|   165k|    {
 1594|   165k|        return has_value();
 1595|   165k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   320k|    {
  481|   320k|        return m_has_value;
  482|   320k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1668|   155k|    {
 1669|   155k|        return &value();
 1670|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1622|   155k|    {
 1623|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   155k|        return this->get_value();
 1625|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   155k|    {
  447|   155k|        return m_value;
  448|   155k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8929|  66.8k|{
 8930|  66.8k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  66.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  66.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  66.8k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8968|  31.6k|{
 8969|  31.6k|    T value;
 8970|  31.6k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  31.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 790, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    790|    }                                                  \
  |  |  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  30.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  31.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5150|  31.6k|{
 5151|  31.6k|    check_scan_arg_types<T>();
 5152|       |
 5153|  31.6k|    basic_scan_arg<Context> arg;
 5154|  31.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  31.6k|    arg.m_value = make_value<Context>(value);
 5156|  31.6k|    return arg;
 5157|  31.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  10.2k|    {
 2720|  10.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  10.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  10.2k|    {
 2701|  10.2k|        return decay_copy(t.begin());
 2702|  10.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|  7.19M|{
 1945|  7.19M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  7.19M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   334k|    {
 2777|   334k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   334k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   334k|    {
 2759|   334k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   334k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8862|  67.6k|{
 8863|  67.6k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  67.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  67.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.6k|    static_cast<    \
  |  |  929|  67.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.6k|    static_cast<    \
  |  |  929|  67.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  67.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  67.6k|{
 8650|  67.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  67.6k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  67.6k|{
 8587|  67.6k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  67.6k|    auto result = vscan_impl(buffer, format, args);
 8590|  67.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 62.9k]
  |  |  ------------------
  ------------------
 8591|  4.74k|        return unexpected(result.error());
 8592|  4.74k|    }
 8593|  62.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  67.6k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|   167k|{
 4716|   167k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   167k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   167k|                  "\n"
 4720|   167k|                  "Unsupported range type given as input to a scanning "
 4721|   167k|                  "function.\n"
 4722|   167k|                  "A range needs to have a character type (value type) "
 4723|   167k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   167k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   167k|                  "to be included.\n"
 4726|   167k|                  "See the scnlib documentation for more details.");
 4727|   167k|    static_assert(
 4728|   167k|        !std::is_same_v<T, custom_char_traits>,
 4729|   167k|        "\n"
 4730|   167k|        "Unsupported range type given as input to a scanning "
 4731|   167k|        "function.\n"
 4732|   167k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   167k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   167k|        "not supported.");
 4735|   167k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   167k|                  "\n"
 4737|   167k|                  "Unsupported range type given as input to a scanning "
 4738|   167k|                  "function.\n"
 4739|   167k|                  "file_marker_found cannot be used as an "
 4740|   167k|                  "source range type to scn::scan.\n"
 4741|   167k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   167k|                  "and do not provide an explicit source range, "
 4743|   167k|                  "or use scn::scan with a FILE* directly.");
 4744|   167k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   167k|                  "\n"
 4746|   167k|                  "Unsupported range type given as input to a scanning "
 4747|   167k|                  "function.\n"
 4748|   167k|                  "In order to be scannable, a range needs to satisfy "
 4749|   167k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   167k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   167k|                  "\n"
 4752|   167k|                  "Unsupported range type given as input to a scanning "
 4753|   167k|                  "function.\n"
 4754|   167k|                  "A range needs to model forward_range and have a valid "
 4755|   167k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   167k|                  "Examples of scannable ranges are std::string, "
 4757|   167k|                  "std::string_view, "
 4758|   167k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   167k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   167k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   167k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   167k|{
 4686|   167k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   167k|        return file_marker_found{};
 4688|   167k|    }
 4689|   167k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   167k|        if constexpr (ranges::range<Range>) {
 4691|   167k|            return insufficient_range{};
 4692|   167k|        }
 4693|   167k|        else {
 4694|   167k|            return invalid_input_range{};
 4695|   167k|        }
 4696|   167k|    }
 4697|   167k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   167k|        return invalid_char_type{};
 4699|   167k|    }
 4700|   167k|    else {
 4701|   167k|        return make_forward_scan_buffer(r);
 4702|   167k|    }
 4703|   167k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|   167k|{
 4520|   167k|    return basic_scan_forward_buffer_impl(range);
 4521|   167k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   167k|    {
 4407|   167k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|   167k|    {
 4378|   167k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|   167k|    {
 4147|   167k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|   167k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   324k|    {
 2720|   324k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   324k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   324k|    {
 2701|   324k|        return decay_copy(t.begin());
 2702|   324k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   481k|    {
 3326|   481k|        return m_iterator;
 3327|   481k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  2.08M|    {
 4411|  2.08M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 16.0k, False: 2.06M]
  ------------------
 4412|  16.0k|            return false;
 4413|  16.0k|        }
 4414|  2.06M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  2.06M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  2.06M|        }
 4417|  2.06M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 1.90M, False: 161k]
  ------------------
 4418|  1.90M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  1.90M|                                          this->m_current_view.begin(),
 4420|  1.90M|                                          this->m_current_view.end());
 4421|  1.90M|        }
 4422|  2.06M|        m_latest = *m_cursor;
 4423|  2.06M|        ++m_cursor;
 4424|  2.06M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  2.06M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  2.06M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  2.06M|        }
 4428|  2.06M|        return true;
 4429|  2.06M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  6.21M|    {
 2777|  6.21M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  6.21M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  6.21M|    {
 2759|  6.21M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  6.21M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  6.36M|    {
 3330|  6.36M|        return m_sentinel;
 3331|  6.36M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|   167k|    {
 4067|   167k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   167k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   167k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|  10.2k|    {
 1472|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  10.2k|    {
  443|  10.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   167k|    {
 1173|   167k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|   157k|{
 5919|   157k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|   157k|                      ranges::iterator_t<SourceRange>>) {
 5921|   157k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|   157k|    }
 5923|   157k|    else {
 5924|   157k|        auto it = ranges::begin(source);
 5925|   157k|        while (n > 0) {
 5926|   157k|            --n;
 5927|   157k|            ++it;
 5928|   157k|        }
 5929|   157k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|   157k|    }
 5931|   157k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   157k|    {
 2720|   157k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   157k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   157k|    {
 2701|   157k|        return decay_copy(t.begin());
 2702|   157k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|   157k|{
 5906|   157k|    return ranges::end(source);
 5907|   157k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   157k|    {
 2777|   157k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   157k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   157k|    {
 2759|   157k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   157k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|   157k|    {
 1426|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|   157k|    {
  433|   157k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7970|   135k|    {
 7971|   135k|        return m_str;
 7972|   135k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8815|   135k|{
 8816|   135k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 125k]
  |  |  ------------------
  ------------------
 8817|  9.48k|        return unexpected(result.error());
 8818|  9.48k|    }
 8819|   125k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   135k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   167k|    {
 1594|   167k|        return has_value();
 1595|   167k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   334k|    {
  481|   334k|        return m_has_value;
  482|   334k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|  10.2k|    {
 1600|  10.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  10.2k|        return this->get_unexpected().error();
 1602|  10.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  10.2k|    {
  464|  10.2k|        return m_unexpected;
  465|  10.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1471|  10.2k|    {
 1472|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  10.2k|    {
  622|  10.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  10.2k|    {
  685|  10.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  10.2k|                                  std::forward<Args>(args)...);
  687|  10.2k|        m_has_value = false;
  688|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  20.5k|    {
  714|  20.5k|        return reinterpret_cast<unexpected<E>*>(
  715|  20.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  20.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  20.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   167k|    {
 1173|   167k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|   125k|    {
 1649|   125k|        return value();
 1650|   125k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|   157k|    {
 1623|   157k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   157k|        return this->get_value();
 1625|   157k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   157k|    {
  447|   157k|        return m_value;
  448|   157k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5825|   157k|    {
 5826|   157k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|   157k|    {
 5677|   157k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1425|   157k|    {
 1426|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|   157k|    {
  612|   157k|        construct(std::forward<Args>(args)...);
  613|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|   157k|    {
  678|   157k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   157k|        m_has_value = true;
  680|   157k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|   157k|{
  388|   157k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   157k|        T(std::forward<Args>(args)...);
  390|   157k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5817|   157k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   471k|    {
  702|   471k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   471k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   471k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5821|   314k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   324k|    {
 3312|   324k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   135k|    {
 7967|   135k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|   167k|    {
 1594|   167k|        return has_value();
 1595|   167k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   492k|    {
  671|   492k|        return m_has_value;
  672|   492k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1668|   157k|    {
 1669|   157k|        return &value();
 1670|   157k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1622|   157k|    {
 1623|   157k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   157k|        return this->get_value();
 1625|   157k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   157k|    {
  637|   157k|        return *value_ptr();
  638|   157k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|   157k|    {
 5694|   157k|        return ranges::begin(m_range);
 5695|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   167k|    {
  627|   167k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 157k, False: 10.2k]
  ------------------
  628|   157k|            destroy_value();
  629|   157k|        }
  630|  10.2k|        else {
  631|  10.2k|            destroy_unexpected();
  632|  10.2k|        }
  633|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   157k|    {
  692|   157k|        scn::detail::destroy_at(value_ptr());
  693|   157k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  393|   157k|{
  394|   157k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   157k|        for (auto& elem : *p) {
  396|   157k|            scn::detail::destroy_at(&elem);
  397|   157k|        }
  398|   157k|    }
  399|   157k|    else {
  400|   157k|        p->~T();
  401|   157k|    }
  402|   157k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  10.2k|    {
  696|  10.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  10.2k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8929|  67.6k|{
 8930|  67.6k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  67.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  67.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.6k|    static_cast<    \
  |  |  929|  67.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.6k|    static_cast<    \
  |  |  929|  67.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  67.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  67.6k|{
 8668|  67.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  67.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  67.6k|{
 8603|  67.6k|#if !SCN_DISABLE_LOCALE
 8604|  67.6k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  67.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  67.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  67.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  67.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 62.9k]
  |  |  ------------------
  ------------------
 8611|  4.74k|        return unexpected(result.error());
 8612|  4.74k|    }
 8613|  62.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  67.6k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8968|  32.1k|{
 8969|  32.1k|    T value;
 8970|  32.1k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  32.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 790, False: 31.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    790|    }                                                  \
  |  |  |  | 3667|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  31.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.3k|    static_cast<    \
  |  |  929|  31.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.3k|    static_cast<    \
  |  |  929|  31.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  32.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|  32.1k|{
 8681|  32.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|  32.1k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  32.1k|{
 8627|  32.1k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  32.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 790, False: 31.3k]
  |  |  ------------------
  ------------------
 8631|    790|        return unexpected(result.error());
 8632|    790|    }
 8633|  31.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  32.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  31.3k|    {
 1659|  31.3k|        return std::move(value());
 1660|  31.3k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  42.6k|    {
 2720|  42.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  42.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  42.6k|    {
 2701|  42.6k|        return decay_copy(t.begin());
 2702|  42.6k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|   296M|{
 1945|   296M|    return SCN_FWD(t);
  ------------------
  |  |  930|   296M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   296M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  84.6M|    {
 2777|  84.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  84.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  84.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  84.6M|    {
 2759|  84.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  84.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  84.6M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  33.8M|{
 5392|  33.8M|    detail::check_scan_arg_types<Args...>();
 5393|  33.8M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  33.8M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5130|  42.3M|{
 5131|  42.3M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  42.3M|                  "Scan argument types must be default constructible");
 5133|  42.3M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  42.3M|                  "Scan argument types must be Destructible");
 5135|  42.3M|    static_assert(
 5136|  42.3M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  42.3M|        "Scan argument types must not be references");
 5138|  42.3M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  33.8M|    {
 5345|  33.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  33.8M|    {
 5356|  33.8M|        return {detail::make_arg<
 5357|  33.8M|            kind, Context,
 5358|  33.8M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  33.8M|                                 typename Context::char_type>::value>(args)...};
 5360|  33.8M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  33.8M|{
 5166|  33.8M|    return make_value<Context>(value).ref_value;
 5167|  33.8M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  42.3M|{
 5116|  42.3M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  42.3M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  42.3M|                                  needs_context_tag>) {
 5120|  42.3M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  42.3M|    }
 5122|  42.3M|    else {
 5123|  42.3M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  42.3M|            value, context_tag<Context>{}));
 5125|  42.3M|    }
 5126|  42.3M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  42.3M|    {                                                                        \
 4955|  42.3M|        return val;                                                          \
 4956|  42.3M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5084|  42.3M|{
 5085|  42.3M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  42.3M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  42.3M|    constexpr bool scannable_char =
 5089|  42.3M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  42.3M|    static_assert(scannable_char,
 5091|  42.3M|                  "Cannot scan an argument of an unsupported character "
 5092|  42.3M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  42.3M|    constexpr bool scannable_const =
 5095|  42.3M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  42.3M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  42.3M|    constexpr bool scannable_disabled =
 5099|  42.3M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  42.3M|    static_assert(scannable_disabled,
 5101|  42.3M|                  "Cannot scan an argument that has been disabled by "
 5102|  42.3M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  42.3M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  42.3M|    static_assert(
 5106|  42.3M|        scannable,
 5107|  42.3M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  42.3M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  42.3M|    return arg_value{arg};
 5111|  42.3M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4897|  42.3M|    {
 4898|  42.3M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  16.9M|{
 8587|  16.9M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  16.9M|    auto result = vscan_impl(buffer, format, args);
 8590|  16.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 8591|  18.9k|        return unexpected(result.error());
 8592|  18.9k|    }
 8593|  16.9M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  16.9M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|  42.3M|{
 4716|  42.3M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  42.3M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  42.3M|                  "\n"
 4720|  42.3M|                  "Unsupported range type given as input to a scanning "
 4721|  42.3M|                  "function.\n"
 4722|  42.3M|                  "A range needs to have a character type (value type) "
 4723|  42.3M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  42.3M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  42.3M|                  "to be included.\n"
 4726|  42.3M|                  "See the scnlib documentation for more details.");
 4727|  42.3M|    static_assert(
 4728|  42.3M|        !std::is_same_v<T, custom_char_traits>,
 4729|  42.3M|        "\n"
 4730|  42.3M|        "Unsupported range type given as input to a scanning "
 4731|  42.3M|        "function.\n"
 4732|  42.3M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  42.3M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  42.3M|        "not supported.");
 4735|  42.3M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  42.3M|                  "\n"
 4737|  42.3M|                  "Unsupported range type given as input to a scanning "
 4738|  42.3M|                  "function.\n"
 4739|  42.3M|                  "file_marker_found cannot be used as an "
 4740|  42.3M|                  "source range type to scn::scan.\n"
 4741|  42.3M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  42.3M|                  "and do not provide an explicit source range, "
 4743|  42.3M|                  "or use scn::scan with a FILE* directly.");
 4744|  42.3M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  42.3M|                  "\n"
 4746|  42.3M|                  "Unsupported range type given as input to a scanning "
 4747|  42.3M|                  "function.\n"
 4748|  42.3M|                  "In order to be scannable, a range needs to satisfy "
 4749|  42.3M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  42.3M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  42.3M|                  "\n"
 4752|  42.3M|                  "Unsupported range type given as input to a scanning "
 4753|  42.3M|                  "function.\n"
 4754|  42.3M|                  "A range needs to model forward_range and have a valid "
 4755|  42.3M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  42.3M|                  "Examples of scannable ranges are std::string, "
 4757|  42.3M|                  "std::string_view, "
 4758|  42.3M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  42.3M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  42.3M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  42.3M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  42.3M|{
 4655|  42.3M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  42.3M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  42.3M|    }
 4658|  42.3M|    else {
 4659|  42.3M|        return invalid_char_type{};
 4660|  42.3M|    }
 4661|  42.3M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  42.3M|    {
 2851|  42.3M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  42.3M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  42.3M|    {
 2832|  42.3M|        return t.data();
 2833|  42.3M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|  42.3M|    {
 3227|  42.3M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 4.56k, False: 42.3M]
  ------------------
 3228|  42.3M|                   ? nullptr
 3229|  42.3M|                   : std::addressof(*ranges::begin(derived()));
 3230|  42.3M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  42.3M|    {
 3001|  42.3M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  42.3M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  42.3M|    {
 2974|  42.3M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  42.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|  84.6M|    {
 3335|  84.6M|        return m_iterator == m_sentinel;
 3336|  84.6M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|  84.6M|    {
 3181|  84.6M|        return static_cast<const D&>(*this);
 3182|  84.6M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  84.6M|    {
 2720|  84.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  84.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  84.6M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  84.6M|    {
 2701|  84.6M|        return decay_copy(t.begin());
 2702|  84.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  1.93G|    {
 3326|  1.93G|        return m_iterator;
 3327|  1.93G|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  42.3M|    {
 2926|  42.3M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  42.3M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  42.3M|    {
 2892|  42.3M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  42.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  84.6M|    {
 3342|  84.6M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  84.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  41.0k|    {
 1472|  41.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  41.0k|    {
  443|  41.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  42.3M|    {
 1173|  42.3M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  42.2M|{
 5919|  42.2M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  42.2M|                      ranges::iterator_t<SourceRange>>) {
 5921|  42.2M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  42.2M|    }
 5923|  42.2M|    else {
 5924|  42.2M|        auto it = ranges::begin(source);
 5925|  42.2M|        while (n > 0) {
 5926|  42.2M|            --n;
 5927|  42.2M|            ++it;
 5928|  42.2M|        }
 5929|  42.2M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  42.2M|    }
 5931|  42.2M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  84.5M|    {
 2720|  84.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  84.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  84.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  84.5M|    {
 2701|  84.5M|        return decay_copy(t.begin());
 2702|  84.5M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  42.2M|{
 5906|  42.2M|    return ranges::end(source);
 5907|  42.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  42.2M|    {
 2777|  42.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  42.2M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  42.2M|    {
 2759|  42.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  42.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  1.75G|    {
 3330|  1.75G|        return m_sentinel;
 3331|  1.75G|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  42.2M|    {
 1426|  42.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  42.2M|    {
  433|  42.2M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7970|  16.9M|    {
 7971|  16.9M|        return m_str;
 7972|  16.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  33.8M|    {
 5422|  33.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  33.8M|    {
 5375|  33.8M|        return m_argptrs;
 5376|  33.8M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|  50.8M|    {
 5474|  50.8M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  16.9M|{
 8816|  16.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 8817|  18.9k|        return unexpected(result.error());
 8818|  18.9k|    }
 8819|  16.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.9M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|  42.3M|    {
 1594|  42.3M|        return has_value();
 1595|  42.3M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  84.6M|    {
  481|  84.6M|        return m_has_value;
  482|  84.6M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|  41.0k|    {
 1600|  41.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  41.0k|        return this->get_unexpected().error();
 1602|  41.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  41.0k|    {
  464|  41.0k|        return m_unexpected;
  465|  41.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  20.5k|    {
 1472|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  20.5k|    {
  622|  20.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  20.5k|    {
  685|  20.5k|        scn::detail::construct_at(unexpected_ptr(),
  686|  20.5k|                                  std::forward<Args>(args)...);
  687|  20.5k|        m_has_value = false;
  688|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  41.0k|    {
  714|  41.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  41.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  41.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  41.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  21.1M|    {
 1173|  21.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  33.8M|    {
 1649|  33.8M|        return value();
 1650|  33.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  42.2M|    {
 1623|  42.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  42.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  42.2M|        return this->get_value();
 1625|  42.2M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  42.2M|    {
  447|  42.2M|        return m_value;
  448|  42.2M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|  21.1M|    {
 5826|  21.1M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  42.2M|    {
 5677|  42.2M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|  42.2M|    {
 5612|  42.2M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|  21.1M|    {
 1426|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|  21.1M|    {
  612|  21.1M|        construct(std::forward<Args>(args)...);
  613|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|  21.1M|    {
  678|  21.1M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  21.1M|        m_has_value = true;
  680|  21.1M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|  21.1M|{
  388|  21.1M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  21.1M|        T(std::forward<Args>(args)...);
  390|  21.1M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|  21.1M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  63.4M|    {
  702|  63.4M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  63.4M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  63.4M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|  42.2M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  33.8M|    {
 5370|  33.8M|        return m_args;
 5371|  33.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  33.8M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|   814M|    {
 3312|   814M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|  50.8M|{
 7692|  50.8M|    return s;
 7693|  50.8M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|  50.8M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.9M|    {
 7967|  16.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1593|  21.1M|    {
 1594|  21.1M|        return has_value();
 1595|  21.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  63.4M|    {
  671|  63.4M|        return m_has_value;
  672|  63.4M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1668|  21.1M|    {
 1669|  21.1M|        return &value();
 1670|  21.1M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1622|  21.1M|    {
 1623|  21.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.1M|        return this->get_value();
 1625|  21.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  21.1M|    {
  637|  21.1M|        return *value_ptr();
  638|  21.1M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  42.2M|    {
 5694|  42.2M|        return ranges::begin(m_range);
 5695|  42.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  21.1M|    {
  627|  21.1M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 21.1M, False: 20.5k]
  ------------------
  628|  21.1M|            destroy_value();
  629|  21.1M|        }
  630|  20.5k|        else {
  631|  20.5k|            destroy_unexpected();
  632|  20.5k|        }
  633|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  21.1M|    {
  692|  21.1M|        scn::detail::destroy_at(value_ptr());
  693|  21.1M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|  21.1M|{
  394|  21.1M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  21.1M|        for (auto& elem : *p) {
  396|  21.1M|            scn::detail::destroy_at(&elem);
  397|  21.1M|        }
  398|  21.1M|    }
  399|  21.1M|    else {
  400|  21.1M|        p->~T();
  401|  21.1M|    }
  402|  21.1M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  20.5k|    {
  696|  20.5k|        scn::detail::destroy_at(unexpected_ptr());
  697|  20.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  16.9M|{
 8603|  16.9M|#if !SCN_DISABLE_LOCALE
 8604|  16.9M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  16.9M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  16.9M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  16.9M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  16.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 8611|  18.9k|        return unexpected(result.error());
 8612|  18.9k|    }
 8613|  16.9M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  16.9M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5150|  8.46M|{
 5151|  8.46M|    check_scan_arg_types<T>();
 5152|       |
 5153|  8.46M|    basic_scan_arg<Context> arg;
 5154|  8.46M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  8.46M|    arg.m_value = make_value<Context>(value);
 5156|  8.46M|    return arg;
 5157|  8.46M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|  63.4M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  8.46M|{
 8627|  8.46M|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  8.46M|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  8.46M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 8.45M]
  |  |  ------------------
  ------------------
 8631|  3.16k|        return unexpected(result.error());
 8632|  3.16k|    }
 8633|  8.45M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  8.46M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  8.45M|    {
 1659|  8.45M|        return std::move(value());
 1660|  8.45M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5391|  16.9M|{
 5392|  16.9M|    detail::check_scan_arg_types<Args...>();
 5393|  16.9M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.9M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5130|  21.1M|{
 5131|  21.1M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  21.1M|                  "Scan argument types must be default constructible");
 5133|  21.1M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  21.1M|                  "Scan argument types must be Destructible");
 5135|  21.1M|    static_assert(
 5136|  21.1M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  21.1M|        "Scan argument types must not be references");
 5138|  21.1M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5344|  16.9M|    {
 5345|  16.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  16.9M|    {
 5356|  16.9M|        return {detail::make_arg<
 5357|  16.9M|            kind, Context,
 5358|  16.9M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.9M|                                 typename Context::char_type>::value>(args)...};
 5360|  16.9M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5165|  16.9M|{
 5166|  16.9M|    return make_value<Context>(value).ref_value;
 5167|  16.9M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5115|  21.1M|{
 5116|  21.1M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  21.1M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  21.1M|                                  needs_context_tag>) {
 5120|  21.1M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  21.1M|    }
 5122|  21.1M|    else {
 5123|  21.1M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  21.1M|            value, context_tag<Context>{}));
 5125|  21.1M|    }
 5126|  21.1M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4954|  21.1M|    {                                                                        \
 4955|  21.1M|        return val;                                                          \
 4956|  21.1M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5084|  21.1M|{
 5085|  21.1M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  21.1M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  21.1M|    constexpr bool scannable_char =
 5089|  21.1M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  21.1M|    static_assert(scannable_char,
 5091|  21.1M|                  "Cannot scan an argument of an unsupported character "
 5092|  21.1M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  21.1M|    constexpr bool scannable_const =
 5095|  21.1M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  21.1M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  21.1M|    constexpr bool scannable_disabled =
 5099|  21.1M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  21.1M|    static_assert(scannable_disabled,
 5101|  21.1M|                  "Cannot scan an argument that has been disabled by "
 5102|  21.1M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  21.1M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  21.1M|    static_assert(
 5106|  21.1M|        scannable,
 5107|  21.1M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  21.1M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  21.1M|    return arg_value{arg};
 5111|  21.1M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4897|  21.1M|    {
 4898|  21.1M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7970|  16.9M|    {
 7971|  16.9M|        return m_str;
 7972|  16.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.9M|    {
 5422|  16.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5374|  16.9M|    {
 5375|  16.9M|        return m_argptrs;
 5376|  16.9M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  16.9M|{
 8816|  16.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 8817|  18.9k|        return unexpected(result.error());
 8818|  18.9k|    }
 8819|  16.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.9M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  20.5k|    {
 1472|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  20.5k|    {
  443|  20.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  21.1M|    {
 1173|  21.1M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|  21.1M|    {
 5826|  21.1M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|  21.1M|    {
 5612|  21.1M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|  21.1M|    {
 1426|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|  21.1M|    {
  433|  21.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5369|  16.9M|    {
 5370|  16.9M|        return m_args;
 5371|  16.9M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.9M|    {
 7967|  16.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1593|  21.1M|    {
 1594|  21.1M|        return has_value();
 1595|  21.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  42.3M|    {
  481|  42.3M|        return m_has_value;
  482|  42.3M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1668|  21.1M|    {
 1669|  21.1M|        return &value();
 1670|  21.1M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1622|  21.1M|    {
 1623|  21.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.1M|        return this->get_value();
 1625|  21.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.1M|    {
  447|  21.1M|        return m_value;
  448|  21.1M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5150|  4.23M|{
 5151|  4.23M|    check_scan_arg_types<T>();
 5152|       |
 5153|  4.23M|    basic_scan_arg<Context> arg;
 5154|  4.23M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  4.23M|    arg.m_value = make_value<Context>(value);
 5156|  4.23M|    return arg;
 5157|  4.23M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  20.5k|    {
 2720|  20.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  20.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  20.5k|    {
 2701|  20.5k|        return decay_copy(t.begin());
 2702|  20.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|   853M|{
 1945|   853M|    return SCN_FWD(t);
  ------------------
  |  |  930|   853M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   853M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  42.3M|    {
 2777|  42.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  42.3M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  42.3M|    {
 2759|  42.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  42.3M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  8.46M|{
 8587|  8.46M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  8.46M|    auto result = vscan_impl(buffer, format, args);
 8590|  8.46M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 8.45M]
  |  |  ------------------
  ------------------
 8591|  9.48k|        return unexpected(result.error());
 8592|  9.48k|    }
 8593|  8.45M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  8.46M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|  21.1M|{
 4716|  21.1M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  21.1M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  21.1M|                  "\n"
 4720|  21.1M|                  "Unsupported range type given as input to a scanning "
 4721|  21.1M|                  "function.\n"
 4722|  21.1M|                  "A range needs to have a character type (value type) "
 4723|  21.1M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  21.1M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  21.1M|                  "to be included.\n"
 4726|  21.1M|                  "See the scnlib documentation for more details.");
 4727|  21.1M|    static_assert(
 4728|  21.1M|        !std::is_same_v<T, custom_char_traits>,
 4729|  21.1M|        "\n"
 4730|  21.1M|        "Unsupported range type given as input to a scanning "
 4731|  21.1M|        "function.\n"
 4732|  21.1M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  21.1M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  21.1M|        "not supported.");
 4735|  21.1M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  21.1M|                  "\n"
 4737|  21.1M|                  "Unsupported range type given as input to a scanning "
 4738|  21.1M|                  "function.\n"
 4739|  21.1M|                  "file_marker_found cannot be used as an "
 4740|  21.1M|                  "source range type to scn::scan.\n"
 4741|  21.1M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  21.1M|                  "and do not provide an explicit source range, "
 4743|  21.1M|                  "or use scn::scan with a FILE* directly.");
 4744|  21.1M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  21.1M|                  "\n"
 4746|  21.1M|                  "Unsupported range type given as input to a scanning "
 4747|  21.1M|                  "function.\n"
 4748|  21.1M|                  "In order to be scannable, a range needs to satisfy "
 4749|  21.1M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  21.1M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  21.1M|                  "\n"
 4752|  21.1M|                  "Unsupported range type given as input to a scanning "
 4753|  21.1M|                  "function.\n"
 4754|  21.1M|                  "A range needs to model forward_range and have a valid "
 4755|  21.1M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  21.1M|                  "Examples of scannable ranges are std::string, "
 4757|  21.1M|                  "std::string_view, "
 4758|  21.1M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  21.1M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  21.1M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  21.1M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  21.1M|{
 4686|  21.1M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  21.1M|        return file_marker_found{};
 4688|  21.1M|    }
 4689|  21.1M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  21.1M|        if constexpr (ranges::range<Range>) {
 4691|  21.1M|            return insufficient_range{};
 4692|  21.1M|        }
 4693|  21.1M|        else {
 4694|  21.1M|            return invalid_input_range{};
 4695|  21.1M|        }
 4696|  21.1M|    }
 4697|  21.1M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  21.1M|        return invalid_char_type{};
 4699|  21.1M|    }
 4700|  21.1M|    else {
 4701|  21.1M|        return make_forward_scan_buffer(r);
 4702|  21.1M|    }
 4703|  21.1M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|  21.1M|{
 4520|  21.1M|    return basic_scan_forward_buffer_impl(range);
 4521|  21.1M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  21.1M|    {
 4407|  21.1M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|  21.1M|    {
 4378|  21.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|  21.1M|    {
 4147|  21.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|  21.1M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  42.3M|    {
 2720|  42.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  42.3M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  42.3M|    {
 2701|  42.3M|        return decay_copy(t.begin());
 2702|  42.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  63.4M|    {
 3326|  63.4M|        return m_iterator;
 3327|  63.4M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|   242M|    {
 4411|   242M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 29.7k, False: 242M]
  ------------------
 4412|  29.7k|            return false;
 4413|  29.7k|        }
 4414|   242M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|   242M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|   242M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   242M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|   242M|        }
 4417|   242M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 221M, False: 21.1M]
  ------------------
 4418|   221M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|   221M|                                          this->m_current_view.begin(),
 4420|   221M|                                          this->m_current_view.end());
 4421|   221M|        }
 4422|   242M|        m_latest = *m_cursor;
 4423|   242M|        ++m_cursor;
 4424|   242M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|   242M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|   242M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|   242M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   242M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|   242M|        }
 4428|   242M|        return true;
 4429|   242M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   726M|    {
 2777|   726M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   726M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   726M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   726M|    {
 2759|   726M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   726M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   726M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   747M|    {
 3330|   747M|        return m_sentinel;
 3331|   747M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|  21.1M|    {
 4067|  21.1M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  21.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  21.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|  20.5k|    {
 1472|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  20.5k|    {
  443|  20.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  21.1M|    {
 1173|  21.1M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  21.1M|{
 5919|  21.1M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  21.1M|                      ranges::iterator_t<SourceRange>>) {
 5921|  21.1M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  21.1M|    }
 5923|  21.1M|    else {
 5924|  21.1M|        auto it = ranges::begin(source);
 5925|  21.1M|        while (n > 0) {
 5926|  21.1M|            --n;
 5927|  21.1M|            ++it;
 5928|  21.1M|        }
 5929|  21.1M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  21.1M|    }
 5931|  21.1M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  21.1M|    {
 2720|  21.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  21.1M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  21.1M|    {
 2701|  21.1M|        return decay_copy(t.begin());
 2702|  21.1M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  21.1M|{
 5906|  21.1M|    return ranges::end(source);
 5907|  21.1M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  21.1M|    {
 2777|  21.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  21.1M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  21.1M|    {
 2759|  21.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  21.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  21.1M|    {
 1426|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  21.1M|    {
  433|  21.1M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7970|  16.9M|    {
 7971|  16.9M|        return m_str;
 7972|  16.9M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8815|  16.9M|{
 8816|  16.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 8817|  18.9k|        return unexpected(result.error());
 8818|  18.9k|    }
 8819|  16.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.9M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  21.1M|    {
 1594|  21.1M|        return has_value();
 1595|  21.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  42.3M|    {
  481|  42.3M|        return m_has_value;
  482|  42.3M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|  20.5k|    {
 1600|  20.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  20.5k|        return this->get_unexpected().error();
 1602|  20.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  20.5k|    {
  464|  20.5k|        return m_unexpected;
  465|  20.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1471|  20.5k|    {
 1472|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  20.5k|    {
  622|  20.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  20.5k|    {
  685|  20.5k|        scn::detail::construct_at(unexpected_ptr(),
  686|  20.5k|                                  std::forward<Args>(args)...);
  687|  20.5k|        m_has_value = false;
  688|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  41.0k|    {
  714|  41.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  41.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  41.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  41.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  21.1M|    {
 1173|  21.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  16.9M|    {
 1649|  16.9M|        return value();
 1650|  16.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  21.1M|    {
 1623|  21.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.1M|        return this->get_value();
 1625|  21.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  21.1M|    {
  447|  21.1M|        return m_value;
  448|  21.1M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5825|  21.1M|    {
 5826|  21.1M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  21.1M|    {
 5677|  21.1M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1425|  21.1M|    {
 1426|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|  21.1M|    {
  612|  21.1M|        construct(std::forward<Args>(args)...);
  613|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|  21.1M|    {
  678|  21.1M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  21.1M|        m_has_value = true;
  680|  21.1M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|  21.1M|{
  388|  21.1M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  21.1M|        T(std::forward<Args>(args)...);
  390|  21.1M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5817|  21.1M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  63.4M|    {
  702|  63.4M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  63.4M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  63.4M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5821|  42.2M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  42.3M|    {
 3312|  42.3M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.9M|    {
 7967|  16.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1593|  21.1M|    {
 1594|  21.1M|        return has_value();
 1595|  21.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  63.4M|    {
  671|  63.4M|        return m_has_value;
  672|  63.4M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1668|  21.1M|    {
 1669|  21.1M|        return &value();
 1670|  21.1M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1622|  21.1M|    {
 1623|  21.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.1M|        return this->get_value();
 1625|  21.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  21.1M|    {
  637|  21.1M|        return *value_ptr();
  638|  21.1M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  21.1M|    {
 5694|  21.1M|        return ranges::begin(m_range);
 5695|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  21.1M|    {
  627|  21.1M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 21.1M, False: 20.5k]
  ------------------
  628|  21.1M|            destroy_value();
  629|  21.1M|        }
  630|  20.5k|        else {
  631|  20.5k|            destroy_unexpected();
  632|  20.5k|        }
  633|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  21.1M|    {
  692|  21.1M|        scn::detail::destroy_at(value_ptr());
  693|  21.1M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  393|  21.1M|{
  394|  21.1M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  21.1M|        for (auto& elem : *p) {
  396|  21.1M|            scn::detail::destroy_at(&elem);
  397|  21.1M|        }
  398|  21.1M|    }
  399|  21.1M|    else {
  400|  21.1M|        p->~T();
  401|  21.1M|    }
  402|  21.1M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  20.5k|    {
  696|  20.5k|        scn::detail::destroy_at(unexpected_ptr());
  697|  20.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  8.46M|{
 8603|  8.46M|#if !SCN_DISABLE_LOCALE
 8604|  8.46M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  8.46M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  8.46M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  8.46M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  8.46M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 8.45M]
  |  |  ------------------
  ------------------
 8611|  9.48k|        return unexpected(result.error());
 8612|  9.48k|    }
 8613|  8.45M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  8.46M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  4.23M|{
 8627|  4.23M|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  4.23M|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  4.23M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 4.22M]
  |  |  ------------------
  ------------------
 8631|  1.58k|        return unexpected(result.error());
 8632|  1.58k|    }
 8633|  4.22M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  4.23M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  4.22M|    {
 1659|  4.22M|        return std::move(value());
 1660|  4.22M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|   120k|    {
 3564|   120k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   120k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   120k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|   196M|    {
 3570|   196M|        return m_code == good;
 3571|   196M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  42.6k|    {
 3581|  42.6k|        return m_code;
 3582|  42.6k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  6.88M|    {
 3326|  6.88M|        return m_iterator;
 3327|  6.88M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   904M|    {
 3326|   904M|        return m_iterator;
 3327|   904M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  25.6M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6277|  28.4k|    {
 6278|  28.4k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6278:13): [True: 0, False: 28.4k]
  |  Branch (6278:39): [True: 0, False: 0]
  ------------------
 6279|       |            // clang-format off
 6280|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6281|       |            // clang-format on
 6282|      0|        }
 6283|       |
 6284|  28.4k|        m_specs.width = width;
 6285|  28.4k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  25.6M|    {
 6299|  25.6M|        m_specs.type = type;
 6300|  25.6M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6315|  33.7k|    {
 6316|  33.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6317|  33.7k|        const auto end_value = static_cast<unsigned>(end);
 6318|  33.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6319|       |
 6320|  33.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  33.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.7k, False: 0]
  |  |  ------------------
  ------------------
 6321|       |            // No need to bit-twiddle with a mask, because with the
 6322|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6323|  33.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  33.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6324|   910k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6324:40): [True: 876k, False: 33.7k]
  ------------------
 6325|   876k|                m_specs.charset_literals[v / 8] |=
 6326|   876k|                    static_cast<unsigned char>(1ul << (v % 8));
 6327|   876k|            }
 6328|  33.7k|        }
 6329|      0|        else {
 6330|      0|            m_specs.charset_has_nonascii = true;
 6331|      0|        }
 6332|  33.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6360|  28.4k|    {
 6361|  28.4k|        SCN_UNLIKELY_ATTR
 6362|  28.4k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6363|  28.4k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  25.6M|    {
 6372|  25.6M|        return static_cast<bool>(m_error);
 6373|  25.6M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  42.6k|{
 3605|  42.6k|    return a.code() == b;
 3606|  42.6k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  42.6k|{
 3609|  42.6k|    return !(a == b);
 3610|  42.6k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|  14.2k|{
 7059|  14.2k|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 14.2k]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 14.2k]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 14.2k]
  ------------------
 7065|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 0, False: 14.2k]
  ------------------
 7066|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 14.2k]
  ------------------
 7067|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 14.2k]
  ------------------
 7068|      0|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 14.2k]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 14.2k]
  ------------------
 7072|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 0, False: 14.2k]
  ------------------
 7073|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 14.2k]
  ------------------
 7074|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 14.2k]
  ------------------
 7075|      0|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 14.2k]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 14.2k]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 14.2k]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 14.2k]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 14.2k]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 14.2k]
  ------------------
 7087|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 14.2k]
  ------------------
 7088|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 14.2k]
  ------------------
 7089|      0|            return arg_type_category::floating;
 7090|       |
 7091|  1.58k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 1.58k, False: 12.6k]
  ------------------
 7092|  4.74k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 3.16k, False: 11.0k]
  ------------------
 7093|  7.90k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 3.16k, False: 11.0k]
  ------------------
 7094|  14.2k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 6.32k, False: 7.90k]
  ------------------
 7095|  14.2k|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 14.2k]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 14.2k]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|  14.2k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|  14.2k|            SCN_CLANG_POP
 7106|  14.2k|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  14.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  14.2k|{
 3650|  14.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  14.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  9.70k|{
 3650|  9.70k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  9.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  9.70k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  4.88k|{
 3650|  4.88k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.88k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7200|  25.6M|{
 7201|  25.6M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7201:9): [True: 0, False: 25.6M]
  ------------------
 7202|  25.6M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7202:9): [True: 25.5M, False: 31.0k]
  ------------------
 7203|  25.6M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7203:9): [True: 16.8k, False: 14.2k]
  ------------------
 7204|  25.6M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7204:9): [True: 0, False: 14.2k]
  ------------------
 7205|  25.6M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7205:9): [True: 0, False: 14.2k]
  ------------------
 7206|  25.5M|        return;
 7207|  25.5M|    }
 7208|  14.2k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7208:9): [True: 14.2k, False: 0]
  ------------------
 7209|  14.2k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
 7210|       |            // clang-format off
 7211|  14.2k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7212|       |            // clang-format on
 7213|  14.2k|        }
 7214|      0|        return;
 7215|  14.2k|    }
 7216|      0|    SCN_UNLIKELY_ATTR
 7217|      0|    handler.on_error("Invalid type specifier for string");
 7218|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|  37.7M|    {
 4191|  37.7M|        return m_end == nullptr;
 4192|  37.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   154k|{
 3711|   154k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   154k|                                          const CharT*, const CharT*>) {
 3713|   154k|        return {first, last};
 3714|   154k|    }
 3715|   154k|    else {
 3716|   154k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   154k|    }
 3718|   154k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|   797k|    {
 4207|   797k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 797k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   797k|        return parent()->get_segment_starting_at(position());
 4213|   797k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|  22.0M|    {
 4201|  22.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  22.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  22.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  22.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|   797k|    {
 4097|   797k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   797k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 466k, False: 330k]
  |  |  ------------------
  ------------------
 4098|   797k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|   466k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|   466k|        }
 4101|   330k|        const auto start = pos - m_putback_buffer.size();
 4102|   330k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   330k|        return m_current_view.substr(start);
 4104|   330k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|   898k|    {
 4186|   898k|        return m_position;
 4187|   898k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|   502k|    {
 4119|   502k|        return m_is_contiguous;
 4120|   502k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|  4.49G|    {
 4191|  4.49G|        return m_end == nullptr;
 4192|  4.49G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  21.1M|{
 3711|  21.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  21.1M|                                          const CharT*, const CharT*>) {
 3713|  21.1M|        return {first, last};
 3714|  21.1M|    }
 3715|  21.1M|    else {
 3716|  21.1M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  21.1M|    }
 3718|  21.1M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|  63.4M|    {
 4207|  63.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 63.4M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  63.4M|        return parent()->get_segment_starting_at(position());
 4213|  63.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|  2.61G|    {
 4201|  2.61G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.61G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  2.61G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  2.61G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|  63.4M|    {
 4097|  63.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  63.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.2M, False: 21.1M]
  |  |  ------------------
  ------------------
 4098|  63.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  42.2M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  42.2M|        }
 4101|  21.1M|        const auto start = pos - m_putback_buffer.size();
 4102|  21.1M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  21.1M|        return m_current_view.substr(start);
 4104|  21.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|  76.1M|    {
 4186|  76.1M|        return m_position;
 4187|  76.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|  63.4M|    {
 4119|  63.4M|        return m_is_contiguous;
 4120|  63.4M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  1.87M|    {
 3176|  1.87M|        return static_cast<D&>(*this);
 3177|  1.87M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   940k|    {
 2974|   940k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   940k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   940k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   940k|    {
 3001|   940k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   940k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   940k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|   940k|    {
 3217|   940k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 748, False: 939k]
  ------------------
 3218|   940k|                   ? nullptr
 3219|   940k|                   : std::addressof(*ranges::begin(derived()));
 3220|   940k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|  84.5M|    {
 3176|  84.5M|        return static_cast<D&>(*this);
 3177|  84.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  42.2M|    {
 2974|  42.2M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  42.2M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  42.2M|    {
 3001|  42.2M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  42.2M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|  42.2M|    {
 3217|  42.2M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 42.2M]
  ------------------
 3218|  42.2M|                   ? nullptr
 3219|  42.2M|                   : std::addressof(*ranges::begin(derived()));
 3220|  42.2M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  67.9k|    {
 8165|  67.9k|        return ranges::subrange{begin(), end()};
 8166|  67.9k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|   202k|    {
 8149|   202k|        return m_current;
 8150|   202k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  67.9k|    {
 8157|  67.9k|        return ranges::default_sentinel;
 8158|  67.9k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.52M|    {
 3312|  2.52M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  63.9M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   160k|    {
 1833|   160k|        return detail::transform_error_impl(std::move(*this),
 1834|   160k|                                            std::forward<F>(f));
 1835|   160k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   160k|{
 1319|   160k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   160k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   160k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   160k|            return result(*std::forward<Exp>(exp));
 1323|   160k|        }
 1324|       |
 1325|   160k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   160k|        return result(unexpect, monostate{});
 1327|   160k|    }
 1328|   160k|    else {
 1329|   160k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   160k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   160k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 157k, False: 2.59k]
  |  |  ------------------
  ------------------
 1331|   160k|                   ? result(*std::forward<Exp>(exp))
 1332|   160k|                   : result(unexpect,
 1333|  2.59k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.59k|                                           std::forward<Exp>(exp).error()));
 1335|   160k|    }
 1336|   160k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   320k|    {
  481|   320k|        return m_has_value;
  482|   320k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|   157k|    {
 1659|   157k|        return std::move(value());
 1660|   157k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|   157k|    {
 1623|   157k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   157k|        return this->get_value();
 1625|   157k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   157k|    {
  447|   157k|        return m_value;
  448|   157k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   314k|    {
 1426|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   314k|    {
  433|   314k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   392k|    {
 1173|   392k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  20.9k|{
 1207|  20.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  20.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  2.59k|    {
 1610|  2.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  2.59k|        return std::move(this->get_unexpected().error());
 1612|  2.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  2.59k|    {
  464|  2.59k|        return m_unexpected;
  465|  2.59k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  41.9k|    {
  357|  41.9k|        return m_unexpected;
  358|  41.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.59k|    {
 1482|  2.59k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  13.3k|    {
  443|  13.3k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|  8.46M|    {
 8165|  8.46M|        return ranges::subrange{begin(), end()};
 8166|  8.46M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|  25.3M|    {
 8149|  25.3M|        return m_current;
 8150|  25.3M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|  8.46M|    {
 8157|  8.46M|        return ranges::default_sentinel;
 8158|  8.46M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|   343M|    {
 3312|   343M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  21.1M|    {
 1833|  21.1M|        return detail::transform_error_impl(std::move(*this),
 1834|  21.1M|                                            std::forward<F>(f));
 1835|  21.1M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  21.1M|{
 1319|  21.1M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  21.1M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  21.1M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  21.1M|            return result(*std::forward<Exp>(exp));
 1323|  21.1M|        }
 1324|       |
 1325|  21.1M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  21.1M|        return result(unexpect, monostate{});
 1327|  21.1M|    }
 1328|  21.1M|    else {
 1329|  21.1M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  21.1M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  21.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.1M, False: 4.43k]
  |  |  ------------------
  ------------------
 1331|  21.1M|                   ? result(*std::forward<Exp>(exp))
 1332|  21.1M|                   : result(unexpect,
 1333|  4.43k|                            trivial_invoke(std::forward<F>(f),
 1334|  4.43k|                                           std::forward<Exp>(exp).error()));
 1335|  21.1M|    }
 1336|  21.1M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  42.3M|    {
  481|  42.3M|        return m_has_value;
  482|  42.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  21.1M|    {
 1659|  21.1M|        return std::move(value());
 1660|  21.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  21.1M|    {
 1623|  21.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  21.1M|        return this->get_value();
 1625|  21.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  21.1M|    {
  447|  21.1M|        return m_value;
  448|  21.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  42.2M|    {
 1426|  42.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  42.2M|    {
  433|  42.2M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  50.7M|    {
 1173|  50.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  4.43k|    {
 1610|  4.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  4.43k|        return std::move(this->get_unexpected().error());
 1612|  4.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  4.43k|    {
  464|  4.43k|        return m_unexpected;
  465|  4.43k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  4.43k|    {
 1482|  4.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  26.3k|    {
  443|  26.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  28.8k|    {
  343|  28.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  28.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  21.6k|    {
 1472|  21.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  26.7k|    {
  443|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   775k|    {
 1173|   775k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   621k|    {
 1426|   621k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   621k|    {
  433|   621k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|   775k|    {
 1594|   775k|        return has_value();
 1595|   775k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  1.55M|    {
  481|  1.55M|        return m_has_value;
  482|  1.55M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|  26.7k|    {
 1600|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  26.7k|        return this->get_unexpected().error();
 1602|  26.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  26.7k|    {
  464|  26.7k|        return m_unexpected;
  465|  26.7k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   621k|    {
 1659|   621k|        return std::move(value());
 1660|   621k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   748k|    {
 1623|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   748k|        return this->get_value();
 1625|   748k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|   748k|    {
  447|   748k|        return m_value;
  448|   748k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  43.8k|    {
 1472|  43.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  52.7k|    {
  443|  52.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   101M|    {
 1173|   101M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  84.5M|    {
 1426|  84.5M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  84.5M|    {
  433|  84.5M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|   101M|    {
 1594|   101M|        return has_value();
 1595|   101M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|   203M|    {
  481|   203M|        return m_has_value;
  482|   203M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|  52.7k|    {
 1600|  52.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  52.7k|        return this->get_unexpected().error();
 1602|  52.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  52.7k|    {
  464|  52.7k|        return m_unexpected;
  465|  52.7k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  84.5M|    {
 1659|  84.5M|        return std::move(value());
 1660|  84.5M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   101M|    {
 1623|   101M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   101M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   101M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   101M|        return this->get_value();
 1625|   101M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   101M|    {
  447|   101M|        return m_value;
  448|   101M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   316k|    {
 1833|   316k|        return detail::transform_error_impl(std::move(*this),
 1834|   316k|                                            std::forward<F>(f));
 1835|   316k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   316k|{
 1319|   316k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   316k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   316k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   316k|            return result(*std::forward<Exp>(exp));
 1323|   316k|        }
 1324|       |
 1325|   316k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   316k|        return result(unexpect, monostate{});
 1327|   316k|    }
 1328|   316k|    else {
 1329|   316k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   316k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 311k, False: 5.07k]
  |  |  ------------------
  ------------------
 1331|   316k|                   ? result(*std::forward<Exp>(exp))
 1332|   316k|                   : result(unexpect,
 1333|  5.07k|                            trivial_invoke(std::forward<F>(f),
 1334|  5.07k|                                           std::forward<Exp>(exp).error()));
 1335|   316k|    }
 1336|   316k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   633k|    {
  481|   633k|        return m_has_value;
  482|   633k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|   311k|    {
 1659|   311k|        return std::move(value());
 1660|   311k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|   311k|    {
 1623|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   311k|        return this->get_value();
 1625|   311k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   311k|    {
  447|   311k|        return m_value;
  448|   311k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  5.07k|    {
 1610|  5.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  5.07k|        return std::move(this->get_unexpected().error());
 1612|  5.07k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  5.07k|    {
  464|  5.07k|        return m_unexpected;
  465|  5.07k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  5.07k|    {
 1482|  5.07k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   145M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.8k|    {
 1472|  10.8k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  3.74M|    {
 4235|  3.74M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  3.74M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 3.74M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  3.74M|        auto res = read_at_position();
 4244|  3.74M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  3.74M|        return parent()->get_character_at(m_position);
 4246|  3.74M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|  11.2M|    {
 4300|  11.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  11.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 11.2M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  11.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  11.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.15M, False: 2.08M]
  |  |  ------------------
  ------------------
 4307|  9.15M|            return true;
 4308|  9.15M|        }
 4309|       |
 4310|  4.14M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 2.08M, False: 2.06M]
  ------------------
 4311|  2.08M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 16.0k, False: 2.06M]
  ------------------
 4312|  16.0k|                return false;
 4313|  16.0k|            }
 4314|  2.08M|        }
 4315|  2.06M|        return true;
 4316|  2.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|  15.3M|    {
 4077|  15.3M|        return m_putback_buffer.size() + m_current_view.size();
 4078|  15.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  3.74M|    {
 4108|  3.74M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06M, False: 1.68M]
  |  |  ------------------
  ------------------
 4109|  3.74M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  2.06M|            return m_putback_buffer[pos];
 4111|  2.06M|        }
 4112|  1.68M|        const auto start = pos - m_putback_buffer.size();
 4113|  1.68M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  1.68M|        return m_current_view[start];
 4115|  1.68M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|  3.42M|    {
 4221|  3.42M|        ++m_position;
 4222|  3.42M|        (void)read_at_position();
 4223|  3.42M|        return *this;
 4224|  3.42M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  1.47M|    {
 4270|  1.47M|        return !(lhs == rhs);
 4271|  1.47M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  1.47M|    {
 4265|  1.47M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 1.47M, False: 0]
  |  Branch (4265:46): [True: 242k, False: 1.23M]
  ------------------
 4266|  1.47M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  1.99M|    {
 4276|  1.99M|        return x.is_at_end();
 4277|  1.99M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  4.06M|    {
 4320|  4.06M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 4.06M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  4.06M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 4.06M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  4.06M|        return !read_at_position();
 4327|  4.06M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|   157k|    {
 1426|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   157k|    {
  433|   157k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   160k|    {
 1173|   160k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.59k|    {
 1472|  2.59k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.59k|    {
  443|  2.59k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  20.9k|    {
  352|  20.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  20.9k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  20.9k|    {
  343|  20.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  20.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.05k|    {
 1472|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.05k|    {
  443|  1.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   129k|    {
 1173|   129k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   128k|    {
 1426|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   128k|    {
  433|   128k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   129k|    {
 1594|   129k|        return has_value();
 1595|   129k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   258k|    {
  481|   258k|        return m_has_value;
  482|   258k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.05k|    {
 1600|  1.05k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.05k|        return this->get_unexpected().error();
 1602|  1.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.05k|    {
  464|  1.05k|        return m_unexpected;
  465|  1.05k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   128k|    {
 1659|   128k|        return std::move(value());
 1660|   128k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   128k|    {
 1623|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   128k|        return this->get_value();
 1625|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   128k|    {
  447|   128k|        return m_value;
  448|   128k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  6.20M|    {
 3330|  6.20M|        return m_sentinel;
 3331|  6.20M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   166k|    {
 3326|   166k|        return m_iterator;
 3327|   166k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   166k|    {
 3330|   166k|        return m_sentinel;
 3331|   166k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|   392k|    {
 1594|   392k|        return has_value();
 1595|   392k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|   784k|    {
  481|   784k|        return m_has_value;
  482|   784k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|  13.3k|    {
 1600|  13.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  13.3k|        return this->get_unexpected().error();
 1602|  13.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  13.3k|    {
  464|  13.3k|        return m_unexpected;
  465|  13.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   314k|    {
 1659|   314k|        return std::move(value());
 1660|   314k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   378k|    {
 1623|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   378k|        return this->get_value();
 1625|   378k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   378k|    {
  447|   378k|        return m_value;
  448|   378k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   317k|{
  322|   317k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   317k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|   158k|    {
 3312|   158k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  2.06M|    {
 4287|  2.06M|        return !x.is_at_end();
 4288|  2.06M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  63.2k|    {
 1426|  63.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  63.2k|    {
  433|  63.2k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  5.07k|    {
 1472|  5.07k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  5.07k|    {
  443|  5.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   316k|    {
 1173|   316k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|   311k|    {
 1426|   311k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   311k|    {
  433|   311k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.02k|    {
 1472|  2.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  2.02k|    {
  443|  2.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   255k|    {
 1173|   255k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   253k|    {
 1426|   253k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   253k|    {
  433|   253k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|   255k|    {
 1594|   255k|        return has_value();
 1595|   255k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|   511k|    {
  481|   511k|        return m_has_value;
  482|   511k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  2.02k|    {
 1600|  2.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.02k|        return this->get_unexpected().error();
 1602|  2.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  2.02k|    {
  464|  2.02k|        return m_unexpected;
  465|  2.02k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   253k|    {
 1659|   253k|        return std::move(value());
 1660|   253k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   253k|    {
 1623|   253k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   253k|        return this->get_value();
 1625|   253k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|   253k|    {
  447|   253k|        return m_value;
  448|   253k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   940k|    {
 2851|   940k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   940k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   940k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   940k|    {
 2832|   940k|        return t.data();
 2833|   940k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|   125k|    {
 1426|   125k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   125k|    {
  433|   125k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  92.4k|    {
 1472|  92.4k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  92.4k|    {
  443|  92.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  63.9M|    {
 1173|  63.9M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  63.8M|    {
 1426|  63.8M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  63.8M|    {
  433|  63.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  64.0k|    {
 1649|  64.0k|        return value();
 1650|  64.0k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|   126k|    {
 1649|   126k|        return value();
 1650|   126k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1425|    842|    {
 1426|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|    842|    {
  433|    842|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1425|  1.68k|    {
 1426|  1.68k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.68k|    {
  433|  1.68k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  21.9k|    {
 1472|  21.9k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|   485M|    {
 4235|   485M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   485M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|   485M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 485M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|   485M|        auto res = read_at_position();
 4244|   485M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   485M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|   485M|        return parent()->get_character_at(m_position);
 4246|   485M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|  1.33G|    {
 4300|  1.33G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.33G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.33G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  1.33G|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 1.33G]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  1.33G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  1.33G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.09G, False: 242M]
  |  |  ------------------
  ------------------
 4307|  1.09G|            return true;
 4308|  1.09G|        }
 4309|       |
 4310|   484M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 242M, False: 242M]
  ------------------
 4311|   242M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 29.7k, False: 242M]
  ------------------
 4312|  29.7k|                return false;
 4313|  29.7k|            }
 4314|   242M|        }
 4315|   242M|        return true;
 4316|   242M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|  1.81G|    {
 4077|  1.81G|        return m_putback_buffer.size() + m_current_view.size();
 4078|  1.81G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|   485M|    {
 4108|   485M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   485M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264M, False: 221M]
  |  |  ------------------
  ------------------
 4109|   485M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|   264M|            return m_putback_buffer[pos];
 4111|   264M|        }
 4112|   221M|        const auto start = pos - m_putback_buffer.size();
 4113|   221M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   221M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|   221M|        return m_current_view[start];
 4115|   221M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|   322M|    {
 4221|   322M|        ++m_position;
 4222|   322M|        (void)read_at_position();
 4223|   322M|        return *this;
 4224|   322M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|  88.9M|    {
 4270|  88.9M|        return !(lhs == rhs);
 4271|  88.9M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|  88.9M|    {
 4265|  88.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 88.9M, False: 0]
  |  Branch (4265:46): [True: 8.46M, False: 80.4M]
  ------------------
 4266|  88.9M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|   276M|    {
 4276|   276M|        return x.is_at_end();
 4277|   276M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|   526M|    {
 4320|   526M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 526M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|   526M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 526M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|   526M|        return !read_at_position();
 4327|   526M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  1.20G|{
 3803|  1.20G|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  1.20G|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  1.20G|    }
 3806|  1.20G|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|  1.20G|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  1.20G|    }
 3809|  1.20G|    else {
 3810|       |        // utf-32
 3811|  1.20G|        static_assert(sizeof(U) == 4);
 3812|  1.20G|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.20G|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  1.20G|        return 1;
 3814|  1.20G|    }
 3815|  1.20G|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  21.1M|    {
 1426|  21.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  21.1M|    {
  433|  21.1M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  21.1M|    {
 1173|  21.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  4.43k|    {
 1472|  4.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  4.43k|    {
  443|  4.43k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  1.20G|{
 4009|  1.20G|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  1.20G|        return decode_utf8_code_point_exhaustive(input);
 4011|  1.20G|    }
 4012|  1.20G|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|  1.20G|        return decode_utf16_code_point_exhaustive(input);
 4014|  1.20G|    }
 4015|  1.20G|    else {
 4016|  1.20G|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.20G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  1.20G|        auto cp = static_cast<char32_t>(input.front());
 4018|  1.20G|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.20G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.14M, False: 1.20G]
  |  |  ------------------
  ------------------
 4019|  1.14M|            return invalid_code_point;
 4020|  1.14M|        }
 4021|  1.20G|        return cp;
 4022|  1.20G|    }
 4023|  1.20G|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.77k|    {
 1472|  1.77k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.77k|    {
  443|  1.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.9M|    {
 1173|  16.9M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  16.9M|    {
 1426|  16.9M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  16.9M|    {
  433|  16.9M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  16.9M|    {
 1594|  16.9M|        return has_value();
 1595|  16.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  33.8M|    {
  481|  33.8M|        return m_has_value;
  482|  33.8M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.77k|    {
 1600|  1.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.77k|        return this->get_unexpected().error();
 1602|  1.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.77k|    {
  464|  1.77k|        return m_unexpected;
  465|  1.77k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  16.9M|    {
 1659|  16.9M|        return std::move(value());
 1660|  16.9M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  16.9M|    {
 1623|  16.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.9M|        return this->get_value();
 1625|  16.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.9M|    {
  447|  16.9M|        return m_value;
  448|  16.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|   840M|    {
 3330|   840M|        return m_sentinel;
 3331|   840M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  21.1M|    {
 3326|  21.1M|        return m_iterator;
 3327|  21.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  21.1M|    {
 3330|  21.1M|        return m_sentinel;
 3331|  21.1M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  50.7M|    {
 1594|  50.7M|        return has_value();
 1595|  50.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|   101M|    {
  481|   101M|        return m_has_value;
  482|   101M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|  26.3k|    {
 1600|  26.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  26.3k|        return this->get_unexpected().error();
 1602|  26.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  26.3k|    {
  464|  26.3k|        return m_unexpected;
  465|  26.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  42.2M|    {
 1659|  42.2M|        return std::move(value());
 1660|  42.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  50.7M|    {
 1623|  50.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  50.7M|        return this->get_value();
 1625|  50.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  50.7M|    {
  447|  50.7M|        return m_value;
  448|  50.7M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   478M|{
 3695|   478M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|   478M|                                          decltype(first), decltype(last)> &&
 3697|   478M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|   478M|        return {first, last};
 3699|   478M|    }
 3700|   478M|    else {
 3701|   478M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   478M|                                       to_address(first), to_address(last)))};
 3703|   478M|    }
 3704|   478M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.43G|{
  322|  1.43G|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.43G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.43G|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  1.47G|{
  302|  1.47G|    return p;
  303|  1.47G|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  42.2M|{
  322|  42.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  42.2M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  21.1M|    {
 3312|  21.1M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|   250M|    {
 4287|   250M|        return !x.is_at_end();
 4288|   250M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  8.45M|    {
 1426|  8.45M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.45M|    {
  433|  8.45M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  8.87k|    {
 1472|  8.87k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  8.87k|    {
  443|  8.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  42.3M|    {
 1173|  42.3M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  42.2M|    {
 1426|  42.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  42.2M|    {
  433|  42.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  84.6M|    {
  481|  84.6M|        return m_has_value;
  482|  84.6M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  42.2M|    {
 1623|  42.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  42.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  42.2M|        return this->get_value();
 1625|  42.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  42.2M|    {
  447|  42.2M|        return m_value;
  448|  42.2M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  3.54k|    {
 1472|  3.54k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  3.54k|    {
  443|  3.54k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  33.8M|    {
 1173|  33.8M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  33.8M|    {
 1426|  33.8M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  33.8M|    {
  433|  33.8M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  42.3M|    {
 1833|  42.3M|        return detail::transform_error_impl(std::move(*this),
 1834|  42.3M|                                            std::forward<F>(f));
 1835|  42.3M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  42.3M|{
 1319|  42.3M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  42.3M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  42.3M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  42.3M|            return result(*std::forward<Exp>(exp));
 1323|  42.3M|        }
 1324|       |
 1325|  42.3M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  42.3M|        return result(unexpect, monostate{});
 1327|  42.3M|    }
 1328|  42.3M|    else {
 1329|  42.3M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  42.3M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  42.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.2M, False: 8.87k]
  |  |  ------------------
  ------------------
 1331|  42.3M|                   ? result(*std::forward<Exp>(exp))
 1332|  42.3M|                   : result(unexpect,
 1333|  8.87k|                            trivial_invoke(std::forward<F>(f),
 1334|  8.87k|                                           std::forward<Exp>(exp).error()));
 1335|  42.3M|    }
 1336|  42.3M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  42.2M|    {
 1659|  42.2M|        return std::move(value());
 1660|  42.2M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  8.87k|    {
 1610|  8.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  8.87k|        return std::move(this->get_unexpected().error());
 1612|  8.87k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  8.87k|    {
  464|  8.87k|        return m_unexpected;
  465|  8.87k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  8.87k|    {
 1482|  8.87k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|  33.8M|    {
 1594|  33.8M|        return has_value();
 1595|  33.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  67.6M|    {
  481|  67.6M|        return m_has_value;
  482|  67.6M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  3.54k|    {
 1600|  3.54k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  3.54k|        return this->get_unexpected().error();
 1602|  3.54k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  3.54k|    {
  464|  3.54k|        return m_unexpected;
  465|  3.54k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  33.8M|    {
 1659|  33.8M|        return std::move(value());
 1660|  33.8M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  33.8M|    {
 1623|  33.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  33.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  33.8M|        return this->get_value();
 1625|  33.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  33.8M|    {
  447|  33.8M|        return m_value;
  448|  33.8M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  42.2M|    {
 2851|  42.2M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  42.2M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  42.2M|    {
 2832|  42.2M|        return t.data();
 2833|  42.2M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  16.9M|    {
 1426|  16.9M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  16.9M|    {
  433|  16.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  8.45M|    {
 1649|  8.45M|        return value();
 1650|  8.45M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  16.9M|    {
 1649|  16.9M|        return value();
 1650|  16.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1425|     38|    {
 1426|     38|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|     38|    {
  433|     38|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1425|     76|    {
 1426|     76|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|     76|    {
  433|     76|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|   402k|    {
 5462|   402k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   402k|        return static_cast<std::size_t>(m_desc &
 5467|   402k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   402k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|   805k|    {
 5487|   805k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   805k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|   402k|    {
 5430|   402k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   402k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   402k|        const auto t = type(id);
 5442|   402k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   402k|        basic_scan_arg<Context> arg;
 5447|   402k|        arg.m_type = t;
 5448|   402k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 402k, False: 0]
  ------------------
 5449|   402k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   402k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   402k|        return arg;
 5455|   402k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|   402k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   402k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   402k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   402k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   402k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|   402k|    {
 5491|   402k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   402k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|   700k|    {
 5243|   700k|        return m_type != detail::arg_type::none_type;
 5244|   700k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   189k|{
 8413|   189k|#define SCN_VISIT(Type)                                         \
 8414|   189k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   189k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   189k|    }                                                           \
 8417|   189k|    else {                                                      \
 8418|   189k|        return vis(monostate_val);                              \
 8419|   189k|    }
 8420|       |
 8421|   189k|    monostate monostate_val{};
 8422|       |
 8423|   189k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 189k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 189k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 189k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 189k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 189k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 189k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 189k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 189k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 189k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 189k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 189k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 189k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 189k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 189k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 189k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 189k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 189k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 189k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|  94.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 94.9k, False: 94.9k]
  ------------------
 8461|  94.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  94.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  94.9k|    }                                                           \
  |  | 8417|  94.9k|    else {                                                      \
  |  | 8418|  94.9k|        return vis(monostate_val);                              \
  |  | 8419|  94.9k|    }
  ------------------
 8462|  94.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 94.9k, False: 94.9k]
  ------------------
 8463|  94.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  94.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  94.9k|    }                                                           \
  |  | 8417|  94.9k|    else {                                                      \
  |  | 8418|  94.9k|        return vis(monostate_val);                              \
  |  | 8419|  94.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 189k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 189k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 189k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 189k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 189k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 189k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 189k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   189k|            SCN_CLANG_POP
 8491|   189k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|   212k|    {
 5541|   212k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  71.1k|    {
 8134|  71.1k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|   212k|    {
 8052|   212k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|   167k|{
 4340|   167k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 167k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   167k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   167k|                            ranges::default_sentinel};
 4346|   167k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|   167k|    {
 4173|   167k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   167k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   167k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  96.3k|{
 8413|  96.3k|#define SCN_VISIT(Type)                                         \
 8414|  96.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  96.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  96.3k|    }                                                           \
 8417|  96.3k|    else {                                                      \
 8418|  96.3k|        return vis(monostate_val);                              \
 8419|  96.3k|    }
 8420|       |
 8421|  96.3k|    monostate monostate_val{};
 8422|       |
 8423|  96.3k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 96.3k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 96.3k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 96.3k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 96.3k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 96.3k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 96.3k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 96.3k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 96.3k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 96.3k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 96.3k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 96.3k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 96.3k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 96.3k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 96.3k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 96.3k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 96.3k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 96.3k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 96.3k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 96.3k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|  96.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 96.3k, False: 0]
  ------------------
 8463|  96.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  96.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  96.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  96.3k|    }                                                           \
  |  | 8417|  96.3k|    else {                                                      \
  |  | 8418|  96.3k|        return vis(monostate_val);                              \
  |  | 8419|  96.3k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 96.3k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 96.3k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 96.3k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 96.3k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 96.3k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 96.3k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 96.3k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  96.3k|            SCN_CLANG_POP
 8491|  96.3k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   140k|{
 7040|   140k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   140k|    handler.check_args_exhausted();
 7042|   140k|    return handler.get_error();
 7043|   140k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   140k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   140k|    auto begin = format.data();
 7009|   140k|    auto it = begin;
 7010|   140k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   266k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 140k, False: 125k]
  ------------------
 7013|   140k|        const auto ch = *it++;
 7014|   140k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 140k, False: 0]
  ------------------
 7015|   140k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   140k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   140k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 15.8k, False: 125k]
  ------------------
 7019|  15.8k|                return;
 7020|  15.8k|            }
 7021|   140k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   140k|    }
 7032|       |
 7033|   125k|    handler.on_literal_text(begin, end);
 7034|   125k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|   140k|{
 6938|   140k|    struct id_adapter {
 6939|   140k|        constexpr void operator()()
 6940|   140k|        {
 6941|   140k|            arg_id = handler.on_arg_id();
 6942|   140k|        }
 6943|   140k|        constexpr void operator()(std::size_t id)
 6944|   140k|        {
 6945|   140k|            arg_id = handler.on_arg_id(id);
 6946|   140k|        }
 6947|       |
 6948|   140k|        constexpr void on_error(const char* msg)
 6949|   140k|        {
 6950|   140k|            SCN_UNLIKELY_ATTR
 6951|   140k|            handler.on_error(msg);
 6952|   140k|        }
 6953|       |
 6954|   140k|        Handler& handler;
 6955|   140k|        std::size_t arg_id;
 6956|   140k|    };
 6957|       |
 6958|   140k|    ++begin;
 6959|   140k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   140k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 140k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   140k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 140k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   140k|    else {
 6971|   140k|        auto adapter = id_adapter{handler, 0};
 6972|   140k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   140k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   140k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 140k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   140k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 140k, False: 0]
  ------------------
 6983|   140k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   140k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   140k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.32k, False: 134k]
  |  |  |  Branch (859:45): [True: 0, False: 140k]
  |  |  |  Branch (859:45): [True: 6.32k, False: 134k]
  |  |  ------------------
  ------------------
 6989|  6.32k|                handler.on_error("Unknown format specifier");
 6990|  6.32k|                return begin;
 6991|  6.32k|            }
 6992|   140k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   140k|    }
 6999|   134k|    return begin + 1;
 7000|   140k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|   212k|    {
 8035|   212k|        return m_args.get(id);
 8036|   212k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|   202k|    {
 8045|   202k|        return m_locale;
 8046|   202k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|   212k|    {
 5562|   212k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   212k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   212k|        do_check_arg_id(id);
 5570|   212k|        return id;
 5571|   212k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|   212k|{
 6050|   212k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   212k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   212k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   140k|{
 6439|   140k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   140k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 140k, False: 0]
  |  Branch (6440:26): [True: 0, False: 140k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   140k|    handler();
 6445|   140k|    return begin;
 6446|   140k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6387|  9.48k|{
 6388|  9.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  9.48k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  9.48k|    unsigned long long value = 0;
 6392|  18.9k|    do {
 6393|  18.9k|        value *= 10;
 6394|  18.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  18.9k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 0, False: 18.9k]
  ------------------
 6396|  18.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|      0|            return -1;
 6398|      0|        }
 6399|  18.9k|        ++begin;
 6400|  18.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 18.9k, False: 0]
  |  Branch (6400:30): [True: 18.9k, False: 0]
  |  Branch (6400:47): [True: 9.48k, False: 9.48k]
  ------------------
 6401|  9.48k|    return static_cast<int>(value);
 6402|  9.48k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   140k|        {
 6941|   140k|            arg_id = handler.on_arg_id();
 6942|   140k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|   424k|    {
 5248|   424k|        return m_type;
 5249|   424k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|   202k|    {
 5557|   202k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   202k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|   414k|    {
 5546|   414k|        return m_format.data();
 5547|   414k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   140k|    {
 7118|   140k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   140k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|   140k|{
 6854|   140k|    auto do_presentation = [&]() -> const CharT* {
 6855|   140k|        if (*begin == CharT{'['}) {
 6856|   140k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   140k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   140k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   140k|                return begin;
 6862|   140k|            }
 6863|   140k|            handler.on_character_set_string(set);
 6864|   140k|            return begin;
 6865|   140k|        }
 6866|   140k|        if (*begin == CharT{'/'}) {
 6867|   140k|            return parse_presentation_regex(begin, end, handler);
 6868|   140k|        }
 6869|   140k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   140k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   140k|            handler.on_error("Invalid type specifier in format string");
 6872|   140k|            return begin;
 6873|   140k|        }
 6874|   140k|        handler.on_type(type);
 6875|   140k|        return begin;
 6876|   140k|    };
 6877|       |
 6878|   140k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 140k, False: 0]
  |  Branch (6878:28): [True: 129k, False: 11.1k]
  ------------------
 6879|   140k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 129k, False: 0]
  |  Branch (6879:36): [True: 126k, False: 3.16k]
  ------------------
 6880|   126k|        return do_presentation();
 6881|   126k|    }
 6882|       |
 6883|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  14.3k|    begin = parse_align(begin, end, handler);
 6889|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  14.3k|    begin = parse_width(begin, end, handler);
 6895|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  14.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 14.3k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  14.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 3.16k, False: 11.1k]
  ------------------
 6914|  3.16k|        handler.on_localized();
 6915|  3.16k|        ++begin;
 6916|  3.16k|    }
 6917|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  14.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 14.3k, False: 0]
  |  Branch (6922:25): [True: 11.1k, False: 3.16k]
  ------------------
 6923|  11.1k|        do_presentation();
 6924|  11.1k|    }
 6925|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  14.3k|    return begin;
 6931|  14.3k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|   195k|{
 6503|   195k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 190k, False: 4.74k]
  |  Branch (6503:33): [True: 190k, False: 0]
  ------------------
 6504|   195k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 4.74k, False: 0]
  |  Branch (6504:33): [True: 4.74k, False: 0]
  ------------------
 6505|   195k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   137k|    auto do_presentation = [&]() -> const CharT* {
 6855|   137k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 4.84k, False: 132k]
  ------------------
 6856|  4.84k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  4.84k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|  4.84k|            handler.on_character_set_string(set);
 6864|  4.84k|            return begin;
 6865|  4.84k|        }
 6866|   132k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 132k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   132k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   132k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 129k]
  |  |  ------------------
  ------------------
 6871|  3.16k|            handler.on_error("Invalid type specifier in format string");
 6872|  3.16k|            return begin;
 6873|  3.16k|        }
 6874|   129k|        handler.on_type(type);
 6875|   129k|        return begin;
 6876|   132k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|  4.84k|{
 6693|  4.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  4.84k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  4.84k|    auto start = begin;
 6697|  4.84k|    ++begin;
 6698|       |
 6699|  4.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  4.84k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 0, False: 4.84k]
  ------------------
 6706|      0|        handler.on_charset_inverted();
 6707|      0|        ++begin;
 6708|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 0, False: 0]
  ------------------
 6715|      0|            handler.on_charset_single(char32_t{']'});
 6716|      0|            ++begin;
 6717|      0|        }
 6718|      0|    }
 6719|  4.84k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 4.84k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|  14.5k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 14.5k, False: 0]
  ------------------
 6724|  14.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|  14.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 4.84k, False: 9.68k]
  ------------------
 6729|  4.84k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  4.84k|        }
 6731|       |
 6732|  9.68k|        parse_presentation_set_literal(begin, end, handler);
 6733|  9.68k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  4.84k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6656|  9.68k|{
 6657|  9.68k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  9.68k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  9.68k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|  9.68k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 9.68k, False: 0]
  |  Branch (6664:25): [True: 9.68k, False: 0]
  |  Branch (6664:49): [True: 9.68k, False: 0]
  ------------------
 6665|  9.68k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 9.68k, False: 0]
  ------------------
 6666|  9.68k|        ++begin;
 6667|       |
 6668|  9.68k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  9.68k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  9.68k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  9.68k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  9.68k|        return;
 6682|  9.68k|    }
 6683|       |
 6684|      0|    handler.on_charset_single(cp_first);
 6685|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6632|  19.3k|{
 6633|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  19.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  19.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  19.3k|    const auto cp =
 6642|  19.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  19.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|  19.3k|    begin += len;
 6649|  19.3k|    return cp;
 6650|  19.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|  7.26k|    {
 6342|  7.26k|        m_specs.charset_string_data = fmt.data();
 6343|  7.26k|        m_specs.charset_string_size = fmt.size();
 6344|  7.26k|        on_type(presentation_type::string_set);
 6345|  7.26k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|   200k|{
 6451|   200k|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 200k]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 200k]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 200k]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 200k]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 200k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 200k]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 200k]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 200k]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 200k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 200k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|      0|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 0, False: 200k]
  ------------------
 6470|      0|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 200k]
  ------------------
 6471|      0|            return presentation_type::float_hex;
 6472|      0|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 0, False: 200k]
  ------------------
 6473|      0|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 200k]
  ------------------
 6474|      0|            return presentation_type::float_scientific;
 6475|      0|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 0, False: 200k]
  ------------------
 6476|      0|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 200k]
  ------------------
 6477|      0|            return presentation_type::float_fixed;
 6478|      0|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 0, False: 200k]
  ------------------
 6479|      0|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 200k]
  ------------------
 6480|      0|            return presentation_type::float_general;
 6481|   190k|        case 's':
  ------------------
  |  Branch (6481:9): [True: 190k, False: 9.48k]
  ------------------
 6482|   190k|            return presentation_type::string;
 6483|  4.74k|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 4.74k, False: 195k]
  ------------------
 6484|  4.74k|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 200k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 200k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 200k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 200k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|  4.74k|        default:
  ------------------
  |  Branch (6495:9): [True: 4.74k, False: 195k]
  ------------------
 6496|  4.74k|            return presentation_type::none;
 6497|   200k|    }
 6498|   200k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|  14.3k|{
 6528|  14.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  14.3k|    auto check_align = [](wchar_t ch) {
 6531|  14.3k|        switch (ch) {
 6532|  14.3k|            case L'<':
 6533|  14.3k|                return align_type::left;
 6534|  14.3k|            case L'>':
 6535|  14.3k|                return align_type::right;
 6536|  14.3k|            case L'^':
 6537|  14.3k|                return align_type::center;
 6538|  14.3k|            default:
 6539|  14.3k|                return align_type::none;
 6540|  14.3k|        }
 6541|  14.3k|    };
 6542|       |
 6543|  14.3k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  14.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  |  Branch (859:45): [True: 0, False: 14.3k]
  |  |  |  Branch (859:45): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6545|  14.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  14.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  14.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  14.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  14.3k|    const auto begin_before_fill = begin;
 6555|  14.3k|    begin += potential_fill_len;
 6556|       |
 6557|  14.3k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 14.3k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  14.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  14.3k|    const auto begin_after_fill = begin;
 6563|  14.3k|    ++begin;
 6564|       |
 6565|  14.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 14.3k, False: 0]
  ------------------
 6566|  14.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  14.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 4.84k, False: 9.48k]
  ------------------
 6571|  4.84k|            return begin_before_fill;
 6572|  4.84k|        }
 6573|  14.3k|    }
 6574|       |
 6575|  9.48k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 9.48k, False: 0]
  ------------------
 6576|  9.48k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 9.48k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  9.48k|        return begin_before_fill;
 6581|  9.48k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  9.48k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  21.4k|{
 6510|  21.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  21.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  21.4k|        return 1;
 6513|  21.4k|    }
 6514|  21.4k|    else {
 6515|  21.4k|        const auto lengths =
 6516|  21.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  21.4k|            "\3\4";
 6518|  21.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  21.4k|        return len;
 6520|  21.4k|    }
 6521|  21.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  28.6k|    auto check_align = [](wchar_t ch) {
 6531|  28.6k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 28.6k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 28.6k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 28.6k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  28.6k|            default:
  ------------------
  |  Branch (6538:13): [True: 28.6k, False: 0]
  ------------------
 6539|  28.6k|                return align_type::none;
 6540|  28.6k|        }
 6541|  28.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|  14.3k|{
 6593|  14.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  14.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 14.3k, False: 0]
  |  Branch (6595:33): [True: 6.32k, False: 8.00k]
  ------------------
 6596|  6.32k|        int width = parse_simple_int(begin, end);
 6597|  6.32k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.32k, False: 0]
  |  |  ------------------
  ------------------
 6598|  6.32k|            handler.on_width(width);
 6599|  6.32k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  6.32k|    }
 6605|  14.3k|    return begin;
 6606|  14.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|  3.16k|    {
 7123|  3.16k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  3.16k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 3.16k, False: 0]
  ------------------
 7125|  3.16k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 3.16k, False: 0]
  ------------------
 7126|  3.16k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 3.16k, False: 0]
  ------------------
 7127|  3.16k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 3.16k, False: 0]
  ------------------
 7128|  3.16k|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|  3.16k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|  3.16k|        }
 7133|       |
 7134|      0|        Handler::on_localized();
 7135|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   134k|{
 8413|   134k|#define SCN_VISIT(Type)                                         \
 8414|   134k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   134k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   134k|    }                                                           \
 8417|   134k|    else {                                                      \
 8418|   134k|        return vis(monostate_val);                              \
 8419|   134k|    }
 8420|       |
 8421|   134k|    monostate monostate_val{};
 8422|       |
 8423|   134k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 134k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 134k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 134k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 134k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 134k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 134k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 134k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 134k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 134k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 134k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 134k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 134k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 134k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 134k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 134k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 134k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 134k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 134k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|  67.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 67.3k, False: 67.3k]
  ------------------
 8461|  67.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|  67.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  67.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  67.3k|    }                                                           \
  |  | 8417|  67.3k|    else {                                                      \
  |  | 8418|  67.3k|        return vis(monostate_val);                              \
  |  | 8419|  67.3k|    }
  ------------------
 8462|  67.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 67.3k, False: 67.3k]
  ------------------
 8463|  67.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  67.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  67.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  67.3k|    }                                                           \
  |  | 8417|  67.3k|    else {                                                      \
  |  | 8418|  67.3k|        return vis(monostate_val);                              \
  |  | 8419|  67.3k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 134k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 134k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 134k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 134k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 134k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 134k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 134k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   134k|            SCN_CLANG_POP
 8491|   134k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  71.1k|{
 7040|  71.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  71.1k|    handler.check_args_exhausted();
 7042|  71.1k|    return handler.get_error();
 7043|  71.1k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  71.1k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  71.1k|    auto begin = format.data();
 7009|  71.1k|    auto it = begin;
 7010|  71.1k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   134k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 71.1k, False: 63.2k]
  ------------------
 7013|  71.1k|        const auto ch = *it++;
 7014|  71.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 71.1k, False: 0]
  ------------------
 7015|  71.1k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  71.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  71.1k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 7.90k, False: 63.2k]
  ------------------
 7019|  7.90k|                return;
 7020|  7.90k|            }
 7021|  71.1k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  71.1k|    }
 7032|       |
 7033|  63.2k|    handler.on_literal_text(begin, end);
 7034|  63.2k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  63.2k|    {
 8171|  63.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  63.2k|    static_cast<    \
  |  |  929|  63.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  63.2k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  71.1k|{
 6938|  71.1k|    struct id_adapter {
 6939|  71.1k|        constexpr void operator()()
 6940|  71.1k|        {
 6941|  71.1k|            arg_id = handler.on_arg_id();
 6942|  71.1k|        }
 6943|  71.1k|        constexpr void operator()(std::size_t id)
 6944|  71.1k|        {
 6945|  71.1k|            arg_id = handler.on_arg_id(id);
 6946|  71.1k|        }
 6947|       |
 6948|  71.1k|        constexpr void on_error(const char* msg)
 6949|  71.1k|        {
 6950|  71.1k|            SCN_UNLIKELY_ATTR
 6951|  71.1k|            handler.on_error(msg);
 6952|  71.1k|        }
 6953|       |
 6954|  71.1k|        Handler& handler;
 6955|  71.1k|        std::size_t arg_id;
 6956|  71.1k|    };
 6957|       |
 6958|  71.1k|    ++begin;
 6959|  71.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.1k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  71.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 71.1k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  71.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 71.1k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  71.1k|    else {
 6971|  71.1k|        auto adapter = id_adapter{handler, 0};
 6972|  71.1k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  71.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.1k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  71.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 71.1k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  71.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 71.1k, False: 0]
  ------------------
 6983|  71.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.1k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  71.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  71.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 67.9k]
  |  |  |  Branch (859:45): [True: 0, False: 71.1k]
  |  |  |  Branch (859:45): [True: 3.16k, False: 67.9k]
  |  |  ------------------
  ------------------
 6989|  3.16k|                handler.on_error("Unknown format specifier");
 6990|  3.16k|                return begin;
 6991|  3.16k|            }
 6992|  71.1k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  71.1k|    }
 6999|  67.9k|    return begin + 1;
 7000|  71.1k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  71.1k|{
 6439|  71.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  71.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 71.1k, False: 0]
  |  Branch (6440:26): [True: 0, False: 71.1k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  71.1k|    handler();
 6445|  71.1k|    return begin;
 6446|  71.1k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  71.1k|        {
 6941|  71.1k|            arg_id = handler.on_arg_id();
 6942|  71.1k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  71.1k|    {
 7118|  71.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  71.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  71.1k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  71.1k|{
 6854|  71.1k|    auto do_presentation = [&]() -> const CharT* {
 6855|  71.1k|        if (*begin == CharT{'['}) {
 6856|  71.1k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  71.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  71.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  71.1k|                return begin;
 6862|  71.1k|            }
 6863|  71.1k|            handler.on_character_set_string(set);
 6864|  71.1k|            return begin;
 6865|  71.1k|        }
 6866|  71.1k|        if (*begin == CharT{'/'}) {
 6867|  71.1k|            return parse_presentation_regex(begin, end, handler);
 6868|  71.1k|        }
 6869|  71.1k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  71.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  71.1k|            handler.on_error("Invalid type specifier in format string");
 6872|  71.1k|            return begin;
 6873|  71.1k|        }
 6874|  71.1k|        handler.on_type(type);
 6875|  71.1k|        return begin;
 6876|  71.1k|    };
 6877|       |
 6878|  71.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 71.1k, False: 0]
  |  Branch (6878:28): [True: 65.5k, False: 5.58k]
  ------------------
 6879|  71.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 65.5k, False: 0]
  |  Branch (6879:36): [True: 63.9k, False: 1.58k]
  ------------------
 6880|  63.9k|        return do_presentation();
 6881|  63.9k|    }
 6882|       |
 6883|  7.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  7.16k|    begin = parse_align(begin, end, handler);
 6889|  7.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  7.16k|    begin = parse_width(begin, end, handler);
 6895|  7.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  7.16k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 7.16k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  7.16k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 1.58k, False: 5.58k]
  ------------------
 6914|  1.58k|        handler.on_localized();
 6915|  1.58k|        ++begin;
 6916|  1.58k|    }
 6917|  7.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  7.16k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 7.16k, False: 0]
  |  Branch (6922:25): [True: 5.58k, False: 1.58k]
  ------------------
 6923|  5.58k|        do_presentation();
 6924|  5.58k|    }
 6925|  7.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  7.16k|    return begin;
 6931|  7.16k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  69.5k|    auto do_presentation = [&]() -> const CharT* {
 6855|  69.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 2.42k, False: 67.1k]
  ------------------
 6856|  2.42k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  2.42k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|  2.42k|            handler.on_character_set_string(set);
 6864|  2.42k|            return begin;
 6865|  2.42k|        }
 6866|  67.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 67.1k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  67.1k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  67.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 65.5k]
  |  |  ------------------
  ------------------
 6871|  1.58k|            handler.on_error("Invalid type specifier in format string");
 6872|  1.58k|            return begin;
 6873|  1.58k|        }
 6874|  65.5k|        handler.on_type(type);
 6875|  65.5k|        return begin;
 6876|  67.1k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6692|  2.42k|{
 6693|  2.42k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  2.42k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  2.42k|    auto start = begin;
 6697|  2.42k|    ++begin;
 6698|       |
 6699|  2.42k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  2.42k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 0, False: 2.42k]
  ------------------
 6706|      0|        handler.on_charset_inverted();
 6707|      0|        ++begin;
 6708|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 0, False: 0]
  ------------------
 6715|      0|            handler.on_charset_single(char32_t{']'});
 6716|      0|            ++begin;
 6717|      0|        }
 6718|      0|    }
 6719|  2.42k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 2.42k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|  7.26k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 7.26k, False: 0]
  ------------------
 6724|  7.26k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|  7.26k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 2.42k, False: 4.84k]
  ------------------
 6729|  2.42k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  2.42k|        }
 6731|       |
 6732|  4.84k|        parse_presentation_set_literal(begin, end, handler);
 6733|  4.84k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  2.42k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6656|  4.84k|{
 6657|  4.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  4.84k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  4.84k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|  4.84k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 4.84k, False: 0]
  |  Branch (6664:25): [True: 4.84k, False: 0]
  |  Branch (6664:49): [True: 4.84k, False: 0]
  ------------------
 6665|  4.84k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 4.84k, False: 0]
  ------------------
 6666|  4.84k|        ++begin;
 6667|       |
 6668|  4.84k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  4.84k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  4.84k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  4.84k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  4.84k|        return;
 6682|  4.84k|    }
 6683|       |
 6684|      0|    handler.on_charset_single(cp_first);
 6685|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6632|  9.68k|{
 6633|  9.68k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  9.68k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  9.68k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.68k]
  |  |  |  Branch (859:45): [True: 0, False: 9.68k]
  |  |  |  Branch (859:45): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  9.68k|    const auto cp =
 6642|  9.68k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  9.68k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|  9.68k|    begin += len;
 6649|  9.68k|    return cp;
 6650|  9.68k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|  7.16k|{
 6528|  7.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  7.16k|    auto check_align = [](wchar_t ch) {
 6531|  7.16k|        switch (ch) {
 6532|  7.16k|            case L'<':
 6533|  7.16k|                return align_type::left;
 6534|  7.16k|            case L'>':
 6535|  7.16k|                return align_type::right;
 6536|  7.16k|            case L'^':
 6537|  7.16k|                return align_type::center;
 6538|  7.16k|            default:
 6539|  7.16k|                return align_type::none;
 6540|  7.16k|        }
 6541|  7.16k|    };
 6542|       |
 6543|  7.16k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  7.16k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  |  Branch (859:45): [True: 0, False: 7.16k]
  |  |  |  Branch (859:45): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6545|  7.16k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  7.16k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  7.16k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  7.16k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  7.16k|    const auto begin_before_fill = begin;
 6555|  7.16k|    begin += potential_fill_len;
 6556|       |
 6557|  7.16k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 7.16k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  7.16k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  7.16k|    const auto begin_after_fill = begin;
 6563|  7.16k|    ++begin;
 6564|       |
 6565|  7.16k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 7.16k, False: 0]
  ------------------
 6566|  7.16k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.16k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  7.16k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 2.42k, False: 4.74k]
  ------------------
 6571|  2.42k|            return begin_before_fill;
 6572|  2.42k|        }
 6573|  7.16k|    }
 6574|       |
 6575|  4.74k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 4.74k, False: 0]
  ------------------
 6576|  4.74k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 4.74k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  4.74k|        return begin_before_fill;
 6581|  4.74k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  4.74k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  14.3k|    auto check_align = [](wchar_t ch) {
 6531|  14.3k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 14.3k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 14.3k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 14.3k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  14.3k|            default:
  ------------------
  |  Branch (6538:13): [True: 14.3k, False: 0]
  ------------------
 6539|  14.3k|                return align_type::none;
 6540|  14.3k|        }
 6541|  14.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|  7.16k|{
 6593|  7.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  7.16k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 7.16k, False: 0]
  |  Branch (6595:33): [True: 3.16k, False: 4.00k]
  ------------------
 6596|  3.16k|        int width = parse_simple_int(begin, end);
 6597|  3.16k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.16k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.16k, False: 0]
  |  |  ------------------
  ------------------
 6598|  3.16k|            handler.on_width(width);
 6599|  3.16k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  3.16k|    }
 6605|  7.16k|    return begin;
 6606|  7.16k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|  1.58k|    {
 7123|  1.58k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  1.58k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 1.58k, False: 0]
  ------------------
 7125|  1.58k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 1.58k, False: 0]
  ------------------
 7126|  1.58k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 1.58k, False: 0]
  ------------------
 7127|  1.58k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 1.58k, False: 0]
  ------------------
 7128|  1.58k|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|  1.58k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|  1.58k|        }
 7133|       |
 7134|      0|        Handler::on_localized();
 7135|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  67.9k|{
 8413|  67.9k|#define SCN_VISIT(Type)                                         \
 8414|  67.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  67.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  67.9k|    }                                                           \
 8417|  67.9k|    else {                                                      \
 8418|  67.9k|        return vis(monostate_val);                              \
 8419|  67.9k|    }
 8420|       |
 8421|  67.9k|    monostate monostate_val{};
 8422|       |
 8423|  67.9k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 67.9k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 67.9k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 67.9k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 67.9k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 67.9k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 67.9k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 67.9k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 67.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 67.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 67.9k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 67.9k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 67.9k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 67.9k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 67.9k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 67.9k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 67.9k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 67.9k]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 67.9k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 67.9k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|  67.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 67.9k, False: 0]
  ------------------
 8463|  67.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  67.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  67.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  67.9k|    }                                                           \
  |  | 8417|  67.9k|    else {                                                      \
  |  | 8418|  67.9k|        return vis(monostate_val);                              \
  |  | 8419|  67.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 67.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 67.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 67.9k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 67.9k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 67.9k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 67.9k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 67.9k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  67.9k|            SCN_CLANG_POP
 8491|  67.9k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|  10.2k|    {
 4072|  10.2k|        sync(0);
 4073|  10.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|  50.8M|    {
 5462|  50.8M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  50.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.8M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  50.8M|        return static_cast<std::size_t>(m_desc &
 5467|  50.8M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  50.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|   101M|    {
 5487|   101M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   101M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|  50.8M|    {
 5430|  50.8M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  50.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.8M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  50.8M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  50.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.8M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  50.8M|        const auto t = type(id);
 5442|  50.8M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  50.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.8M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  50.8M|        basic_scan_arg<Context> arg;
 5447|  50.8M|        arg.m_type = t;
 5448|  50.8M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 50.8M, False: 0]
  ------------------
 5449|  50.8M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  50.8M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  50.8M|        return arg;
 5455|  50.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|  50.8M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  50.8M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  50.8M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  50.8M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  50.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|  50.8M|    {
 5491|  50.8M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  50.8M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  88.8M|    {
 5243|  88.8M|        return m_type != detail::arg_type::none_type;
 5244|  88.8M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  25.3M|{
 8413|  25.3M|#define SCN_VISIT(Type)                                         \
 8414|  25.3M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  25.3M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  25.3M|    }                                                           \
 8417|  25.3M|    else {                                                      \
 8418|  25.3M|        return vis(monostate_val);                              \
 8419|  25.3M|    }
 8420|       |
 8421|  25.3M|    monostate monostate_val{};
 8422|       |
 8423|  25.3M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 25.3M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 25.3M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 25.3M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 25.3M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 25.3M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 25.3M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 25.3M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 25.3M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 25.3M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 25.3M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 25.3M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 25.3M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 25.3M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 25.3M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 25.3M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 25.3M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 25.3M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 25.3M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 25.3M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 25.3M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|  12.6M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 12.6M, False: 12.6M]
  ------------------
 8465|  12.6M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|  12.6M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  12.6M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  12.6M|    }                                                           \
  |  | 8417|  12.6M|    else {                                                      \
  |  | 8418|  12.6M|        return vis(monostate_val);                              \
  |  | 8419|  12.6M|    }
  ------------------
 8466|  12.6M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 12.6M, False: 12.6M]
  ------------------
 8467|  12.6M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  12.6M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  12.6M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  12.6M|    }                                                           \
  |  | 8417|  12.6M|    else {                                                      \
  |  | 8418|  12.6M|        return vis(monostate_val);                              \
  |  | 8419|  12.6M|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 25.3M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 25.3M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 25.3M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 25.3M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 25.3M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  25.3M|            SCN_CLANG_POP
 8491|  25.3M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|  25.4M|    {
 5541|  25.4M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  8.47M|    {
 8134|  8.47M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|  25.4M|    {
 8052|  25.4M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  16.9M|{
 7040|  16.9M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  16.9M|    handler.check_args_exhausted();
 7042|  16.9M|    return handler.get_error();
 7043|  16.9M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  16.9M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  16.9M|    auto begin = format.data();
 7009|  16.9M|    auto it = begin;
 7010|  16.9M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  33.8M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 16.9M, False: 16.9M]
  ------------------
 7013|  16.9M|        const auto ch = *it++;
 7014|  16.9M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 16.9M, False: 0]
  ------------------
 7015|  16.9M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  16.9M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  16.9M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 31.6k, False: 16.9M]
  ------------------
 7019|  31.6k|                return;
 7020|  31.6k|            }
 7021|  16.9M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  16.9M|    }
 7032|       |
 7033|  16.9M|    handler.on_literal_text(begin, end);
 7034|  16.9M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|  16.9M|{
 6938|  16.9M|    struct id_adapter {
 6939|  16.9M|        constexpr void operator()()
 6940|  16.9M|        {
 6941|  16.9M|            arg_id = handler.on_arg_id();
 6942|  16.9M|        }
 6943|  16.9M|        constexpr void operator()(std::size_t id)
 6944|  16.9M|        {
 6945|  16.9M|            arg_id = handler.on_arg_id(id);
 6946|  16.9M|        }
 6947|       |
 6948|  16.9M|        constexpr void on_error(const char* msg)
 6949|  16.9M|        {
 6950|  16.9M|            SCN_UNLIKELY_ATTR
 6951|  16.9M|            handler.on_error(msg);
 6952|  16.9M|        }
 6953|       |
 6954|  16.9M|        Handler& handler;
 6955|  16.9M|        std::size_t arg_id;
 6956|  16.9M|    };
 6957|       |
 6958|  16.9M|    ++begin;
 6959|  16.9M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  16.9M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 16.9M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  16.9M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 16.9M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  16.9M|    else {
 6971|  16.9M|        auto adapter = id_adapter{handler, 0};
 6972|  16.9M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  16.9M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  16.9M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 16.9M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  16.9M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 16.9M, False: 0]
  ------------------
 6983|  16.9M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  16.9M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  16.9M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  33.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 16.9M]
  |  |  |  Branch (859:45): [True: 0, False: 16.9M]
  |  |  |  Branch (859:45): [True: 12.6k, False: 16.9M]
  |  |  ------------------
  ------------------
 6989|  12.6k|                handler.on_error("Unknown format specifier");
 6990|  12.6k|                return begin;
 6991|  12.6k|            }
 6992|  16.9M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  16.9M|    }
 6999|  16.9M|    return begin + 1;
 7000|  16.9M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|  25.4M|    {
 8035|  25.4M|        return m_args.get(id);
 8036|  25.4M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|  25.4M|    {
 8045|  25.4M|        return m_locale;
 8046|  25.4M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|  25.4M|    {
 5562|  25.4M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  25.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.4M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  25.4M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  25.4M|        do_check_arg_id(id);
 5570|  25.4M|        return id;
 5571|  25.4M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|  25.4M|{
 6050|  25.4M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  25.4M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  25.4M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  16.9M|{
 6439|  16.9M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  16.9M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 16.9M, False: 0]
  |  Branch (6440:26): [True: 0, False: 16.9M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  16.9M|    handler();
 6445|  16.9M|    return begin;
 6446|  16.9M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6387|  18.9k|{
 6388|  18.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  18.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  18.9k|    unsigned long long value = 0;
 6392|  37.9k|    do {
 6393|  37.9k|        value *= 10;
 6394|  37.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  37.9k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 0, False: 37.9k]
  ------------------
 6396|  37.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|      0|            return -1;
 6398|      0|        }
 6399|  37.9k|        ++begin;
 6400|  37.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 37.9k, False: 0]
  |  Branch (6400:30): [True: 37.9k, False: 0]
  |  Branch (6400:47): [True: 18.9k, False: 18.9k]
  ------------------
 6401|  18.9k|    return static_cast<int>(value);
 6402|  18.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  16.9M|        {
 6941|  16.9M|            arg_id = handler.on_arg_id();
 6942|  16.9M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  50.8M|    {
 5248|  50.8M|        return m_type;
 5249|  50.8M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|  25.4M|    {
 5557|  25.4M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  25.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|  21.1M|{
 4340|  21.1M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 21.1M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  21.1M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  21.1M|                            ranges::default_sentinel};
 4346|  21.1M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|  21.1M|    {
 4173|  21.1M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  21.1M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  21.1M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  50.8M|    {
 5546|  50.8M|        return m_format.data();
 5547|  50.8M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  16.9M|    {
 7118|  16.9M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  16.9M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|  16.9M|{
 6854|  16.9M|    auto do_presentation = [&]() -> const CharT* {
 6855|  16.9M|        if (*begin == CharT{'['}) {
 6856|  16.9M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  16.9M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  16.9M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  16.9M|                return begin;
 6862|  16.9M|            }
 6863|  16.9M|            handler.on_character_set_string(set);
 6864|  16.9M|            return begin;
 6865|  16.9M|        }
 6866|  16.9M|        if (*begin == CharT{'/'}) {
 6867|  16.9M|            return parse_presentation_regex(begin, end, handler);
 6868|  16.9M|        }
 6869|  16.9M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  16.9M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  16.9M|            handler.on_error("Invalid type specifier in format string");
 6872|  16.9M|            return begin;
 6873|  16.9M|        }
 6874|  16.9M|        handler.on_type(type);
 6875|  16.9M|        return begin;
 6876|  16.9M|    };
 6877|       |
 6878|  16.9M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 16.9M, False: 0]
  |  Branch (6878:28): [True: 16.9M, False: 19.0k]
  ------------------
 6879|  16.9M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 16.9M, False: 0]
  |  Branch (6879:36): [True: 16.9M, False: 6.32k]
  ------------------
 6880|  16.9M|        return do_presentation();
 6881|  16.9M|    }
 6882|       |
 6883|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  25.3k|    begin = parse_align(begin, end, handler);
 6889|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  25.3k|    begin = parse_width(begin, end, handler);
 6895|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  25.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 25.3k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  25.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 6.32k, False: 19.0k]
  ------------------
 6914|  6.32k|        handler.on_localized();
 6915|  6.32k|        ++begin;
 6916|  6.32k|    }
 6917|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  25.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 25.3k, False: 0]
  |  Branch (6922:25): [True: 19.0k, False: 6.32k]
  ------------------
 6923|  19.0k|        do_presentation();
 6924|  19.0k|    }
 6925|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  25.3k|    return begin;
 6931|  25.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|  25.3M|{
 6503|  25.3M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 25.3M, False: 9.48k]
  |  Branch (6503:33): [True: 25.3M, False: 0]
  ------------------
 6504|  25.3M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 9.48k, False: 0]
  |  Branch (6504:33): [True: 9.48k, False: 0]
  ------------------
 6505|  25.3M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  16.9M|    auto do_presentation = [&]() -> const CharT* {
 6855|  16.9M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 6.39k, False: 16.9M]
  ------------------
 6856|  6.39k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  6.39k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|  6.39k|            handler.on_character_set_string(set);
 6864|  6.39k|            return begin;
 6865|  6.39k|        }
 6866|  16.9M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 16.9M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  16.9M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  16.9M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.32k, False: 16.9M]
  |  |  ------------------
  ------------------
 6871|  6.32k|            handler.on_error("Invalid type specifier in format string");
 6872|  6.32k|            return begin;
 6873|  6.32k|        }
 6874|  16.9M|        handler.on_type(type);
 6875|  16.9M|        return begin;
 6876|  16.9M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|  6.39k|{
 6693|  6.39k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  6.39k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  6.39k|    auto start = begin;
 6697|  6.39k|    ++begin;
 6698|       |
 6699|  6.39k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  6.39k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 0, False: 6.39k]
  ------------------
 6706|      0|        handler.on_charset_inverted();
 6707|      0|        ++begin;
 6708|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 0, False: 0]
  ------------------
 6715|      0|            handler.on_charset_single(char32_t{']'});
 6716|      0|            ++begin;
 6717|      0|        }
 6718|      0|    }
 6719|  6.39k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 6.39k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|  19.1k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 19.1k, False: 0]
  ------------------
 6724|  19.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.1k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|  19.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 6.39k, False: 12.7k]
  ------------------
 6729|  6.39k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  6.39k|        }
 6731|       |
 6732|  12.7k|        parse_presentation_set_literal(begin, end, handler);
 6733|  12.7k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  6.39k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6656|  12.7k|{
 6657|  12.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  12.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  12.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|  12.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 12.7k, False: 0]
  |  Branch (6664:25): [True: 12.7k, False: 0]
  |  Branch (6664:49): [True: 12.7k, False: 0]
  ------------------
 6665|  12.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 12.7k, False: 0]
  ------------------
 6666|  12.7k|        ++begin;
 6667|       |
 6668|  12.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  12.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  12.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  12.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  12.7k|        return;
 6682|  12.7k|    }
 6683|       |
 6684|      0|    handler.on_charset_single(cp_first);
 6685|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6632|  25.5k|{
 6633|  25.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  25.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  25.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.5k]
  |  |  |  Branch (859:45): [True: 0, False: 25.5k]
  |  |  |  Branch (859:45): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  25.5k|    const auto cp =
 6642|  25.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  25.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|  25.5k|    begin += len;
 6649|  25.5k|    return cp;
 6650|  25.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|  9.59k|    {
 6342|  9.59k|        m_specs.charset_string_data = fmt.data();
 6343|  9.59k|        m_specs.charset_string_size = fmt.size();
 6344|  9.59k|        on_type(presentation_type::string_set);
 6345|  9.59k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|  25.4M|{
 6451|  25.4M|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 25.4M]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 25.4M]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 25.4M]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 25.4M]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 25.4M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 25.4M]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 25.4M]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 25.4M]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 25.4M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 25.4M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|      0|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 0, False: 25.4M]
  ------------------
 6470|      0|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 25.4M]
  ------------------
 6471|      0|            return presentation_type::float_hex;
 6472|      0|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 0, False: 25.4M]
  ------------------
 6473|      0|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 25.4M]
  ------------------
 6474|      0|            return presentation_type::float_scientific;
 6475|      0|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 0, False: 25.4M]
  ------------------
 6476|      0|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 25.4M]
  ------------------
 6477|      0|            return presentation_type::float_fixed;
 6478|      0|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 0, False: 25.4M]
  ------------------
 6479|      0|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 25.4M]
  ------------------
 6480|      0|            return presentation_type::float_general;
 6481|  25.3M|        case 's':
  ------------------
  |  Branch (6481:9): [True: 25.3M, False: 18.9k]
  ------------------
 6482|  25.3M|            return presentation_type::string;
 6483|  9.48k|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 9.48k, False: 25.3M]
  ------------------
 6484|  9.48k|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 25.4M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 25.4M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 25.4M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 25.4M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|  9.48k|        default:
  ------------------
  |  Branch (6495:9): [True: 9.48k, False: 25.3M]
  ------------------
 6496|  9.48k|            return presentation_type::none;
 6497|  25.4M|    }
 6498|  25.4M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  25.3k|{
 6528|  25.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  25.3k|    auto check_align = [](wchar_t ch) {
 6531|  25.3k|        switch (ch) {
 6532|  25.3k|            case L'<':
 6533|  25.3k|                return align_type::left;
 6534|  25.3k|            case L'>':
 6535|  25.3k|                return align_type::right;
 6536|  25.3k|            case L'^':
 6537|  25.3k|                return align_type::center;
 6538|  25.3k|            default:
 6539|  25.3k|                return align_type::none;
 6540|  25.3k|        }
 6541|  25.3k|    };
 6542|       |
 6543|  25.3k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  25.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  |  Branch (859:45): [True: 0, False: 25.3k]
  |  |  |  Branch (859:45): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6545|  25.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  25.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  25.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  25.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  25.3k|    const auto begin_before_fill = begin;
 6555|  25.3k|    begin += potential_fill_len;
 6556|       |
 6557|  25.3k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 25.3k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  25.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  25.3k|    const auto begin_after_fill = begin;
 6563|  25.3k|    ++begin;
 6564|       |
 6565|  25.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 25.3k, False: 0]
  ------------------
 6566|  25.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  25.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 6.39k, False: 18.9k]
  ------------------
 6571|  6.39k|            return begin_before_fill;
 6572|  6.39k|        }
 6573|  25.3k|    }
 6574|       |
 6575|  18.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 18.9k, False: 0]
  ------------------
 6576|  18.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 18.9k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  18.9k|        return begin_before_fill;
 6581|  18.9k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  18.9k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  38.0k|{
 6510|  38.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  38.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  38.0k|        return 1;
 6513|  38.0k|    }
 6514|  38.0k|    else {
 6515|  38.0k|        const auto lengths =
 6516|  38.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  38.0k|            "\3\4";
 6518|  38.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  38.0k|        return len;
 6520|  38.0k|    }
 6521|  38.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  50.7k|    auto check_align = [](wchar_t ch) {
 6531|  50.7k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 50.7k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 50.7k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 50.7k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  50.7k|            default:
  ------------------
  |  Branch (6538:13): [True: 50.7k, False: 0]
  ------------------
 6539|  50.7k|                return align_type::none;
 6540|  50.7k|        }
 6541|  50.7k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  25.3k|{
 6593|  25.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  25.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 25.3k, False: 0]
  |  Branch (6595:33): [True: 12.6k, False: 12.7k]
  ------------------
 6596|  12.6k|        int width = parse_simple_int(begin, end);
 6597|  12.6k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  12.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.6k, False: 0]
  |  |  ------------------
  ------------------
 6598|  12.6k|            handler.on_width(width);
 6599|  12.6k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  12.6k|    }
 6605|  25.3k|    return begin;
 6606|  25.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  6.32k|    {
 7123|  6.32k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  6.32k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 6.32k, False: 0]
  ------------------
 7125|  6.32k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 6.32k, False: 0]
  ------------------
 7126|  6.32k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 6.32k, False: 0]
  ------------------
 7127|  6.32k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 6.32k, False: 0]
  ------------------
 7128|  6.32k|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|  6.32k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|  6.32k|        }
 7133|       |
 7134|      0|        Handler::on_localized();
 7135|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  16.9M|{
 8413|  16.9M|#define SCN_VISIT(Type)                                         \
 8414|  16.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  16.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  16.9M|    }                                                           \
 8417|  16.9M|    else {                                                      \
 8418|  16.9M|        return vis(monostate_val);                              \
 8419|  16.9M|    }
 8420|       |
 8421|  16.9M|    monostate monostate_val{};
 8422|       |
 8423|  16.9M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 16.9M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 16.9M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 16.9M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 16.9M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 16.9M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 16.9M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 16.9M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 16.9M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 16.9M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 16.9M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 16.9M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 16.9M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 16.9M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 16.9M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 16.9M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 16.9M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 16.9M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 16.9M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 16.9M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 16.9M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|  8.46M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 8.46M, False: 8.46M]
  ------------------
 8465|  8.46M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|  8.46M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  8.46M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  8.46M|    }                                                           \
  |  | 8417|  8.46M|    else {                                                      \
  |  | 8418|  8.46M|        return vis(monostate_val);                              \
  |  | 8419|  8.46M|    }
  ------------------
 8466|  8.46M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 8.46M, False: 8.46M]
  ------------------
 8467|  8.46M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  8.46M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  8.46M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  8.46M|    }                                                           \
  |  | 8417|  8.46M|    else {                                                      \
  |  | 8418|  8.46M|        return vis(monostate_val);                              \
  |  | 8419|  8.46M|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 16.9M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 16.9M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 16.9M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 16.9M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 16.9M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  16.9M|            SCN_CLANG_POP
 8491|  16.9M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  12.6M|{
 8413|  12.6M|#define SCN_VISIT(Type)                                         \
 8414|  12.6M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  12.6M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  12.6M|    }                                                           \
 8417|  12.6M|    else {                                                      \
 8418|  12.6M|        return vis(monostate_val);                              \
 8419|  12.6M|    }
 8420|       |
 8421|  12.6M|    monostate monostate_val{};
 8422|       |
 8423|  12.6M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 12.6M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 12.6M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 12.6M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 12.6M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 12.6M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 12.6M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 12.6M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 12.6M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 12.6M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 12.6M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 12.6M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 12.6M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 12.6M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 12.6M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 12.6M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 12.6M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 12.6M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 12.6M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 12.6M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 12.6M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 12.6M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|  12.6M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 12.6M, False: 0]
  ------------------
 8467|  12.6M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  12.6M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  12.6M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  12.6M|    }                                                           \
  |  | 8417|  12.6M|    else {                                                      \
  |  | 8418|  12.6M|        return vis(monostate_val);                              \
  |  | 8419|  12.6M|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 12.6M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 12.6M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 12.6M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 12.6M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 12.6M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  12.6M|            SCN_CLANG_POP
 8491|  12.6M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  8.47M|{
 7040|  8.47M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  8.47M|    handler.check_args_exhausted();
 7042|  8.47M|    return handler.get_error();
 7043|  8.47M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  8.47M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  8.47M|    auto begin = format.data();
 7009|  8.47M|    auto it = begin;
 7010|  8.47M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  16.9M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 8.47M, False: 8.45M]
  ------------------
 7013|  8.47M|        const auto ch = *it++;
 7014|  8.47M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 8.47M, False: 0]
  ------------------
 7015|  8.47M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  8.47M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  8.47M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 15.8k, False: 8.45M]
  ------------------
 7019|  15.8k|                return;
 7020|  15.8k|            }
 7021|  8.47M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  8.47M|    }
 7032|       |
 7033|  8.45M|    handler.on_literal_text(begin, end);
 7034|  8.45M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  8.45M|    {
 8171|  8.45M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  8.45M|    static_cast<    \
  |  |  929|  8.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  8.45M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|  8.47M|{
 6938|  8.47M|    struct id_adapter {
 6939|  8.47M|        constexpr void operator()()
 6940|  8.47M|        {
 6941|  8.47M|            arg_id = handler.on_arg_id();
 6942|  8.47M|        }
 6943|  8.47M|        constexpr void operator()(std::size_t id)
 6944|  8.47M|        {
 6945|  8.47M|            arg_id = handler.on_arg_id(id);
 6946|  8.47M|        }
 6947|       |
 6948|  8.47M|        constexpr void on_error(const char* msg)
 6949|  8.47M|        {
 6950|  8.47M|            SCN_UNLIKELY_ATTR
 6951|  8.47M|            handler.on_error(msg);
 6952|  8.47M|        }
 6953|       |
 6954|  8.47M|        Handler& handler;
 6955|  8.47M|        std::size_t arg_id;
 6956|  8.47M|    };
 6957|       |
 6958|  8.47M|    ++begin;
 6959|  8.47M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.47M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  8.47M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 8.47M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  8.47M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 8.47M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  8.47M|    else {
 6971|  8.47M|        auto adapter = id_adapter{handler, 0};
 6972|  8.47M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  8.47M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.47M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  8.47M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 8.47M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  8.47M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 8.47M, False: 0]
  ------------------
 6983|  8.47M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.47M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  8.47M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  8.47M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.32k, False: 8.46M]
  |  |  |  Branch (859:45): [True: 0, False: 8.47M]
  |  |  |  Branch (859:45): [True: 6.32k, False: 8.46M]
  |  |  ------------------
  ------------------
 6989|  6.32k|                handler.on_error("Unknown format specifier");
 6990|  6.32k|                return begin;
 6991|  6.32k|            }
 6992|  8.47M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  8.47M|    }
 6999|  8.46M|    return begin + 1;
 7000|  8.47M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  8.47M|{
 6439|  8.47M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  8.47M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 8.47M, False: 0]
  |  Branch (6440:26): [True: 0, False: 8.47M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  8.47M|    handler();
 6445|  8.47M|    return begin;
 6446|  8.47M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  8.47M|        {
 6941|  8.47M|            arg_id = handler.on_arg_id();
 6942|  8.47M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  8.47M|    {
 7118|  8.47M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  8.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  8.47M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|  8.47M|{
 6854|  8.47M|    auto do_presentation = [&]() -> const CharT* {
 6855|  8.47M|        if (*begin == CharT{'['}) {
 6856|  8.47M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  8.47M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  8.47M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  8.47M|                return begin;
 6862|  8.47M|            }
 6863|  8.47M|            handler.on_character_set_string(set);
 6864|  8.47M|            return begin;
 6865|  8.47M|        }
 6866|  8.47M|        if (*begin == CharT{'/'}) {
 6867|  8.47M|            return parse_presentation_regex(begin, end, handler);
 6868|  8.47M|        }
 6869|  8.47M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  8.47M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  8.47M|            handler.on_error("Invalid type specifier in format string");
 6872|  8.47M|            return begin;
 6873|  8.47M|        }
 6874|  8.47M|        handler.on_type(type);
 6875|  8.47M|        return begin;
 6876|  8.47M|    };
 6877|       |
 6878|  8.47M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 8.47M, False: 0]
  |  Branch (6878:28): [True: 8.46M, False: 9.51k]
  ------------------
 6879|  8.47M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 8.46M, False: 0]
  |  Branch (6879:36): [True: 8.46M, False: 3.16k]
  ------------------
 6880|  8.46M|        return do_presentation();
 6881|  8.46M|    }
 6882|       |
 6883|  12.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  12.6k|    begin = parse_align(begin, end, handler);
 6889|  12.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  12.6k|    begin = parse_width(begin, end, handler);
 6895|  12.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  12.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 12.6k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  12.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 3.16k, False: 9.51k]
  ------------------
 6914|  3.16k|        handler.on_localized();
 6915|  3.16k|        ++begin;
 6916|  3.16k|    }
 6917|  12.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  12.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 12.6k, False: 0]
  |  Branch (6922:25): [True: 9.51k, False: 3.16k]
  ------------------
 6923|  9.51k|        do_presentation();
 6924|  9.51k|    }
 6925|  12.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  12.6k|    return begin;
 6931|  12.6k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  8.47M|    auto do_presentation = [&]() -> const CharT* {
 6855|  8.47M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 3.19k, False: 8.46M]
  ------------------
 6856|  3.19k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  3.19k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|  3.19k|            handler.on_character_set_string(set);
 6864|  3.19k|            return begin;
 6865|  3.19k|        }
 6866|  8.46M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 8.46M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  8.46M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  8.46M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 8.46M]
  |  |  ------------------
  ------------------
 6871|  3.16k|            handler.on_error("Invalid type specifier in format string");
 6872|  3.16k|            return begin;
 6873|  3.16k|        }
 6874|  8.46M|        handler.on_type(type);
 6875|  8.46M|        return begin;
 6876|  8.46M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6692|  3.19k|{
 6693|  3.19k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  3.19k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  3.19k|    auto start = begin;
 6697|  3.19k|    ++begin;
 6698|       |
 6699|  3.19k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  3.19k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 0, False: 3.19k]
  ------------------
 6706|      0|        handler.on_charset_inverted();
 6707|      0|        ++begin;
 6708|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 0, False: 0]
  ------------------
 6715|      0|            handler.on_charset_single(char32_t{']'});
 6716|      0|            ++begin;
 6717|      0|        }
 6718|      0|    }
 6719|  3.19k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 3.19k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|  9.59k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 9.59k, False: 0]
  ------------------
 6724|  9.59k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.59k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|  9.59k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 3.19k, False: 6.39k]
  ------------------
 6729|  3.19k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  3.19k|        }
 6731|       |
 6732|  6.39k|        parse_presentation_set_literal(begin, end, handler);
 6733|  6.39k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  3.19k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6656|  6.39k|{
 6657|  6.39k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  6.39k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  6.39k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|  6.39k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 6.39k, False: 0]
  |  Branch (6664:25): [True: 6.39k, False: 0]
  |  Branch (6664:49): [True: 6.39k, False: 0]
  ------------------
 6665|  6.39k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 6.39k, False: 0]
  ------------------
 6666|  6.39k|        ++begin;
 6667|       |
 6668|  6.39k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  6.39k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  6.39k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  6.39k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  6.39k|        return;
 6682|  6.39k|    }
 6683|       |
 6684|      0|    handler.on_charset_single(cp_first);
 6685|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6632|  12.7k|{
 6633|  12.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  12.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  12.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  |  Branch (859:45): [True: 0, False: 12.7k]
  |  |  |  Branch (859:45): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  12.7k|    const auto cp =
 6642|  12.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  12.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|  12.7k|    begin += len;
 6649|  12.7k|    return cp;
 6650|  12.7k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|  12.6k|{
 6528|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  12.6k|    auto check_align = [](wchar_t ch) {
 6531|  12.6k|        switch (ch) {
 6532|  12.6k|            case L'<':
 6533|  12.6k|                return align_type::left;
 6534|  12.6k|            case L'>':
 6535|  12.6k|                return align_type::right;
 6536|  12.6k|            case L'^':
 6537|  12.6k|                return align_type::center;
 6538|  12.6k|            default:
 6539|  12.6k|                return align_type::none;
 6540|  12.6k|        }
 6541|  12.6k|    };
 6542|       |
 6543|  12.6k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  12.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  Branch (859:45): [True: 0, False: 12.6k]
  |  |  |  Branch (859:45): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6545|  12.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  12.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  12.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  12.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  12.6k|    const auto begin_before_fill = begin;
 6555|  12.6k|    begin += potential_fill_len;
 6556|       |
 6557|  12.6k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 12.6k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  12.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  12.6k|    const auto begin_after_fill = begin;
 6563|  12.6k|    ++begin;
 6564|       |
 6565|  12.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 12.6k, False: 0]
  ------------------
 6566|  12.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  12.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 3.19k, False: 9.48k]
  ------------------
 6571|  3.19k|            return begin_before_fill;
 6572|  3.19k|        }
 6573|  12.6k|    }
 6574|       |
 6575|  9.48k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 9.48k, False: 0]
  ------------------
 6576|  9.48k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 9.48k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  9.48k|        return begin_before_fill;
 6581|  9.48k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  9.48k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  25.3k|    auto check_align = [](wchar_t ch) {
 6531|  25.3k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 25.3k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 25.3k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 25.3k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  25.3k|            default:
  ------------------
  |  Branch (6538:13): [True: 25.3k, False: 0]
  ------------------
 6539|  25.3k|                return align_type::none;
 6540|  25.3k|        }
 6541|  25.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|  12.6k|{
 6593|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  12.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 12.6k, False: 0]
  |  Branch (6595:33): [True: 6.32k, False: 6.35k]
  ------------------
 6596|  6.32k|        int width = parse_simple_int(begin, end);
 6597|  6.32k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.32k, False: 0]
  |  |  ------------------
  ------------------
 6598|  6.32k|            handler.on_width(width);
 6599|  6.32k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  6.32k|    }
 6605|  12.6k|    return begin;
 6606|  12.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  3.16k|    {
 7123|  3.16k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  3.16k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 3.16k, False: 0]
  ------------------
 7125|  3.16k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 3.16k, False: 0]
  ------------------
 7126|  3.16k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 3.16k, False: 0]
  ------------------
 7127|  3.16k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 3.16k, False: 0]
  ------------------
 7128|  3.16k|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|  3.16k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|  3.16k|        }
 7133|       |
 7134|      0|        Handler::on_localized();
 7135|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  8.46M|{
 8413|  8.46M|#define SCN_VISIT(Type)                                         \
 8414|  8.46M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  8.46M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  8.46M|    }                                                           \
 8417|  8.46M|    else {                                                      \
 8418|  8.46M|        return vis(monostate_val);                              \
 8419|  8.46M|    }
 8420|       |
 8421|  8.46M|    monostate monostate_val{};
 8422|       |
 8423|  8.46M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 8.46M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 8.46M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 8.46M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 8.46M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 8.46M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 8.46M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 8.46M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 8.46M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 8.46M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 8.46M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 8.46M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 8.46M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 8.46M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 8.46M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 8.46M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 8.46M]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 8.46M]
  ------------------
 8457|      0|            SCN_VISIT(double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 8.46M]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 8.46M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 8.46M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 8.46M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|  8.46M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 8.46M, False: 0]
  ------------------
 8467|  8.46M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  8.46M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  8.46M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  8.46M|    }                                                           \
  |  | 8417|  8.46M|    else {                                                      \
  |  | 8418|  8.46M|        return vis(monostate_val);                              \
  |  | 8419|  8.46M|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 8.46M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 8.46M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 8.46M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 8.46M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 8.46M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  8.46M|            SCN_CLANG_POP
 8491|  8.46M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|  20.5k|    {
 4072|  20.5k|        sync(0);
 4073|  20.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|  95.4k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  12.6M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  8.46M|{
   89|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.46M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.46M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  16.9M|{
   44|  16.9M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  16.9M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  8.46M|{
  127|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.46M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.46M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  16.9M|{
   60|  16.9M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  16.9M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  4.23M|{
  163|  4.23M|    T value;
  164|  4.23M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.23M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 4.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.58k|    }                                                  \
  |  |  |  | 3667|  4.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.22M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.23M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  8.46M|{
   72|  8.46M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.46M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  8.46M|{
   89|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.46M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.46M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  8.46M|{
  127|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.46M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.46M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  4.23M|{
  163|  4.23M|    T value;
  164|  4.23M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.23M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 4.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.58k|    }                                                  \
  |  |  |  | 3667|  4.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.22M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.23M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  8.46M|{
   89|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.46M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.46M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  8.46M|{
   44|  8.46M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  8.46M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  8.46M|{
  127|  8.46M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.46M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.46M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.46M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  8.46M|{
   60|  8.46M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  8.46M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  4.23M|{
  163|  4.23M|    T value;
  164|  4.23M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.23M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 4.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.58k|    }                                                  \
  |  |  |  | 3667|  4.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.22M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.22M|    static_cast<    \
  |  |  929|  4.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.23M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  4.23M|{
   72|  4.23M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  4.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.23M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  25.6M|{
  653|  25.6M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  25.6M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|   133k|{
 2176|   133k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|   133k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  67.6k|{
 2184|  67.6k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  67.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  67.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 62.9k, False: 4.74k]
  |  |  ------------------
  ------------------
 2186|  62.9k|        source.sync(*n);
 2187|  62.9k|    }
 2188|  4.74k|    else {
 2189|  4.74k|        source.sync_all();
 2190|  4.74k|    }
 2191|  67.6k|    return n;
 2192|  67.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  16.9M|{
 2200|  16.9M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  16.9M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  8.46M|{
 2208|  8.46M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  8.46M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  8.46M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.45M, False: 9.48k]
  |  |  ------------------
  ------------------
 2210|  8.45M|        source.sync(*n);
 2211|  8.45M|    }
 2212|  9.48k|    else {
 2213|  9.48k|        source.sync_all();
 2214|  9.48k|    }
 2215|  8.46M|    return n;
 2216|  8.46M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   469k|{
  194|   469k|    return find_classic_impl(
  195|   469k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   469k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   469k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   475k|{
  202|   475k|    return find_classic_impl(
  203|   475k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   475k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   475k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|   133k|{
 2133|   133k|    return vscan_internal(source, format, args);
 2134|   133k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  67.6k|{
 2139|  67.6k|    auto n = vscan_internal(source, format, args);
 2140|  67.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  67.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 62.9k, False: 4.74k]
  |  |  ------------------
  ------------------
 2141|  62.9k|        source.sync(*n);
 2142|  62.9k|    }
 2143|  4.74k|    else {
 2144|  4.74k|        source.sync_all();
 2145|  4.74k|    }
 2146|  67.6k|    return n;
 2147|  67.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  16.9M|{
 2153|  16.9M|    return vscan_internal(source, format, args);
 2154|  16.9M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|  8.46M|{
 2159|  8.46M|    auto n = vscan_internal(source, format, args);
 2160|  8.46M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  8.46M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.45M, False: 9.48k]
  |  |  ------------------
  ------------------
 2161|  8.45M|        source.sync(*n);
 2162|  8.45M|    }
 2163|  9.48k|    else {
 2164|  9.48k|        source.sync_all();
 2165|  9.48k|    }
 2166|  8.46M|    return n;
 2167|  8.46M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|  63.3k|{
 2243|  63.3k|    return vscan_value_internal(source, arg);
 2244|  63.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|  32.1k|{
 2248|  32.1k|    auto n = vscan_value_internal(source, arg);
 2249|  32.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  32.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 31.3k, False: 790]
  |  |  ------------------
  ------------------
 2250|  31.3k|        source.sync(*n);
 2251|  31.3k|    }
 2252|    790|    else {
 2253|    790|        source.sync_all();
 2254|    790|    }
 2255|  32.1k|    return n;
 2256|  32.1k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  8.46M|{
 2262|  8.46M|    return vscan_value_internal(source, arg);
 2263|  8.46M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  4.23M|{
 2268|  4.23M|    auto n = vscan_value_internal(source, arg);
 2269|  4.23M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  4.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.22M, False: 1.58k]
  |  |  ------------------
  ------------------
 2270|  4.22M|        source.sync(*n);
 2271|  4.22M|    }
 2272|  1.58k|    else {
 2273|  1.58k|        source.sync_all();
 2274|  1.58k|    }
 2275|  4.23M|    return n;
 2276|  4.23M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   469k|{
  118|   469k|    auto it = source.begin();
  119|       |
  120|   839k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 678k, False: 160k]
  ------------------
  121|   678k|        auto sv =
  122|   678k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   678k|                .substr(0, 8);
  124|       |
  125|   678k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 513k, False: 165k]
  ------------------
  126|   513k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   513k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   513k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 249k, False: 263k]
  ------------------
  129|   249k|                break;
  130|   249k|            }
  131|   263k|            continue;
  132|   513k|        }
  133|       |
  134|   498k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 392k, False: 106k]
  ------------------
  135|   392k|            auto tmp =
  136|   392k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   392k|            auto res = get_next_code_point(tmp);
  138|   392k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 58.9k, False: 333k]
  ------------------
  139|  58.9k|                return it;
  140|  58.9k|            }
  141|   333k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   333k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   333k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   333k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   333k|        }
  145|   165k|    }
  146|       |
  147|   410k|    return detail::make_string_view_iterator(source, it);
  148|   469k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.15M|{
  105|  1.15M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.15M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.15M|    uint64_t word{};
  108|  1.15M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.15M|    return has_byte_greater(word, 127) != 0;
  111|  1.15M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.25M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   392k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   475k|{
  118|   475k|    auto it = source.begin();
  119|       |
  120|   639k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 479k, False: 160k]
  ------------------
  121|   479k|        auto sv =
  122|   479k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   479k|                .substr(0, 8);
  124|       |
  125|   479k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 413k, False: 66.0k]
  ------------------
  126|   413k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   413k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   413k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 250k, False: 162k]
  ------------------
  129|   250k|                break;
  130|   250k|            }
  131|   162k|            continue;
  132|   413k|        }
  133|       |
  134|   136k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 134k, False: 1.87k]
  ------------------
  135|   134k|            auto tmp =
  136|   134k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   134k|            auto res = get_next_code_point(tmp);
  138|   134k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 64.2k, False: 70.3k]
  ------------------
  139|  64.2k|                return it;
  140|  64.2k|            }
  141|  70.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  70.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  70.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  70.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  70.3k|        }
  145|  66.0k|    }
  146|       |
  147|   410k|    return detail::make_string_view_iterator(source, it);
  148|   475k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.24M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   134k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   135k|{
 2065|   135k|    const auto argcount = args.size();
 2066|   135k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 64.2k, False: 71.1k]
  |  Branch (2066:60): [True: 64.2k, False: 0]
  ------------------
 2067|  64.2k|        auto arg = args.get(0);
 2068|  64.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  64.2k|    static_cast<    \
  |  |  929|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  64.2k|    }
 2070|       |
 2071|  71.1k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 71.1k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  71.1k|    SCN_UNLIKELY_ATTR
 2079|  71.1k|    {
 2080|  71.1k|        auto handler = format_handler<false, CharT>{
 2081|  71.1k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  71.1k|    static_cast<    \
  |  |  929|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  71.1k|    static_cast<    \
  |  |  929|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  71.1k|        return vscan_parse_format_string(format, handler);
 2083|  71.1k|    }
 2084|  71.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   402k|{
 1625|   402k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 212k, False: 190k]
  ------------------
 1626|   212k|        return false;
 1627|   212k|    }
 1628|   190k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 190k, False: 0]
  |  Branch (1628:39): [True: 190k, False: 0]
  ------------------
 1629|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  96.3k|{
 1658|  96.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  96.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  96.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 96.3k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  96.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  96.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  96.3k|    static_cast<    \
  |  |  929|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  96.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.37k, False: 93.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.37k|    }                                                  \
  |  |  |  | 3667|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  93.9k|    return it.position();
 1675|  96.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   140k|    {
 1903|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  25.6M|    {
 1722|  25.6M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  25.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  25.6M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   140k|    {
 1853|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   140k|{
 2030|   140k|    const auto beg = handler.get_ctx().begin();
 2031|   140k|    detail::parse_format_string<false>(format, handler);
 2032|   140k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.8k, False: 125k]
  |  |  ------------------
  ------------------
 2033|  15.8k|        return unexpected(handler.error);
 2034|  15.8k|    }
 2035|   125k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   140k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   942k|    {
 2014|   942k|        return ctx.get();
 2015|   942k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   942k|    {
 1857|   942k|        return contiguous_ctx;
 1858|   942k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   266k|    {
 1907|   266k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 266k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   266k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   140k|{
 1681|   140k|    auto arg = ctx.arg(id);
 1682|   140k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   140k|    return arg;
 1686|   140k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  25.6M|    {
 1797|  25.6M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  25.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  25.6M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  25.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  25.6M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  25.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.6M, False: 0]
  |  |  ------------------
  ------------------
 1807|  25.6M|            visited_args_lower64 |= (1ull << id);
 1808|  25.6M|            return;
 1809|  25.6M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  25.6M|    {
 1782|  25.6M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  25.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  25.6M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  25.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.6M, False: 0]
  |  |  ------------------
  ------------------
 1788|  25.6M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  25.6M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  25.6M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  42.6k|    {
 1766|  42.6k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
 1767|  42.6k|            error = err;
 1768|  42.6k|        }
 1769|  42.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|   140k|    {
 1936|   140k|        return parse_ctx.next_arg_id();
 1937|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|   140k|    {
 1977|   140k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   140k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   140k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 140k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   140k|        auto specs = detail::format_specs{};
 1990|   140k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   140k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   140k|            arg.type()};
 1993|       |
 1994|   140k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   140k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 140k]
  |  Branch (1995:29): [True: 0, False: 140k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   140k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.32k, False: 134k]
  |  |  ------------------
  ------------------
 2001|  6.32k|            return parse_ctx.begin();
 2002|  6.32k|        }
 2003|   134k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   134k|        on_visit_scan_arg(
 2006|   134k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   134k|                                           get_ctx().locale()},
 2008|   134k|            arg);
 2009|   134k|        return parse_ctx.begin();
 2010|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   140k|    {
 1701|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|   134k|    {
 1948|   134k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 134k]
  |  Branch (1948:23): [True: 0, False: 134k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   134k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   134k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 125k]
  |  |  ------------------
  ------------------
 1955|  9.48k|            on_error(r.error());
 1956|  9.48k|        }
 1957|   125k|        else {
 1958|   125k|            get_ctx().advance_to(*r);
 1959|   125k|        }
 1960|   134k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  28.4k|    {
 1761|  28.4k|        SCN_UNLIKELY_ATTR
 1762|  28.4k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  28.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  25.6M|    {
 1729|  25.6M|        {
 1730|  25.6M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 25.6M]
  ------------------
 1731|  25.6M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 25.6M]
  ------------------
 1732|  25.6M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  25.6M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  25.6M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 25.6M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  25.6M|        }
 1739|       |
 1740|  25.6M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 25.6M, False: 0]
  ------------------
 1741|  25.6M|            return;
 1742|  25.6M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  25.6M|    {
 1777|  25.6M|        return error;
 1778|  25.6M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  76.8M|    {
 1773|  76.8M|        return static_cast<bool>(error);
 1774|  76.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  71.1k|    {
 1903|  71.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  71.1k|    {
 1830|  71.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  71.1k|{
 2030|  71.1k|    const auto beg = handler.get_ctx().begin();
 2031|  71.1k|    detail::parse_format_string<false>(format, handler);
 2032|  71.1k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.90k, False: 63.2k]
  |  |  ------------------
  ------------------
 2033|  7.90k|        return unexpected(handler.error);
 2034|  7.90k|    }
 2035|  63.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  71.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|   475k|    {
 2014|   475k|        return ctx.get();
 2015|   475k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   475k|    {
 1834|   475k|        return ctx;
 1835|   475k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   134k|    {
 1907|   134k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 134k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   134k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  71.1k|{
 1681|  71.1k|    auto arg = ctx.arg(id);
 1682|  71.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.1k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  71.1k|    return arg;
 1686|  71.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  71.1k|    {
 1936|  71.1k|        return parse_ctx.next_arg_id();
 1937|  71.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  71.1k|    {
 1977|  71.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  71.1k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  71.1k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 71.1k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  71.1k|        auto specs = detail::format_specs{};
 1990|  71.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  71.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  71.1k|            arg.type()};
 1993|       |
 1994|  71.1k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  71.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 71.1k]
  |  Branch (1995:29): [True: 0, False: 71.1k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  71.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 67.9k]
  |  |  ------------------
  ------------------
 2001|  3.16k|            return parse_ctx.begin();
 2002|  3.16k|        }
 2003|  67.9k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  67.9k|        on_visit_scan_arg(
 2006|  67.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  67.9k|                                           get_ctx().locale()},
 2008|  67.9k|            arg);
 2009|  67.9k|        return parse_ctx.begin();
 2010|  71.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  71.1k|    {
 1701|  71.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  67.9k|    {
 1948|  67.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 67.9k]
  |  Branch (1948:23): [True: 0, False: 67.9k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  67.9k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  67.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  67.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 63.2k]
  |  |  ------------------
  ------------------
 1955|  4.74k|            on_error(r.error());
 1956|  4.74k|        }
 1957|  63.2k|        else {
 1958|  63.2k|            get_ctx().advance_to(*r);
 1959|  63.2k|        }
 1960|  67.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   267k|{
 2045|   267k|    const auto argcount = args.size();
 2046|   267k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 126k, False: 140k]
  |  Branch (2046:60): [True: 126k, False: 0]
  ------------------
 2047|   126k|        auto arg = args.get(0);
 2048|   126k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   126k|    static_cast<    \
  |  |  929|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   126k|    }
 2050|       |
 2051|   140k|    auto handler = format_handler<true, CharT>{
 2052|   140k|        ranges::subrange<const CharT*>{source.data(),
 2053|   140k|                                       source.data() + source.size()},
 2054|   140k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   140k|    return vscan_parse_format_string(format, handler);
 2056|   267k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   189k|{
 1638|   189k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   189k|    auto reader =
 1644|   189k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   189k|            ranges::subrange<const CharT*>{source.data(),
 1646|   189k|                                           source.data() + source.size()},
 1647|   189k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   189k|    static_cast<    \
  |  |  929|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   189k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.74k, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.74k|    }                                                  \
  |  |  |  | 3667|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   185k|    return ranges::distance(source.data(), it);
 1650|   189k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  33.8M|{
 2045|  33.8M|    const auto argcount = args.size();
 2046|  33.8M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 16.9M, False: 16.9M]
  |  Branch (2046:60): [True: 16.9M, False: 0]
  ------------------
 2047|  16.9M|        auto arg = args.get(0);
 2048|  16.9M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  16.9M|    }
 2050|       |
 2051|  16.9M|    auto handler = format_handler<true, CharT>{
 2052|  16.9M|        ranges::subrange<const CharT*>{source.data(),
 2053|  16.9M|                                       source.data() + source.size()},
 2054|  16.9M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  16.9M|    return vscan_parse_format_string(format, handler);
 2056|  33.8M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  50.8M|{
 1625|  50.8M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 25.4M, False: 25.3M]
  ------------------
 1626|  25.4M|        return false;
 1627|  25.4M|    }
 1628|  25.3M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 25.3M, False: 0]
  |  Branch (1628:39): [True: 25.3M, False: 0]
  ------------------
 1629|  50.8M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  25.3M|{
 1638|  25.3M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  25.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  25.3M|    auto reader =
 1644|  25.3M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  25.3M|            ranges::subrange<const CharT*>{source.data(),
 1646|  25.3M|                                           source.data() + source.size()},
 1647|  25.3M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  25.3M|    static_cast<    \
  |  |  929|  25.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  25.3M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  25.3M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  25.3M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  25.3M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.48k, False: 25.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.48k|    }                                                  \
  |  |  |  | 3667|  25.3M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  25.3M|    return ranges::distance(source.data(), it);
 1650|  25.3M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  16.9M|    {
 1903|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  16.9M|    {
 1853|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  16.9M|{
 2030|  16.9M|    const auto beg = handler.get_ctx().begin();
 2031|  16.9M|    detail::parse_format_string<false>(format, handler);
 2032|  16.9M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.6k, False: 16.9M]
  |  |  ------------------
  ------------------
 2033|  31.6k|        return unexpected(handler.error);
 2034|  31.6k|    }
 2035|  16.9M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  16.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   118M|    {
 2014|   118M|        return ctx.get();
 2015|   118M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   118M|    {
 1857|   118M|        return contiguous_ctx;
 1858|   118M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  33.8M|    {
 1907|  33.8M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 33.8M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  33.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  16.9M|{
 1681|  16.9M|    auto arg = ctx.arg(id);
 1682|  16.9M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  16.9M|    return arg;
 1686|  16.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  16.9M|    {
 1936|  16.9M|        return parse_ctx.next_arg_id();
 1937|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  16.9M|    {
 1977|  16.9M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  16.9M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  16.9M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 16.9M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  16.9M|        auto specs = detail::format_specs{};
 1990|  16.9M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  16.9M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  16.9M|            arg.type()};
 1993|       |
 1994|  16.9M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  16.9M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 16.9M]
  |  Branch (1995:29): [True: 0, False: 16.9M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  16.9M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 16.9M]
  |  |  ------------------
  ------------------
 2001|  12.6k|            return parse_ctx.begin();
 2002|  12.6k|        }
 2003|  16.9M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  16.9M|        on_visit_scan_arg(
 2006|  16.9M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  16.9M|                                           get_ctx().locale()},
 2008|  16.9M|            arg);
 2009|  16.9M|        return parse_ctx.begin();
 2010|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  16.9M|    {
 1701|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  16.9M|    {
 1948|  16.9M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 16.9M]
  |  Branch (1948:23): [True: 0, False: 16.9M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  16.9M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  16.9M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 16.9M]
  |  |  ------------------
  ------------------
 1955|  18.9k|            on_error(r.error());
 1956|  18.9k|        }
 1957|  16.9M|        else {
 1958|  16.9M|            get_ctx().advance_to(*r);
 1959|  16.9M|        }
 1960|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  16.9M|{
 2065|  16.9M|    const auto argcount = args.size();
 2066|  16.9M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 8.46M, False: 8.47M]
  |  Branch (2066:60): [True: 8.46M, False: 0]
  ------------------
 2067|  8.46M|        auto arg = args.get(0);
 2068|  8.46M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  8.46M|    static_cast<    \
  |  |  929|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  8.46M|    }
 2070|       |
 2071|  8.47M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 8.47M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  8.47M|    SCN_UNLIKELY_ATTR
 2079|  8.47M|    {
 2080|  8.47M|        auto handler = format_handler<false, CharT>{
 2081|  8.47M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  8.47M|    static_cast<    \
  |  |  929|  8.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  8.47M|    static_cast<    \
  |  |  929|  8.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  8.47M|        return vscan_parse_format_string(format, handler);
 2083|  8.47M|    }
 2084|  8.47M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  12.6M|{
 1658|  12.6M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  12.6M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  12.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 12.6M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  12.6M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  12.6M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  12.6M|    static_cast<    \
  |  |  929|  12.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  12.6M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  12.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.74k, False: 12.6M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.74k|    }                                                  \
  |  |  |  | 3667|  12.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  12.6M|    return it.position();
 1675|  12.6M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  8.47M|    {
 1903|  8.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  8.47M|    {
 1830|  8.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  8.47M|{
 2030|  8.47M|    const auto beg = handler.get_ctx().begin();
 2031|  8.47M|    detail::parse_format_string<false>(format, handler);
 2032|  8.47M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.8k, False: 8.45M]
  |  |  ------------------
  ------------------
 2033|  15.8k|        return unexpected(handler.error);
 2034|  15.8k|    }
 2035|  8.45M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  8.47M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  59.2M|    {
 2014|  59.2M|        return ctx.get();
 2015|  59.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  59.2M|    {
 1834|  59.2M|        return ctx;
 1835|  59.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  16.9M|    {
 1907|  16.9M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 16.9M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  8.47M|{
 1681|  8.47M|    auto arg = ctx.arg(id);
 1682|  8.47M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.47M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  8.47M|    return arg;
 1686|  8.47M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|  8.47M|    {
 1936|  8.47M|        return parse_ctx.next_arg_id();
 1937|  8.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|  8.47M|    {
 1977|  8.47M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  8.47M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  8.47M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 8.47M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  8.47M|        auto specs = detail::format_specs{};
 1990|  8.47M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  8.47M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  8.47M|            arg.type()};
 1993|       |
 1994|  8.47M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  8.47M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 8.47M]
  |  Branch (1995:29): [True: 0, False: 8.47M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  8.47M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.32k, False: 8.46M]
  |  |  ------------------
  ------------------
 2001|  6.32k|            return parse_ctx.begin();
 2002|  6.32k|        }
 2003|  8.46M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  8.46M|        on_visit_scan_arg(
 2006|  8.46M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  8.46M|                                           get_ctx().locale()},
 2008|  8.46M|            arg);
 2009|  8.46M|        return parse_ctx.begin();
 2010|  8.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  8.47M|    {
 1701|  8.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  8.46M|    {
 1948|  8.46M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 8.46M]
  |  Branch (1948:23): [True: 0, False: 8.46M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  8.46M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  8.46M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 8.45M]
  |  |  ------------------
  ------------------
 1955|  9.48k|            on_error(r.error());
 1956|  9.48k|        }
 1957|  8.45M|        else {
 1958|  8.45M|            get_ctx().advance_to(*r);
 1959|  8.45M|        }
 1960|  8.46M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  63.3k|{
 2091|  63.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  63.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  32.1k|{
 2091|  32.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  32.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  8.46M|{
 2091|  8.46M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  8.46M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  4.23M|{
 2091|  4.23M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  4.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  4.23M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    790|{
 1363|    790|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    790|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    790|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    790|            std::u32string tmp;
 1368|    790|            transcode_to_string_impl_to32(src, tmp);
 1369|    790|            return transcode_to_string_impl_32to16<false>(
 1370|    790|                std::u32string_view{tmp}, dest);
 1371|    790|        }
 1372|    790|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    790|            return transcode_to_string_impl_to32(src, dest);
 1374|    790|        }
 1375|    790|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    790|{
 1256|    790|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    790|    auto it = src.begin();
 1259|   346k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 345k, False: 790]
  ------------------
 1260|   345k|        auto res = get_next_code_point(
 1261|   345k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   345k|                                                                 src.end()));
 1263|   345k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 341k]
  |  |  ------------------
  ------------------
 1264|  4.75k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.75k|        }
 1266|   341k|        else {
 1267|   341k|            dest.push_back(res.value);
 1268|   341k|        }
 1269|   345k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   345k|    }
 1271|    790|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   872k|{
 1169|   872k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   872k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   872k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   872k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.5k, False: 859k]
  |  |  ------------------
  ------------------
 1173|  13.5k|        return {get_start_for_next_code_point(input),
 1174|  13.5k|                detail::invalid_code_point};
 1175|  13.5k|    }
 1176|   859k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   859k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.97k, False: 855k]
  |  |  ------------------
  ------------------
 1177|  3.97k|        return {input.end(), detail::invalid_code_point};
 1178|  3.97k|    }
 1179|       |
 1180|   855k|    return {input.begin() + len,
 1181|   855k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   859k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  13.5k|{
 1155|  13.5k|    auto it = input.begin();
 1156|  64.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 64.1k, False: 415]
  ------------------
 1157|  64.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 13.1k, False: 51.0k]
  ------------------
 1158|  13.1k|            break;
 1159|  13.1k|        }
 1160|  64.1k|    }
 1161|  13.5k|    return it;
 1162|  13.5k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  14.2k|    {
 2931|  14.2k|        SCN_UNLIKELY_ATTR
 2932|  14.2k|        m_msg = msg;
 2933|  14.2k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  25.6M|    {
 2936|  25.6M|        return m_msg == nullptr;
 2937|  25.6M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  3.49M|{
  458|  3.49M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  3.49M|        static_cast<unsigned char>(ch))];
  460|  3.49M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  40.1k|{
  469|  40.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  40.1k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  9.64k|{
  474|  9.64k|#if WCHAR_MIN < 0
  475|  9.64k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 8.85k, False: 792]
  |  Branch (475:23): [True: 5.35k, False: 3.49k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  9.64k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.15M|{
  539|  1.15M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.15M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   102M|{
  784|   102M|    return e != eof_error::good;
  785|   102M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  20.9k|{
  798|  20.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  20.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  20.9k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   728M|{
 1200|       |    // Pattern_White_Space property
 1201|   728M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 593M, False: 135M]
  |  Branch (1201:27): [True: 82.5M, False: 511M]
  ------------------
 1202|   728M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 99.2M, False: 547M]
  ------------------
 1203|   728M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 1.50M, False: 545M]
  ------------------
 1204|   728M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 330k, False: 545M]
  ------------------
 1205|   728M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 330k, False: 545M]
  ------------------
 1206|   728M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 668k, False: 544M]
  ------------------
 1207|   728M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 544M]
  ------------------
 1208|   728M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  25.5M|{
 6008|  25.5M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 25.5M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  25.5M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 25.5M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  25.5M|    return {};
 6023|  25.5M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   626k|    {
  304|   626k|        ranges::advance(x, n);
  305|   626k|        return x;
  306|   626k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   626k|    {
  268|   626k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   626k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   626k|    {
  151|   626k|        i += n;
  152|   626k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.34M|    {
  108|  1.34M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.34M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.34M|    {
   87|  1.34M|        return s - i;
   88|  1.34M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  42.2M|    {
  108|  42.2M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  42.2M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  42.2M|    {
   87|  42.2M|        return s - i;
   88|  42.2M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   162k|{
  981|   162k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   162k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   162k|        return true;
  984|   162k|    }
  985|   162k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   162k|                           ranges::const_iterator_t<Range>,
  987|   162k|                           typename detail::basic_scan_buffer<
  988|   162k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   162k|        auto beg = r.begin();
  990|   162k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 162k, False: 0]
  ------------------
  991|   162k|            return false;
  992|   162k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   162k|    else {
 1006|   162k|        return false;
 1007|   162k|    }
 1008|   162k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  66.3k|    {
 6037|  66.3k|        const bool need_skipped_width =
 6038|  66.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 66.3k]
  |  Branch (6038:33): [True: 0, False: 66.3k]
  ------------------
 6039|  66.3k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  66.3k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 66.3k]
  ------------------
 6043|  66.3k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 66.3k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  66.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 66.3k, False: 0]
  |  Branch (6047:56): [True: 63.9k, False: 2.42k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  63.9k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 63.9k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   126k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  63.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  63.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   126k|                            make_eof_scan_error));
 6058|       |
 6059|   126k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 62.8k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  62.8k|            return result_type{it, 0};
 6067|   126k|        }
 6068|       |
 6069|  2.42k|        return result_type{rng.begin(), 0};
 6070|  66.3k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.42k|{
 1976|  2.42k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.42k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.42k|{
 1957|  2.42k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.42k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.42k|    }
 1960|  2.42k|    else {
 1961|  2.42k|        auto first = range.begin();
 1962|  6.03k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 5.99k, False: 36]
  ------------------
 1963|  5.99k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.38k, False: 3.61k]
  ------------------
 1964|  2.38k|                return first;
 1965|  2.38k|            }
 1966|  5.99k|        }
 1967|     36|        return first;
 1968|  2.42k|    }
 1969|  2.42k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  35.9k|    {
  763|  35.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  35.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  7.26k|    {
  754|  7.26k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.9k|              cvref<T> obj = *get<T>(fn);
  745|  17.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.9k|              }
  748|  17.9k|              else {
  749|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.9k|              }
  751|  17.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  17.9k|    {
  684|  17.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.9k|            return static_cast<T*>(s.m_cp);
  686|  17.9k|        }
  687|  17.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.9k|            return static_cast<T*>(s.m_p);
  689|  17.9k|        }
  690|  17.9k|        else {
  691|  17.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.9k|        }
  693|  17.9k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  7.26k|        {
  662|  7.26k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  63.2k|    {
  108|  63.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  63.2k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  63.2k|    {
   94|  63.2k|        iter_difference_t<I> counter{0};
   95|   727k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 664k, False: 63.2k]
  ------------------
   96|   664k|            ++i;
   97|   664k|            ++counter;
   98|   664k|        }
   99|  63.2k|        return counter;
  100|  63.2k|    }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   912M|    {
  763|   912M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   912M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   912M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  63.6M|    {
  754|  63.6M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   184M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184M|              cvref<T> obj = *get<T>(fn);
  745|   184M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   184M|                  obj(static_cast<decltype(args)>(args)...);
  747|   184M|              }
  748|   184M|              else {
  749|   184M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184M|              }
  751|   184M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   184M|    {
  684|   184M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   184M|            return static_cast<T*>(s.m_cp);
  686|   184M|        }
  687|   184M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   184M|            return static_cast<T*>(s.m_p);
  689|   184M|        }
  690|   184M|        else {
  691|   184M|            return reinterpret_cast<T*>(s.m_fp);
  692|   184M|        }
  693|   184M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  63.6M|        {
  662|  63.6M|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   256k|{
  950|   256k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59k, False: 253k]
  |  |  ------------------
  ------------------
  951|  2.59k|        return eof_error::eof;
  952|  2.59k|    }
  953|   253k|    return eof_error::good;
  954|   256k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.99M|{
  944|  1.99M|    return is_range_eof(r.begin(), r.end());
  945|  1.99M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.99M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.99M|    {
  937|  1.99M|        return begin == end;
  938|  1.99M|    }
  939|  1.99M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   158k|{
 1683|   158k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   158k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   158k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   158k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   158k|    }
 1688|   158k|    else {
 1689|   158k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   158k|    }
 1691|   158k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   158k|    {
 1537|   158k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   158k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   158k|    {
 1621|   158k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   158k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   158k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   158k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   158k|            m_storage.reset();
 1627|   158k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   158k|        }
 1629|   158k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   158k|                                          std::basic_string<CharT>>) {
 1631|   158k|            m_storage.emplace(SCN_FWD(range));
 1632|   158k|            m_view = string_view_type{*m_storage};
 1633|   158k|        }
 1634|   158k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   158k|                                          typename detail::basic_scan_buffer<
 1636|   158k|                                              value_t>::forward_iterator> &&
 1637|   158k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   158k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   158k|            auto end_seg = range.end().contiguous_segment();
 1640|   158k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.80k, False: 154k]
  |  |  ------------------
  ------------------
 1641|   158k|                             detail::to_address(end_seg.end()))) {
 1642|  3.80k|                auto& str = m_storage.emplace();
 1643|  3.80k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.80k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.80k|                m_view = string_view_type{str};
 1646|  3.80k|                return;
 1647|  3.80k|            }
 1648|       |
 1649|   154k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   154k|                                                            end_seg.data());
 1651|   154k|            m_storage.reset();
 1652|   154k|        }
 1653|   158k|        else {
 1654|   158k|            auto& str = m_storage.emplace();
 1655|   158k|            if constexpr (ranges::sized_range<Range>) {
 1656|   158k|                str.reserve(range.size());
 1657|   158k|            }
 1658|   158k|            if constexpr (ranges::common_range<Range>) {
 1659|   158k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   158k|                          std::back_inserter(str));
 1661|   158k|            }
 1662|   158k|            else {
 1663|   158k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   158k|                     ++it) {
 1665|   158k|                    str.push_back(*it);
 1666|   158k|                }
 1667|   158k|            }
 1668|   158k|            m_view = string_view_type{str};
 1669|   158k|        }
 1670|   158k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   312k|    {
 1582|   312k|        return m_view;
 1583|   312k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   158k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  62.8k|    {
 6079|  62.8k|        const bool need_skipped_width =
 6080|  62.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 62.8k]
  |  Branch (6080:33): [True: 0, False: 62.8k]
  ------------------
 6081|  62.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  62.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 62.8k]
  ------------------
 6084|  62.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 62.8k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  62.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 62.8k, False: 0]
  ------------------
 6089|  62.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 824, False: 61.9k]
  ------------------
 6090|  62.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 824]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|    824|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 824]
  ------------------
 6092|    824|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  62.8k|        return result_type{rng.begin(), 0};
 6114|  62.8k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   505k|{
  950|   505k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.07k, False: 500k]
  |  |  ------------------
  ------------------
  951|  5.07k|        return eof_error::eof;
  952|  5.07k|    }
  953|   500k|    return eof_error::good;
  954|   505k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   505k|{
  944|   505k|    return is_range_eof(r.begin(), r.end());
  945|   505k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   505k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   505k|    {
  937|   505k|        return begin == end;
  938|   505k|    }
  939|   505k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   313k|{
 1683|   313k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   313k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   313k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   313k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   313k|    }
 1688|   313k|    else {
 1689|   313k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   313k|    }
 1691|   313k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   313k|    {
 1490|   313k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.72M|    {
 1503|  1.72M|        return sv;
 1504|  1.72M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.84k|{
 1976|  4.84k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.84k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.84k|{
 1957|  4.84k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.84k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.84k|    }
 1960|  4.84k|    else {
 1961|  4.84k|        auto first = range.begin();
 1962|  4.84k|        for (; first != range.end(); ++first) {
 1963|  4.84k|            if (pred(*first)) {
 1964|  4.84k|                return first;
 1965|  4.84k|            }
 1966|  4.84k|        }
 1967|  4.84k|        return first;
 1968|  4.84k|    }
 1969|  4.84k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   315k|{
 2951|   315k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 315k, False: 0]
  ------------------
 2952|   315k|        auto it = read_while_classic_space(range);
 2953|   315k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   315k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.94k, False: 311k]
  |  |  ------------------
  ------------------
 2955|  3.94k|            return unexpected(e);
 2956|  3.94k|        }
 2957|       |
 2958|   311k|        return it;
 2959|   315k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   315k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   315k|{
 2117|   315k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   315k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   315k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   315k|        auto buf = make_contiguous_buffer(range);
 2121|   315k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   315k|        return ranges::next(range.begin(),
 2123|   315k|                            ranges::distance(buf.view().begin(), it));
 2124|   315k|    }
 2125|   315k|    else {
 2126|   315k|        auto it = range.begin();
 2127|       |
 2128|   315k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   315k|            auto seg = get_contiguous_beginning(range);
 2130|   315k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   315k|                seg_it != seg.end()) {
 2132|   315k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   315k|            }
 2134|   315k|            ranges::advance(it, seg.size());
 2135|   315k|        }
 2136|       |
 2137|   315k|        return read_while_code_point(
 2138|   315k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   315k|    }
 2140|   315k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   626k|{
 1683|   626k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   626k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   626k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   626k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   626k|    }
 1688|   626k|    else {
 1689|   626k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   626k|    }
 1691|   626k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   626k|    {
 1490|   626k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.54k|    {
  304|  3.54k|        ranges::advance(x, n);
  305|  3.54k|        return x;
  306|  3.54k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   317k|    {
  268|   317k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   317k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   317k|    {
  181|   602k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 285k, False: 317k]
  ------------------
  182|   285k|            ++i;
  183|   285k|        }
  184|   317k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   160k|    {
 1587|   160k|        return m_storage.has_value();
 1588|   160k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.10k|    {
 1592|  3.10k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.10k|        return *m_storage;
 1594|  3.10k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|  67.9k|    {
 6178|  67.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  67.9k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  67.9k|            auto rd = make_reader<T, char_type>();
 6183|  67.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  67.9k|                return unexpected(e);
 6185|  67.9k|            }
 6186|       |
 6187|  67.9k|            return impl(rd, range, value);
 6188|  67.9k|        }
 6189|  67.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  67.9k|            auto rd = make_reader<T, char_type>();
 6191|  67.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 66.3k]
  |  |  ------------------
  ------------------
 6192|  1.58k|                return unexpected(e);
 6193|  1.58k|            }
 6194|       |
 6195|  66.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 66.3k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  66.3k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  66.3k|                return impl(rd, range, value);
 6198|  66.3k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  67.9k|        else {
 6206|  67.9k|            SCN_EXPECT(false);
 6207|  67.9k|            SCN_UNREACHABLE;
 6208|  67.9k|        }
 6209|  67.9k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   326k|{
 5809|   326k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   326k|        return reader_impl_for_bool<CharT>{};
 5811|   326k|    }
 5812|   326k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   326k|        return reader_impl_for_char<CharT>{};
 5814|   326k|    }
 5815|   326k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   326k|        return reader_impl_for_wchar<CharT>{};
 5817|   326k|    }
 5818|   326k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   326k|        return reader_impl_for_code_point<CharT>{};
 5820|   326k|    }
 5821|   326k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   326k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   326k|        return reader_impl_for_string<CharT>{};
 5824|   326k|    }
 5825|   326k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   326k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   326k|        return reader_impl_for_string<CharT>{};
 5828|   326k|    }
 5829|   326k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   326k|                       std::is_same_v<T, wregex_matches>) {
 5831|   326k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   326k|    }
 5833|   326k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   326k|        return reader_impl_for_voidptr<CharT>{};
 5835|   326k|    }
 5836|   326k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   326k|        return reader_impl_for_float<CharT>{};
 5838|   326k|    }
 5839|   326k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   326k|                       !std::is_same_v<T, wchar_t> &&
 5841|   326k|                       !std::is_same_v<T, char32_t> &&
 5842|   326k|                       !std::is_same_v<T, bool>) {
 5843|   326k|        return reader_impl_for_int<CharT>{};
 5844|   326k|    }
 5845|   326k|    else {
 5846|   326k|        return reader_impl_for_monostate<CharT>{};
 5847|   326k|    }
 5848|   326k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   488k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   202k|    {
 3040|   202k|        reader_error_handler eh{};
 3041|   202k|        get_derived().check_specs_impl(specs, eh);
 3042|   202k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 197k]
  |  |  ------------------
  ------------------
 3043|  4.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.74k|        }
 3045|   197k|        return {};
 3046|   202k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   202k|    {
 3051|   202k|        return static_cast<Derived&>(*this);
 3052|   202k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   202k|    {
 5210|   202k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   202k|        SCN_GCC_PUSH
 5213|   202k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   202k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   202k|        SCN_CLANG_PUSH
 5217|   202k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   202k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   202k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 202k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 202k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   190k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 190k, False: 12.0k]
  ------------------
 5226|   190k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 190k]
  ------------------
 5227|   190k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 190k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   190k|                else {
 5231|   190k|                    m_type = reader_type::word;
 5232|   190k|                }
 5233|   190k|                break;
 5234|      0|            }
 5235|       |
 5236|  4.74k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 4.74k, False: 197k]
  ------------------
 5237|  4.74k|                m_type = reader_type::character;
 5238|  4.74k|                break;
 5239|       |
 5240|  7.26k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 7.26k, False: 195k]
  ------------------
 5241|  7.26k|                m_type = reader_type::character_set;
 5242|  7.26k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 202k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 202k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   202k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   202k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6119|  66.3k|    {
 6120|  66.3k|        const bool need_skipped_width =
 6121|  66.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 66.3k]
  |  Branch (6121:33): [True: 0, False: 66.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  66.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  66.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 65.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  66.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  65.3k|        auto [it, prefix_width] = prefix_result;
 6126|  65.3k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  65.3k|        std::ptrdiff_t value_width = 0;
 6130|  65.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 65.3k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  65.3k|        else {
 6146|  65.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  65.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  65.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.11k, False: 63.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.11k|    }                                                  \
  |  | 3667|  65.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  63.2k|                                             specs, value, loc));
 6148|       |
 6149|  63.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 63.2k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  63.2k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  63.2k|        std::ptrdiff_t postfix_width = 0;
 6158|  63.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 62.8k, False: 410]
  ------------------
 6159|  62.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  62.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  62.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  62.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  62.8k|                                 value_width));
 6163|  62.8k|            std::tie(it, postfix_width) = postfix_result;
 6164|  62.8k|        }
 6165|       |
 6166|  63.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  63.2k|                                                 value_width, postfix_width);
 6168|  63.2k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 63.2k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  63.2k|        return it;
 6173|  63.2k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   671k|    {
 5259|   671k|        return m_type == reader_type::word;
 5260|   671k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   471k|{
 1132|   471k|    auto it = src.begin();
 1133|  3.64M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 3.17M, False: 467k]
  ------------------
 1134|  3.17M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  3.17M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.70k, False: 3.17M]
  ------------------
 1136|  1.70k|            return false;
 1137|  1.70k|        }
 1138|  3.17M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 289, False: 3.17M]
  ------------------
 1139|    289|            return false;
 1140|    289|        }
 1141|  3.17M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  3.17M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  3.17M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.19k, False: 3.17M]
  ------------------
 1144|  2.19k|            return false;
 1145|  2.19k|        }
 1146|  3.17M|        it += len;
 1147|  3.17M|    }
 1148|   467k|    return true;
 1149|   471k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   157k|{
 2993|   157k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   157k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.10k, False: 154k]
  ------------------
 2995|  3.10k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.10k|    static_cast<    \
  |  |  929|  3.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.10k|        }
 2997|   154k|        else {
 2998|   154k|            dest.assign(source.view());
 2999|   154k|        }
 3000|   157k|    }
 3001|   157k|    else {
 3002|   157k|        return transcode_impl(source.view(), dest);
 3003|   157k|    }
 3004|       |
 3005|   157k|    return {};
 3006|   157k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  7.26k|        {
 5103|  7.26k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 7.26k, False: 0]
  ------------------
 5104|  7.26k|                return {};
 5105|  7.26k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  16.8k|        {
 5076|  16.8k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  16.8k|            const auto val =
 5078|  16.8k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  16.8k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  16.8k|                    (val % 8)) &
 5081|  16.8k|                   1u;
 5082|  16.8k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  17.9k|        {
 5129|  17.9k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.15k, False: 16.8k]
  ------------------
 5130|  1.15k|                return false;
 5131|  1.15k|            }
 5132|       |
 5133|  16.8k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  17.9k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  7.26k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  65.3k|    {
 5277|  65.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  65.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  65.3k|        return read_impl(range, specs, value);
 5279|  65.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  65.3k|    {
 5295|  65.3k|        SCN_CLANG_PUSH
 5296|  65.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  65.3k|        switch (m_type) {
 5299|  62.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 62.8k, False: 2.42k]
  ------------------
 5300|  62.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 65.3k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 65.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.42k, False: 62.8k]
  ------------------
 5310|  2.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.42k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 65.3k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 65.3k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 65.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  65.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  65.3k|        }
 5331|       |
 5332|  65.3k|        SCN_CLANG_POP
 5333|  65.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   157k|    {
 4820|   157k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   157k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   157k|{
 4752|   157k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   157k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   157k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.35k, False: 156k]
  ------------------
 4756|  1.35k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.35k|                                     "Invalid encoding in scanned string");
 4758|  1.35k|    }
 4759|   156k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   156k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   156k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   156k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   157k|{
 2088|   157k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   157k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   157k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   157k|        auto buf = make_contiguous_buffer(range);
 2092|   157k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   157k|        return ranges::next(range.begin(),
 2094|   157k|                            ranges::distance(buf.view().begin(), it));
 2095|   157k|    }
 2096|   157k|    else {
 2097|   157k|        auto it = range.begin();
 2098|       |
 2099|   157k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   157k|            auto seg = get_contiguous_beginning(range);
 2101|   157k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   157k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 157k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   157k|            ranges::advance(it, seg.size());
 2106|   157k|        }
 2107|       |
 2108|   157k|        return read_until_code_point(
 2109|   157k|            ranges::subrange{it, range.end()},
 2110|   157k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   157k|    }
 2112|   157k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   317k|{
 1039|   317k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   317k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   317k|        return r;
 1042|   317k|    }
 1043|   317k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   317k|                           ranges::const_iterator_t<Range>,
 1045|   317k|                           typename detail::basic_scan_buffer<
 1046|   317k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   317k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   317k|            auto seg = r.begin().contiguous_segment();
 1049|   317k|            auto dist =
 1050|   317k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   317k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   317k|        }
 1053|   317k|        else {
 1054|   317k|            return r.begin().contiguous_segment();
 1055|   317k|        }
 1056|   317k|    }
 1057|   317k|    else {
 1058|   317k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   317k|    }
 1060|   317k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   313k|{
 2061|   313k|    auto it = range.begin();
 2062|  1.74M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.73M, False: 3.61k]
  ------------------
 2063|  1.73M|        const auto val =
 2064|  1.73M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.73M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.73M, False: 7.31k]
  |  |  ------------------
  ------------------
 2066|  1.73M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.73M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.73M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 310k, False: 1.42M]
  ------------------
 2069|   310k|                return it;
 2070|   310k|            }
 2071|  1.73M|        }
 2072|  1.42M|        it = val.iterator;
 2073|  1.42M|    }
 2074|       |
 2075|  3.61k|    return it;
 2076|   313k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.73M|{
 1899|  1.73M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.73M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.73M|    auto it = range.begin();
 1903|  1.73M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.73M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.31k, False: 1.73M]
  |  |  ------------------
  ------------------
 1906|  7.31k|        ++it;
 1907|  7.31k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  7.31k|        return {it, {}};
 1909|  7.31k|    }
 1910|       |
 1911|  1.73M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.64M, False: 87.0k]
  ------------------
 1912|  1.64M|        ++it;
 1913|  1.64M|        return {it, string_type(1, *range.begin())};
 1914|  1.64M|    }
 1915|       |
 1916|  87.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  87.0k|    return {it, string_type{range.begin(), it}};
 1918|  1.73M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  7.31k|{
 1155|  7.31k|    auto it = input.begin();
 1156|  23.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 23.6k, False: 174]
  ------------------
 1157|  23.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.14k, False: 16.5k]
  ------------------
 1158|  7.14k|            break;
 1159|  7.14k|        }
 1160|  23.6k|    }
 1161|  7.31k|    return it;
 1162|  7.31k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  87.0k|    {
  283|  87.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  87.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  87.0k|    {
  252|  87.0k|        constexpr iter_difference_t<I> zero{0};
  253|  87.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|   320k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 233k, False: 86.8k]
  |  Branch (255:30): [True: 233k, False: 239]
  ------------------
  256|   233k|            ++i;
  257|   233k|            ++counter;
  258|   233k|        }
  259|       |
  260|  87.0k|        return counter;
  261|  87.0k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.73M|    {
 1890|  1.73M|        return !codepoint.empty();
 1891|  1.73M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   157k|    {
  754|   157k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.08M|              cvref<T> obj = *get<T>(fn);
  745|  1.08M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.08M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.08M|              }
  748|  1.08M|              else {
  749|  1.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.08M|              }
  751|  1.08M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.08M|    {
  684|  1.08M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.08M|            return static_cast<T*>(s.m_cp);
  686|  1.08M|        }
  687|  1.08M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.08M|            return static_cast<T*>(s.m_p);
  689|  1.08M|        }
  690|  1.08M|        else {
  691|  1.08M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.08M|        }
  693|  1.08M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  1.08M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   157k|        {
  662|   157k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.42k|    {
 5048|  2.42k|        auto it = read_source_impl(range, {specs});
 5049|  2.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 842]
  |  |  ------------------
  ------------------
 5050|  1.58k|            return unexpected(it.error());
 5051|  1.58k|        }
 5052|       |
 5053|    842|        return read_string_impl(range, *it, value);
 5054|  2.42k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.42k|    {
 5153|  2.42k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.42k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.42k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.42k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.42k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.42k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.42k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.42k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.42k|        };
 5178|       |
 5179|  2.42k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.42k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.42k|        auto it = read_while_code_unit(range, cb);
 5184|  2.42k|        return check_nonempty(it, range);
 5185|  2.42k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.42k|    {
 5191|  2.42k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.58k, False: 842]
  ------------------
 5192|  1.58k|            return unexpected_scan_error(
 5193|  1.58k|                scan_error::invalid_scanned_value,
 5194|  1.58k|                "No characters matched in [character set]");
 5195|  1.58k|        }
 5196|       |
 5197|    842|        return it;
 5198|  2.42k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   156k|{
 2082|   156k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   156k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.42k|    {
  754|  2.42k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  5.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.99k|              cvref<T> obj = *get<T>(fn);
  745|  5.99k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.99k|              }
  748|  5.99k|              else {
  749|  5.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.99k|              }
  751|  5.99k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.99k|    {
  684|  5.99k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.99k|            return static_cast<T*>(s.m_cp);
  686|  5.99k|        }
  687|  5.99k|        else if constexpr (std::is_object_v<T>) {
  688|  5.99k|            return static_cast<T*>(s.m_p);
  689|  5.99k|        }
  690|  5.99k|        else {
  691|  5.99k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.99k|        }
  693|  5.99k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  5.99k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.99k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.99k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.42k|        {
  667|  2.42k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    842|{
 4752|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    842|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    842|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 842]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    842|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    842|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 842]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    842|    return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    842|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  64.7k|    {
 5277|  64.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  64.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  64.7k|        return read_impl(range, specs, value);
 5279|  64.7k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  64.7k|    {
 5295|  64.7k|        SCN_CLANG_PUSH
 5296|  64.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  64.7k|        switch (m_type) {
 5299|  62.3k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 62.3k, False: 2.42k]
  ------------------
 5300|  62.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 64.7k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 64.7k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.42k, False: 62.3k]
  ------------------
 5310|  2.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.42k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 64.7k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 64.7k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 64.7k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  64.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  64.7k|        }
 5331|       |
 5332|  64.7k|        SCN_CLANG_POP
 5333|  64.7k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   155k|    {
 4820|   155k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   155k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   155k|{
 4752|   155k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   155k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   155k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.41k, False: 154k]
  ------------------
 4756|  1.41k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.41k|                                     "Invalid encoding in scanned string");
 4758|  1.41k|    }
 4759|   154k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   154k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   154k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   154k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   155k|{
 3012|   155k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   155k|        dest.assign(source.view());
 3014|   155k|    }
 3015|   155k|    else {
 3016|   155k|        return transcode_impl(source.view(), dest);
 3017|   155k|    }
 3018|       |
 3019|   155k|    return {};
 3020|   155k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   311k|{
 2088|   311k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   311k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   311k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   311k|        auto buf = make_contiguous_buffer(range);
 2092|   311k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   311k|        return ranges::next(range.begin(),
 2094|   311k|                            ranges::distance(buf.view().begin(), it));
 2095|   311k|    }
 2096|   311k|    else {
 2097|   311k|        auto it = range.begin();
 2098|       |
 2099|   311k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   311k|            auto seg = get_contiguous_beginning(range);
 2101|   311k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   311k|                seg_it != seg.end()) {
 2103|   311k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   311k|            }
 2105|   311k|            ranges::advance(it, seg.size());
 2106|   311k|        }
 2107|       |
 2108|   311k|        return read_until_code_point(
 2109|   311k|            ranges::subrange{it, range.end()},
 2110|   311k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   311k|    }
 2112|   311k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.42k|    {
 5048|  2.42k|        auto it = read_source_impl(range, {specs});
 5049|  2.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 842]
  |  |  ------------------
  ------------------
 5050|  1.58k|            return unexpected(it.error());
 5051|  1.58k|        }
 5052|       |
 5053|    842|        return read_string_impl(range, *it, value);
 5054|  2.42k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  4.84k|    {
 5153|  4.84k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.84k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.84k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.84k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.84k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.84k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.84k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.84k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.84k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.84k|        };
 5178|       |
 5179|  4.84k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.84k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.84k|        auto it = read_while_code_unit(range, cb);
 5184|  4.84k|        return check_nonempty(it, range);
 5185|  4.84k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  4.84k|    {
 5191|  4.84k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.16k, False: 1.68k]
  ------------------
 5192|  3.16k|            return unexpected_scan_error(
 5193|  3.16k|                scan_error::invalid_scanned_value,
 5194|  3.16k|                "No characters matched in [character set]");
 5195|  3.16k|        }
 5196|       |
 5197|  1.68k|        return it;
 5198|  4.84k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  4.84k|    {
  754|  4.84k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.9k|              cvref<T> obj = *get<T>(fn);
  745|  11.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.9k|              }
  748|  11.9k|              else {
  749|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.9k|              }
  751|  11.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  11.9k|    {
  684|  11.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.9k|            return static_cast<T*>(s.m_cp);
  686|  11.9k|        }
  687|  11.9k|        else if constexpr (std::is_object_v<T>) {
  688|  11.9k|            return static_cast<T*>(s.m_p);
  689|  11.9k|        }
  690|  11.9k|        else {
  691|  11.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.9k|        }
  693|  11.9k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  11.9k|        const auto cb = [&](SourceCharT ch) {
 5176|  11.9k|            return cb_wrapper.on_ascii_only(ch);
 5177|  11.9k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  4.84k|        {
  667|  4.84k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    842|{
 4752|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    842|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    842|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 842]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    842|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    842|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 842]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    842|    return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    842|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   162k|{
 5809|   162k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   162k|        return reader_impl_for_bool<CharT>{};
 5811|   162k|    }
 5812|   162k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   162k|        return reader_impl_for_char<CharT>{};
 5814|   162k|    }
 5815|   162k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   162k|        return reader_impl_for_wchar<CharT>{};
 5817|   162k|    }
 5818|   162k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   162k|        return reader_impl_for_code_point<CharT>{};
 5820|   162k|    }
 5821|   162k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   162k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   162k|        return reader_impl_for_string<CharT>{};
 5824|   162k|    }
 5825|   162k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   162k|                       std::is_same_v<T, std::wstring>) {
 5827|   162k|        return reader_impl_for_string<CharT>{};
 5828|   162k|    }
 5829|   162k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   162k|                       std::is_same_v<T, wregex_matches>) {
 5831|   162k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   162k|    }
 5833|   162k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   162k|        return reader_impl_for_voidptr<CharT>{};
 5835|   162k|    }
 5836|   162k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   162k|        return reader_impl_for_float<CharT>{};
 5838|   162k|    }
 5839|   162k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   162k|                       !std::is_same_v<T, wchar_t> &&
 5841|   162k|                       !std::is_same_v<T, char32_t> &&
 5842|   162k|                       !std::is_same_v<T, bool>) {
 5843|   162k|        return reader_impl_for_int<CharT>{};
 5844|   162k|    }
 5845|   162k|    else {
 5846|   162k|        return reader_impl_for_monostate<CharT>{};
 5847|   162k|    }
 5848|   162k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  64.7k|    {
 5277|  64.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  64.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  64.7k|        return read_impl(range, specs, value);
 5279|  64.7k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  64.7k|    {
 5295|  64.7k|        SCN_CLANG_PUSH
 5296|  64.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  64.7k|        switch (m_type) {
 5299|  62.3k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 62.3k, False: 2.42k]
  ------------------
 5300|  62.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 64.7k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 64.7k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.42k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.42k, False: 62.3k]
  ------------------
 5310|  2.42k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.42k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 64.7k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 64.7k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 64.7k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  64.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  64.7k|        }
 5331|       |
 5332|  64.7k|        SCN_CLANG_POP
 5333|  64.7k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   155k|    {
 4827|   155k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   155k|                                     value);
 4829|   155k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   155k|{
 4773|   155k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   155k|    auto src = [&]() {
 4776|   155k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   155k|            return make_contiguous_buffer(
 4778|   155k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   155k|        }
 4780|   155k|        else {
 4781|   155k|            return make_contiguous_buffer(
 4782|   155k|                ranges::subrange{range.begin(), result});
 4783|   155k|        }
 4784|   155k|    }();
 4785|   155k|    using src_type = decltype(src);
 4786|       |
 4787|   155k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   155k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   155k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   155k|                                     "Cannot read a string_view from "
 4796|   155k|                                     "this source range (would require "
 4797|   155k|                                     "transcoding)");
 4798|   155k|    }
 4799|   155k|    else {
 4800|   155k|        const auto view = src.view();
 4801|   155k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   155k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 1.41k, False: 154k]
  ------------------
 4804|  1.41k|            return unexpected_scan_error(
 4805|  1.41k|                scan_error::invalid_scanned_value,
 4806|  1.41k|                "Invalid encoding in scanned string_view");
 4807|  1.41k|        }
 4808|       |
 4809|   154k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   155k|    }
 4811|   155k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   155k|    auto src = [&]() {
 4776|   155k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   155k|            return make_contiguous_buffer(
 4778|   155k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   155k|        }
 4780|   155k|        else {
 4781|   155k|            return make_contiguous_buffer(
 4782|   155k|                ranges::subrange{range.begin(), result});
 4783|   155k|        }
 4784|   155k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.42k|    {
 5062|  2.42k|        auto it = read_source_impl(range, {specs});
 5063|  2.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 842]
  |  |  ------------------
  ------------------
 5064|  1.58k|            return unexpected(it.error());
 5065|  1.58k|        }
 5066|       |
 5067|    842|        return read_string_view_impl(range, *it, value);
 5068|  2.42k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    842|{
 4773|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    842|    auto src = [&]() {
 4776|    842|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    842|            return make_contiguous_buffer(
 4778|    842|                ranges::subrange{range.begin().base(), result.base()});
 4779|    842|        }
 4780|    842|        else {
 4781|    842|            return make_contiguous_buffer(
 4782|    842|                ranges::subrange{range.begin(), result});
 4783|    842|        }
 4784|    842|    }();
 4785|    842|    using src_type = decltype(src);
 4786|       |
 4787|    842|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    842|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    842|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    842|                                     "Cannot read a string_view from "
 4796|    842|                                     "this source range (would require "
 4797|    842|                                     "transcoding)");
 4798|    842|    }
 4799|    842|    else {
 4800|    842|        const auto view = src.view();
 4801|    842|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    842|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 842]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    842|        return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    842|    }
 4811|    842|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    842|    auto src = [&]() {
 4776|    842|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    842|            return make_contiguous_buffer(
 4778|    842|                ranges::subrange{range.begin().base(), result.base()});
 4779|    842|        }
 4780|    842|        else {
 4781|    842|            return make_contiguous_buffer(
 4782|    842|                ranges::subrange{range.begin(), result});
 4783|    842|        }
 4784|    842|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   159k|{
 2951|   159k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 159k, False: 0]
  ------------------
 2952|   159k|        auto it = read_while_classic_space(range);
 2953|   159k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   159k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 157k]
  |  |  ------------------
  ------------------
 2955|  2.00k|            return unexpected(e);
 2956|  2.00k|        }
 2957|       |
 2958|   157k|        return it;
 2959|   159k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   159k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   159k|{
 2117|   159k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   159k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   159k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   159k|        auto buf = make_contiguous_buffer(range);
 2121|   159k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   159k|        return ranges::next(range.begin(),
 2123|   159k|                            ranges::distance(buf.view().begin(), it));
 2124|   159k|    }
 2125|   159k|    else {
 2126|   159k|        auto it = range.begin();
 2127|       |
 2128|   159k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   159k|            auto seg = get_contiguous_beginning(range);
 2130|   159k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   159k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.54k, False: 156k]
  ------------------
 2132|  3.54k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.54k|            }
 2134|   156k|            ranges::advance(it, seg.size());
 2135|   156k|        }
 2136|       |
 2137|   156k|        return read_while_code_point(
 2138|   156k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   159k|    }
 2140|   159k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   156k|    {
  754|   156k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   642k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   642k|              cvref<T> obj = *get<T>(fn);
  745|   642k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   642k|                  obj(static_cast<decltype(args)>(args)...);
  747|   642k|              }
  748|   642k|              else {
  749|   642k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   642k|              }
  751|   642k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   642k|    {
  684|   642k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   642k|            return static_cast<T*>(s.m_cp);
  686|   642k|        }
  687|   642k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   642k|            return static_cast<T*>(s.m_p);
  689|   642k|        }
  690|   642k|        else {
  691|   642k|            return reinterpret_cast<T*>(s.m_fp);
  692|   642k|        }
  693|   642k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   642k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   156k|        {
  662|   156k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  21.1M|{
  981|  21.1M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  21.1M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  21.1M|        return true;
  984|  21.1M|    }
  985|  21.1M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  21.1M|                           ranges::const_iterator_t<Range>,
  987|  21.1M|                           typename detail::basic_scan_buffer<
  988|  21.1M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  21.1M|        auto beg = r.begin();
  990|  21.1M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 21.1M, False: 0]
  ------------------
  991|  21.1M|            return false;
  992|  21.1M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  21.1M|    else {
 1006|  21.1M|        return false;
 1007|  21.1M|    }
 1008|  21.1M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  8.46M|    {
 6037|  8.46M|        const bool need_skipped_width =
 6038|  8.46M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 8.46M]
  |  Branch (6038:33): [True: 0, False: 8.46M]
  ------------------
 6039|  8.46M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  8.46M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 8.46M]
  ------------------
 6043|  8.46M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 8.46M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  8.46M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.46M, False: 0]
  |  Branch (6047:56): [True: 8.46M, False: 3.19k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  8.46M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 8.46M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  16.9M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  8.46M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.77k, False: 8.45M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.77k|    }                                                  \
  |  |  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  16.9M|                            make_eof_scan_error));
 6058|       |
 6059|  16.9M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 8.45M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  8.45M|            return result_type{it, 0};
 6067|  16.9M|        }
 6068|       |
 6069|  3.19k|        return result_type{rng.begin(), 0};
 6070|  8.46M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.19k|{
 1976|  3.19k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.19k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.19k|{
 1957|  3.19k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  3.19k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  3.19k|    }
 1960|  3.19k|    else {
 1961|  3.19k|        auto first = range.begin();
 1962|  3.23k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.21k, False: 20]
  ------------------
 1963|  3.21k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.17k, False: 38]
  ------------------
 1964|  3.17k|                return first;
 1965|  3.17k|            }
 1966|  3.21k|        }
 1967|     20|        return first;
 1968|  3.19k|    }
 1969|  3.19k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  19.2k|    {
  763|  19.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  19.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  9.59k|    {
  754|  9.59k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  9.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.64k|              cvref<T> obj = *get<T>(fn);
  745|  9.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.64k|              }
  748|  9.64k|              else {
  749|  9.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.64k|              }
  751|  9.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  9.64k|    {
  684|  9.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.64k|            return static_cast<T*>(s.m_cp);
  686|  9.64k|        }
  687|  9.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.64k|            return static_cast<T*>(s.m_p);
  689|  9.64k|        }
  690|  9.64k|        else {
  691|  9.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.64k|        }
  693|  9.64k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  9.59k|        {
  662|  9.59k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  8.45M|    {
  108|  8.45M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.45M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  8.45M|    {
   94|  8.45M|        iter_difference_t<I> counter{0};
   95|  88.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 79.8M, False: 8.45M]
  ------------------
   96|  79.8M|            ++i;
   97|  79.8M|            ++counter;
   98|  79.8M|        }
   99|  8.45M|        return counter;
  100|  8.45M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  33.8M|{
  950|  33.8M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  33.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.43k, False: 33.8M]
  |  |  ------------------
  ------------------
  951|  4.43k|        return eof_error::eof;
  952|  4.43k|    }
  953|  33.8M|    return eof_error::good;
  954|  33.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   276M|{
  944|   276M|    return is_range_eof(r.begin(), r.end());
  945|   276M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   276M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   276M|    {
  937|   276M|        return begin == end;
  938|   276M|    }
  939|   276M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  21.1M|{
 1683|  21.1M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  21.1M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  21.1M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  21.1M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  21.1M|    }
 1688|  21.1M|    else {
 1689|  21.1M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  21.1M|    }
 1691|  21.1M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  21.1M|    {
 1537|  21.1M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  21.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  21.1M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  21.1M|    {
 1621|  21.1M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  21.1M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  21.1M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  21.1M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  21.1M|            m_storage.reset();
 1627|  21.1M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  21.1M|        }
 1629|  21.1M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  21.1M|                                          std::basic_string<CharT>>) {
 1631|  21.1M|            m_storage.emplace(SCN_FWD(range));
 1632|  21.1M|            m_view = string_view_type{*m_storage};
 1633|  21.1M|        }
 1634|  21.1M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  21.1M|                                          typename detail::basic_scan_buffer<
 1636|  21.1M|                                              value_t>::forward_iterator> &&
 1637|  21.1M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  21.1M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  21.1M|            auto end_seg = range.end().contiguous_segment();
 1640|  21.1M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  21.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.60k, False: 21.1M]
  |  |  ------------------
  ------------------
 1641|  21.1M|                             detail::to_address(end_seg.end()))) {
 1642|  6.60k|                auto& str = m_storage.emplace();
 1643|  6.60k|                str.reserve(range.end().position() - range.begin().position());
 1644|  6.60k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  6.60k|                m_view = string_view_type{str};
 1646|  6.60k|                return;
 1647|  6.60k|            }
 1648|       |
 1649|  21.1M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  21.1M|                                                            end_seg.data());
 1651|  21.1M|            m_storage.reset();
 1652|  21.1M|        }
 1653|  21.1M|        else {
 1654|  21.1M|            auto& str = m_storage.emplace();
 1655|  21.1M|            if constexpr (ranges::sized_range<Range>) {
 1656|  21.1M|                str.reserve(range.size());
 1657|  21.1M|            }
 1658|  21.1M|            if constexpr (ranges::common_range<Range>) {
 1659|  21.1M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  21.1M|                          std::back_inserter(str));
 1661|  21.1M|            }
 1662|  21.1M|            else {
 1663|  21.1M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  21.1M|                     ++it) {
 1665|  21.1M|                    str.push_back(*it);
 1666|  21.1M|                }
 1667|  21.1M|            }
 1668|  21.1M|            m_view = string_view_type{str};
 1669|  21.1M|        }
 1670|  21.1M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  42.2M|    {
 1582|  42.2M|        return m_view;
 1583|  42.2M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  21.1M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  8.45M|    {
 6079|  8.45M|        const bool need_skipped_width =
 6080|  8.45M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 8.45M]
  |  Branch (6080:33): [True: 0, False: 8.45M]
  ------------------
 6081|  8.45M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  8.45M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 8.45M]
  ------------------
 6084|  8.45M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 8.45M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  8.45M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 8.45M, False: 0]
  ------------------
 6089|  8.45M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 28, False: 8.45M]
  ------------------
 6090|  8.45M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 28]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|     28|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 28]
  ------------------
 6092|     28|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  8.45M|        return result_type{rng.begin(), 0};
 6114|  8.45M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   484M|{
 1899|   484M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   484M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   484M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   484M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   484M|    auto it = range.begin();
 1903|   484M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   484M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   484M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 484M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   484M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 484M, False: 0]
  ------------------
 1912|   484M|        ++it;
 1913|   484M|        return {it, string_type(1, *range.begin())};
 1914|   484M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   484M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   552M|{
  944|   552M|    return is_range_eof(r.begin(), r.end());
  945|   552M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   552M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   552M|    {
  937|   552M|        return begin == end;
  938|   552M|    }
  939|   552M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   484M|    {
 1890|   484M|        return !codepoint.empty();
 1891|   484M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  67.6M|{
  950|  67.6M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  67.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.87k, False: 67.6M]
  |  |  ------------------
  ------------------
  951|  8.87k|        return eof_error::eof;
  952|  8.87k|    }
  953|  67.6M|    return eof_error::good;
  954|  67.6M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  42.2M|{
 1683|  42.2M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  42.2M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  42.2M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  42.2M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  42.2M|    }
 1688|  42.2M|    else {
 1689|  42.2M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  42.2M|    }
 1691|  42.2M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  42.2M|    {
 1490|  42.2M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  63.4M|    {
 1503|  63.4M|        return sv;
 1504|  63.4M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.39k|{
 1976|  6.39k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.39k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.39k|{
 1957|  6.39k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.39k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.39k|    }
 1960|  6.39k|    else {
 1961|  6.39k|        auto first = range.begin();
 1962|  6.39k|        for (; first != range.end(); ++first) {
 1963|  6.39k|            if (pred(*first)) {
 1964|  6.39k|                return first;
 1965|  6.39k|            }
 1966|  6.39k|        }
 1967|  6.39k|        return first;
 1968|  6.39k|    }
 1969|  6.39k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  42.2M|{
 2951|  42.2M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 42.2M, False: 0]
  ------------------
 2952|  42.2M|        auto it = read_while_classic_space(range);
 2953|  42.2M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  42.2M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  42.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.14k, False: 42.2M]
  |  |  ------------------
  ------------------
 2955|  6.14k|            return unexpected(e);
 2956|  6.14k|        }
 2957|       |
 2958|  42.2M|        return it;
 2959|  42.2M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  42.2M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  42.2M|{
 2117|  42.2M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  42.2M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  42.2M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  42.2M|        auto buf = make_contiguous_buffer(range);
 2121|  42.2M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  42.2M|        return ranges::next(range.begin(),
 2123|  42.2M|                            ranges::distance(buf.view().begin(), it));
 2124|  42.2M|    }
 2125|  42.2M|    else {
 2126|  42.2M|        auto it = range.begin();
 2127|       |
 2128|  42.2M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  42.2M|            auto seg = get_contiguous_beginning(range);
 2130|  42.2M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  42.2M|                seg_it != seg.end()) {
 2132|  42.2M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  42.2M|            }
 2134|  42.2M|            ranges::advance(it, seg.size());
 2135|  42.2M|        }
 2136|       |
 2137|  42.2M|        return read_while_code_point(
 2138|  42.2M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  42.2M|    }
 2140|  42.2M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  42.2M|{
 2082|  42.2M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  42.2M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  84.5M|{
 2061|  84.5M|    auto it = range.begin();
 2062|   484M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 484M, False: 16.9k]
  ------------------
 2063|   484M|        const auto val =
 2064|   484M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   484M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   484M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 484M, False: 0]
  |  |  ------------------
  ------------------
 2066|   484M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   484M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   484M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 84.5M, False: 399M]
  ------------------
 2069|  84.5M|                return it;
 2070|  84.5M|            }
 2071|   484M|        }
 2072|   399M|        it = val.iterator;
 2073|   399M|    }
 2074|       |
 2075|  16.9k|    return it;
 2076|  84.5M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  42.2M|    {
  754|  42.2M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   122M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122M|              cvref<T> obj = *get<T>(fn);
  745|   122M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   122M|                  obj(static_cast<decltype(args)>(args)...);
  747|   122M|              }
  748|   122M|              else {
  749|   122M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122M|              }
  751|   122M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   122M|    {
  684|   122M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   122M|            return static_cast<T*>(s.m_cp);
  686|   122M|        }
  687|   122M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   122M|            return static_cast<T*>(s.m_p);
  689|   122M|        }
  690|   122M|        else {
  691|   122M|            return reinterpret_cast<T*>(s.m_fp);
  692|   122M|        }
  693|   122M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   122M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  42.2M|        {
  662|  42.2M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  21.1M|    {
 1587|  21.1M|        return m_storage.has_value();
 1588|  21.1M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.74k|    {
 1592|  3.74k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.74k|        return *m_storage;
 1594|  3.74k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  63.4M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  25.4M|    {
 3040|  25.4M|        reader_error_handler eh{};
 3041|  25.4M|        get_derived().check_specs_impl(specs, eh);
 3042|  25.4M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  25.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 25.3M]
  |  |  ------------------
  ------------------
 3043|  9.48k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.48k|        }
 3045|  25.3M|        return {};
 3046|  25.4M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  25.4M|    {
 3051|  25.4M|        return static_cast<Derived&>(*this);
 3052|  25.4M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  25.4M|    {
 5210|  25.4M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  25.4M|        SCN_GCC_PUSH
 5213|  25.4M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  25.4M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  25.4M|        SCN_CLANG_PUSH
 5217|  25.4M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  25.4M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  25.4M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 25.4M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 25.4M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  25.3M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 25.3M, False: 19.0k]
  ------------------
 5226|  25.3M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 25.3M]
  ------------------
 5227|  25.3M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 25.3M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  25.3M|                else {
 5231|  25.3M|                    m_type = reader_type::word;
 5232|  25.3M|                }
 5233|  25.3M|                break;
 5234|      0|            }
 5235|       |
 5236|  9.48k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 9.48k, False: 25.3M]
  ------------------
 5237|  9.48k|                m_type = reader_type::character;
 5238|  9.48k|                break;
 5239|       |
 5240|  9.59k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 9.59k, False: 25.3M]
  ------------------
 5241|  9.59k|                m_type = reader_type::character_set;
 5242|  9.59k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 25.4M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 25.4M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  25.4M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  25.4M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  88.8M|    {
 5259|  88.8M|        return m_type == reader_type::word;
 5260|  88.8M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  63.4M|{
 1132|  63.4M|    auto it = src.begin();
 1133|   541M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 478M, False: 63.4M]
  ------------------
 1134|   478M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   478M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 478M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   478M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 478M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   478M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   478M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   478M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 10.3k, False: 478M]
  ------------------
 1144|  10.3k|            return false;
 1145|  10.3k|        }
 1146|   478M|        it += len;
 1147|   478M|    }
 1148|  63.4M|    return true;
 1149|  63.4M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  9.59k|        {
 5103|  9.59k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 9.59k, False: 0]
  ------------------
 5104|  9.59k|                return {};
 5105|  9.59k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  5.35k|        {
 5076|  5.35k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  5.35k|            const auto val =
 5078|  5.35k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  5.35k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  5.35k|                    (val % 8)) &
 5081|  5.35k|                   1u;
 5082|  5.35k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  9.64k|        {
 5129|  9.64k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.29k, False: 5.35k]
  ------------------
 5130|  4.29k|                return false;
 5131|  4.29k|            }
 5132|       |
 5133|  5.35k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.64k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  9.59k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  21.1M|{
 2088|  21.1M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  21.1M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  21.1M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  21.1M|        auto buf = make_contiguous_buffer(range);
 2092|  21.1M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  21.1M|        return ranges::next(range.begin(),
 2094|  21.1M|                            ranges::distance(buf.view().begin(), it));
 2095|  21.1M|    }
 2096|  21.1M|    else {
 2097|  21.1M|        auto it = range.begin();
 2098|       |
 2099|  21.1M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  21.1M|            auto seg = get_contiguous_beginning(range);
 2101|  21.1M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  21.1M|                seg_it != seg.end()) {
 2103|  21.1M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  21.1M|            }
 2105|  21.1M|            ranges::advance(it, seg.size());
 2106|  21.1M|        }
 2107|       |
 2108|  21.1M|        return read_until_code_point(
 2109|  21.1M|            ranges::subrange{it, range.end()},
 2110|  21.1M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  21.1M|    }
 2112|  21.1M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  42.2M|{
 2061|  42.2M|    auto it = range.begin();
 2062|   242M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 242M, False: 8.46k]
  ------------------
 2063|   242M|        const auto val =
 2064|   242M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   242M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   242M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 242M, False: 0]
  |  |  ------------------
  ------------------
 2066|   242M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   242M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   242M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 42.2M, False: 199M]
  ------------------
 2069|  42.2M|                return it;
 2070|  42.2M|            }
 2071|   242M|        }
 2072|   199M|        it = val.iterator;
 2073|   199M|    }
 2074|       |
 2075|  8.46k|    return it;
 2076|  42.2M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   242M|{
 1899|   242M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   242M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   242M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   242M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   242M|    auto it = range.begin();
 1903|   242M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   242M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   242M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 242M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   242M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 242M, False: 0]
  ------------------
 1912|   242M|        ++it;
 1913|   242M|        return {it, string_type(1, *range.begin())};
 1914|   242M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   242M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   242M|    {
 1890|   242M|        return !codepoint.empty();
 1891|   242M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  21.1M|    {
  754|  21.1M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   180M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180M|              cvref<T> obj = *get<T>(fn);
  745|   180M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   180M|                  obj(static_cast<decltype(args)>(args)...);
  747|   180M|              }
  748|   180M|              else {
  749|   180M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180M|              }
  751|   180M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   180M|    {
  684|   180M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   180M|            return static_cast<T*>(s.m_cp);
  686|   180M|        }
  687|   180M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   180M|            return static_cast<T*>(s.m_p);
  689|   180M|        }
  690|   180M|        else {
  691|   180M|            return reinterpret_cast<T*>(s.m_fp);
  692|   180M|        }
  693|   180M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   180M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  21.1M|        {
  662|  21.1M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  3.19k|    {
 5153|  3.19k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.19k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.19k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.19k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.19k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 3.19k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  3.19k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.19k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.19k|        };
 5178|       |
 5179|  3.19k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 3.19k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  3.19k|        auto it = read_while_code_unit(range, cb);
 5184|  3.19k|        return check_nonempty(it, range);
 5185|  3.19k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  3.19k|    {
 5191|  3.19k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.16k, False: 38]
  ------------------
 5192|  3.16k|            return unexpected_scan_error(
 5193|  3.16k|                scan_error::invalid_scanned_value,
 5194|  3.16k|                "No characters matched in [character set]");
 5195|  3.16k|        }
 5196|       |
 5197|     38|        return it;
 5198|  3.19k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  21.1M|{
 2082|  21.1M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  21.1M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  3.19k|    {
  754|  3.19k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  3.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.21k|              cvref<T> obj = *get<T>(fn);
  745|  3.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.21k|              }
  748|  3.21k|              else {
  749|  3.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.21k|              }
  751|  3.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.21k|    {
  684|  3.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.21k|            return static_cast<T*>(s.m_cp);
  686|  3.21k|        }
  687|  3.21k|        else if constexpr (std::is_object_v<T>) {
  688|  3.21k|            return static_cast<T*>(s.m_p);
  689|  3.21k|        }
  690|  3.21k|        else {
  691|  3.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.21k|        }
  693|  3.21k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  3.21k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.21k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.21k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  3.19k|        {
  667|  3.19k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  42.2M|{
 2088|  42.2M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  42.2M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  42.2M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  42.2M|        auto buf = make_contiguous_buffer(range);
 2092|  42.2M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  42.2M|        return ranges::next(range.begin(),
 2094|  42.2M|                            ranges::distance(buf.view().begin(), it));
 2095|  42.2M|    }
 2096|  42.2M|    else {
 2097|  42.2M|        auto it = range.begin();
 2098|       |
 2099|  42.2M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  42.2M|            auto seg = get_contiguous_beginning(range);
 2101|  42.2M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  42.2M|                seg_it != seg.end()) {
 2103|  42.2M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  42.2M|            }
 2105|  42.2M|            ranges::advance(it, seg.size());
 2106|  42.2M|        }
 2107|       |
 2108|  42.2M|        return read_until_code_point(
 2109|  42.2M|            ranges::subrange{it, range.end()},
 2110|  42.2M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  42.2M|    }
 2112|  42.2M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  42.2M|    {
  754|  42.2M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   361M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   361M|              cvref<T> obj = *get<T>(fn);
  745|   361M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   361M|                  obj(static_cast<decltype(args)>(args)...);
  747|   361M|              }
  748|   361M|              else {
  749|   361M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   361M|              }
  751|   361M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   361M|    {
  684|   361M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   361M|            return static_cast<T*>(s.m_cp);
  686|   361M|        }
  687|   361M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   361M|            return static_cast<T*>(s.m_p);
  689|   361M|        }
  690|   361M|        else {
  691|   361M|            return reinterpret_cast<T*>(s.m_fp);
  692|   361M|        }
  693|   361M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   361M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  42.2M|        {
  662|  42.2M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  6.39k|    {
 5153|  6.39k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.39k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.39k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.39k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.39k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 6.39k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  6.39k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.39k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.39k|        };
 5178|       |
 5179|  6.39k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 6.39k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  6.39k|        auto it = read_while_code_unit(range, cb);
 5184|  6.39k|        return check_nonempty(it, range);
 5185|  6.39k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  6.39k|    {
 5191|  6.39k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 6.32k, False: 76]
  ------------------
 5192|  6.32k|            return unexpected_scan_error(
 5193|  6.32k|                scan_error::invalid_scanned_value,
 5194|  6.32k|                "No characters matched in [character set]");
 5195|  6.32k|        }
 5196|       |
 5197|     76|        return it;
 5198|  6.39k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  6.39k|    {
  754|  6.39k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  6.43k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.43k|              cvref<T> obj = *get<T>(fn);
  745|  6.43k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.43k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.43k|              }
  748|  6.43k|              else {
  749|  6.43k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.43k|              }
  751|  6.43k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  6.43k|    {
  684|  6.43k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.43k|            return static_cast<T*>(s.m_cp);
  686|  6.43k|        }
  687|  6.43k|        else if constexpr (std::is_object_v<T>) {
  688|  6.43k|            return static_cast<T*>(s.m_p);
  689|  6.43k|        }
  690|  6.43k|        else {
  691|  6.43k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.43k|        }
  693|  6.43k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  6.43k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.43k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.43k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  6.39k|        {
  667|  6.39k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  8.46M|    {
 6178|  8.46M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  8.46M|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  8.46M|            auto rd = make_reader<T, char_type>();
 6183|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  8.46M|                return unexpected(e);
 6185|  8.46M|            }
 6186|       |
 6187|  8.46M|            return impl(rd, range, value);
 6188|  8.46M|        }
 6189|  8.46M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  8.46M|            auto rd = make_reader<T, char_type>();
 6191|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 8.46M]
  |  |  ------------------
  ------------------
 6192|  3.16k|                return unexpected(e);
 6193|  3.16k|            }
 6194|       |
 6195|  8.46M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 8.46M, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  8.46M|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  8.46M|                return impl(rd, range, value);
 6198|  8.46M|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  8.46M|        else {
 6206|  8.46M|            SCN_EXPECT(false);
 6207|  8.46M|            SCN_UNREACHABLE;
 6208|  8.46M|        }
 6209|  8.46M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  42.3M|{
 5809|  42.3M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  42.3M|        return reader_impl_for_bool<CharT>{};
 5811|  42.3M|    }
 5812|  42.3M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  42.3M|        return reader_impl_for_char<CharT>{};
 5814|  42.3M|    }
 5815|  42.3M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  42.3M|        return reader_impl_for_wchar<CharT>{};
 5817|  42.3M|    }
 5818|  42.3M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  42.3M|        return reader_impl_for_code_point<CharT>{};
 5820|  42.3M|    }
 5821|  42.3M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  42.3M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  42.3M|        return reader_impl_for_string<CharT>{};
 5824|  42.3M|    }
 5825|  42.3M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  42.3M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  42.3M|        return reader_impl_for_string<CharT>{};
 5828|  42.3M|    }
 5829|  42.3M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  42.3M|                       std::is_same_v<T, wregex_matches>) {
 5831|  42.3M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  42.3M|    }
 5833|  42.3M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  42.3M|        return reader_impl_for_voidptr<CharT>{};
 5835|  42.3M|    }
 5836|  42.3M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  42.3M|        return reader_impl_for_float<CharT>{};
 5838|  42.3M|    }
 5839|  42.3M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  42.3M|                       !std::is_same_v<T, wchar_t> &&
 5841|  42.3M|                       !std::is_same_v<T, char32_t> &&
 5842|  42.3M|                       !std::is_same_v<T, bool>) {
 5843|  42.3M|        return reader_impl_for_int<CharT>{};
 5844|  42.3M|    }
 5845|  42.3M|    else {
 5846|  42.3M|        return reader_impl_for_monostate<CharT>{};
 5847|  42.3M|    }
 5848|  42.3M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6119|  8.46M|    {
 6120|  8.46M|        const bool need_skipped_width =
 6121|  8.46M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 8.46M]
  |  Branch (6121:33): [True: 0, False: 8.46M]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  8.46M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  8.46M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.77k, False: 8.46M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.77k|    }                                                  \
  |  |  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  8.46M|        auto [it, prefix_width] = prefix_result;
 6126|  8.46M|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  8.46M|        std::ptrdiff_t value_width = 0;
 6130|  8.46M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 8.46M]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  8.46M|        else {
 6146|  8.46M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.54k, False: 8.45M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.54k|    }                                                  \
  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  8.45M|                                             specs, value, loc));
 6148|       |
 6149|  8.45M|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 8.45M]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  8.45M|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  8.45M|        std::ptrdiff_t postfix_width = 0;
 6158|  8.45M|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 8.45M, False: 918]
  ------------------
 6159|  8.45M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  8.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.45M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  8.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  8.45M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  8.45M|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  8.45M|                                 value_width));
 6163|  8.45M|            std::tie(it, postfix_width) = postfix_result;
 6164|  8.45M|        }
 6165|       |
 6166|  8.45M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  8.45M|                                                 value_width, postfix_width);
 6168|  8.45M|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 8.45M]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  8.45M|        return it;
 6173|  8.45M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  21.1M|{
 2993|  21.1M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  21.1M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.74k, False: 21.1M]
  ------------------
 2995|  3.74k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.74k|    static_cast<    \
  |  |  929|  3.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.74k|        }
 2997|  21.1M|        else {
 2998|  21.1M|            dest.assign(source.view());
 2999|  21.1M|        }
 3000|  21.1M|    }
 3001|  21.1M|    else {
 3002|  21.1M|        return transcode_impl(source.view(), dest);
 3003|  21.1M|    }
 3004|       |
 3005|  21.1M|    return {};
 3006|  21.1M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  8.46M|    {
 5277|  8.46M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.46M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.46M|        return read_impl(range, specs, value);
 5279|  8.46M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  8.46M|    {
 5295|  8.46M|        SCN_CLANG_PUSH
 5296|  8.46M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.46M|        switch (m_type) {
 5299|  8.45M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 8.45M, False: 3.19k]
  ------------------
 5300|  8.45M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 8.46M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.46M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.19k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.19k, False: 8.45M]
  ------------------
 5310|  3.19k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.19k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 8.46M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 8.46M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.46M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.46M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.46M|        }
 5331|       |
 5332|  8.46M|        SCN_CLANG_POP
 5333|  8.46M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  21.1M|    {
 4820|  21.1M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  21.1M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  21.1M|{
 4752|  21.1M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  21.1M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  21.1M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.46k, False: 21.1M]
  ------------------
 4756|  3.46k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.46k|                                     "Invalid encoding in scanned string");
 4758|  3.46k|    }
 4759|  21.1M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  21.1M|    static_cast<    \
  |  |  929|  21.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  21.1M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  21.1M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  21.1M|    static_cast<    \
  |  |  929|  21.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  21.1M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  3.19k|    {
 5048|  3.19k|        auto it = read_source_impl(range, {specs});
 5049|  3.19k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 38]
  |  |  ------------------
  ------------------
 5050|  3.16k|            return unexpected(it.error());
 5051|  3.16k|        }
 5052|       |
 5053|     38|        return read_string_impl(range, *it, value);
 5054|  3.19k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     38|{
 4752|     38|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     38|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     38|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 38]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     38|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     38|    static_cast<    \
  |  |  929|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     38|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     38|    return SCN_MOVE(result);
  ------------------
  |  |  928|     38|    static_cast<    \
  |  |  929|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     38|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  8.46M|    {
 5277|  8.46M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.46M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.46M|        return read_impl(range, specs, value);
 5279|  8.46M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  8.46M|    {
 5295|  8.46M|        SCN_CLANG_PUSH
 5296|  8.46M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.46M|        switch (m_type) {
 5299|  8.45M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 8.45M, False: 3.19k]
  ------------------
 5300|  8.45M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 8.46M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.46M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.19k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.19k, False: 8.45M]
  ------------------
 5310|  3.19k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.19k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 8.46M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 8.46M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.46M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.46M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.46M|        }
 5331|       |
 5332|  8.46M|        SCN_CLANG_POP
 5333|  8.46M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  21.1M|    {
 4820|  21.1M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  21.1M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  21.1M|{
 4752|  21.1M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  21.1M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  21.1M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.46k, False: 21.1M]
  ------------------
 4756|  3.46k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.46k|                                     "Invalid encoding in scanned string");
 4758|  3.46k|    }
 4759|  21.1M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  21.1M|    static_cast<    \
  |  |  929|  21.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  21.1M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  21.1M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  21.1M|    static_cast<    \
  |  |  929|  21.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  21.1M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  21.1M|{
 3012|  21.1M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  21.1M|        dest.assign(source.view());
 3014|  21.1M|    }
 3015|  21.1M|    else {
 3016|  21.1M|        return transcode_impl(source.view(), dest);
 3017|  21.1M|    }
 3018|       |
 3019|  21.1M|    return {};
 3020|  21.1M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  3.19k|    {
 5048|  3.19k|        auto it = read_source_impl(range, {specs});
 5049|  3.19k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 38]
  |  |  ------------------
  ------------------
 5050|  3.16k|            return unexpected(it.error());
 5051|  3.16k|        }
 5052|       |
 5053|     38|        return read_string_impl(range, *it, value);
 5054|  3.19k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     38|{
 4752|     38|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     38|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     38|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 38]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     38|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     38|    static_cast<    \
  |  |  929|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     38|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     38|    return SCN_MOVE(result);
  ------------------
  |  |  928|     38|    static_cast<    \
  |  |  929|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     38|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  21.1M|{
 5809|  21.1M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  21.1M|        return reader_impl_for_bool<CharT>{};
 5811|  21.1M|    }
 5812|  21.1M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  21.1M|        return reader_impl_for_char<CharT>{};
 5814|  21.1M|    }
 5815|  21.1M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  21.1M|        return reader_impl_for_wchar<CharT>{};
 5817|  21.1M|    }
 5818|  21.1M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  21.1M|        return reader_impl_for_code_point<CharT>{};
 5820|  21.1M|    }
 5821|  21.1M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  21.1M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  21.1M|        return reader_impl_for_string<CharT>{};
 5824|  21.1M|    }
 5825|  21.1M|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  21.1M|                       std::is_same_v<T, std::wstring>) {
 5827|  21.1M|        return reader_impl_for_string<CharT>{};
 5828|  21.1M|    }
 5829|  21.1M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  21.1M|                       std::is_same_v<T, wregex_matches>) {
 5831|  21.1M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  21.1M|    }
 5833|  21.1M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  21.1M|        return reader_impl_for_voidptr<CharT>{};
 5835|  21.1M|    }
 5836|  21.1M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  21.1M|        return reader_impl_for_float<CharT>{};
 5838|  21.1M|    }
 5839|  21.1M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  21.1M|                       !std::is_same_v<T, wchar_t> &&
 5841|  21.1M|                       !std::is_same_v<T, char32_t> &&
 5842|  21.1M|                       !std::is_same_v<T, bool>) {
 5843|  21.1M|        return reader_impl_for_int<CharT>{};
 5844|  21.1M|    }
 5845|  21.1M|    else {
 5846|  21.1M|        return reader_impl_for_monostate<CharT>{};
 5847|  21.1M|    }
 5848|  21.1M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  8.46M|    {
 5277|  8.46M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.46M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.46M|        return read_impl(range, specs, value);
 5279|  8.46M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  8.46M|    {
 5295|  8.46M|        SCN_CLANG_PUSH
 5296|  8.46M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.46M|        switch (m_type) {
 5299|  8.45M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 8.45M, False: 3.19k]
  ------------------
 5300|  8.45M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 8.46M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.46M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.19k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.19k, False: 8.45M]
  ------------------
 5310|  3.19k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.19k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 8.46M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 8.46M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.46M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.46M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.46M|        }
 5331|       |
 5332|  8.46M|        SCN_CLANG_POP
 5333|  8.46M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  21.1M|    {
 4827|  21.1M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  21.1M|                                     value);
 4829|  21.1M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  21.1M|{
 4773|  21.1M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  21.1M|    auto src = [&]() {
 4776|  21.1M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  21.1M|            return make_contiguous_buffer(
 4778|  21.1M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  21.1M|        }
 4780|  21.1M|        else {
 4781|  21.1M|            return make_contiguous_buffer(
 4782|  21.1M|                ranges::subrange{range.begin(), result});
 4783|  21.1M|        }
 4784|  21.1M|    }();
 4785|  21.1M|    using src_type = decltype(src);
 4786|       |
 4787|  21.1M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  21.1M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  21.1M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  21.1M|                                     "Cannot read a string_view from "
 4796|  21.1M|                                     "this source range (would require "
 4797|  21.1M|                                     "transcoding)");
 4798|  21.1M|    }
 4799|  21.1M|    else {
 4800|  21.1M|        const auto view = src.view();
 4801|  21.1M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  21.1M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.46k, False: 21.1M]
  ------------------
 4804|  3.46k|            return unexpected_scan_error(
 4805|  3.46k|                scan_error::invalid_scanned_value,
 4806|  3.46k|                "Invalid encoding in scanned string_view");
 4807|  3.46k|        }
 4808|       |
 4809|  21.1M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  21.1M|    static_cast<    \
  |  |  929|  21.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  21.1M|    }
 4811|  21.1M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  21.1M|    auto src = [&]() {
 4776|  21.1M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  21.1M|            return make_contiguous_buffer(
 4778|  21.1M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  21.1M|        }
 4780|  21.1M|        else {
 4781|  21.1M|            return make_contiguous_buffer(
 4782|  21.1M|                ranges::subrange{range.begin(), result});
 4783|  21.1M|        }
 4784|  21.1M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  3.19k|    {
 5062|  3.19k|        auto it = read_source_impl(range, {specs});
 5063|  3.19k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 38]
  |  |  ------------------
  ------------------
 5064|  3.16k|            return unexpected(it.error());
 5065|  3.16k|        }
 5066|       |
 5067|     38|        return read_string_view_impl(range, *it, value);
 5068|  3.19k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     38|{
 4773|     38|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     38|    auto src = [&]() {
 4776|     38|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     38|            return make_contiguous_buffer(
 4778|     38|                ranges::subrange{range.begin().base(), result.base()});
 4779|     38|        }
 4780|     38|        else {
 4781|     38|            return make_contiguous_buffer(
 4782|     38|                ranges::subrange{range.begin(), result});
 4783|     38|        }
 4784|     38|    }();
 4785|     38|    using src_type = decltype(src);
 4786|       |
 4787|     38|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     38|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     38|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     38|                                     "Cannot read a string_view from "
 4796|     38|                                     "this source range (would require "
 4797|     38|                                     "transcoding)");
 4798|     38|    }
 4799|     38|    else {
 4800|     38|        const auto view = src.view();
 4801|     38|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     38|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 38]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     38|        return SCN_MOVE(result);
  ------------------
  |  |  928|     38|    static_cast<    \
  |  |  929|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     38|    }
 4811|     38|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     38|    auto src = [&]() {
 4776|     38|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     38|            return make_contiguous_buffer(
 4778|     38|                ranges::subrange{range.begin().base(), result.base()});
 4779|     38|        }
 4780|     38|        else {
 4781|     38|            return make_contiguous_buffer(
 4782|     38|                ranges::subrange{range.begin(), result});
 4783|     38|        }
 4784|     38|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  21.1M|{
 2951|  21.1M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 21.1M, False: 0]
  ------------------
 2952|  21.1M|        auto it = read_while_classic_space(range);
 2953|  21.1M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  21.1M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.07k, False: 21.1M]
  |  |  ------------------
  ------------------
 2955|  3.07k|            return unexpected(e);
 2956|  3.07k|        }
 2957|       |
 2958|  21.1M|        return it;
 2959|  21.1M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  21.1M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  21.1M|{
 2117|  21.1M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  21.1M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  21.1M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  21.1M|        auto buf = make_contiguous_buffer(range);
 2121|  21.1M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  21.1M|        return ranges::next(range.begin(),
 2123|  21.1M|                            ranges::distance(buf.view().begin(), it));
 2124|  21.1M|    }
 2125|  21.1M|    else {
 2126|  21.1M|        auto it = range.begin();
 2127|       |
 2128|  21.1M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  21.1M|            auto seg = get_contiguous_beginning(range);
 2130|  21.1M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  21.1M|                seg_it != seg.end()) {
 2132|  21.1M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  21.1M|            }
 2134|  21.1M|            ranges::advance(it, seg.size());
 2135|  21.1M|        }
 2136|       |
 2137|  21.1M|        return read_while_code_point(
 2138|  21.1M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  21.1M|    }
 2140|  21.1M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  21.1M|    {
  754|  21.1M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  61.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.2M|              cvref<T> obj = *get<T>(fn);
  745|  61.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  61.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.2M|              }
  748|  61.2M|              else {
  749|  61.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.2M|              }
  751|  61.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  61.2M|    {
  684|  61.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  61.2M|            return static_cast<T*>(s.m_cp);
  686|  61.2M|        }
  687|  61.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  61.2M|            return static_cast<T*>(s.m_p);
  689|  61.2M|        }
  690|  61.2M|        else {
  691|  61.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  61.2M|        }
  693|  61.2M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  61.2M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  21.1M|        {
  662|  21.1M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   189k|{
 5795|   189k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.12k, False: 188k]
  |  |  ------------------
  ------------------
 5796|  1.12k|        return unexpected(e);
 5797|  1.12k|    }
 5798|       |
 5799|   188k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 188k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   188k|    return skip_classic_whitespace(range);
 5804|   188k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  94.9k|    {
 5871|  94.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  94.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  94.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  94.9k|            auto rd = make_reader<T, char_type>();
 5876|  94.9k|            return impl(rd, range, value);
 5877|  94.9k|        }
 5878|  94.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  94.9k|            auto rd = make_reader<T, char_type>();
 5880|  94.9k|            if (!is_segment_contiguous(range)) {
 5881|  94.9k|                return impl(rd, range, value);
 5882|  94.9k|            }
 5883|  94.9k|            auto crange = get_as_contiguous(range);
 5884|  94.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  94.9k|            return ranges::next(range.begin(),
 5886|  94.9k|                                ranges::distance(crange.begin(), it));
 5887|  94.9k|        }
 5888|  94.9k|        else {
 5889|  94.9k|            SCN_EXPECT(false);
 5890|  94.9k|            SCN_UNREACHABLE;
 5891|  94.9k|        }
 5892|  94.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  94.9k|    {
 5863|  94.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  94.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.52k, False: 93.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.52k|    }                                                  \
  |  |  |  | 3667|  94.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  93.4k|                        .transform_error(make_eof_scan_error));
 5865|  93.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  94.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  93.4k|    {
 5266|  93.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  93.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  93.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  93.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  94.9k|    {
 5871|  94.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  94.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  94.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  94.9k|            auto rd = make_reader<T, char_type>();
 5876|  94.9k|            return impl(rd, range, value);
 5877|  94.9k|        }
 5878|  94.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  94.9k|            auto rd = make_reader<T, char_type>();
 5880|  94.9k|            if (!is_segment_contiguous(range)) {
 5881|  94.9k|                return impl(rd, range, value);
 5882|  94.9k|            }
 5883|  94.9k|            auto crange = get_as_contiguous(range);
 5884|  94.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  94.9k|            return ranges::next(range.begin(),
 5886|  94.9k|                                ranges::distance(crange.begin(), it));
 5887|  94.9k|        }
 5888|  94.9k|        else {
 5889|  94.9k|            SCN_EXPECT(false);
 5890|  94.9k|            SCN_UNREACHABLE;
 5891|  94.9k|        }
 5892|  94.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  94.9k|    {
 5863|  94.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  94.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.52k, False: 93.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.52k|    }                                                  \
  |  |  |  | 3667|  94.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  93.4k|                        .transform_error(make_eof_scan_error));
 5865|  93.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  94.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  93.4k|    {
 5266|  93.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  93.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  93.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  93.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  96.3k|{
 5795|  96.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 591, False: 95.7k]
  |  |  ------------------
  ------------------
 5796|    591|        return unexpected(e);
 5797|    591|    }
 5798|       |
 5799|  95.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 95.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  95.7k|    return skip_classic_whitespace(range);
 5804|  95.7k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  96.3k|    {
 5871|  96.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  96.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  96.3k|            auto rd = make_reader<T, char_type>();
 5876|  96.3k|            return impl(rd, range, value);
 5877|  96.3k|        }
 5878|  96.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  96.3k|            auto rd = make_reader<T, char_type>();
 5880|  96.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 96.3k, False: 0]
  ------------------
 5881|  96.3k|                return impl(rd, range, value);
 5882|  96.3k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  96.3k|        else {
 5889|  96.3k|            SCN_EXPECT(false);
 5890|  96.3k|            SCN_UNREACHABLE;
 5891|  96.3k|        }
 5892|  96.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  96.3k|    {
 5863|  96.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.54k, False: 94.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.54k|    }                                                  \
  |  |  |  | 3667|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  94.7k|                        .transform_error(make_eof_scan_error));
 5865|  94.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  96.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  94.7k|    {
 5266|  94.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  94.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  94.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  94.7k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   140k|    {
 2879|   140k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   400k|    {
 2883|   400k|        return m_current;
 2884|   400k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   259k|    {
 2888|   259k|        return m_range.end();
 2889|   259k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   125k|    {
 2903|   125k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   125k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   125k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 125k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   125k|        }
 2909|   125k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   125k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   134k|    {
 2893|   134k|        return ranges::subrange{begin(), end()};
 2894|   134k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   131k|    {
 6037|   131k|        const bool need_skipped_width =
 6038|   131k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 131k]
  |  Branch (6038:33): [True: 0, False: 131k]
  ------------------
 6039|   131k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   131k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 131k]
  ------------------
 6043|   131k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 131k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   131k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 131k, False: 0]
  |  Branch (6047:56): [True: 126k, False: 4.84k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   126k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 126k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   251k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.02k|    }                                                  \
  |  |  |  | 3667|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   251k|                            make_eof_scan_error));
 6058|       |
 6059|   251k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 124k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   124k|            return result_type{it, 0};
 6067|   251k|        }
 6068|       |
 6069|  4.84k|        return result_type{rng.begin(), 0};
 6070|   131k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   124k|    {
 6079|   124k|        const bool need_skipped_width =
 6080|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 124k]
  |  Branch (6080:33): [True: 0, False: 124k]
  ------------------
 6081|   124k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   124k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 124k]
  ------------------
 6084|   124k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 124k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|   124k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 124k, False: 0]
  ------------------
 6089|   124k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 1.64k, False: 122k]
  ------------------
 6090|   124k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 1.64k]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|  1.64k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 1.64k]
  ------------------
 6092|  1.64k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|   124k|        return result_type{rng.begin(), 0};
 6114|   124k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  67.3k|    {
 6178|  67.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  67.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  67.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  67.3k|            auto rd = make_reader<T, char_type>();
 6183|  67.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 65.7k]
  |  |  ------------------
  ------------------
 6184|  1.58k|                return unexpected(e);
 6185|  1.58k|            }
 6186|       |
 6187|  65.7k|            return impl(rd, range, value);
 6188|  67.3k|        }
 6189|  67.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  67.3k|            auto rd = make_reader<T, char_type>();
 6191|  67.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  67.3k|                return unexpected(e);
 6193|  67.3k|            }
 6194|       |
 6195|  67.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  67.3k|                specs.width != 0) {
 6197|  67.3k|                return impl(rd, range, value);
 6198|  67.3k|            }
 6199|       |
 6200|  67.3k|            auto crange = get_as_contiguous(range);
 6201|  67.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  67.3k|            return ranges::next(range.begin(),
 6203|  67.3k|                                ranges::distance(crange.begin(), it));
 6204|  67.3k|        }
 6205|  67.3k|        else {
 6206|  67.3k|            SCN_EXPECT(false);
 6207|  67.3k|            SCN_UNREACHABLE;
 6208|  67.3k|        }
 6209|  67.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  65.7k|    {
 6120|  65.7k|        const bool need_skipped_width =
 6121|  65.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 65.7k]
  |  Branch (6121:33): [True: 0, False: 65.7k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  65.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 64.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|  65.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  64.7k|        auto [it, prefix_width] = prefix_result;
 6126|  64.7k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  64.7k|        std::ptrdiff_t value_width = 0;
 6130|  64.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 64.7k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  64.7k|        else {
 6146|  64.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 62.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.14k|    }                                                  \
  |  | 3667|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  62.5k|                                             specs, value, loc));
 6148|       |
 6149|  62.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 62.5k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  62.5k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  62.5k|        std::ptrdiff_t postfix_width = 0;
 6158|  62.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 62.1k, False: 392]
  ------------------
 6159|  62.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  62.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  62.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  62.1k|                                 value_width));
 6163|  62.1k|            std::tie(it, postfix_width) = postfix_result;
 6164|  62.1k|        }
 6165|       |
 6166|  62.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  62.5k|                                                 value_width, postfix_width);
 6168|  62.5k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 62.5k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  62.5k|        return it;
 6173|  62.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  67.3k|    {
 6178|  67.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  67.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  67.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  67.3k|            auto rd = make_reader<T, char_type>();
 6183|  67.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 65.7k]
  |  |  ------------------
  ------------------
 6184|  1.58k|                return unexpected(e);
 6185|  1.58k|            }
 6186|       |
 6187|  65.7k|            return impl(rd, range, value);
 6188|  67.3k|        }
 6189|  67.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  67.3k|            auto rd = make_reader<T, char_type>();
 6191|  67.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  67.3k|                return unexpected(e);
 6193|  67.3k|            }
 6194|       |
 6195|  67.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  67.3k|                specs.width != 0) {
 6197|  67.3k|                return impl(rd, range, value);
 6198|  67.3k|            }
 6199|       |
 6200|  67.3k|            auto crange = get_as_contiguous(range);
 6201|  67.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  67.3k|            return ranges::next(range.begin(),
 6203|  67.3k|                                ranges::distance(crange.begin(), it));
 6204|  67.3k|        }
 6205|  67.3k|        else {
 6206|  67.3k|            SCN_EXPECT(false);
 6207|  67.3k|            SCN_UNREACHABLE;
 6208|  67.3k|        }
 6209|  67.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  65.7k|    {
 6120|  65.7k|        const bool need_skipped_width =
 6121|  65.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 65.7k]
  |  Branch (6121:33): [True: 0, False: 65.7k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  65.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 64.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|  65.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  64.7k|        auto [it, prefix_width] = prefix_result;
 6126|  64.7k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  64.7k|        std::ptrdiff_t value_width = 0;
 6130|  64.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 64.7k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  64.7k|        else {
 6146|  64.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 62.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.14k|    }                                                  \
  |  | 3667|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  62.5k|                                             specs, value, loc));
 6148|       |
 6149|  62.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 62.5k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  62.5k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  62.5k|        std::ptrdiff_t postfix_width = 0;
 6158|  62.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 62.1k, False: 392]
  ------------------
 6159|  62.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  62.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  62.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  62.1k|                                 value_width));
 6163|  62.1k|            std::tie(it, postfix_width) = postfix_result;
 6164|  62.1k|        }
 6165|       |
 6166|  62.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  62.5k|                                                 value_width, postfix_width);
 6168|  62.5k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 62.5k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  62.5k|        return it;
 6173|  62.5k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  25.3M|{
 5795|  25.3M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  25.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 25.3M]
  |  |  ------------------
  ------------------
 5796|  2.72k|        return unexpected(e);
 5797|  2.72k|    }
 5798|       |
 5799|  25.3M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 25.3M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  25.3M|    return skip_classic_whitespace(range);
 5804|  25.3M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6M|    {
 5871|  12.6M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.6M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.6M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6M|            auto rd = make_reader<T, char_type>();
 5876|  12.6M|            return impl(rd, range, value);
 5877|  12.6M|        }
 5878|  12.6M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6M|            auto rd = make_reader<T, char_type>();
 5880|  12.6M|            if (!is_segment_contiguous(range)) {
 5881|  12.6M|                return impl(rd, range, value);
 5882|  12.6M|            }
 5883|  12.6M|            auto crange = get_as_contiguous(range);
 5884|  12.6M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.6M|            return ranges::next(range.begin(),
 5886|  12.6M|                                ranges::distance(crange.begin(), it));
 5887|  12.6M|        }
 5888|  12.6M|        else {
 5889|  12.6M|            SCN_EXPECT(false);
 5890|  12.6M|            SCN_UNREACHABLE;
 5891|  12.6M|        }
 5892|  12.6M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  12.6M|    {
 5863|  12.6M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  12.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.66k, False: 12.6M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.66k|    }                                                  \
  |  |  |  | 3667|  12.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6M|                        .transform_error(make_eof_scan_error));
 5865|  12.6M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  12.6M|    {
 5266|  12.6M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.6M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.6M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6M|    {
 5871|  12.6M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.6M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  12.6M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6M|            auto rd = make_reader<T, char_type>();
 5876|  12.6M|            return impl(rd, range, value);
 5877|  12.6M|        }
 5878|  12.6M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6M|            auto rd = make_reader<T, char_type>();
 5880|  12.6M|            if (!is_segment_contiguous(range)) {
 5881|  12.6M|                return impl(rd, range, value);
 5882|  12.6M|            }
 5883|  12.6M|            auto crange = get_as_contiguous(range);
 5884|  12.6M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  12.6M|            return ranges::next(range.begin(),
 5886|  12.6M|                                ranges::distance(crange.begin(), it));
 5887|  12.6M|        }
 5888|  12.6M|        else {
 5889|  12.6M|            SCN_EXPECT(false);
 5890|  12.6M|            SCN_UNREACHABLE;
 5891|  12.6M|        }
 5892|  12.6M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  12.6M|    {
 5863|  12.6M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  12.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.66k, False: 12.6M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.66k|    }                                                  \
  |  |  |  | 3667|  12.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6M|                        .transform_error(make_eof_scan_error));
 5865|  12.6M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  12.6M|    {
 5266|  12.6M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.6M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.6M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  16.9M|    {
 2879|  16.9M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  50.7M|    {
 2883|  50.7M|        return m_current;
 2884|  50.7M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  33.8M|    {
 2888|  33.8M|        return m_range.end();
 2889|  33.8M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  16.9M|    {
 2903|  16.9M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  16.9M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  16.9M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 16.9M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  16.9M|        }
 2909|  16.9M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  16.9M|    static_cast<    \
  |  |  929|  16.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  16.9M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  16.9M|    {
 2893|  16.9M|        return ranges::subrange{begin(), end()};
 2894|  16.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  16.9M|    {
 6037|  16.9M|        const bool need_skipped_width =
 6038|  16.9M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 16.9M]
  |  Branch (6038:33): [True: 0, False: 16.9M]
  ------------------
 6039|  16.9M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  16.9M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 16.9M]
  ------------------
 6043|  16.9M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 16.9M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  16.9M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 16.9M, False: 0]
  |  Branch (6047:56): [True: 16.9M, False: 6.39k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  16.9M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 16.9M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  33.8M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  16.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.54k, False: 16.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.54k|    }                                                  \
  |  |  |  | 3667|  16.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  33.8M|                            make_eof_scan_error));
 6058|       |
 6059|  33.8M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 16.9M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  16.9M|            return result_type{it, 0};
 6067|  33.8M|        }
 6068|       |
 6069|  6.39k|        return result_type{rng.begin(), 0};
 6070|  16.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  16.9M|    {
 6079|  16.9M|        const bool need_skipped_width =
 6080|  16.9M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 16.9M]
  |  Branch (6080:33): [True: 0, False: 16.9M]
  ------------------
 6081|  16.9M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  16.9M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 16.9M]
  ------------------
 6084|  16.9M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 16.9M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  16.9M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 16.9M, False: 0]
  ------------------
 6089|  16.9M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 56, False: 16.9M]
  ------------------
 6090|  16.9M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 56]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|     56|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 56]
  ------------------
 6092|     56|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  16.9M|        return result_type{rng.begin(), 0};
 6114|  16.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  8.46M|    {
 6178|  8.46M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  8.46M|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  8.46M|                          basic_contiguous_scan_context<char_type>>) {
 6182|  8.46M|            auto rd = make_reader<T, char_type>();
 6183|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 8.46M]
  |  |  ------------------
  ------------------
 6184|  3.16k|                return unexpected(e);
 6185|  3.16k|            }
 6186|       |
 6187|  8.46M|            return impl(rd, range, value);
 6188|  8.46M|        }
 6189|  8.46M|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  8.46M|            auto rd = make_reader<T, char_type>();
 6191|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  8.46M|                return unexpected(e);
 6193|  8.46M|            }
 6194|       |
 6195|  8.46M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  8.46M|                specs.width != 0) {
 6197|  8.46M|                return impl(rd, range, value);
 6198|  8.46M|            }
 6199|       |
 6200|  8.46M|            auto crange = get_as_contiguous(range);
 6201|  8.46M|            SCN_TRY(it, impl(rd, crange, value));
 6202|  8.46M|            return ranges::next(range.begin(),
 6203|  8.46M|                                ranges::distance(crange.begin(), it));
 6204|  8.46M|        }
 6205|  8.46M|        else {
 6206|  8.46M|            SCN_EXPECT(false);
 6207|  8.46M|            SCN_UNREACHABLE;
 6208|  8.46M|        }
 6209|  8.46M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  8.46M|    {
 6120|  8.46M|        const bool need_skipped_width =
 6121|  8.46M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 8.46M]
  |  Branch (6121:33): [True: 0, False: 8.46M]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  8.46M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  8.46M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.77k, False: 8.46M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.77k|    }                                                  \
  |  |  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  8.46M|        auto [it, prefix_width] = prefix_result;
 6126|  8.46M|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  8.46M|        std::ptrdiff_t value_width = 0;
 6130|  8.46M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 8.46M]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  8.46M|        else {
 6146|  8.46M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.54k, False: 8.45M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.54k|    }                                                  \
  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  8.45M|                                             specs, value, loc));
 6148|       |
 6149|  8.45M|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 8.45M]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  8.45M|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  8.45M|        std::ptrdiff_t postfix_width = 0;
 6158|  8.45M|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 8.45M, False: 918]
  ------------------
 6159|  8.45M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  8.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.45M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  8.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  8.45M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  8.45M|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  8.45M|                                 value_width));
 6163|  8.45M|            std::tie(it, postfix_width) = postfix_result;
 6164|  8.45M|        }
 6165|       |
 6166|  8.45M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  8.45M|                                                 value_width, postfix_width);
 6168|  8.45M|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 8.45M]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  8.45M|        return it;
 6173|  8.45M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  8.46M|    {
 6178|  8.46M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  8.46M|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  8.46M|                          basic_contiguous_scan_context<char_type>>) {
 6182|  8.46M|            auto rd = make_reader<T, char_type>();
 6183|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 8.46M]
  |  |  ------------------
  ------------------
 6184|  3.16k|                return unexpected(e);
 6185|  3.16k|            }
 6186|       |
 6187|  8.46M|            return impl(rd, range, value);
 6188|  8.46M|        }
 6189|  8.46M|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  8.46M|            auto rd = make_reader<T, char_type>();
 6191|  8.46M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  8.46M|                return unexpected(e);
 6193|  8.46M|            }
 6194|       |
 6195|  8.46M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  8.46M|                specs.width != 0) {
 6197|  8.46M|                return impl(rd, range, value);
 6198|  8.46M|            }
 6199|       |
 6200|  8.46M|            auto crange = get_as_contiguous(range);
 6201|  8.46M|            SCN_TRY(it, impl(rd, crange, value));
 6202|  8.46M|            return ranges::next(range.begin(),
 6203|  8.46M|                                ranges::distance(crange.begin(), it));
 6204|  8.46M|        }
 6205|  8.46M|        else {
 6206|  8.46M|            SCN_EXPECT(false);
 6207|  8.46M|            SCN_UNREACHABLE;
 6208|  8.46M|        }
 6209|  8.46M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  8.46M|    {
 6120|  8.46M|        const bool need_skipped_width =
 6121|  8.46M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 8.46M]
  |  Branch (6121:33): [True: 0, False: 8.46M]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  8.46M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  8.46M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.77k, False: 8.46M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.77k|    }                                                  \
  |  |  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  8.46M|        auto [it, prefix_width] = prefix_result;
 6126|  8.46M|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  8.46M|        std::ptrdiff_t value_width = 0;
 6130|  8.46M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 8.46M]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  8.46M|        else {
 6146|  8.46M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  8.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  8.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.54k, False: 8.45M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.54k|    }                                                  \
  |  | 3667|  8.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  8.45M|                                             specs, value, loc));
 6148|       |
 6149|  8.45M|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 8.45M]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  8.45M|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  8.45M|        std::ptrdiff_t postfix_width = 0;
 6158|  8.45M|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 8.45M, False: 918]
  ------------------
 6159|  8.45M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  8.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.45M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  8.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  8.45M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  8.45M|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  8.45M|                                 value_width));
 6163|  8.45M|            std::tie(it, postfix_width) = postfix_result;
 6164|  8.45M|        }
 6165|       |
 6166|  8.45M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  8.45M|                                                 value_width, postfix_width);
 6168|  8.45M|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 8.45M]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  8.45M|        return it;
 6173|  8.45M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  12.6M|{
 5795|  12.6M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 12.6M]
  |  |  ------------------
  ------------------
 5796|  1.36k|        return unexpected(e);
 5797|  1.36k|    }
 5798|       |
 5799|  12.6M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 12.6M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  12.6M|    return skip_classic_whitespace(range);
 5804|  12.6M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6M|    {
 5871|  12.6M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  12.6M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6M|            auto rd = make_reader<T, char_type>();
 5876|  12.6M|            return impl(rd, range, value);
 5877|  12.6M|        }
 5878|  12.6M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  12.6M|            auto rd = make_reader<T, char_type>();
 5880|  12.6M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6M, False: 0]
  ------------------
 5881|  12.6M|                return impl(rd, range, value);
 5882|  12.6M|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  12.6M|        else {
 5889|  12.6M|            SCN_EXPECT(false);
 5890|  12.6M|            SCN_UNREACHABLE;
 5891|  12.6M|        }
 5892|  12.6M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  12.6M|    {
 5863|  12.6M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  12.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.66k, False: 12.6M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.66k|    }                                                  \
  |  |  |  | 3667|  12.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6M|                        .transform_error(make_eof_scan_error));
 5865|  12.6M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  12.6M|    {
 5266|  12.6M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  12.6M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  12.6M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    790|{
   52|    790|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    790|    string_buffer.resize(size);
   56|    790|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    790|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    790|    const auto wsv_reinterpret_size =
   61|    790|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 78, False: 712]
  ------------------
   62|    790|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    790|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    790|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    790|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    790|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    790|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    790|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    790|{
  122|    790|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    790|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    790|    buf.resize(sizeof...(Args));
  125|    790|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    790|    return buf;
  127|    790|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    790|{
  108|    790|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    790|        return format_string_view_buffer;
  110|    790|    }
  111|    790|    else {
  112|    790|        return wformat_string_view_buffer;
  113|    790|    }
  114|    790|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    790|{
  185|    790|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    790|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    790|                                   format_strings);
  188|    790|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    790|{
  133|       |    // Regular scan
  134|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.74k, False: 790]
  ------------------
  135|  4.74k|        auto it = scn::ranges::begin(source);
  136|  66.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  66.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  66.8k|            auto result = scn::scan<T>(
  139|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  66.8k|                scn::runtime_format(f));
  141|  66.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.74k, False: 62.1k]
  ------------------
  142|  4.74k|                break;
  143|  4.74k|            }
  144|  62.1k|            it = result->begin();
  145|  62.1k|        }
  146|  4.74k|    }
  147|       |
  148|       |    // scan localized
  149|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.74k, False: 790]
  ------------------
  150|  4.74k|        auto it = scn::ranges::begin(source);
  151|  66.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  66.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  66.8k|            auto result = scn::scan<T>(
  154|  66.8k|                global_locale,
  155|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  66.8k|                scn::runtime_format(f));
  157|  66.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.74k, False: 62.1k]
  ------------------
  158|  4.74k|                break;
  159|  4.74k|            }
  160|  62.1k|            it = result->begin();
  161|  62.1k|        }
  162|  4.74k|    }
  163|       |
  164|       |    // scan_value
  165|    790|    {
  166|    790|        auto it = scn::ranges::begin(source);
  167|  31.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.6k|            auto result = scn::scan_value<T>(
  170|  31.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 790, False: 30.8k]
  ------------------
  172|    790|                break;
  173|    790|            }
  174|  30.8k|            it = result->begin();
  175|  30.8k|        }
  176|    790|    }
  177|    790|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    790|{
  133|       |    // Regular scan
  134|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.74k, False: 790]
  ------------------
  135|  4.74k|        auto it = scn::ranges::begin(source);
  136|  66.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  66.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  66.8k|            auto result = scn::scan<T>(
  139|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  66.8k|                scn::runtime_format(f));
  141|  66.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.74k, False: 62.1k]
  ------------------
  142|  4.74k|                break;
  143|  4.74k|            }
  144|  62.1k|            it = result->begin();
  145|  62.1k|        }
  146|  4.74k|    }
  147|       |
  148|       |    // scan localized
  149|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.74k, False: 790]
  ------------------
  150|  4.74k|        auto it = scn::ranges::begin(source);
  151|  66.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  66.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  66.8k|            auto result = scn::scan<T>(
  154|  66.8k|                global_locale,
  155|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  66.8k|                scn::runtime_format(f));
  157|  66.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.74k, False: 62.1k]
  ------------------
  158|  4.74k|                break;
  159|  4.74k|            }
  160|  62.1k|            it = result->begin();
  161|  62.1k|        }
  162|  4.74k|    }
  163|       |
  164|       |    // scan_value
  165|    790|    {
  166|    790|        auto it = scn::ranges::begin(source);
  167|  31.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.6k|            auto result = scn::scan_value<T>(
  170|  31.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 790, False: 30.8k]
  ------------------
  172|    790|                break;
  173|    790|            }
  174|  30.8k|            it = result->begin();
  175|  30.8k|        }
  176|    790|    }
  177|    790|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    790|{
  133|       |    // Regular scan
  134|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.74k, False: 790]
  ------------------
  135|  4.74k|        auto it = scn::ranges::begin(source);
  136|  67.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.6k|            auto result = scn::scan<T>(
  139|  67.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.6k|                scn::runtime_format(f));
  141|  67.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.74k, False: 62.9k]
  ------------------
  142|  4.74k|                break;
  143|  4.74k|            }
  144|  62.9k|            it = result->begin();
  145|  62.9k|        }
  146|  4.74k|    }
  147|       |
  148|       |    // scan localized
  149|  4.74k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.74k, False: 790]
  ------------------
  150|  4.74k|        auto it = scn::ranges::begin(source);
  151|  67.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.6k|            auto result = scn::scan<T>(
  154|  67.6k|                global_locale,
  155|  67.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.6k|                scn::runtime_format(f));
  157|  67.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.74k, False: 62.9k]
  ------------------
  158|  4.74k|                break;
  159|  4.74k|            }
  160|  62.9k|            it = result->begin();
  161|  62.9k|        }
  162|  4.74k|    }
  163|       |
  164|       |    // scan_value
  165|    790|    {
  166|    790|        auto it = scn::ranges::begin(source);
  167|  32.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  32.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  32.1k|            auto result = scn::scan_value<T>(
  170|  32.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  32.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 790, False: 31.3k]
  ------------------
  172|    790|                break;
  173|    790|            }
  174|  31.3k|            it = result->begin();
  175|  31.3k|        }
  176|    790|    }
  177|    790|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    790|{
   90|    790|    using char_type = ranges::range_value_t<Source>;
   91|    790|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    790|    deque.clear();
   93|    790|    std::copy(ranges::begin(source), ranges::end(source),
   94|    790|              std::back_inserter(deque));
   95|    790|    return deque;
   96|    790|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    790|{
   79|    790|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    790|        return noncontiguous_buffer;
   81|    790|    }
   82|    790|    else {
   83|    790|        return wnoncontiguous_buffer;
   84|    790|    }
   85|    790|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    790|{
  122|    790|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    790|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    790|    buf.resize(sizeof...(Args));
  125|    790|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    790|    return buf;
  127|    790|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    790|{
  108|    790|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    790|        return format_string_view_buffer;
  110|    790|    }
  111|    790|    else {
  112|    790|        return wformat_string_view_buffer;
  113|    790|    }
  114|    790|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.58k|{
  185|  1.58k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.58k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.58k|                                   format_strings);
  188|  1.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.58k|{
  133|       |    // Regular scan
  134|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.48k, False: 1.58k]
  ------------------
  135|  9.48k|        auto it = scn::ranges::begin(source);
  136|  8.46M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  8.46M|            auto result = scn::scan<T>(
  139|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  8.46M|                scn::runtime_format(f));
  141|  8.46M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.48k, False: 8.45M]
  ------------------
  142|  9.48k|                break;
  143|  9.48k|            }
  144|  8.45M|            it = result->begin();
  145|  8.45M|        }
  146|  9.48k|    }
  147|       |
  148|       |    // scan localized
  149|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.48k, False: 1.58k]
  ------------------
  150|  9.48k|        auto it = scn::ranges::begin(source);
  151|  8.46M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  8.46M|            auto result = scn::scan<T>(
  154|  8.46M|                global_locale,
  155|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  8.46M|                scn::runtime_format(f));
  157|  8.46M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.48k, False: 8.45M]
  ------------------
  158|  9.48k|                break;
  159|  9.48k|            }
  160|  8.45M|            it = result->begin();
  161|  8.45M|        }
  162|  9.48k|    }
  163|       |
  164|       |    // scan_value
  165|  1.58k|    {
  166|  1.58k|        auto it = scn::ranges::begin(source);
  167|  4.23M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.23M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.23M|            auto result = scn::scan_value<T>(
  170|  4.23M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.23M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.58k, False: 4.22M]
  ------------------
  172|  1.58k|                break;
  173|  1.58k|            }
  174|  4.22M|            it = result->begin();
  175|  4.22M|        }
  176|  1.58k|    }
  177|  1.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.58k|{
  133|       |    // Regular scan
  134|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.48k, False: 1.58k]
  ------------------
  135|  9.48k|        auto it = scn::ranges::begin(source);
  136|  8.46M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  8.46M|            auto result = scn::scan<T>(
  139|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  8.46M|                scn::runtime_format(f));
  141|  8.46M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.48k, False: 8.45M]
  ------------------
  142|  9.48k|                break;
  143|  9.48k|            }
  144|  8.45M|            it = result->begin();
  145|  8.45M|        }
  146|  9.48k|    }
  147|       |
  148|       |    // scan localized
  149|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.48k, False: 1.58k]
  ------------------
  150|  9.48k|        auto it = scn::ranges::begin(source);
  151|  8.46M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  8.46M|            auto result = scn::scan<T>(
  154|  8.46M|                global_locale,
  155|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  8.46M|                scn::runtime_format(f));
  157|  8.46M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.48k, False: 8.45M]
  ------------------
  158|  9.48k|                break;
  159|  9.48k|            }
  160|  8.45M|            it = result->begin();
  161|  8.45M|        }
  162|  9.48k|    }
  163|       |
  164|       |    // scan_value
  165|  1.58k|    {
  166|  1.58k|        auto it = scn::ranges::begin(source);
  167|  4.23M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.23M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.23M|            auto result = scn::scan_value<T>(
  170|  4.23M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.23M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.58k, False: 4.22M]
  ------------------
  172|  1.58k|                break;
  173|  1.58k|            }
  174|  4.22M|            it = result->begin();
  175|  4.22M|        }
  176|  1.58k|    }
  177|  1.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.58k|{
  133|       |    // Regular scan
  134|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.48k, False: 1.58k]
  ------------------
  135|  9.48k|        auto it = scn::ranges::begin(source);
  136|  8.46M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  8.46M|            auto result = scn::scan<T>(
  139|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  8.46M|                scn::runtime_format(f));
  141|  8.46M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.48k, False: 8.45M]
  ------------------
  142|  9.48k|                break;
  143|  9.48k|            }
  144|  8.45M|            it = result->begin();
  145|  8.45M|        }
  146|  9.48k|    }
  147|       |
  148|       |    // scan localized
  149|  9.48k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.48k, False: 1.58k]
  ------------------
  150|  9.48k|        auto it = scn::ranges::begin(source);
  151|  8.46M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  8.46M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  8.46M|            auto result = scn::scan<T>(
  154|  8.46M|                global_locale,
  155|  8.46M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  8.46M|                scn::runtime_format(f));
  157|  8.46M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.48k, False: 8.45M]
  ------------------
  158|  9.48k|                break;
  159|  9.48k|            }
  160|  8.45M|            it = result->begin();
  161|  8.45M|        }
  162|  9.48k|    }
  163|       |
  164|       |    // scan_value
  165|  1.58k|    {
  166|  1.58k|        auto it = scn::ranges::begin(source);
  167|  4.23M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.23M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.23M|            auto result = scn::scan_value<T>(
  170|  4.23M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.23M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.58k, False: 4.22M]
  ------------------
  172|  1.58k|                break;
  173|  1.58k|            }
  174|  4.22M|            it = result->begin();
  175|  4.22M|        }
  176|  1.58k|    }
  177|  1.58k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.58k|{
   90|  1.58k|    using char_type = ranges::range_value_t<Source>;
   91|  1.58k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.58k|    deque.clear();
   93|  1.58k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.58k|              std::back_inserter(deque));
   95|  1.58k|    return deque;
   96|  1.58k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.58k|{
   79|  1.58k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.58k|        return noncontiguous_buffer;
   81|  1.58k|    }
   82|  1.58k|    else {
   83|  1.58k|        return wnoncontiguous_buffer;
   84|  1.58k|    }
   85|  1.58k|}

LLVMFuzzerTestOneInput:
   57|    791|{
   58|    791|    scn::fuzz::run(data, size);
   59|    791|    return 0;
   60|    791|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    791|{
   36|    791|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 790]
  |  Branch (36:35): [True: 0, False: 790]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    790|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    790|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    790|                                             "{:64U}", "{:[A-Za-z]}");
   44|    790|    do_basic_run(sv, f);
   45|       |
   46|    790|    const auto& wf = get_format_strings<wchar_t>(
   47|    790|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    790|    do_basic_run(wsv_reinterpret, wf);
   49|    790|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 790, False: 0]
  ------------------
   50|    790|        do_basic_run(wsv_transcode, wf);
   51|    790|    }
   52|    790|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    790|{
   25|    790|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    790|                                                           format_strings);
   27|    790|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    790|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    790|            source, format_strings);
   30|    790|    }
   31|    790|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    790|{
   25|    790|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    790|                                                           format_strings);
   27|    790|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    790|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    790|            source, format_strings);
   30|    790|    }
   31|    790|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.58k|{
   25|  1.58k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.58k|                                                           format_strings);
   27|  1.58k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.58k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.58k|            source, format_strings);
   30|  1.58k|    }
   31|  1.58k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.58k|{
   25|  1.58k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.58k|                                                           format_strings);
   27|  1.58k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.58k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.58k|            source, format_strings);
   30|  1.58k|    }
   31|  1.58k|}

