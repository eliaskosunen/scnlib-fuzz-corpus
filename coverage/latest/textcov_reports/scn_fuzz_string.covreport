_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|  3.82M|{
 4067|  3.82M|    if constexpr (sizeof(U) == 1) {
 4068|  3.82M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|  3.82M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|  3.82M|{
 4031|  3.82M|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|  3.82M|    SCN_GCC_COMPAT_PUSH
 4034|  3.82M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|  3.82M|    constexpr char lengths[] =
 4036|  3.82M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|  3.82M|        "\1\1\1\1\1\1\1\1"
 4038|  3.82M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|  3.82M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|  3.82M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|  3.82M|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|  3.82M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|  3.82M|    SCN_GCC_COMPAT_POP
 4045|  3.82M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|  3.67M|{
 4273|  3.67M|    if constexpr (sizeof(CharT) == 1) {
 4274|  3.67M|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|  3.67M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|  3.67M|{
 4086|  3.67M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|  3.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|  3.67M|    const auto is_trailing_code_unit = [](char ch) {
 4089|  3.67M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  3.67M|    };
 4091|       |
 4092|  3.67M|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 3.31M, False: 361k]
  ------------------
 4093|  3.31M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 287, False: 3.31M]
  ------------------
 4094|    287|            SCN_UNLIKELY_ATTR
 4095|    287|            return invalid_code_point;
 4096|    287|        }
 4097|  3.31M|        return static_cast<char32_t>(input[0]);
 4098|  3.31M|    }
 4099|       |
 4100|   361k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 109k, False: 252k]
  ------------------
 4101|   109k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 204, False: 108k]
  ------------------
 4102|    204|            SCN_UNLIKELY_ATTR
 4103|    204|            return invalid_code_point;
 4104|    204|        }
 4105|   108k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 9.52k, False: 99.3k]
  ------------------
 4106|  9.52k|            SCN_UNLIKELY_ATTR
 4107|  9.52k|            return invalid_code_point;
 4108|  9.52k|        }
 4109|       |
 4110|  99.3k|        char32_t cp{};
 4111|  99.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|  99.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|  99.3k|        return cp;
 4114|   108k|    }
 4115|       |
 4116|   252k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 243k, False: 9.17k]
  ------------------
 4117|   243k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 32, False: 243k]
  ------------------
 4118|     32|            SCN_UNLIKELY_ATTR
 4119|     32|            return invalid_code_point;
 4120|     32|        }
 4121|   243k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 2.33k, False: 241k]
  ------------------
 4122|   243k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 1.02k, False: 240k]
  ------------------
 4123|  3.35k|            SCN_UNLIKELY_ATTR
 4124|  3.35k|            return invalid_code_point;
 4125|  3.35k|        }
 4126|       |
 4127|   240k|        char32_t cp{};
 4128|   240k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|   240k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|   240k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|   240k|        return cp;
 4132|   243k|    }
 4133|       |
 4134|  9.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 9.17k, False: 0]
  ------------------
 4135|  9.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 9.17k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  9.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 2.05k, False: 7.11k]
  ------------------
 4140|  2.05k|            SCN_UNLIKELY_ATTR
 4141|  2.05k|            return invalid_code_point;
 4142|  2.05k|        }
 4143|  7.11k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 2.44k, False: 4.67k]
  ------------------
 4144|  7.11k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 183, False: 4.48k]
  ------------------
 4145|  7.11k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 130, False: 4.35k]
  ------------------
 4146|  2.75k|            SCN_UNLIKELY_ATTR
 4147|  2.75k|            return invalid_code_point;
 4148|  2.75k|        }
 4149|       |
 4150|  4.35k|        char32_t cp{};
 4151|  4.35k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|  4.35k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|  4.35k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|  4.35k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|  4.35k|        return cp;
 4156|  7.11k|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|   609k|    const auto is_trailing_code_unit = [](char ch) {
 4089|   609k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|   609k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|  3.19M|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|  3.19M|    else {
 3965|  3.19M|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|  3.19M|                                       to_address(first), to_address(last)))};
 3967|  3.19M|    }
 3968|  3.19M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  9.95M|{
  316|  9.95M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  9.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  9.95M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  11.1M|{
  294|  11.1M|    return p;
  295|  11.1M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|  1.63M|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|  1.63M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|  1.63M|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|  1.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|  1.63M|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|  1.63M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  24.1k|    {
 2868|  24.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  24.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  24.1k|    {
 2849|  24.1k|        return decay_copy(t.begin());
 2850|  24.1k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|  1.98M|{
 2093|  1.98M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.98M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   423k|    {
 2925|   423k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   423k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   423k|    {
 2907|   423k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   423k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9760|  43.0k|{
 9761|  43.0k|    auto result = make_scan_result<Source, Args...>();
 9762|  43.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  43.0k|                                   make_scan_args(result->values())));
 9764|  43.0k|    return result;
 9765|  43.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9716|   105k|{
 9717|   105k|    return scan_result_type<Source, Args...>();
 9718|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   105k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   105k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   105k|    {
  613|   105k|        construct();
  614|   105k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   105k|    {
  694|   105k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   105k|        m_has_value = true;
  696|   105k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   105k|{
  396|   105k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   105k|        T(std::forward<Args>(args)...);
  398|   105k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6623|   105k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|   211k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|   211k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6397|   239k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   504k|    {
  718|   504k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   504k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   504k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|   105k|{
 9702|   105k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.6k, False: 93.9k]
  |  |  ------------------
  ------------------
 9703|  11.6k|        out = unexpected(in.error());
 9704|  11.6k|    }
 9705|  93.9k|    else {
 9706|  93.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  93.9k|    static_cast<    \
  |  | 1056|  93.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  93.9k|    }
 9708|   105k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|   211k|    {
 1739|   211k|        return has_value();
 1740|   211k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   422k|    {
  490|   422k|        return m_has_value;
  491|   422k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  23.2k|    {
 1745|  23.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  23.2k|        return this->get_unexpected().error();
 1747|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.2k|    {
  473|  23.2k|        return m_unexpected;
  474|  23.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.00M|    {
  365|  1.00M|        return m_unexpected;
  366|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   438k|        : m_unexpected(std::forward<Err>(e))
  350|   438k|    {
  351|   438k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   438k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   438k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  11.6k|        : base(unexpect, std::move(e.error())),
 1615|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.6k|    {
 1617|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  69.7k|{
  396|  69.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  69.7k|        T(std::forward<Args>(args)...);
  398|  69.7k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   575k|        : m_unexpected(std::forward<Args>(args)...)
  359|   575k|    {
  360|   575k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   575k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   575k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.6k|    {
 1315|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  11.6k|    {
  902|  11.6k|        assign_common(std::move(other));
  903|  11.6k|        return *this;
  904|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  11.6k|    {
  949|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 11.6k, False: 0]
  ------------------
  950|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 11.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  11.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   539k|    {
  687|   539k|        return m_has_value;
  688|   539k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   293k|    {
  653|   293k|        return *value_ptr();
  654|   293k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  11.6k|    {
 1045|  11.6k|        this->destroy_value();
 1046|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   105k|    {
  708|   105k|        scn::detail::destroy_at(value_ptr());
  709|   105k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   105k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   105k|    else {
  408|   105k|        p->~T();
  409|   105k|    }
  410|   105k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6630|   105k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   104k|{
  396|   104k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   104k|        T(std::forward<Args>(args)...);
  398|   104k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   139k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   139k|    else {
  408|   139k|        p->~T();
  409|   139k|    }
  410|   139k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|   187k|    {
 6498|   187k|        m_range = std::forward<Other>(r);
 6499|   187k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|   187k|    {
 1794|   187k|        return value();
 1795|   187k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   187k|    {
 1768|   187k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   187k|        return this->get_value();
 1770|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   187k|    {
  456|   187k|        return m_value;
  457|   187k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9522|  86.0k|{
 9523|  86.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  86.0k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  86.0k|{
 9460|  86.0k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  86.0k|    auto result = vscan_impl(buffer, format, args);
 9463|  86.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 75.2k]
  |  |  ------------------
  ------------------
 9464|  10.7k|        return unexpected(result.error());
 9465|  10.7k|    }
 9466|  75.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  86.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5379|   211k|{
 5380|   211k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   211k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   211k|                  "\n"
 5384|   211k|                  "Unsupported range type given as input to a scanning "
 5385|   211k|                  "function.\n"
 5386|   211k|                  "A range needs to have a character type (value type) "
 5387|   211k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   211k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   211k|                  "to be included.\n"
 5390|   211k|                  "See the scnlib documentation for more details.");
 5391|   211k|    static_assert(
 5392|   211k|        !std::is_same_v<T, custom_char_traits>,
 5393|   211k|        "\n"
 5394|   211k|        "Unsupported range type given as input to a scanning "
 5395|   211k|        "function.\n"
 5396|   211k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   211k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   211k|        "not supported.");
 5399|   211k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   211k|                  "\n"
 5401|   211k|                  "Unsupported range type given as input to a scanning "
 5402|   211k|                  "function.\n"
 5403|   211k|                  "file_marker_found cannot be used as an "
 5404|   211k|                  "source range type to scn::scan.\n"
 5405|   211k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   211k|                  "and do not provide an explicit source range, "
 5407|   211k|                  "or use scn::scan with a FILE* directly.");
 5408|   211k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   211k|                  "\n"
 5410|   211k|                  "Unsupported range type given as input to a scanning "
 5411|   211k|                  "function.\n"
 5412|   211k|                  "In order to be scannable, a range needs to satisfy "
 5413|   211k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   211k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   211k|                  "\n"
 5416|   211k|                  "Unsupported range type given as input to a scanning "
 5417|   211k|                  "function.\n"
 5418|   211k|                  "A range needs to model forward_range and have a valid "
 5419|   211k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   211k|                  "Examples of scannable ranges are std::string, "
 5421|   211k|                  "std::string_view, "
 5422|   211k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   211k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   211k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   211k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   211k|{
 5319|   211k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   211k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   211k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   211k|    {
 2999|   211k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   211k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   211k|    {
 2980|   211k|        return t.data();
 2981|   211k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3381|   211k|    {
 3382|   211k|        return detail::to_address(ranges::begin(derived()));
 3383|   211k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.22M|{
  316|  1.22M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.22M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   399k|    {
 2868|   399k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   399k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   399k|    {
 2849|   399k|        return decay_copy(t.begin());
 2850|   399k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  2.51M|    {
 3479|  2.51M|        return m_iterator;
 3480|  2.51M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3337|   211k|    {
 3338|   211k|        return static_cast<const D&>(*this);
 3339|   211k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   211k|    {
 3074|   211k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   211k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   211k|    {
 3040|   211k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   211k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|  2.52M|{
 2093|  2.52M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  2.52M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   885k|    {
 3495|   885k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   885k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|  3.62M|    {
 1739|  3.62M|        return has_value();
 1740|  3.62M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.21M|    {
  490|  7.21M|        return m_has_value;
  491|  7.21M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|   104k|    {
 1745|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   104k|        return this->get_unexpected().error();
 1747|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   104k|    {
  473|   104k|        return m_unexpected;
  474|   104k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  23.2k|        : base(unexpect, std::move(e.error())),
 1615|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.2k|    {
 1617|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   211k|    {
 1315|   211k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|   187k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   187k|                      ranges::iterator_t<SourceRange>>) {
 6730|   187k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   187k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   955k|    {
 2868|   955k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   955k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   955k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   955k|    {
 2849|   955k|        return decay_copy(t.begin());
 2850|   955k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6714|   187k|{
 6715|   187k|    return ranges::end(source);
 6716|   187k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   187k|    {
 2925|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   187k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   187k|    {
 2907|   187k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   187k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|  1.20M|    {
 3483|  1.20M|        return m_sentinel;
 3484|  1.20M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|  3.48M|    {
 1794|  3.48M|        return value();
 1795|  3.48M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|  3.48M|    {
 1768|  3.48M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.48M|        return this->get_value();
 1770|  3.48M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.48M|    {
  456|  3.48M|        return m_value;
  457|  3.48M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   187k|        : base(std::in_place, std::forward<U>(val)),
 1569|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   187k|    {
 1571|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   187k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   187k|    {
  442|   187k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8797|  86.0k|    {
 8798|  86.0k|        return m_str;
 8799|  86.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|   194k|{
 6127|   194k|    detail::check_scan_arg_types<Args...>();
 6128|   194k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   194k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5841|   239k|{
 5842|   239k|    constexpr bool default_constructible_constraint =
 5843|   239k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   239k|    static_assert(default_constructible_constraint,
 5845|   239k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   239k|    constexpr bool destructible_constraint =
 5848|   239k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   239k|    static_assert(destructible_constraint,
 5850|   239k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   239k|    constexpr bool non_reference_constraint =
 5853|   239k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   239k|    static_assert(non_reference_constraint,
 5855|   239k|                  "Scan argument types must not be references");
 5856|       |
 5857|   239k|    constexpr bool movable_constraint =
 5858|   239k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   239k|    static_assert(movable_constraint,
 5860|   239k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   239k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   239k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   239k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|   194k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   194k|    {
 6104|   194k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|   194k|    {
 6112|   194k|        return {detail::make_arg<
 6113|   194k|            kind, Context,
 6114|   194k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   194k|                                 typename Context::char_type>::value>(args)...};
 6116|   194k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE23ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5891|   194k|{
 5892|   194k|    return make_value<Context>(value).ref_value;
 5893|   194k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5826|   239k|{
 5827|   239k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   239k|                                  needs_context_tag>) {
 5831|   239k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   239k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5660|   239k|    {                                                                        \
 5661|   239k|        return val;                                                          \
 5662|   239k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5795|   239k|{
 5796|   239k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   239k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   239k|    constexpr bool scannable_char =
 5800|   239k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   239k|    static_assert(scannable_char,
 5802|   239k|                  "Cannot scan an argument of an unsupported character "
 5803|   239k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   239k|    constexpr bool scannable_const =
 5806|   239k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   239k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   239k|    constexpr bool scannable_disabled =
 5810|   239k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   239k|    static_assert(scannable_disabled,
 5812|   239k|                  "Cannot scan an argument that has been disabled by "
 5813|   239k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   239k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   239k|    static_assert(
 5817|   239k|        scannable,
 5818|   239k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   239k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   239k|    return arg_value{arg};
 5822|   239k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5603|   239k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   239k|    {
 5605|   239k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6406|   194k|    {
 6407|   194k|        return m_values;
 6408|   194k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   194k|        : basic_scan_args(store.desc, store.args.data())
 6153|   194k|    {
 6154|   194k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6204|   280k|        : m_desc(desc), m_builtin_values(data)
 6205|   280k|    {
 6206|   280k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  1.45M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.45M|    static_cast<    \
  |  | 1056|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.45M|    static_cast<    \
  |  | 1056|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.45M|    {
 3465|  1.45M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|   280k|{
 8459|   280k|    return s;
 8460|   280k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|   280k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  86.0k|        : m_str(r.str)
 8793|  86.0k|    {
 8794|  86.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   105k|    {
 1739|   105k|        return has_value();
 1740|   105k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1813|   293k|    {
 1814|   293k|        return &value();
 1815|   293k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|   293k|    {
 1768|   293k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   293k|        return this->get_value();
 1770|   293k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6486|   187k|    {
 6487|   187k|        return ranges::begin(m_range);
 6488|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   117k|    {
  643|   117k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 93.9k, False: 23.2k]
  ------------------
  644|  93.9k|            destroy_value();
  645|  93.9k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|   117k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9829|  43.0k|{
 9830|  43.0k|    auto result = make_scan_result<Source, Args...>();
 9831|  43.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  43.0k|                                   make_scan_args(result->values())));
 9833|  43.0k|    return result;
 9834|  43.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9540|  86.0k|{
 9541|  86.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  86.0k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  86.0k|{
 9476|  86.0k|#if !SCN_DISABLE_LOCALE
 9477|  86.0k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  86.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  86.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  86.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  86.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 75.2k]
  |  |  ------------------
  ------------------
 9484|  10.7k|        return unexpected(result.error());
 9485|  10.7k|    }
 9486|  75.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  86.0k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9870|  19.5k|{
 9871|  19.5k|    auto result = make_scan_result<Source, T>();
 9872|  19.5k|    fill_scan_result(
 9873|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  19.5k|                            detail::make_arg<scan_context>(result->value())));
 9875|  19.5k|    return result;
 9876|  19.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9553|  39.0k|{
 9554|  39.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  39.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  39.0k|{
 9500|  39.0k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  39.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  39.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 37.3k]
  |  |  ------------------
  ------------------
 9504|  1.78k|        return unexpected(result.error());
 9505|  1.78k|    }
 9506|  37.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  39.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5876|  44.6k|{
 5877|  44.6k|    check_scan_arg_types<T>();
 5878|       |
 5879|  44.6k|    basic_scan_arg<Context> arg;
 5880|  44.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  44.6k|    arg.m_value = make_value<Context>(value);
 5882|  44.6k|    return arg;
 5883|  44.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|   344k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|  2.70M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  44.6k|    {
 6429|  44.6k|        return std::get<0>(m_values);
 6430|  44.6k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9760|  43.0k|{
 9761|  43.0k|    auto result = make_scan_result<Source, Args...>();
 9762|  43.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  43.0k|                                   make_scan_args(result->values())));
 9764|  43.0k|    return result;
 9765|  43.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9716|   105k|{
 9717|   105k|    return scan_result_type<Source, Args...>();
 9718|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   105k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   105k|        : m_value(T{}), m_has_value(true)
  427|   105k|    {
  428|   105k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6623|   105k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6397|   105k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9701|   105k|{
 9702|   105k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.6k, False: 93.9k]
  |  |  ------------------
  ------------------
 9703|  11.6k|        out = unexpected(in.error());
 9704|  11.6k|    }
 9705|  93.9k|    else {
 9706|  93.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  93.9k|    static_cast<    \
  |  | 1056|  93.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  93.9k|    }
 9708|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|  11.6k|        : base(unexpect, std::move(e.error())),
 1615|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.6k|    {
 1617|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.6k|    {
 1315|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1555|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  901|  11.6k|    {
  902|  11.6k|        assign_common(std::move(other));
  903|  11.6k|        return *this;
  904|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  948|  11.6k|    {
  949|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 11.6k, False: 0]
  ------------------
  950|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 11.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  11.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   422k|    {
  490|   422k|        return m_has_value;
  491|   422k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   293k|    {
  456|   293k|        return m_value;
  457|   293k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1044|  11.6k|    {
 1045|  11.6k|        this->destroy_value();
 1046|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  11.6k|    {
  504|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.6k|                                  std::forward<Args>(args)...);
  506|  11.6k|        m_has_value = false;
  507|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.6k|    {
  481|  11.6k|        return std::move(m_unexpected);
  482|  11.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8797|  86.0k|    {
 8798|  86.0k|        return m_str;
 8799|  86.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  86.0k|{
 6127|  86.0k|    detail::check_scan_arg_types<Args...>();
 6128|  86.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  86.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5841|   105k|{
 5842|   105k|    constexpr bool default_constructible_constraint =
 5843|   105k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   105k|    static_assert(default_constructible_constraint,
 5845|   105k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   105k|    constexpr bool destructible_constraint =
 5848|   105k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   105k|    static_assert(destructible_constraint,
 5850|   105k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   105k|    constexpr bool non_reference_constraint =
 5853|   105k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   105k|    static_assert(non_reference_constraint,
 5855|   105k|                  "Scan argument types must not be references");
 5856|       |
 5857|   105k|    constexpr bool movable_constraint =
 5858|   105k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   105k|    static_assert(movable_constraint,
 5860|   105k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   105k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   105k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   105k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6102|  86.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  86.0k|    {
 6104|  86.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  86.0k|    {
 6112|  86.0k|        return {detail::make_arg<
 6113|  86.0k|            kind, Context,
 6114|  86.0k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  86.0k|                                 typename Context::char_type>::value>(args)...};
 6116|  86.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5891|  86.0k|{
 5892|  86.0k|    return make_value<Context>(value).ref_value;
 5893|  86.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5826|   105k|{
 5827|   105k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   105k|                                  needs_context_tag>) {
 5831|   105k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   105k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5660|   105k|    {                                                                        \
 5661|   105k|        return val;                                                          \
 5662|   105k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5795|   105k|{
 5796|   105k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   105k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   105k|    constexpr bool scannable_char =
 5800|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   105k|    static_assert(scannable_char,
 5802|   105k|                  "Cannot scan an argument of an unsupported character "
 5803|   105k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   105k|    constexpr bool scannable_const =
 5806|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   105k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   105k|    constexpr bool scannable_disabled =
 5810|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   105k|    static_assert(scannable_disabled,
 5812|   105k|                  "Cannot scan an argument that has been disabled by "
 5813|   105k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   105k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   105k|    static_assert(
 5817|   105k|        scannable,
 5818|   105k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   105k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   105k|    return arg_value{arg};
 5822|   105k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5603|   105k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   105k|    {
 5605|   105k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6406|  86.0k|    {
 6407|  86.0k|        return m_values;
 6408|  86.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  86.0k|        : basic_scan_args(store.desc, store.args.data())
 6153|  86.0k|    {
 6154|  86.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  86.0k|        : m_str(r.str)
 8793|  86.0k|    {
 8794|  86.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   105k|    {
 1739|   105k|        return has_value();
 1740|   105k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1813|   293k|    {
 1814|   293k|        return &value();
 1815|   293k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|   293k|    {
 1768|   293k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   293k|        return this->get_value();
 1770|   293k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9829|  43.0k|{
 9830|  43.0k|    auto result = make_scan_result<Source, Args...>();
 9831|  43.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  43.0k|                                   make_scan_args(result->values())));
 9833|  43.0k|    return result;
 9834|  43.0k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9870|  19.5k|{
 9871|  19.5k|    auto result = make_scan_result<Source, T>();
 9872|  19.5k|    fill_scan_result(
 9873|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  19.5k|                            detail::make_arg<scan_context>(result->value())));
 9875|  19.5k|    return result;
 9876|  19.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5876|  19.5k|{
 5877|  19.5k|    check_scan_arg_types<T>();
 5878|       |
 5879|  19.5k|    basic_scan_arg<Context> arg;
 5880|  19.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  19.5k|    arg.m_value = make_value<Context>(value);
 5882|  19.5k|    return arg;
 5883|  19.5k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  19.5k|    {
 6429|  19.5k|        return std::get<0>(m_values);
 6430|  19.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  11.6k|    {
 2868|  11.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  11.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  11.6k|    {
 2849|  11.6k|        return decay_copy(t.begin());
 2850|  11.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2092|  5.25M|{
 2093|  5.25M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  5.25M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   267k|    {
 2925|   267k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   267k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   267k|    {
 2907|   267k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   267k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9760|  54.2k|{
 9761|  54.2k|    auto result = make_scan_result<Source, Args...>();
 9762|  54.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  54.2k|                                   make_scan_args(result->values())));
 9764|  54.2k|    return result;
 9765|  54.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9716|   133k|{
 9717|   133k|    return scan_result_type<Source, Args...>();
 9718|   133k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   133k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   133k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   133k|    {
  613|   133k|        construct();
  614|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   133k|    {
  694|   133k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   133k|        m_has_value = true;
  696|   133k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   133k|{
  396|   133k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   133k|        T(std::forward<Args>(args)...);
  398|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6623|   133k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6466|   133k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3458|   133k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   645k|    {
  718|   645k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   645k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   645k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9701|   133k|{
 9702|   133k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.6k, False: 122k]
  |  |  ------------------
  ------------------
 9703|  11.6k|        out = unexpected(in.error());
 9704|  11.6k|    }
 9705|   122k|    else {
 9706|   122k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   122k|    static_cast<    \
  |  | 1056|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   122k|    }
 9708|   133k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  11.6k|    {
 1745|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  11.6k|        return this->get_unexpected().error();
 1747|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1614|  11.6k|        : base(unexpect, std::move(e.error())),
 1615|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.6k|    {
 1617|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.6k|    {
 1315|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1555|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  901|  11.6k|    {
  902|  11.6k|        assign_common(std::move(other));
  903|  11.6k|        return *this;
  904|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  948|  11.6k|    {
  949|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 11.6k, False: 0]
  ------------------
  950|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 11.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  11.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   679k|    {
  687|   679k|        return m_has_value;
  688|   679k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   377k|    {
  653|   377k|        return *value_ptr();
  654|   377k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1044|  11.6k|    {
 1045|  11.6k|        this->destroy_value();
 1046|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   133k|    {
  708|   133k|        scn::detail::destroy_at(value_ptr());
  709|   133k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   133k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   133k|    else {
  408|   133k|        p->~T();
  409|   133k|    }
  410|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6630|   133k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6497|   122k|    {
 6498|   122k|        m_range = std::forward<Other>(r);
 6499|   122k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|   122k|    {
 1794|   122k|        return value();
 1795|   122k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|   122k|    {
 1768|   122k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   122k|        return this->get_value();
 1770|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   122k|    {
  456|   122k|        return m_value;
  457|   122k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9522|  54.2k|{
 9523|  54.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  54.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  54.2k|{
 9460|  54.2k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  54.2k|    auto result = vscan_impl(buffer, format, args);
 9463|  54.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.36k, False: 48.9k]
  |  |  ------------------
  ------------------
 9464|  5.36k|        return unexpected(result.error());
 9465|  5.36k|    }
 9466|  48.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  54.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5379|   133k|{
 5380|   133k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   133k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   133k|                  "\n"
 5384|   133k|                  "Unsupported range type given as input to a scanning "
 5385|   133k|                  "function.\n"
 5386|   133k|                  "A range needs to have a character type (value type) "
 5387|   133k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   133k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   133k|                  "to be included.\n"
 5390|   133k|                  "See the scnlib documentation for more details.");
 5391|   133k|    static_assert(
 5392|   133k|        !std::is_same_v<T, custom_char_traits>,
 5393|   133k|        "\n"
 5394|   133k|        "Unsupported range type given as input to a scanning "
 5395|   133k|        "function.\n"
 5396|   133k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   133k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   133k|        "not supported.");
 5399|   133k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   133k|                  "\n"
 5401|   133k|                  "Unsupported range type given as input to a scanning "
 5402|   133k|                  "function.\n"
 5403|   133k|                  "file_marker_found cannot be used as an "
 5404|   133k|                  "source range type to scn::scan.\n"
 5405|   133k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   133k|                  "and do not provide an explicit source range, "
 5407|   133k|                  "or use scn::scan with a FILE* directly.");
 5408|   133k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   133k|                  "\n"
 5410|   133k|                  "Unsupported range type given as input to a scanning "
 5411|   133k|                  "function.\n"
 5412|   133k|                  "In order to be scannable, a range needs to satisfy "
 5413|   133k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   133k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   133k|                  "\n"
 5416|   133k|                  "Unsupported range type given as input to a scanning "
 5417|   133k|                  "function.\n"
 5418|   133k|                  "A range needs to model forward_range and have a valid "
 5419|   133k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   133k|                  "Examples of scannable ranges are std::string, "
 5421|   133k|                  "std::string_view, "
 5422|   133k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   133k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   133k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   133k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   133k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   133k|    else {
 5365|   133k|        return make_forward_scan_buffer(r);
 5366|   133k|    }
 5367|   133k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5183|   133k|{
 5184|   133k|    return basic_scan_forward_buffer_impl(range);
 5185|   133k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   133k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   133k|          m_cursor(ranges::begin(*m_range))
 4765|   133k|    {
 4766|   133k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|   133k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   133k|    {
 4737|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|   133k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   133k|    {
 4428|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4339|   133k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   255k|    {
 2868|   255k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   255k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   255k|    {
 2849|   255k|        return decay_copy(t.begin());
 2850|   255k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3478|   377k|    {
 3479|   377k|        return m_iterator;
 3480|   377k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  1.50M|    {
 4770|  1.50M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 17.1k, False: 1.48M]
  ------------------
 4771|  17.1k|            return false;
 4772|  17.1k|        }
 4773|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  1.48M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  1.48M|        }
 4776|  1.48M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 1.35M, False: 127k]
  ------------------
 4777|  1.35M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  1.35M|                                          this->m_current_view.begin(),
 4779|  1.35M|                                          this->m_current_view.end());
 4780|  1.35M|        }
 4781|  1.48M|        m_latest = *m_cursor;
 4782|  1.48M|        ++m_cursor;
 4783|  1.48M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  1.48M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  1.48M|        }
 4787|  1.48M|        return true;
 4788|  1.50M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  4.47M|    {
 2925|  4.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  4.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  4.47M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  4.47M|    {
 2907|  4.47M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  4.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  4.47M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3482|  4.59M|    {
 3483|  4.59M|        return m_sentinel;
 3484|  4.59M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4344|   133k|    {
 4345|   133k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   133k|        return true;
 4347|   133k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  11.6k|        : base(unexpect, std::move(e.error())),
 1615|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.6k|    {
 1617|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|   122k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   122k|                      ranges::iterator_t<SourceRange>>) {
 6730|   122k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   122k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   122k|    {
 2868|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   122k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   122k|    {
 2849|   122k|        return decay_copy(t.begin());
 2850|   122k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6714|   122k|{
 6715|   122k|    return ranges::end(source);
 6716|   122k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   122k|    {
 2925|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   122k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   122k|    {
 2907|   122k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   122k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|   122k|        : base(std::in_place, std::forward<U>(val)),
 1569|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   122k|    {
 1571|   122k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   122k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   122k|    {
  442|   122k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8797|   108k|    {
 8798|   108k|        return m_str;
 8799|   108k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   255k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   255k|    static_cast<    \
  |  | 1056|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   255k|    static_cast<    \
  |  | 1056|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   255k|    {
 3465|   255k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   108k|        : m_str(r.str)
 8793|   108k|    {
 8794|   108k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1813|   377k|    {
 1814|   377k|        return &value();
 1815|   377k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1767|   377k|    {
 1768|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   377k|        return this->get_value();
 1770|   377k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6486|   122k|    {
 6487|   122k|        return ranges::begin(m_range);
 6488|   122k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   145k|    {
  643|   145k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 122k, False: 23.2k]
  ------------------
  644|   122k|            destroy_value();
  645|   122k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|   145k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9829|  54.2k|{
 9830|  54.2k|    auto result = make_scan_result<Source, Args...>();
 9831|  54.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  54.2k|                                   make_scan_args(result->values())));
 9833|  54.2k|    return result;
 9834|  54.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9540|  54.2k|{
 9541|  54.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  54.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  54.2k|{
 9476|  54.2k|#if !SCN_DISABLE_LOCALE
 9477|  54.2k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  54.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  54.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  54.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  54.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.36k, False: 48.9k]
  |  |  ------------------
  ------------------
 9484|  5.36k|        return unexpected(result.error());
 9485|  5.36k|    }
 9486|  48.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  54.2k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9870|  25.1k|{
 9871|  25.1k|    auto result = make_scan_result<Source, T>();
 9872|  25.1k|    fill_scan_result(
 9873|  25.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  25.1k|                            detail::make_arg<scan_context>(result->value())));
 9875|  25.1k|    return result;
 9876|  25.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9553|  25.1k|{
 9554|  25.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  25.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  25.1k|{
 9500|  25.1k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  25.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  25.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 894, False: 24.2k]
  |  |  ------------------
  ------------------
 9504|    894|        return unexpected(result.error());
 9505|    894|    }
 9506|  24.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  25.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  48.2k|    {
 2868|  48.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  48.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  48.2k|    {
 2849|  48.2k|        return decay_copy(t.begin());
 2850|  48.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|  12.1M|{
 2093|  12.1M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  12.1M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  3.14M|    {
 2925|  3.14M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  3.14M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  3.14M|    {
 2907|  3.14M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  3.14M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9716|   786k|{
 9717|   786k|    return scan_result_type<Source, Args...>();
 9718|   786k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   786k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   786k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   786k|    {
  613|   786k|        construct();
  614|   786k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   786k|    {
  694|   786k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   786k|        m_has_value = true;
  696|   786k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   786k|{
  396|   786k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   786k|        T(std::forward<Args>(args)...);
  398|   786k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6623|   786k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|  1.57M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|  1.57M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6397|  1.57M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.88M|    {
  718|  3.88M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  3.88M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.88M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|   786k|{
 9702|   786k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.2k, False: 763k]
  |  |  ------------------
  ------------------
 9703|  23.2k|        out = unexpected(in.error());
 9704|  23.2k|    }
 9705|   763k|    else {
 9706|   763k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   763k|    }
 9708|   786k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|  1.57M|    {
 1739|  1.57M|        return has_value();
 1740|  1.57M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.14M|    {
  490|  3.14M|        return m_has_value;
  491|  3.14M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|  46.4k|    {
 1745|  46.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  46.4k|        return this->get_unexpected().error();
 1747|  46.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  46.4k|    {
  473|  46.4k|        return m_unexpected;
  474|  46.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  23.2k|        : base(unexpect, std::move(e.error())),
 1615|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.2k|    {
 1617|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  23.2k|    {
 1315|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  23.2k|    {
  902|  23.2k|        assign_common(std::move(other));
  903|  23.2k|        return *this;
  904|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  23.2k|    {
  949|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 23.2k, False: 0]
  ------------------
  950|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 23.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  23.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.95M|    {
  687|  3.95M|        return m_has_value;
  688|  3.95M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.31M|    {
  653|  2.31M|        return *value_ptr();
  654|  2.31M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  23.2k|    {
 1045|  23.2k|        this->destroy_value();
 1046|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   786k|    {
  708|   786k|        scn::detail::destroy_at(value_ptr());
  709|   786k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   786k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   786k|    else {
  408|   786k|        p->~T();
  409|   786k|    }
  410|   786k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6630|   786k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.4k|    {
  712|  46.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|  1.52M|    {
 6498|  1.52M|        m_range = std::forward<Other>(r);
 6499|  1.52M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  1.52M|    {
 1794|  1.52M|        return value();
 1795|  1.52M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  1.52M|    {
 1768|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.52M|        return this->get_value();
 1770|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.52M|    {
  456|  1.52M|        return m_value;
  457|  1.52M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|   632k|{
 9460|   632k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   632k|    auto result = vscan_impl(buffer, format, args);
 9463|   632k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.4k, False: 610k]
  |  |  ------------------
  ------------------
 9464|  21.4k|        return unexpected(result.error());
 9465|  21.4k|    }
 9466|   610k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   632k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5379|  1.57M|{
 5380|  1.57M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  1.57M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  1.57M|                  "\n"
 5384|  1.57M|                  "Unsupported range type given as input to a scanning "
 5385|  1.57M|                  "function.\n"
 5386|  1.57M|                  "A range needs to have a character type (value type) "
 5387|  1.57M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  1.57M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  1.57M|                  "to be included.\n"
 5390|  1.57M|                  "See the scnlib documentation for more details.");
 5391|  1.57M|    static_assert(
 5392|  1.57M|        !std::is_same_v<T, custom_char_traits>,
 5393|  1.57M|        "\n"
 5394|  1.57M|        "Unsupported range type given as input to a scanning "
 5395|  1.57M|        "function.\n"
 5396|  1.57M|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  1.57M|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  1.57M|        "not supported.");
 5399|  1.57M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  1.57M|                  "\n"
 5401|  1.57M|                  "Unsupported range type given as input to a scanning "
 5402|  1.57M|                  "function.\n"
 5403|  1.57M|                  "file_marker_found cannot be used as an "
 5404|  1.57M|                  "source range type to scn::scan.\n"
 5405|  1.57M|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  1.57M|                  "and do not provide an explicit source range, "
 5407|  1.57M|                  "or use scn::scan with a FILE* directly.");
 5408|  1.57M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  1.57M|                  "\n"
 5410|  1.57M|                  "Unsupported range type given as input to a scanning "
 5411|  1.57M|                  "function.\n"
 5412|  1.57M|                  "In order to be scannable, a range needs to satisfy "
 5413|  1.57M|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  1.57M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  1.57M|                  "\n"
 5416|  1.57M|                  "Unsupported range type given as input to a scanning "
 5417|  1.57M|                  "function.\n"
 5418|  1.57M|                  "A range needs to model forward_range and have a valid "
 5419|  1.57M|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  1.57M|                  "Examples of scannable ranges are std::string, "
 5421|  1.57M|                  "std::string_view, "
 5422|  1.57M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  1.57M|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  1.57M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  1.57M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|  1.57M|{
 5319|  1.57M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|  1.57M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|  1.57M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  1.57M|    {
 2999|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  1.57M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  1.57M|    {
 2980|  1.57M|        return t.data();
 2981|  1.57M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3381|  1.57M|    {
 3382|  1.57M|        return detail::to_address(ranges::begin(derived()));
 3383|  1.57M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  5.94M|{
  316|  5.94M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  5.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  5.94M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   188M|{
  294|   188M|    return p;
  295|   188M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  3.10M|    {
 2868|  3.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  3.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  3.10M|    {
 2849|  3.10M|        return decay_copy(t.begin());
 2850|  3.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|   158M|    {
 3479|   158M|        return m_iterator;
 3480|   158M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3337|  1.57M|    {
 3338|  1.57M|        return static_cast<const D&>(*this);
 3339|  1.57M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|  1.57M|    {
 3074|  1.57M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  1.57M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|  1.57M|    {
 3040|  1.57M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  1.57M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|  3.76M|    {
 3495|  3.76M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|  3.76M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  46.4k|        : base(unexpect, std::move(e.error())),
 1615|  46.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  46.4k|    {
 1617|  46.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  46.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  46.4k|          m_has_value(false)
  451|  46.4k|    {
  452|  46.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.57M|    {
 1315|  1.57M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  1.52M|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  1.52M|                      ranges::iterator_t<SourceRange>>) {
 6730|  1.52M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  1.52M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  4.36M|    {
 2868|  4.36M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  4.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  4.36M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  4.36M|    {
 2849|  4.36M|        return decay_copy(t.begin());
 2850|  4.36M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6714|  1.52M|{
 6715|  1.52M|    return ranges::end(source);
 6716|  1.52M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.52M|    {
 2925|  1.52M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.52M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.52M|    {
 2907|  1.52M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.52M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|   149M|    {
 3483|   149M|        return m_sentinel;
 3484|   149M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  1.52M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.52M|    {
 1571|  1.52M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.52M|    {
  442|  1.52M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8797|   632k|    {
 8798|   632k|        return m_str;
 8799|   632k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  1.26M|{
 6127|  1.26M|    detail::check_scan_arg_types<Args...>();
 6128|  1.26M|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  1.26M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5841|  1.57M|{
 5842|  1.57M|    constexpr bool default_constructible_constraint =
 5843|  1.57M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  1.57M|    static_assert(default_constructible_constraint,
 5845|  1.57M|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  1.57M|    constexpr bool destructible_constraint =
 5848|  1.57M|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  1.57M|    static_assert(destructible_constraint,
 5850|  1.57M|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  1.57M|    constexpr bool non_reference_constraint =
 5853|  1.57M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  1.57M|    static_assert(non_reference_constraint,
 5855|  1.57M|                  "Scan argument types must not be references");
 5856|       |
 5857|  1.57M|    constexpr bool movable_constraint =
 5858|  1.57M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  1.57M|    static_assert(movable_constraint,
 5860|  1.57M|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  1.57M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  1.57M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  1.57M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|  1.26M|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  1.26M|    {
 6104|  1.26M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  1.26M|    {
 6112|  1.26M|        return {detail::make_arg<
 6113|  1.26M|            kind, Context,
 6114|  1.26M|            mapped_type_constant<remove_cvref_t<A>,
 6115|  1.26M|                                 typename Context::char_type>::value>(args)...};
 6116|  1.26M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE24ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5891|  1.26M|{
 5892|  1.26M|    return make_value<Context>(value).ref_value;
 5893|  1.26M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5826|  1.57M|{
 5827|  1.57M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  1.57M|                                  needs_context_tag>) {
 5831|  1.57M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  1.57M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5660|  1.57M|    {                                                                        \
 5661|  1.57M|        return val;                                                          \
 5662|  1.57M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5795|  1.57M|{
 5796|  1.57M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  1.57M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  1.57M|    constexpr bool scannable_char =
 5800|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  1.57M|    static_assert(scannable_char,
 5802|  1.57M|                  "Cannot scan an argument of an unsupported character "
 5803|  1.57M|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  1.57M|    constexpr bool scannable_const =
 5806|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  1.57M|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  1.57M|    constexpr bool scannable_disabled =
 5810|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  1.57M|    static_assert(scannable_disabled,
 5812|  1.57M|                  "Cannot scan an argument that has been disabled by "
 5813|  1.57M|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  1.57M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  1.57M|    static_assert(
 5817|  1.57M|        scannable,
 5818|  1.57M|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  1.57M|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  1.57M|    return arg_value{arg};
 5822|  1.57M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5603|  1.57M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  1.57M|    {
 5605|  1.57M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6406|  1.26M|    {
 6407|  1.26M|        return m_values;
 6408|  1.26M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  1.26M|        : basic_scan_args(store.desc, store.args.data())
 6153|  1.26M|    {
 6154|  1.26M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6204|  1.89M|        : m_desc(desc), m_builtin_values(data)
 6205|  1.89M|    {
 6206|  1.89M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  58.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  58.9M|    static_cast<    \
  |  | 1056|  58.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  58.9M|    static_cast<    \
  |  | 1056|  58.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  58.9M|    {
 3465|  58.9M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|  1.89M|{
 8464|  1.89M|    return s;
 8465|  1.89M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|  1.89M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   632k|        : m_str(r.str)
 8793|   632k|    {
 8794|   632k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   786k|    {
 1739|   786k|        return has_value();
 1740|   786k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  2.31M|    {
 1814|  2.31M|        return &value();
 1815|  2.31M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  2.31M|    {
 1768|  2.31M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.31M|        return this->get_value();
 1770|  2.31M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6486|  1.52M|    {
 6487|  1.52M|        return ranges::begin(m_range);
 6488|  1.52M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   810k|    {
  643|   810k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 763k, False: 46.4k]
  ------------------
  644|   763k|            destroy_value();
  645|   763k|        }
  646|  46.4k|        else {
  647|  46.4k|            destroy_unexpected();
  648|  46.4k|        }
  649|   810k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|   632k|{
 9476|   632k|#if !SCN_DISABLE_LOCALE
 9477|   632k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   632k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   632k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   632k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   632k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.4k, False: 610k]
  |  |  ------------------
  ------------------
 9484|  21.4k|        return unexpected(result.error());
 9485|  21.4k|    }
 9486|   610k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   632k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|   308k|{
 9500|   308k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|   308k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 305k]
  |  |  ------------------
  ------------------
 9504|  3.57k|        return unexpected(result.error());
 9505|  3.57k|    }
 9506|   305k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|   308k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5876|   308k|{
 5877|   308k|    check_scan_arg_types<T>();
 5878|       |
 5879|   308k|    basic_scan_arg<Context> arg;
 5880|   308k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|   308k|    arg.m_value = make_value<Context>(value);
 5882|   308k|    return arg;
 5883|   308k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|  2.36M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|   308k|    {
 6429|   308k|        return std::get<0>(m_values);
 6430|   308k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9716|   786k|{
 9717|   786k|    return scan_result_type<Source, Args...>();
 9718|   786k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   786k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   786k|        : m_value(T{}), m_has_value(true)
  427|   786k|    {
  428|   786k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6623|   786k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6397|   786k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9701|   786k|{
 9702|   786k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.2k, False: 763k]
  |  |  ------------------
  ------------------
 9703|  23.2k|        out = unexpected(in.error());
 9704|  23.2k|    }
 9705|   763k|    else {
 9706|   763k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   763k|    }
 9708|   786k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|  23.2k|        : base(unexpect, std::move(e.error())),
 1615|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.2k|    {
 1617|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  23.2k|    {
 1315|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1555|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  901|  23.2k|    {
  902|  23.2k|        assign_common(std::move(other));
  903|  23.2k|        return *this;
  904|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  948|  23.2k|    {
  949|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 23.2k, False: 0]
  ------------------
  950|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 23.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  23.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.14M|    {
  490|  3.14M|        return m_has_value;
  491|  3.14M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.31M|    {
  456|  2.31M|        return m_value;
  457|  2.31M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1044|  23.2k|    {
 1045|  23.2k|        this->destroy_value();
 1046|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  23.2k|    {
  504|  23.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.2k|                                  std::forward<Args>(args)...);
  506|  23.2k|        m_has_value = false;
  507|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.2k|    {
  473|  23.2k|        return m_unexpected;
  474|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.2k|    {
  481|  23.2k|        return std::move(m_unexpected);
  482|  23.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8797|   632k|    {
 8798|   632k|        return m_str;
 8799|   632k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|   632k|{
 6127|   632k|    detail::check_scan_arg_types<Args...>();
 6128|   632k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   632k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5841|   786k|{
 5842|   786k|    constexpr bool default_constructible_constraint =
 5843|   786k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   786k|    static_assert(default_constructible_constraint,
 5845|   786k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   786k|    constexpr bool destructible_constraint =
 5848|   786k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   786k|    static_assert(destructible_constraint,
 5850|   786k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   786k|    constexpr bool non_reference_constraint =
 5853|   786k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   786k|    static_assert(non_reference_constraint,
 5855|   786k|                  "Scan argument types must not be references");
 5856|       |
 5857|   786k|    constexpr bool movable_constraint =
 5858|   786k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   786k|    static_assert(movable_constraint,
 5860|   786k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   786k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   786k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   786k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6102|   632k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   632k|    {
 6104|   632k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|   632k|    {
 6112|   632k|        return {detail::make_arg<
 6113|   632k|            kind, Context,
 6114|   632k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   632k|                                 typename Context::char_type>::value>(args)...};
 6116|   632k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5891|   632k|{
 5892|   632k|    return make_value<Context>(value).ref_value;
 5893|   632k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5826|   786k|{
 5827|   786k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   786k|                                  needs_context_tag>) {
 5831|   786k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   786k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   786k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5660|   786k|    {                                                                        \
 5661|   786k|        return val;                                                          \
 5662|   786k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5795|   786k|{
 5796|   786k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   786k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   786k|    constexpr bool scannable_char =
 5800|   786k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   786k|    static_assert(scannable_char,
 5802|   786k|                  "Cannot scan an argument of an unsupported character "
 5803|   786k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   786k|    constexpr bool scannable_const =
 5806|   786k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   786k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   786k|    constexpr bool scannable_disabled =
 5810|   786k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   786k|    static_assert(scannable_disabled,
 5812|   786k|                  "Cannot scan an argument that has been disabled by "
 5813|   786k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   786k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   786k|    static_assert(
 5817|   786k|        scannable,
 5818|   786k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   786k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   786k|    return arg_value{arg};
 5822|   786k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5603|   786k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   786k|    {
 5605|   786k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6406|   632k|    {
 6407|   632k|        return m_values;
 6408|   632k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   632k|        : basic_scan_args(store.desc, store.args.data())
 6153|   632k|    {
 6154|   632k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   632k|        : m_str(r.str)
 8793|   632k|    {
 8794|   632k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   786k|    {
 1739|   786k|        return has_value();
 1740|   786k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  2.31M|    {
 1814|  2.31M|        return &value();
 1815|  2.31M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|  2.31M|    {
 1768|  2.31M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.31M|        return this->get_value();
 1770|  2.31M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5876|   154k|{
 5877|   154k|    check_scan_arg_types<T>();
 5878|       |
 5879|   154k|    basic_scan_arg<Context> arg;
 5880|   154k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|   154k|    arg.m_value = make_value<Context>(value);
 5882|   154k|    return arg;
 5883|   154k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|   154k|    {
 6429|   154k|        return std::get<0>(m_values);
 6430|   154k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  23.2k|    {
 2868|  23.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  23.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  23.2k|    {
 2849|  23.2k|        return decay_copy(t.begin());
 2850|  23.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2092|  74.0M|{
 2093|  74.0M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  74.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  74.0M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.57M|    {
 2925|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.57M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.57M|    {
 2907|  1.57M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.57M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9716|   786k|{
 9717|   786k|    return scan_result_type<Source, Args...>();
 9718|   786k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|   786k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   786k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   786k|    {
  613|   786k|        construct();
  614|   786k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   786k|    {
  694|   786k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   786k|        m_has_value = true;
  696|   786k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   786k|{
  396|   786k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   786k|        T(std::forward<Args>(args)...);
  398|   786k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6623|   786k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6466|   786k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3458|   786k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.88M|    {
  718|  3.88M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  3.88M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.88M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9701|   786k|{
 9702|   786k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.2k, False: 763k]
  |  |  ------------------
  ------------------
 9703|  23.2k|        out = unexpected(in.error());
 9704|  23.2k|    }
 9705|   763k|    else {
 9706|   763k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   763k|    }
 9708|   786k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   786k|    {
 1739|   786k|        return has_value();
 1740|   786k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.57M|    {
  490|  1.57M|        return m_has_value;
  491|  1.57M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  23.2k|    {
 1745|  23.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  23.2k|        return this->get_unexpected().error();
 1747|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.2k|    {
  473|  23.2k|        return m_unexpected;
  474|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1614|  23.2k|        : base(unexpect, std::move(e.error())),
 1615|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.2k|    {
 1617|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  23.2k|    {
 1315|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1555|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  901|  23.2k|    {
  902|  23.2k|        assign_common(std::move(other));
  903|  23.2k|        return *this;
  904|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  948|  23.2k|    {
  949|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 23.2k, False: 0]
  ------------------
  950|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 23.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  23.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.95M|    {
  687|  3.95M|        return m_has_value;
  688|  3.95M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.31M|    {
  653|  2.31M|        return *value_ptr();
  654|  2.31M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1044|  23.2k|    {
 1045|  23.2k|        this->destroy_value();
 1046|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   786k|    {
  708|   786k|        scn::detail::destroy_at(value_ptr());
  709|   786k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   786k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   786k|    else {
  408|   786k|        p->~T();
  409|   786k|    }
  410|   786k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6630|   786k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.4k|    {
  712|  46.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6497|   763k|    {
 6498|   763k|        m_range = std::forward<Other>(r);
 6499|   763k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|   763k|    {
 1794|   763k|        return value();
 1795|   763k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|   763k|    {
 1768|   763k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   763k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   763k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   763k|        return this->get_value();
 1770|   763k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   763k|    {
  456|   763k|        return m_value;
  457|   763k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|   316k|{
 9460|   316k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   316k|    auto result = vscan_impl(buffer, format, args);
 9463|   316k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 305k]
  |  |  ------------------
  ------------------
 9464|  10.7k|        return unexpected(result.error());
 9465|  10.7k|    }
 9466|   305k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   316k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5379|   786k|{
 5380|   786k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   786k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   786k|                  "\n"
 5384|   786k|                  "Unsupported range type given as input to a scanning "
 5385|   786k|                  "function.\n"
 5386|   786k|                  "A range needs to have a character type (value type) "
 5387|   786k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   786k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   786k|                  "to be included.\n"
 5390|   786k|                  "See the scnlib documentation for more details.");
 5391|   786k|    static_assert(
 5392|   786k|        !std::is_same_v<T, custom_char_traits>,
 5393|   786k|        "\n"
 5394|   786k|        "Unsupported range type given as input to a scanning "
 5395|   786k|        "function.\n"
 5396|   786k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   786k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   786k|        "not supported.");
 5399|   786k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   786k|                  "\n"
 5401|   786k|                  "Unsupported range type given as input to a scanning "
 5402|   786k|                  "function.\n"
 5403|   786k|                  "file_marker_found cannot be used as an "
 5404|   786k|                  "source range type to scn::scan.\n"
 5405|   786k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   786k|                  "and do not provide an explicit source range, "
 5407|   786k|                  "or use scn::scan with a FILE* directly.");
 5408|   786k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   786k|                  "\n"
 5410|   786k|                  "Unsupported range type given as input to a scanning "
 5411|   786k|                  "function.\n"
 5412|   786k|                  "In order to be scannable, a range needs to satisfy "
 5413|   786k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   786k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   786k|                  "\n"
 5416|   786k|                  "Unsupported range type given as input to a scanning "
 5417|   786k|                  "function.\n"
 5418|   786k|                  "A range needs to model forward_range and have a valid "
 5419|   786k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   786k|                  "Examples of scannable ranges are std::string, "
 5421|   786k|                  "std::string_view, "
 5422|   786k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   786k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   786k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   786k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   786k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   786k|    else {
 5365|   786k|        return make_forward_scan_buffer(r);
 5366|   786k|    }
 5367|   786k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5183|   786k|{
 5184|   786k|    return basic_scan_forward_buffer_impl(range);
 5185|   786k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   786k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   786k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   786k|          m_cursor(ranges::begin(*m_range))
 4765|   786k|    {
 4766|   786k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   786k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   786k|    {
 4737|   786k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   786k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   786k|    {
 4428|   786k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4339|   786k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  1.55M|    {
 2868|  1.55M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  1.55M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  1.55M|    {
 2849|  1.55M|        return decay_copy(t.begin());
 2850|  1.55M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3478|  2.31M|    {
 3479|  2.31M|        return m_iterator;
 3480|  2.31M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|  23.1M|    {
 4770|  23.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 20.7k, False: 23.1M]
  ------------------
 4771|  20.7k|            return false;
 4772|  20.7k|        }
 4773|  23.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  23.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  23.1M|        }
 4776|  23.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 22.3M, False: 774k]
  ------------------
 4777|  22.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  22.3M|                                          this->m_current_view.begin(),
 4779|  22.3M|                                          this->m_current_view.end());
 4780|  22.3M|        }
 4781|  23.1M|        m_latest = *m_cursor;
 4782|  23.1M|        ++m_cursor;
 4783|  23.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  23.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  23.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  23.1M|        }
 4787|  23.1M|        return true;
 4788|  23.1M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  69.3M|    {
 2925|  69.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  69.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  69.3M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  69.3M|    {
 2907|  69.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  69.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  69.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3482|  70.1M|    {
 3483|  70.1M|        return m_sentinel;
 3484|  70.1M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4344|   786k|    {
 4345|   786k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   786k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   786k|        return true;
 4347|   786k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  23.2k|        : base(unexpect, std::move(e.error())),
 1615|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.2k|    {
 1617|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   786k|    {
 1315|   786k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|   763k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   763k|                      ranges::iterator_t<SourceRange>>) {
 6730|   763k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   763k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   763k|    {
 2868|   763k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   763k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   763k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   763k|    {
 2849|   763k|        return decay_copy(t.begin());
 2850|   763k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6714|   763k|{
 6715|   763k|    return ranges::end(source);
 6716|   763k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   763k|    {
 2925|   763k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   763k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   763k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   763k|    {
 2907|   763k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   763k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   763k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|   763k|        : base(std::in_place, std::forward<U>(val)),
 1569|   763k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   763k|    {
 1571|   763k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   763k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   763k|    {
  442|   763k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8797|   632k|    {
 8798|   632k|        return m_str;
 8799|   632k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|  1.55M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.55M|    static_cast<    \
  |  | 1056|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.55M|    static_cast<    \
  |  | 1056|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.55M|    {
 3465|  1.55M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   632k|        : m_str(r.str)
 8793|   632k|    {
 8794|   632k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1738|   786k|    {
 1739|   786k|        return has_value();
 1740|   786k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  2.31M|    {
 1814|  2.31M|        return &value();
 1815|  2.31M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1767|  2.31M|    {
 1768|  2.31M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.31M|        return this->get_value();
 1770|  2.31M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6486|   763k|    {
 6487|   763k|        return ranges::begin(m_range);
 6488|   763k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   810k|    {
  643|   810k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 763k, False: 46.4k]
  ------------------
  644|   763k|            destroy_value();
  645|   763k|        }
  646|  46.4k|        else {
  647|  46.4k|            destroy_unexpected();
  648|  46.4k|        }
  649|   810k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|   316k|{
 9476|   316k|#if !SCN_DISABLE_LOCALE
 9477|   316k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   316k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   316k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   316k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   316k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 305k]
  |  |  ------------------
  ------------------
 9484|  10.7k|        return unexpected(result.error());
 9485|  10.7k|    }
 9486|   305k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   316k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|   154k|{
 9500|   154k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|   154k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|   154k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 152k]
  |  |  ------------------
  ------------------
 9504|  1.78k|        return unexpected(result.error());
 9505|  1.78k|    }
 9506|   152k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|   154k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|   136k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|   136k|    {
 3741|   136k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   136k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|   136k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   121k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   121k|    else {
 3980|   121k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   121k|    }
 3982|   121k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  5.02M|    {
 3479|  5.02M|        return m_iterator;
 3480|  5.02M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  76.1M|    {
 3479|  76.1M|        return m_iterator;
 3480|  76.1M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  8.50M|    {
  572|  8.50M|        return m_has_value;
  573|  8.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  96.5k|    {
  555|  96.5k|        return m_unexpected;
  556|  96.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|  96.5k|    {
 1745|  96.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  96.5k|        return this->get_unexpected().error();
 1747|  96.5k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7027|  1.12M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7050|  32.1k|    {
 7051|  32.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7051:13): [True: 0, False: 32.1k]
  |  Branch (7051:39): [True: 0, False: 0]
  ------------------
 7052|       |            // clang-format off
 7053|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7054|       |            // clang-format on
 7055|      0|        }
 7056|       |
 7057|  32.1k|        m_specs.width = width;
 7058|  32.1k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7071|  1.09M|    {
 7072|  1.09M|        m_specs.type = type;
 7073|  1.09M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7088|  36.9k|    {
 7089|  36.9k|        const auto begin_value = static_cast<unsigned>(begin);
 7090|  36.9k|        const auto end_value = static_cast<unsigned>(end);
 7091|  36.9k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1051|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7092|       |
 7093|  36.9k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  985|  36.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 36.9k, False: 0]
  |  |  ------------------
  ------------------
 7094|       |            // No need to bit-twiddle with a mask, because with the
 7095|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7096|  36.9k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1005|  36.9k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7097|   997k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7097:40): [True: 960k, False: 36.9k]
  ------------------
 7098|   960k|                m_specs.charset_literals[v / 8] |=
 7099|   960k|                    static_cast<unsigned char>(1ul << (v % 8));
 7100|   960k|            }
 7101|  36.9k|        }
 7102|      0|        else {
 7103|      0|            m_specs.charset_has_nonascii = true;
 7104|      0|        }
 7105|  36.9k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7133|  32.1k|    {
 7134|  32.1k|        SCN_UNLIKELY_ATTR
 7135|  32.1k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7136|  32.1k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7144|  1.17M|    {
 7145|  1.17M|        return m_error;
 7146|  1.17M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3916|   124k|{
 3917|   124k|    return unexpected(scan_error{c, m});
 3918|   124k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|  71.0M|{
 4307|       |    // Pattern_White_Space property
 4308|  71.0M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 13.8M, False: 57.1M]
  |  Branch (4308:27): [True: 2.70M, False: 11.1M]
  ------------------
 4309|  71.0M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 2.32M, False: 66.0M]
  ------------------
 4310|  71.0M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 321k, False: 65.7M]
  ------------------
 4311|  71.0M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 157k, False: 65.5M]
  ------------------
 4312|  71.0M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 294k, False: 65.2M]
  ------------------
 4313|  71.0M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 187k, False: 65.0M]
  ------------------
 4314|  71.0M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 0, False: 65.0M]
  ------------------
 4315|  71.0M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7827|  16.0k|{
 7828|  16.0k|    switch (type) {
 7829|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 16.0k]
  ------------------
 7830|      0|            return arg_type_category::none;
 7831|       |
 7832|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 16.0k]
  ------------------
 7833|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 16.0k]
  ------------------
 7834|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 16.0k]
  ------------------
 7835|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 16.0k]
  ------------------
 7836|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 16.0k]
  ------------------
 7837|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 16.0k]
  ------------------
 7838|      0|            return arg_type_category::integer;
 7839|       |
 7840|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 16.0k]
  ------------------
 7841|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 16.0k]
  ------------------
 7842|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 16.0k]
  ------------------
 7843|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 16.0k]
  ------------------
 7844|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 16.0k]
  ------------------
 7845|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 16.0k]
  ------------------
 7846|      0|            return arg_type_category::unsigned_integer;
 7847|       |
 7848|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 16.0k]
  ------------------
 7849|      0|            return arg_type_category::pointer;
 7850|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 16.0k]
  ------------------
 7851|      0|            return arg_type_category::boolean;
 7852|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7852:9): [True: 0, False: 16.0k]
  ------------------
 7853|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 16.0k]
  ------------------
 7854|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7854:9): [True: 0, False: 16.0k]
  ------------------
 7855|      0|            return arg_type_category::character;
 7856|       |
 7857|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7857:9): [True: 0, False: 16.0k]
  ------------------
 7858|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7858:9): [True: 0, False: 16.0k]
  ------------------
 7859|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7859:9): [True: 0, False: 16.0k]
  ------------------
 7860|      0|            return arg_type_category::floating;
 7861|       |
 7862|  1.78k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7862:9): [True: 1.78k, False: 14.3k]
  ------------------
 7863|  5.36k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7863:9): [True: 3.57k, False: 12.5k]
  ------------------
 7864|  8.94k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7864:9): [True: 3.57k, False: 12.5k]
  ------------------
 7865|  16.0k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7865:9): [True: 7.15k, False: 8.94k]
  ------------------
 7866|  16.0k|            return arg_type_category::string;
 7867|       |
 7868|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7868:9): [True: 0, False: 16.0k]
  ------------------
 7869|      0|            return arg_type_category::custom;
 7870|       |
 7871|      0|            SCN_CLANG_PUSH
 7872|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7873|      0|        default:
  ------------------
  |  Branch (7873:9): [True: 0, False: 16.0k]
  ------------------
 7874|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  16.0k|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7876|  16.0k|            SCN_CLANG_POP
 7877|  16.0k|    }
 7878|       |
 7879|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7880|  16.0k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  8.40M|    {
 1739|  8.40M|        return has_value();
 1740|  8.40M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7971|  1.09M|{
 7972|  1.09M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7972:9): [True: 0, False: 1.09M]
  ------------------
 7973|  1.09M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7973:9): [True: 1.05M, False: 34.5k]
  ------------------
 7974|  1.09M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7974:9): [True: 18.4k, False: 16.0k]
  ------------------
 7975|  1.09M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7975:9): [True: 0, False: 16.0k]
  ------------------
 7976|  1.09M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7976:9): [True: 0, False: 16.0k]
  ------------------
 7977|  1.07M|        return;
 7978|  1.07M|    }
 7979|  16.0k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7979:9): [True: 16.0k, False: 0]
  ------------------
 7980|  16.0k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  986|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 7981|       |            // clang-format off
 7982|  16.0k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7983|       |            // clang-format on
 7984|  16.0k|        }
 7985|      0|        return;
 7986|  16.0k|    }
 7987|      0|    SCN_UNLIKELY_ATTR
 7988|      0|    handler.on_error("Invalid type specifier for string");
 7989|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|  26.9M|    {
 4472|  26.9M|        assert(m_begin);
 4473|  26.9M|        return m_end == nullptr;
 4474|  26.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|   625k|    {
 4489|   625k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 625k]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|   625k|        return parent()->get_segment_starting_at(position());
 4495|   625k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|  15.7M|    {
 4483|  15.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  15.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  15.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  15.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|   625k|    {
 4376|   625k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 354k, False: 271k]
  |  |  ------------------
  ------------------
 4377|   625k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|   354k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|   354k|        }
 4380|   271k|        const auto start = pos - m_putback_buffer.size();
 4381|   271k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   271k|        return m_current_view.substr(start);
 4383|   271k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|   704k|    {
 4467|   704k|        return m_position;
 4468|   704k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|   400k|    {
 4398|   400k|        return m_is_contiguous;
 4399|   400k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|   419M|    {
 4472|   419M|        assert(m_begin);
 4473|   419M|        return m_end == nullptr;
 4474|   419M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   766k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   766k|    else {
 3980|   766k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   766k|    }
 3982|   766k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|  2.31M|    {
 4489|  2.31M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 2.31M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  2.31M|        return parent()->get_segment_starting_at(position());
 4495|  2.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|   244M|    {
 4483|   244M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|   244M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   244M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   244M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   244M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|  2.31M|    {
 4376|  2.31M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.53M, False: 783k]
  |  |  ------------------
  ------------------
 4377|  2.31M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  1.53M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  1.53M|        }
 4380|   783k|        const auto start = pos - m_putback_buffer.size();
 4381|   783k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|   783k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   783k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   783k|        return m_current_view.substr(start);
 4383|   783k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|  2.78M|    {
 4467|  2.78M|        return m_position;
 4468|  2.78M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|  2.36M|    {
 4398|  2.36M|        return m_is_contiguous;
 4399|  2.36M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|   767k|    {
 3333|   767k|        return static_cast<D&>(*this);
 3334|   767k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|   767k|    {
 3374|   767k|        return detail::to_address(ranges::begin(derived()));
 3375|   767k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|  2.83M|    {
 3333|  2.83M|        return static_cast<D&>(*this);
 3334|  2.83M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|  2.83M|    {
 3374|  2.83M|        return detail::to_address(ranges::begin(derived()));
 3375|  2.83M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8994|  54.6k|    {
 8995|  54.6k|        return ranges::subrange{begin(), end()};
 8996|  54.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8986|  54.6k|    {
 8987|  54.6k|        return ranges::default_sentinel;
 8988|  54.6k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|  1.85M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.85M|    static_cast<    \
  |  | 1056|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.85M|    static_cast<    \
  |  | 1056|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.85M|    {
 3465|  1.85M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|  2.69M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   125k|    {
 1978|   125k|        return detail::transform_error_impl(std::move(*this),
 1979|   125k|                                            std::forward<F>(f));
 1980|   125k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   125k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   125k|    else {
 1471|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 123k, False: 2.16k]
  |  |  ------------------
  ------------------
 1473|   125k|                   ? result(*std::forward<Exp>(exp))
 1474|   125k|                   : result(unexpect,
 1475|  2.16k|                            trivial_invoke(std::forward<F>(f),
 1476|  2.16k|                                           std::forward<Exp>(exp).error()));
 1477|   125k|    }
 1478|   125k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   251k|    {
  490|   251k|        return m_has_value;
  491|   251k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   123k|    {
 1804|   123k|        return std::move(value());
 1805|   123k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   123k|    {
 1768|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   123k|        return this->get_value();
 1770|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   123k|    {
  456|   123k|        return m_value;
  457|   123k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   295k|        : base(std::in_place, std::forward<U>(val)),
 1569|   295k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   295k|    {
 1571|   295k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   295k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   295k|    {
  442|   295k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   310k|    {
 1315|   310k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  12.1k|{
 1349|  12.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  12.1k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  2.16k|    {
 1755|  2.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  2.16k|        return std::move(this->get_unexpected().error());
 1757|  2.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.16k|    {
  473|  2.16k|        return m_unexpected;
  474|  2.16k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  24.2k|    {
  365|  24.2k|        return m_unexpected;
  366|  24.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  2.16k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  2.16k|    {
 1627|  2.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8994|   316k|    {
 8995|   316k|        return ranges::subrange{begin(), end()};
 8996|   316k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8986|   316k|    {
 8987|   316k|        return ranges::default_sentinel;
 8988|   316k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|  26.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  26.8M|    static_cast<    \
  |  | 1056|  26.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  26.8M|    static_cast<    \
  |  | 1056|  26.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  26.8M|    {
 3465|  26.8M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   772k|    {
 1978|   772k|        return detail::transform_error_impl(std::move(*this),
 1979|   772k|                                            std::forward<F>(f));
 1980|   772k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   772k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   772k|    else {
 1471|   772k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   772k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   772k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 770k, False: 2.22k]
  |  |  ------------------
  ------------------
 1473|   772k|                   ? result(*std::forward<Exp>(exp))
 1474|   772k|                   : result(unexpect,
 1475|  2.22k|                            trivial_invoke(std::forward<F>(f),
 1476|  2.22k|                                           std::forward<Exp>(exp).error()));
 1477|   772k|    }
 1478|   772k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.54M|    {
  490|  1.54M|        return m_has_value;
  491|  1.54M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   770k|    {
 1804|   770k|        return std::move(value());
 1805|   770k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   770k|    {
 1768|   770k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   770k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   770k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   770k|        return this->get_value();
 1770|   770k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   770k|    {
  456|   770k|        return m_value;
  457|   770k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|  1.83M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.83M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.83M|    {
 1571|  1.83M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.83M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.83M|    {
  442|  1.83M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.86M|    {
 1315|  1.86M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  2.22k|    {
 1755|  2.22k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  2.22k|        return std::move(this->get_unexpected().error());
 1757|  2.22k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.22k|    {
  473|  2.22k|        return m_unexpected;
  474|  2.22k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  2.22k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  2.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  2.22k|    {
 1627|  2.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  28.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.1k|          m_has_value(false)
  451|  28.1k|    {
  452|  28.1k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   124k|        : m_unexpected(std::forward<Err>(e))
  350|   124k|    {
  351|   124k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   124k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   104k|        : base(unexpect, std::move(e.error())),
 1615|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   104k|    {
 1617|   104k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   104k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   104k|          m_has_value(false)
  451|   104k|    {
  452|   104k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.70M|    {
 1315|  2.70M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  25.5k|        : base(unexpect, std::move(e.error())),
 1615|  25.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.5k|    {
 1617|  25.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  28.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.7k|          m_has_value(false)
  451|  28.7k|    {
  452|  28.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   486k|    {
 1315|   486k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   456k|        : base(std::in_place, std::forward<U>(val)),
 1569|   456k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   456k|    {
 1571|   456k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   456k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   456k|    {
  442|   456k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|   486k|    {
 1739|   486k|        return has_value();
 1740|   486k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   972k|    {
  490|   972k|        return m_has_value;
  491|   972k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|  28.7k|    {
 1745|  28.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  28.7k|        return this->get_unexpected().error();
 1747|  28.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.7k|    {
  473|  28.7k|        return m_unexpected;
  474|  28.7k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   380k|    {
 1804|   380k|        return std::move(value());
 1805|   380k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   457k|    {
 1768|   457k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   457k|        return this->get_value();
 1770|   457k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   457k|    {
  456|   457k|        return m_value;
  457|   457k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  51.8k|        : base(unexpect, std::move(e.error())),
 1615|  51.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  51.8k|    {
 1617|  51.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  56.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  56.3k|          m_has_value(false)
  451|  56.3k|    {
  452|  56.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.73M|    {
 1315|  3.73M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|  3.67M|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.67M|    {
 1571|  3.67M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.67M|    {
  442|  3.67M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|  3.73M|    {
 1739|  3.73M|        return has_value();
 1740|  3.73M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.46M|    {
  490|  7.46M|        return m_has_value;
  491|  7.46M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|  56.3k|    {
 1745|  56.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  56.3k|        return this->get_unexpected().error();
 1747|  56.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  56.3k|    {
  473|  56.3k|        return m_unexpected;
  474|  56.3k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|  3.06M|    {
 1804|  3.06M|        return std::move(value());
 1805|  3.06M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|  3.67M|    {
 1768|  3.67M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.67M|        return this->get_value();
 1770|  3.67M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.67M|    {
  456|  3.67M|        return m_value;
  457|  3.67M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   195k|    {
 1978|   195k|        return detail::transform_error_impl(std::move(*this),
 1979|   195k|                                            std::forward<F>(f));
 1980|   195k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   195k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   195k|    else {
 1471|   195k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   195k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   195k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 192k, False: 3.27k]
  |  |  ------------------
  ------------------
 1473|   195k|                   ? result(*std::forward<Exp>(exp))
 1474|   195k|                   : result(unexpect,
 1475|  3.27k|                            trivial_invoke(std::forward<F>(f),
 1476|  3.27k|                                           std::forward<Exp>(exp).error()));
 1477|   195k|    }
 1478|   195k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   390k|    {
  490|   390k|        return m_has_value;
  491|   390k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|   192k|    {
 1804|   192k|        return std::move(value());
 1805|   192k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   192k|    {
 1768|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   192k|        return this->get_value();
 1770|   192k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   192k|    {
  456|   192k|        return m_value;
  457|   192k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|  3.27k|    {
 1755|  3.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  3.27k|        return std::move(this->get_unexpected().error());
 1757|  3.27k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.27k|    {
  473|  3.27k|        return m_unexpected;
  474|  3.27k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  3.27k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  3.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  3.27k|    {
 1627|  3.27k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8978|   162k|    {
 8979|   162k|        return m_current;
 8980|   162k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|   141k|    {
 8872|   141k|        return m_locale;
 8873|   141k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|   152k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   152k|    static_cast<    \
  |  | 1056|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   152k|    static_cast<    \
  |  | 1056|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   152k|    {
 8879|   152k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  12.4k|        : base(unexpect, std::move(e.error())),
 1615|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.4k|    {
 1617|  12.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8978|   945k|    {
 8979|   945k|        return m_current;
 8980|   945k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|   948k|    {
 8872|   948k|        return m_locale;
 8873|   948k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   970k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   970k|    static_cast<    \
  |  | 1056|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   970k|    static_cast<    \
  |  | 1056|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   970k|    {
 8879|   970k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  25.9k|        : base(unexpect, std::move(e.error())),
 1615|  25.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  25.9k|    {
 1617|  25.9k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   128k|        : base(unexpect, std::move(e.error())),
 1615|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   128k|    {
 1617|   128k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   128k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   128k|          m_has_value(false)
  550|   128k|    {
  551|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   128k|    {
 1315|   128k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|  7.26M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  7.26M|        : m_deferred_init(), m_has_value(true)
  529|  7.26M|    {
  530|  7.26M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  1.42M|    {
 4558|  1.42M|        return x.is_at_end();
 4559|  1.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  2.90M|    {
 4602|  2.90M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 2.90M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  2.90M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 2.90M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  2.90M|        return !read_at_position();
 4609|  2.90M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|  7.97M|    {
 4582|  7.97M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  7.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  7.97M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 7.97M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  7.97M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  7.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 6.46M, False: 1.50M]
  |  |  ------------------
  ------------------
 4589|  6.46M|            return true;
 4590|  6.46M|        }
 4591|       |
 4592|  2.98M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 1.50M, False: 1.48M]
  ------------------
 4593|  1.50M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 17.1k, False: 1.48M]
  ------------------
 4594|  17.1k|                return false;
 4595|  17.1k|            }
 4596|  1.50M|        }
 4597|  1.48M|        return true;
 4598|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  2.63M|    {
 4517|  2.63M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  2.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 2.63M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  2.63M|        auto res = read_at_position();
 4526|  2.63M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  2.63M|        return parent()->get_character_at(m_position);
 4528|  2.63M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  2.63M|    {
 4387|  2.63M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.43M, False: 1.20M]
  |  |  ------------------
  ------------------
 4388|  2.63M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  1.43M|            return m_putback_buffer[pos];
 4390|  1.43M|        }
 4391|  1.20M|        const auto start = pos - m_putback_buffer.size();
 4392|  1.20M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  1.20M|        return m_current_view[start];
 4394|  1.20M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|   123k|        : base(std::in_place, std::forward<U>(val)),
 1569|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   123k|    {
 1571|   123k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   123k|    {
  442|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   125k|    {
 1315|   125k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  2.16k|        : base(unexpect, std::move(e.error())),
 1615|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  2.16k|    {
 1617|  2.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.16k|          m_has_value(false)
  451|  2.16k|    {
  452|  2.16k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  12.1k|        : m_unexpected(std::forward<Args>(args)...)
  359|  12.1k|    {
  360|  12.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  12.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  2.42M|    {
 4503|  2.42M|        ++m_position;
 4504|  2.42M|        (void)read_at_position();
 4505|  2.42M|        return *this;
 4506|  2.42M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  1.04M|    {
 4552|  1.04M|        return !(lhs == rhs);
 4553|  1.04M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  1.05M|    {
 4547|  1.05M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 1.05M, False: 0]
  |  Branch (4547:46): [True: 182k, False: 868k]
  ------------------
 4548|  1.05M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  12.1k|        : m_unexpected(std::forward<Err>(e))
  350|  12.1k|    {
  351|  12.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.1k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    932|        : base(unexpect, std::move(e.error())),
 1615|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    932|    {
 1617|    932|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    932|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    932|          m_has_value(false)
  451|    932|    {
  452|    932|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   101k|    {
 1315|   101k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   100k|        : base(std::in_place, std::forward<U>(val)),
 1569|   100k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   100k|    {
 1571|   100k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   100k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   100k|    {
  442|   100k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|   101k|    {
 1739|   101k|        return has_value();
 1740|   101k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   203k|    {
  490|   203k|        return m_has_value;
  491|   203k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|    932|    {
 1745|    932|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    932|        return this->get_unexpected().error();
 1747|    932|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    932|    {
  473|    932|        return m_unexpected;
  474|    932|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   100k|    {
 1804|   100k|        return std::move(value());
 1805|   100k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   100k|    {
 1768|   100k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   100k|        return this->get_value();
 1770|   100k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   100k|    {
  456|   100k|        return m_value;
  457|   100k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  4.46M|    {
 3483|  4.46M|        return m_sentinel;
 3484|  4.46M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   310k|    {
 1739|   310k|        return has_value();
 1740|   310k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   620k|    {
  490|   620k|        return m_has_value;
  491|   620k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|  14.6k|    {
 1745|  14.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  14.6k|        return this->get_unexpected().error();
 1747|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   245k|    {
 1804|   245k|        return std::move(value());
 1805|   245k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   295k|    {
 1768|   295k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   295k|        return this->get_value();
 1770|   295k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   295k|    {
  456|   295k|        return m_value;
  457|   295k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3478|   130k|    {
 3479|   130k|        return m_iterator;
 3480|   130k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3482|   130k|    {
 3483|   130k|        return m_sentinel;
 3484|   130k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|   124k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   124k|    static_cast<    \
  |  | 1056|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   124k|    static_cast<    \
  |  | 1056|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   124k|    {
 3465|   124k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  1.48M|    {
 4569|  1.48M|        return !x.is_at_end();
 4570|  1.48M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  3.27k|        : base(unexpect, std::move(e.error())),
 1615|  3.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.27k|    {
 1617|  3.27k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.27k|          m_has_value(false)
  451|  3.27k|    {
  452|  3.27k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   195k|    {
 1315|   195k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|   192k|        : base(std::in_place, std::forward<U>(val)),
 1569|   192k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   192k|    {
 1571|   192k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   192k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   192k|    {
  442|   192k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  1.30k|        : base(unexpect, std::move(e.error())),
 1615|  1.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.30k|    {
 1617|  1.30k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30k|          m_has_value(false)
  451|  1.30k|    {
  452|  1.30k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   158k|    {
 1315|   158k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   156k|        : base(std::in_place, std::forward<U>(val)),
 1569|   156k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   156k|    {
 1571|   156k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   156k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   156k|    {
  442|   156k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1738|   158k|    {
 1739|   158k|        return has_value();
 1740|   158k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   316k|    {
  490|   316k|        return m_has_value;
  491|   316k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1744|  1.30k|    {
 1745|  1.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.30k|        return this->get_unexpected().error();
 1747|  1.30k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.30k|    {
  473|  1.30k|        return m_unexpected;
  474|  1.30k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   156k|    {
 1804|   156k|        return std::move(value());
 1805|   156k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   156k|    {
 1768|   156k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   156k|        return this->get_value();
 1770|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   156k|    {
  456|   156k|        return m_value;
  457|   156k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   767k|    {
 2999|   767k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   767k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   767k|    {
 2980|   767k|        return t.data();
 2981|   767k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|  2.60M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.60M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.60M|    {
 1571|  2.60M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.60M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.60M|    {
  442|  2.60M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|  50.0k|    {
 1794|  50.0k|        return value();
 1795|  50.0k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|  77.3k|    {
 1794|  77.3k|        return value();
 1795|  77.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1568|    680|        : base(std::in_place, std::forward<U>(val)),
 1569|    680|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    680|    {
 1571|    680|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    680|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    680|    {
  442|    680|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1568|  1.36k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.36k|    {
 1571|  1.36k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.36k|    {
  442|  1.36k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  24.3M|    {
 4558|  24.3M|        return x.is_at_end();
 4559|  24.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|  47.7M|    {
 4602|  47.7M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 47.7M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  47.7M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 47.7M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  47.7M|        return !read_at_position();
 4609|  47.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|   126M|    {
 4582|   126M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|   126M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   126M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   126M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 126M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   126M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|   126M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 103M, False: 23.1M]
  |  |  ------------------
  ------------------
 4589|   103M|            return true;
 4590|   103M|        }
 4591|       |
 4592|  46.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 23.1M, False: 23.1M]
  ------------------
 4593|  23.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 20.7k, False: 23.1M]
  ------------------
 4594|  20.7k|                return false;
 4595|  20.7k|            }
 4596|  23.1M|        }
 4597|  23.1M|        return true;
 4598|  23.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|   172M|    {
 4356|   172M|        return m_putback_buffer.size() + m_current_view.size();
 4357|   172M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|  46.6M|    {
 4517|  46.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  46.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  46.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 46.6M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  46.6M|        auto res = read_at_position();
 4526|  46.6M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  46.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  46.6M|        return parent()->get_character_at(m_position);
 4528|  46.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|  46.6M|    {
 4387|  46.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  46.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24.2M, False: 22.3M]
  |  |  ------------------
  ------------------
 4388|  46.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  24.2M|            return m_putback_buffer[pos];
 4390|  24.2M|        }
 4391|  22.3M|        const auto start = pos - m_putback_buffer.size();
 4392|  22.3M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  22.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  22.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  22.3M|        return m_current_view[start];
 4394|  22.3M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|   770k|        : base(std::in_place, std::forward<U>(val)),
 1569|   770k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   770k|    {
 1571|   770k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   770k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   770k|    {
  442|   770k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   772k|    {
 1315|   772k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  2.22k|        : base(unexpect, std::move(e.error())),
 1615|  2.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  2.22k|    {
 1617|  2.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.22k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.22k|          m_has_value(false)
  451|  2.22k|    {
  452|  2.22k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|  31.9M|    {
 4503|  31.9M|        ++m_position;
 4504|  31.9M|        (void)read_at_position();
 4505|  31.9M|        return *this;
 4506|  31.9M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|  9.18M|    {
 4552|  9.18M|        return !(lhs == rhs);
 4553|  9.18M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|  9.18M|    {
 4547|  9.18M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 9.18M, False: 0]
  |  Branch (4547:46): [True: 312k, False: 8.87M]
  ------------------
 4548|  9.18M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|   130M|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|   130M|    else {
 4074|       |        // utf-32
 4075|   130M|        static_assert(sizeof(U) == 4);
 4076|   130M|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|   130M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|   130M|        return 1;
 4078|   130M|    }
 4079|   130M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   130M|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|   130M|    else {
 4280|   130M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|   130M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   130M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|   130M|        auto cp = static_cast<char32_t>(input.front());
 4282|   130M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   130M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 780k, False: 129M]
  |  |  ------------------
  ------------------
 4283|   780k|            return invalid_code_point;
 4284|   780k|        }
 4285|   129M|        return cp;
 4286|   130M|    }
 4287|   130M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    890|        : base(unexpect, std::move(e.error())),
 1615|    890|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    890|    {
 1617|    890|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    890|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    890|          m_has_value(false)
  451|    890|    {
  452|    890|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   617k|    {
 1315|   617k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   616k|        : base(std::in_place, std::forward<U>(val)),
 1569|   616k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   616k|    {
 1571|   616k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   616k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   616k|    {
  442|   616k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|   617k|    {
 1739|   617k|        return has_value();
 1740|   617k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|    890|    {
 1745|    890|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    890|        return this->get_unexpected().error();
 1747|    890|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    890|    {
  473|    890|        return m_unexpected;
  474|    890|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   616k|    {
 1804|   616k|        return std::move(value());
 1805|   616k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   616k|    {
 1768|   616k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   616k|        return this->get_value();
 1770|   616k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   616k|    {
  456|   616k|        return m_value;
  457|   616k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  73.5M|    {
 3483|  73.5M|        return m_sentinel;
 3484|  73.5M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|  1.86M|    {
 1739|  1.86M|        return has_value();
 1740|  1.86M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.73M|    {
  490|  3.73M|        return m_has_value;
  491|  3.73M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|  28.1k|    {
 1745|  28.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  28.1k|        return this->get_unexpected().error();
 1747|  28.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.1k|    {
  473|  28.1k|        return m_unexpected;
  474|  28.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  1.53M|    {
 1804|  1.53M|        return std::move(value());
 1805|  1.53M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  1.83M|    {
 1768|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.83M|        return this->get_value();
 1770|  1.83M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.83M|    {
  456|  1.83M|        return m_value;
  457|  1.83M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|  60.8M|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|  60.8M|    else {
 3965|  60.8M|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|  60.8M|                                       to_address(first), to_address(last)))};
 3967|  60.8M|    }
 3968|  60.8M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   182M|{
  316|   182M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   182M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   182M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3478|   777k|    {
 3479|   777k|        return m_iterator;
 3480|   777k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3482|   777k|    {
 3483|   777k|        return m_sentinel;
 3484|   777k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|   770k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   770k|    static_cast<    \
  |  | 1056|   770k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   770k|    static_cast<    \
  |  | 1056|   770k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   770k|    {
 3465|   770k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  23.4M|    {
 4569|  23.4M|        return !x.is_at_end();
 4570|  23.4M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  4.45k|        : base(unexpect, std::move(e.error())),
 1615|  4.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  4.45k|    {
 1617|  4.45k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.45k|          m_has_value(false)
  451|  4.45k|    {
  452|  4.45k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.54M|    {
 1315|  1.54M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  1.54M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.54M|    {
 1571|  1.54M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.54M|    {
  442|  1.54M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.08M|    {
  490|  3.08M|        return m_has_value;
  491|  3.08M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  1.54M|    {
 1768|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.54M|        return this->get_value();
 1770|  1.54M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.54M|    {
  456|  1.54M|        return m_value;
  457|  1.54M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  1.78k|        : base(unexpect, std::move(e.error())),
 1615|  1.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.78k|    {
 1617|  1.78k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.78k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.78k|          m_has_value(false)
  451|  1.78k|    {
  452|  1.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.23M|    {
 1315|  1.23M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  1.23M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.23M|    {
 1571|  1.23M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.23M|    {
  442|  1.23M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  1.54M|    {
 1978|  1.54M|        return detail::transform_error_impl(std::move(*this),
 1979|  1.54M|                                            std::forward<F>(f));
 1980|  1.54M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  1.54M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.54M|    else {
 1471|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.54M, False: 4.45k]
  |  |  ------------------
  ------------------
 1473|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.54M|                   : result(unexpect,
 1475|  4.45k|                            trivial_invoke(std::forward<F>(f),
 1476|  4.45k|                                           std::forward<Exp>(exp).error()));
 1477|  1.54M|    }
 1478|  1.54M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  1.54M|    {
 1804|  1.54M|        return std::move(value());
 1805|  1.54M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|  4.45k|    {
 1755|  4.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  4.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  4.45k|        return std::move(this->get_unexpected().error());
 1757|  4.45k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.45k|    {
  473|  4.45k|        return m_unexpected;
  474|  4.45k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  4.45k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  4.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  4.45k|    {
 1627|  4.45k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1738|  1.23M|    {
 1739|  1.23M|        return has_value();
 1740|  1.23M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.46M|    {
  490|  2.46M|        return m_has_value;
  491|  2.46M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1744|  1.78k|    {
 1745|  1.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.78k|        return this->get_unexpected().error();
 1747|  1.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.78k|    {
  473|  1.78k|        return m_unexpected;
  474|  1.78k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  1.23M|    {
 1804|  1.23M|        return std::move(value());
 1805|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  1.23M|    {
 1768|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.23M|        return this->get_value();
 1770|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.23M|    {
  456|  1.23M|        return m_value;
  457|  1.23M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  2.83M|    {
 2999|  2.83M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  2.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  2.83M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  2.83M|    {
 2980|  2.83M|        return t.data();
 2981|  2.83M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   305k|    {
 1794|   305k|        return value();
 1795|   305k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|   611k|    {
 1794|   611k|        return value();
 1795|   611k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1568|    116|        : base(std::in_place, std::forward<U>(val)),
 1569|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    116|    {
 1571|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    116|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    116|    {
  442|    116|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1568|    232|        : base(std::in_place, std::forward<U>(val)),
 1569|    232|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    232|    {
 1571|    232|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    232|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    232|    {
  442|    232|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|  10.9M|    {
 4356|  10.9M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  10.9M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|   280k|    {
 6194|   280k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   280k|        return static_cast<std::size_t>(m_desc &
 6199|   280k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   280k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|   561k|    {
 6220|   561k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   561k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|   280k|    {
 6162|   280k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   280k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   280k|        const auto t = type(id);
 6174|   280k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   280k|        basic_scan_arg<Context> arg;
 6179|   280k|        arg.m_type = t;
 6180|   280k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 280k, False: 0]
  ------------------
 6181|   280k|            arg.m_value.ref_value = m_builtin_values[id];
 6182|   280k|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|   280k|        return arg;
 6187|   280k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|   280k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   280k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   280k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   280k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   280k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|   280k|    {
 6224|   280k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   280k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|   486k|    {
 5978|   486k|        return m_type != detail::arg_type::none_type;
 5979|   486k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|   117k|{
 9362|   117k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   117k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   117k|{
 9251|   117k|#define SCN_VISIT(Type)                                                \
 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   117k|    }                                                                  \
 9255|   117k|    else {                                                             \
 9256|   117k|        return vis(monostate_val);                                     \
 9257|   117k|    }
 9258|       |
 9259|   117k|    monostate monostate_val{};
 9260|       |
 9261|   117k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 117k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 117k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 117k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 117k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 117k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 117k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 117k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 117k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 117k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 117k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 117k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 117k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 117k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 117k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 117k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 117k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 117k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 117k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 117k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 117k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|  58.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 58.6k, False: 58.6k]
  ------------------
 9311|  58.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  58.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  58.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  58.6k|    }                                                                  \
  |  | 9255|  58.6k|    else {                                                             \
  |  | 9256|  58.6k|        return vis(monostate_val);                                     \
  |  | 9257|  58.6k|    }
  ------------------
 9312|   117k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 58.6k, False: 58.6k]
  ------------------
 9313|   117k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   117k|    }                                                                  \
  |  | 9255|   117k|    else {                                                             \
  |  | 9256|   117k|        return vis(monostate_val);                                     \
  |  | 9257|   117k|    }
  ------------------
 9314|   117k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 117k]
  ------------------
 9315|   117k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   117k|    }                                                                  \
  |  | 9255|   117k|    else {                                                             \
  |  | 9256|   117k|        return vis(monostate_val);                                     \
  |  | 9257|   117k|    }
  ------------------
 9316|   117k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 117k]
  ------------------
 9317|   117k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   117k|    }                                                                  \
  |  | 9255|   117k|    else {                                                             \
  |  | 9256|   117k|        return vis(monostate_val);                                     \
  |  | 9257|   117k|    }
  ------------------
 9318|   117k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 117k]
  ------------------
 9319|   117k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   117k|    }                                                                  \
  |  | 9255|   117k|    else {                                                             \
  |  | 9256|   117k|        return vis(monostate_val);                                     \
  |  | 9257|   117k|    }
  ------------------
 9320|   117k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 117k]
  ------------------
 9321|   117k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   117k|    }                                                                  \
  |  | 9255|   117k|    else {                                                             \
  |  | 9256|   117k|        return vis(monostate_val);                                     \
  |  | 9257|   117k|    }
  ------------------
 9322|       |
 9323|   117k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 117k]
  ------------------
 9324|   117k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   117k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   117k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 117k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 117k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   117k|            SCN_CLANG_POP
 9341|   117k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   638k|{
 6023|   638k|    return arg.m_type;
 6024|   638k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   334k|{
 6035|   334k|    return arg.m_value;
 6036|   334k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|  58.2k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|  58.2k|    {
 8964|  58.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|   133k|{
 4690|   133k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 133k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   133k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   133k|                            ranges::default_sentinel};
 4696|   133k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|   133k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   133k|    {
 4454|   133k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   133k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   133k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  75.3k|{
 9362|  75.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  75.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  75.3k|{
 9251|  75.3k|#define SCN_VISIT(Type)                                                \
 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  75.3k|    }                                                                  \
 9255|  75.3k|    else {                                                             \
 9256|  75.3k|        return vis(monostate_val);                                     \
 9257|  75.3k|    }
 9258|       |
 9259|  75.3k|    monostate monostate_val{};
 9260|       |
 9261|  75.3k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 75.3k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 75.3k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 75.3k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 75.3k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 75.3k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 75.3k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 75.3k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 75.3k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 75.3k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 75.3k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 75.3k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 75.3k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 75.3k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 75.3k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 75.3k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 75.3k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 75.3k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 75.3k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 75.3k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 75.3k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 75.3k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|  75.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 75.3k, False: 0]
  ------------------
 9313|  75.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  75.3k|    }                                                                  \
  |  | 9255|  75.3k|    else {                                                             \
  |  | 9256|  75.3k|        return vis(monostate_val);                                     \
  |  | 9257|  75.3k|    }
  ------------------
 9314|  75.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 75.3k]
  ------------------
 9315|  75.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  75.3k|    }                                                                  \
  |  | 9255|  75.3k|    else {                                                             \
  |  | 9256|  75.3k|        return vis(monostate_val);                                     \
  |  | 9257|  75.3k|    }
  ------------------
 9316|  75.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 75.3k]
  ------------------
 9317|  75.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  75.3k|    }                                                                  \
  |  | 9255|  75.3k|    else {                                                             \
  |  | 9256|  75.3k|        return vis(monostate_val);                                     \
  |  | 9257|  75.3k|    }
  ------------------
 9318|  75.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 75.3k]
  ------------------
 9319|  75.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  75.3k|    }                                                                  \
  |  | 9255|  75.3k|    else {                                                             \
  |  | 9256|  75.3k|        return vis(monostate_val);                                     \
  |  | 9257|  75.3k|    }
  ------------------
 9320|  75.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 75.3k]
  ------------------
 9321|  75.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  75.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  75.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  75.3k|    }                                                                  \
  |  | 9255|  75.3k|    else {                                                             \
  |  | 9256|  75.3k|        return vis(monostate_val);                                     \
  |  | 9257|  75.3k|    }
  ------------------
 9322|       |
 9323|  75.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 75.3k]
  ------------------
 9324|  75.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  75.3k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  75.3k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 75.3k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 75.3k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  75.3k|            SCN_CLANG_POP
 9341|  75.3k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|  93.8k|        : m_format{format},
 6293|  93.8k|          m_next_arg_id{next_arg_id},
 6294|  93.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  93.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  93.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  93.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  93.8k|    {
 6300|  93.8k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  93.8k|    {
 3074|  93.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  93.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|  93.8k|    {
 3040|  93.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  93.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  93.8k|{
 7809|  93.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  93.8k|    handler.check_args_exhausted();
 7811|  93.8k|    return handler.get_error();
 7812|  93.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  93.8k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  93.8k|    auto begin = format.data();
 7777|  93.8k|    auto it = begin;
 7778|  93.8k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   169k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 93.8k, False: 75.9k]
  ------------------
 7781|  93.8k|        const auto ch = *it++;
 7782|  93.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 93.8k, False: 0]
  ------------------
 7783|  93.8k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  93.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  93.8k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 17.8k, False: 75.9k]
  ------------------
 7787|  17.8k|                return;
 7788|  17.8k|            }
 7789|  93.8k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  93.8k|    }
 7800|       |
 7801|  75.9k|    handler.on_literal_text(begin, end);
 7802|  75.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|  93.8k|{
 7706|  93.8k|    struct id_adapter {
 7707|  93.8k|        constexpr void operator()()
 7708|  93.8k|        {
 7709|  93.8k|            arg_id = handler.on_arg_id();
 7710|  93.8k|        }
 7711|  93.8k|        constexpr void operator()(std::size_t id)
 7712|  93.8k|        {
 7713|  93.8k|            arg_id = handler.on_arg_id(id);
 7714|  93.8k|        }
 7715|       |
 7716|  93.8k|        constexpr void on_error(const char* msg)
 7717|  93.8k|        {
 7718|  93.8k|            SCN_UNLIKELY_ATTR
 7719|  93.8k|            handler.on_error(msg);
 7720|  93.8k|        }
 7721|       |
 7722|  93.8k|        Handler& handler;
 7723|  93.8k|        std::size_t arg_id;
 7724|  93.8k|    };
 7725|       |
 7726|  93.8k|    ++begin;
 7727|  93.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 93.8k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  93.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 93.8k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  93.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 93.8k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  93.8k|    else {
 7739|  93.8k|        auto adapter = id_adapter{handler, 0};
 7740|  93.8k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  93.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 93.8k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  93.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 93.8k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  93.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 93.8k, False: 0]
  ------------------
 7751|  93.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 93.8k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  93.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  93.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.15k, False: 86.6k]
  |  |  |  Branch (986:45): [True: 0, False: 93.8k]
  |  |  |  Branch (986:45): [True: 7.15k, False: 86.6k]
  |  |  ------------------
  ------------------
 7757|  7.15k|                handler.on_error("Unknown format specifier");
 7758|  7.15k|                return begin;
 7759|  7.15k|            }
 7760|  93.8k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  93.8k|    }
 7767|  86.6k|    return begin + 1;
 7768|  93.8k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|   152k|    {
 8862|   152k|        return m_args.get(id);
 8863|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|   152k|    {
 6328|   152k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   152k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   152k|        do_check_arg_id(id);
 6336|   152k|        return id;
 6337|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|   152k|{
 6822|   152k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   152k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   152k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  93.8k|{
 7207|  93.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  93.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 93.8k, False: 0]
  |  Branch (7208:26): [True: 0, False: 93.8k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  93.8k|    handler();
 7213|  93.8k|    return begin;
 7214|  93.8k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7155|  10.7k|{
 7156|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7157|  10.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1051|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7158|       |
 7159|  10.7k|    unsigned long long value = 0;
 7160|  21.4k|    do {
 7161|  21.4k|        value *= 10;
 7162|  21.4k|        value += static_cast<unsigned long long>(*begin - '0');
 7163|  21.4k|        if (value >
  ------------------
  |  Branch (7163:13): [True: 0, False: 21.4k]
  ------------------
 7164|  21.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7165|      0|            return -1;
 7166|      0|        }
 7167|  21.4k|        ++begin;
 7168|  21.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7168:14): [True: 21.4k, False: 0]
  |  Branch (7168:30): [True: 21.4k, False: 0]
  |  Branch (7168:47): [True: 10.7k, False: 10.7k]
  ------------------
 7169|  10.7k|    return static_cast<int>(value);
 7170|  10.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  93.8k|        {
 7709|  93.8k|            arg_id = handler.on_arg_id();
 7710|  93.8k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|   141k|    {
 6323|   141k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   141k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|   293k|    {
 6312|   293k|        return m_format.data();
 6313|   293k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|  93.8k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|  93.8k|    {
 7889|  93.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|  93.8k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7621|  93.8k|{
 7622|  93.8k|    auto do_presentation = [&]() -> const CharT* {
 7623|  93.8k|        if (*begin == CharT{'['}) {
 7624|  93.8k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  93.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|  93.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|  93.8k|                return begin;
 7630|  93.8k|            }
 7631|  93.8k|            handler.on_character_set_string(set);
 7632|  93.8k|            return begin;
 7633|  93.8k|        }
 7634|  93.8k|        if (*begin == CharT{'/'}) {
 7635|  93.8k|            return parse_presentation_regex(begin, end, handler);
 7636|  93.8k|        }
 7637|  93.8k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  93.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|  93.8k|            handler.on_error("Invalid type specifier in format string");
 7640|  93.8k|            return begin;
 7641|  93.8k|        }
 7642|  93.8k|        handler.on_type(type);
 7643|  93.8k|        return begin;
 7644|  93.8k|    };
 7645|       |
 7646|  93.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 93.8k, False: 0]
  |  Branch (7646:28): [True: 81.7k, False: 12.0k]
  ------------------
 7647|  93.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 81.7k, False: 0]
  |  Branch (7647:36): [True: 78.1k, False: 3.57k]
  ------------------
 7648|  78.1k|        return do_presentation();
 7649|  78.1k|    }
 7650|       |
 7651|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  15.6k|    begin = parse_align(begin, end, handler);
 7657|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  15.6k|    begin = parse_width(begin, end, handler);
 7663|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  15.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 15.6k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  15.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 3.57k, False: 12.0k]
  ------------------
 7682|  3.57k|        handler.on_localized();
 7683|  3.57k|        ++begin;
 7684|  3.57k|    }
 7685|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  15.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 15.6k, False: 0]
  |  Branch (7690:25): [True: 12.0k, False: 3.57k]
  ------------------
 7691|  12.0k|        do_presentation();
 7692|  12.0k|    }
 7693|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  15.6k|    return begin;
 7699|  15.6k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7270|   133k|{
 7271|   133k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 128k, False: 5.36k]
  |  Branch (7271:33): [True: 128k, False: 0]
  ------------------
 7272|   133k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 5.36k, False: 0]
  |  Branch (7272:33): [True: 5.36k, False: 0]
  ------------------
 7273|   133k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|  90.2k|    auto do_presentation = [&]() -> const CharT* {
 7623|  90.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 4.93k, False: 85.3k]
  ------------------
 7624|  4.93k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  4.93k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|  4.93k|            handler.on_character_set_string(set);
 7632|  4.93k|            return begin;
 7633|  4.93k|        }
 7634|  85.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 85.3k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|  85.3k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  85.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 81.7k]
  |  |  ------------------
  ------------------
 7639|  3.57k|            handler.on_error("Invalid type specifier in format string");
 7640|  3.57k|            return begin;
 7641|  3.57k|        }
 7642|  81.7k|        handler.on_type(type);
 7643|  81.7k|        return begin;
 7644|  85.3k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7460|  4.93k|{
 7461|  4.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  4.93k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  4.93k|    auto start = begin;
 7465|  4.93k|    ++begin;
 7466|       |
 7467|  4.93k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|  4.93k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 0, False: 4.93k]
  ------------------
 7474|      0|        handler.on_charset_inverted();
 7475|      0|        ++begin;
 7476|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 0, False: 0]
  ------------------
 7483|      0|            handler.on_charset_single(char32_t{']'});
 7484|      0|            ++begin;
 7485|      0|        }
 7486|      0|    }
 7487|  4.93k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 4.93k]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|  14.8k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 14.8k, False: 0]
  ------------------
 7492|  14.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|  14.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 4.93k, False: 9.87k]
  ------------------
 7497|  4.93k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  4.93k|        }
 7499|       |
 7500|  9.87k|        parse_presentation_set_literal(begin, end, handler);
 7501|  9.87k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|  4.93k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7424|  9.87k|{
 7425|  9.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  9.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  9.87k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  9.87k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 9.87k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|  9.87k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 9.87k, False: 0]
  |  Branch (7432:25): [True: 9.87k, False: 0]
  |  Branch (7432:49): [True: 9.87k, False: 0]
  ------------------
 7433|  9.87k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 9.87k, False: 0]
  ------------------
 7434|  9.87k|        ++begin;
 7435|       |
 7436|  9.87k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  9.87k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 9.87k]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|  9.87k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 9.87k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|  9.87k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  9.87k|        return;
 7450|  9.87k|    }
 7451|       |
 7452|      0|    handler.on_charset_single(cp_first);
 7453|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7400|  19.7k|{
 7401|  19.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  19.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  19.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 19.7k]
  |  |  |  Branch (986:45): [True: 0, False: 19.7k]
  |  |  |  Branch (986:45): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  19.7k|    const auto cp =
 7410|  19.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  19.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|  19.7k|    begin += len;
 7417|  19.7k|    return cp;
 7418|  19.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7114|  7.40k|    {
 7115|  7.40k|        m_specs.charset_string_data = fmt.data();
 7116|  7.40k|        m_specs.charset_string_size = fmt.size();
 7117|  7.40k|        on_type(presentation_type::string_set);
 7118|  7.40k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7218|   139k|{
 7219|   139k|    switch (type) {
 7220|      0|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 0, False: 139k]
  ------------------
 7221|      0|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 0, False: 139k]
  ------------------
 7222|      0|            return presentation_type::int_binary;
 7223|      0|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 0, False: 139k]
  ------------------
 7224|      0|            return presentation_type::int_decimal;
 7225|      0|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 0, False: 139k]
  ------------------
 7226|      0|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 139k]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|      0|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 0, False: 139k]
  ------------------
 7230|      0|            return presentation_type::int_octal;
 7231|      0|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 0, False: 139k]
  ------------------
 7232|      0|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 139k]
  ------------------
 7233|      0|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 139k]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 139k]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|      0|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 0, False: 139k]
  ------------------
 7238|      0|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 139k]
  ------------------
 7239|      0|            return presentation_type::float_hex;
 7240|      0|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 0, False: 139k]
  ------------------
 7241|      0|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 139k]
  ------------------
 7242|      0|            return presentation_type::float_scientific;
 7243|      0|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 0, False: 139k]
  ------------------
 7244|      0|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 139k]
  ------------------
 7245|      0|            return presentation_type::float_fixed;
 7246|      0|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 0, False: 139k]
  ------------------
 7247|      0|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 139k]
  ------------------
 7248|      0|            return presentation_type::float_general;
 7249|   128k|        case 's':
  ------------------
  |  Branch (7249:9): [True: 128k, False: 10.7k]
  ------------------
 7250|   128k|            return presentation_type::string;
 7251|  5.36k|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 5.36k, False: 133k]
  ------------------
 7252|  5.36k|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 139k]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 139k]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 139k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 139k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|  5.36k|        default:
  ------------------
  |  Branch (7263:9): [True: 5.36k, False: 133k]
  ------------------
 7264|  5.36k|            return presentation_type::none;
 7265|   139k|    }
 7266|   139k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7295|  15.6k|{
 7296|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  15.6k|    auto check_align = [](wchar_t ch) {
 7299|  15.6k|        switch (ch) {
 7300|  15.6k|            case L'<':
 7301|  15.6k|                return align_type::left;
 7302|  15.6k|            case L'>':
 7303|  15.6k|                return align_type::right;
 7304|  15.6k|            case L'^':
 7305|  15.6k|                return align_type::center;
 7306|  15.6k|            default:
 7307|  15.6k|                return align_type::none;
 7308|  15.6k|        }
 7309|  15.6k|    };
 7310|       |
 7311|  15.6k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  15.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  |  Branch (986:45): [True: 0, False: 15.6k]
  |  |  |  Branch (986:45): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7313|  15.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  15.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  15.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  15.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  15.6k|    const auto begin_before_fill = begin;
 7323|  15.6k|    begin += potential_fill_len;
 7324|       |
 7325|  15.6k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 15.6k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  15.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  15.6k|    const auto begin_after_fill = begin;
 7331|  15.6k|    ++begin;
 7332|       |
 7333|  15.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 15.6k, False: 0]
  ------------------
 7334|  15.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  15.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 4.93k, False: 10.7k]
  ------------------
 7339|  4.93k|            return begin_before_fill;
 7340|  4.93k|        }
 7341|  15.6k|    }
 7342|       |
 7343|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 10.7k, False: 0]
  ------------------
 7344|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 10.7k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  10.7k|        return begin_before_fill;
 7349|  10.7k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  10.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7277|  23.4k|{
 7278|  23.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|       |    if constexpr (sizeof(CharT) != 1) {
 7280|       |        return 1;
 7281|       |    }
 7282|  23.4k|    else {
 7283|  23.4k|        const auto lengths =
 7284|  23.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|  23.4k|            "\3\4";
 7286|  23.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|  23.4k|        return len;
 7288|  23.4k|    }
 7289|  23.4k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|  31.3k|    auto check_align = [](wchar_t ch) {
 7299|  31.3k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 31.3k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 31.3k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 31.3k]
  ------------------
 7305|      0|                return align_type::center;
 7306|  31.3k|            default:
  ------------------
  |  Branch (7306:13): [True: 31.3k, False: 0]
  ------------------
 7307|  31.3k|                return align_type::none;
 7308|  31.3k|        }
 7309|  31.3k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7360|  15.6k|{
 7361|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  15.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 15.6k, False: 0]
  |  Branch (7363:33): [True: 7.15k, False: 8.51k]
  ------------------
 7364|  7.15k|        int width = parse_simple_int(begin, end);
 7365|  7.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  7.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.15k, False: 0]
  |  |  ------------------
  ------------------
 7366|  7.15k|            handler.on_width(width);
 7367|  7.15k|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|  7.15k|    }
 7373|  15.6k|    return begin;
 7374|  15.6k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7893|  3.57k|    {
 7894|  3.57k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  3.57k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 3.57k, False: 0]
  ------------------
 7896|  3.57k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 3.57k, False: 0]
  ------------------
 7897|  3.57k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 3.57k, False: 0]
  ------------------
 7898|  3.57k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 3.57k, False: 0]
  ------------------
 7899|  3.57k|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|  3.57k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|  3.57k|        }
 7904|       |
 7905|      0|        Handler::on_localized();
 7906|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  86.6k|{
 9362|  86.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  86.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  86.6k|{
 9251|  86.6k|#define SCN_VISIT(Type)                                                \
 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  86.6k|    }                                                                  \
 9255|  86.6k|    else {                                                             \
 9256|  86.6k|        return vis(monostate_val);                                     \
 9257|  86.6k|    }
 9258|       |
 9259|  86.6k|    monostate monostate_val{};
 9260|       |
 9261|  86.6k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 86.6k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 86.6k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 86.6k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 86.6k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 86.6k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 86.6k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 86.6k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 86.6k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 86.6k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 86.6k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 86.6k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 86.6k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 86.6k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 86.6k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 86.6k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 86.6k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 86.6k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 86.6k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 86.6k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 86.6k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|  43.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 43.3k, False: 43.3k]
  ------------------
 9311|  43.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  43.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  43.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  43.3k|    }                                                                  \
  |  | 9255|  43.3k|    else {                                                             \
  |  | 9256|  43.3k|        return vis(monostate_val);                                     \
  |  | 9257|  43.3k|    }
  ------------------
 9312|  86.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 43.3k, False: 43.3k]
  ------------------
 9313|  86.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  86.6k|    }                                                                  \
  |  | 9255|  86.6k|    else {                                                             \
  |  | 9256|  86.6k|        return vis(monostate_val);                                     \
  |  | 9257|  86.6k|    }
  ------------------
 9314|  86.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 86.6k]
  ------------------
 9315|  86.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  86.6k|    }                                                                  \
  |  | 9255|  86.6k|    else {                                                             \
  |  | 9256|  86.6k|        return vis(monostate_val);                                     \
  |  | 9257|  86.6k|    }
  ------------------
 9316|  86.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 86.6k]
  ------------------
 9317|  86.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  86.6k|    }                                                                  \
  |  | 9255|  86.6k|    else {                                                             \
  |  | 9256|  86.6k|        return vis(monostate_val);                                     \
  |  | 9257|  86.6k|    }
  ------------------
 9318|  86.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 86.6k]
  ------------------
 9319|  86.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  86.6k|    }                                                                  \
  |  | 9255|  86.6k|    else {                                                             \
  |  | 9256|  86.6k|        return vis(monostate_val);                                     \
  |  | 9257|  86.6k|    }
  ------------------
 9320|  86.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 86.6k]
  ------------------
 9321|  86.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  86.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  86.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  86.6k|    }                                                                  \
  |  | 9255|  86.6k|    else {                                                             \
  |  | 9256|  86.6k|        return vis(monostate_val);                                     \
  |  | 9257|  86.6k|    }
  ------------------
 9322|       |
 9323|  86.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 86.6k]
  ------------------
 9324|  86.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  86.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  86.6k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 86.6k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 86.6k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  86.6k|            SCN_CLANG_POP
 9341|  86.6k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6292|  58.2k|        : m_format{format},
 6293|  58.2k|          m_next_arg_id{next_arg_id},
 6294|  58.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  58.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  58.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  58.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  58.2k|    {
 6300|  58.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  58.2k|{
 7809|  58.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  58.2k|    handler.check_args_exhausted();
 7811|  58.2k|    return handler.get_error();
 7812|  58.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  58.2k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  58.2k|    auto begin = format.data();
 7777|  58.2k|    auto it = begin;
 7778|  58.2k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   107k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 58.2k, False: 49.3k]
  ------------------
 7781|  58.2k|        const auto ch = *it++;
 7782|  58.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 58.2k, False: 0]
  ------------------
 7783|  58.2k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  58.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  58.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 8.94k, False: 49.3k]
  ------------------
 7787|  8.94k|                return;
 7788|  8.94k|            }
 7789|  58.2k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|  58.2k|    }
 7800|       |
 7801|  49.3k|    handler.on_literal_text(begin, end);
 7802|  49.3k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9000|  49.3k|    {
 9001|  49.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  49.3k|    static_cast<    \
  |  | 1056|  49.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|  49.3k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7705|  58.2k|{
 7706|  58.2k|    struct id_adapter {
 7707|  58.2k|        constexpr void operator()()
 7708|  58.2k|        {
 7709|  58.2k|            arg_id = handler.on_arg_id();
 7710|  58.2k|        }
 7711|  58.2k|        constexpr void operator()(std::size_t id)
 7712|  58.2k|        {
 7713|  58.2k|            arg_id = handler.on_arg_id(id);
 7714|  58.2k|        }
 7715|       |
 7716|  58.2k|        constexpr void on_error(const char* msg)
 7717|  58.2k|        {
 7718|  58.2k|            SCN_UNLIKELY_ATTR
 7719|  58.2k|            handler.on_error(msg);
 7720|  58.2k|        }
 7721|       |
 7722|  58.2k|        Handler& handler;
 7723|  58.2k|        std::size_t arg_id;
 7724|  58.2k|    };
 7725|       |
 7726|  58.2k|    ++begin;
 7727|  58.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 58.2k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|  58.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 58.2k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|  58.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 58.2k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|  58.2k|    else {
 7739|  58.2k|        auto adapter = id_adapter{handler, 0};
 7740|  58.2k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  58.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 58.2k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|  58.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 58.2k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|  58.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 58.2k, False: 0]
  ------------------
 7751|  58.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 58.2k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|  58.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  58.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 54.6k]
  |  |  |  Branch (986:45): [True: 0, False: 58.2k]
  |  |  |  Branch (986:45): [True: 3.57k, False: 54.6k]
  |  |  ------------------
  ------------------
 7757|  3.57k|                handler.on_error("Unknown format specifier");
 7758|  3.57k|                return begin;
 7759|  3.57k|            }
 7760|  58.2k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|  58.2k|    }
 7767|  54.6k|    return begin + 1;
 7768|  58.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  58.2k|{
 7207|  58.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  58.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 58.2k, False: 0]
  |  Branch (7208:26): [True: 0, False: 58.2k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|  58.2k|    handler();
 7213|  58.2k|    return begin;
 7214|  58.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  58.2k|        {
 7709|  58.2k|            arg_id = handler.on_arg_id();
 7710|  58.2k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|  58.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|  58.2k|    {
 7889|  58.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|  58.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7621|  58.2k|{
 7622|  58.2k|    auto do_presentation = [&]() -> const CharT* {
 7623|  58.2k|        if (*begin == CharT{'['}) {
 7624|  58.2k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  58.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|  58.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|  58.2k|                return begin;
 7630|  58.2k|            }
 7631|  58.2k|            handler.on_character_set_string(set);
 7632|  58.2k|            return begin;
 7633|  58.2k|        }
 7634|  58.2k|        if (*begin == CharT{'/'}) {
 7635|  58.2k|            return parse_presentation_regex(begin, end, handler);
 7636|  58.2k|        }
 7637|  58.2k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  58.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|  58.2k|            handler.on_error("Invalid type specifier in format string");
 7640|  58.2k|            return begin;
 7641|  58.2k|        }
 7642|  58.2k|        handler.on_type(type);
 7643|  58.2k|        return begin;
 7644|  58.2k|    };
 7645|       |
 7646|  58.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 58.2k, False: 0]
  |  Branch (7646:28): [True: 52.2k, False: 6.04k]
  ------------------
 7647|  58.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 52.2k, False: 0]
  |  Branch (7647:36): [True: 50.4k, False: 1.78k]
  ------------------
 7648|  50.4k|        return do_presentation();
 7649|  50.4k|    }
 7650|       |
 7651|  7.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  7.83k|    begin = parse_align(begin, end, handler);
 7657|  7.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  7.83k|    begin = parse_width(begin, end, handler);
 7663|  7.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  7.83k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 7.83k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  7.83k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 1.78k, False: 6.04k]
  ------------------
 7682|  1.78k|        handler.on_localized();
 7683|  1.78k|        ++begin;
 7684|  1.78k|    }
 7685|  7.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  7.83k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 7.83k, False: 0]
  |  Branch (7690:25): [True: 6.04k, False: 1.78k]
  ------------------
 7691|  6.04k|        do_presentation();
 7692|  6.04k|    }
 7693|  7.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  7.83k|    return begin;
 7699|  7.83k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|  56.4k|    auto do_presentation = [&]() -> const CharT* {
 7623|  56.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 2.46k, False: 54.0k]
  ------------------
 7624|  2.46k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  2.46k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|  2.46k|            handler.on_character_set_string(set);
 7632|  2.46k|            return begin;
 7633|  2.46k|        }
 7634|  54.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 54.0k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|  54.0k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  54.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 52.2k]
  |  |  ------------------
  ------------------
 7639|  1.78k|            handler.on_error("Invalid type specifier in format string");
 7640|  1.78k|            return begin;
 7641|  1.78k|        }
 7642|  52.2k|        handler.on_type(type);
 7643|  52.2k|        return begin;
 7644|  54.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7460|  2.46k|{
 7461|  2.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  2.46k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  2.46k|    auto start = begin;
 7465|  2.46k|    ++begin;
 7466|       |
 7467|  2.46k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|  2.46k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 0, False: 2.46k]
  ------------------
 7474|      0|        handler.on_charset_inverted();
 7475|      0|        ++begin;
 7476|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 0, False: 0]
  ------------------
 7483|      0|            handler.on_charset_single(char32_t{']'});
 7484|      0|            ++begin;
 7485|      0|        }
 7486|      0|    }
 7487|  2.46k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 2.46k]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|  7.40k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 7.40k, False: 0]
  ------------------
 7492|  7.40k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|  7.40k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 2.46k, False: 4.93k]
  ------------------
 7497|  2.46k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  2.46k|        }
 7499|       |
 7500|  4.93k|        parse_presentation_set_literal(begin, end, handler);
 7501|  4.93k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|  2.46k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7424|  4.93k|{
 7425|  4.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  4.93k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  4.93k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|  4.93k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 4.93k, False: 0]
  |  Branch (7432:25): [True: 4.93k, False: 0]
  |  Branch (7432:49): [True: 4.93k, False: 0]
  ------------------
 7433|  4.93k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 4.93k, False: 0]
  ------------------
 7434|  4.93k|        ++begin;
 7435|       |
 7436|  4.93k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  4.93k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|  4.93k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|  4.93k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  4.93k|        return;
 7450|  4.93k|    }
 7451|       |
 7452|      0|    handler.on_charset_single(cp_first);
 7453|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7400|  9.87k|{
 7401|  9.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  9.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  9.87k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  9.87k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 9.87k]
  |  |  |  Branch (986:45): [True: 0, False: 9.87k]
  |  |  |  Branch (986:45): [True: 0, False: 9.87k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  9.87k|    const auto cp =
 7410|  9.87k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  9.87k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 9.87k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|  9.87k|    begin += len;
 7417|  9.87k|    return cp;
 7418|  9.87k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7295|  7.83k|{
 7296|  7.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  7.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  7.83k|    auto check_align = [](wchar_t ch) {
 7299|  7.83k|        switch (ch) {
 7300|  7.83k|            case L'<':
 7301|  7.83k|                return align_type::left;
 7302|  7.83k|            case L'>':
 7303|  7.83k|                return align_type::right;
 7304|  7.83k|            case L'^':
 7305|  7.83k|                return align_type::center;
 7306|  7.83k|            default:
 7307|  7.83k|                return align_type::none;
 7308|  7.83k|        }
 7309|  7.83k|    };
 7310|       |
 7311|  7.83k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  7.83k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  |  Branch (986:45): [True: 0, False: 7.83k]
  |  |  |  Branch (986:45): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7313|  7.83k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  7.83k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  7.83k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  7.83k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  7.83k|    const auto begin_before_fill = begin;
 7323|  7.83k|    begin += potential_fill_len;
 7324|       |
 7325|  7.83k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 7.83k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  7.83k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  7.83k|    const auto begin_after_fill = begin;
 7331|  7.83k|    ++begin;
 7332|       |
 7333|  7.83k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 7.83k, False: 0]
  ------------------
 7334|  7.83k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.83k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  7.83k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 2.46k, False: 5.36k]
  ------------------
 7339|  2.46k|            return begin_before_fill;
 7340|  2.46k|        }
 7341|  7.83k|    }
 7342|       |
 7343|  5.36k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 5.36k, False: 0]
  ------------------
 7344|  5.36k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 5.36k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  5.36k|        return begin_before_fill;
 7349|  5.36k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  5.36k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|  15.6k|    auto check_align = [](wchar_t ch) {
 7299|  15.6k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 15.6k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 15.6k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 15.6k]
  ------------------
 7305|      0|                return align_type::center;
 7306|  15.6k|            default:
  ------------------
  |  Branch (7306:13): [True: 15.6k, False: 0]
  ------------------
 7307|  15.6k|                return align_type::none;
 7308|  15.6k|        }
 7309|  15.6k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7360|  7.83k|{
 7361|  7.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  7.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  7.83k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 7.83k, False: 0]
  |  Branch (7363:33): [True: 3.57k, False: 4.25k]
  ------------------
 7364|  3.57k|        int width = parse_simple_int(begin, end);
 7365|  3.57k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  3.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 3.57k, False: 0]
  |  |  ------------------
  ------------------
 7366|  3.57k|            handler.on_width(width);
 7367|  3.57k|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|  3.57k|    }
 7373|  7.83k|    return begin;
 7374|  7.83k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7893|  1.78k|    {
 7894|  1.78k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  1.78k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 1.78k, False: 0]
  ------------------
 7896|  1.78k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 1.78k, False: 0]
  ------------------
 7897|  1.78k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 1.78k, False: 0]
  ------------------
 7898|  1.78k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 1.78k, False: 0]
  ------------------
 7899|  1.78k|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|  1.78k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|  1.78k|        }
 7904|       |
 7905|      0|        Handler::on_localized();
 7906|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|  54.6k|{
 9362|  54.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  54.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  54.6k|{
 9251|  54.6k|#define SCN_VISIT(Type)                                                \
 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  54.6k|    }                                                                  \
 9255|  54.6k|    else {                                                             \
 9256|  54.6k|        return vis(monostate_val);                                     \
 9257|  54.6k|    }
 9258|       |
 9259|  54.6k|    monostate monostate_val{};
 9260|       |
 9261|  54.6k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 54.6k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 54.6k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 54.6k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 54.6k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 54.6k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 54.6k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 54.6k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 54.6k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 54.6k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 54.6k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 54.6k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 54.6k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 54.6k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 54.6k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 54.6k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 54.6k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 54.6k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 54.6k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 54.6k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 54.6k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 54.6k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|  54.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 54.6k, False: 0]
  ------------------
 9313|  54.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.6k|    }                                                                  \
  |  | 9255|  54.6k|    else {                                                             \
  |  | 9256|  54.6k|        return vis(monostate_val);                                     \
  |  | 9257|  54.6k|    }
  ------------------
 9314|  54.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 54.6k]
  ------------------
 9315|  54.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.6k|    }                                                                  \
  |  | 9255|  54.6k|    else {                                                             \
  |  | 9256|  54.6k|        return vis(monostate_val);                                     \
  |  | 9257|  54.6k|    }
  ------------------
 9316|  54.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 54.6k]
  ------------------
 9317|  54.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.6k|    }                                                                  \
  |  | 9255|  54.6k|    else {                                                             \
  |  | 9256|  54.6k|        return vis(monostate_val);                                     \
  |  | 9257|  54.6k|    }
  ------------------
 9318|  54.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 54.6k]
  ------------------
 9319|  54.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.6k|    }                                                                  \
  |  | 9255|  54.6k|    else {                                                             \
  |  | 9256|  54.6k|        return vis(monostate_val);                                     \
  |  | 9257|  54.6k|    }
  ------------------
 9320|  54.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 54.6k]
  ------------------
 9321|  54.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.6k|    }                                                                  \
  |  | 9255|  54.6k|    else {                                                             \
  |  | 9256|  54.6k|        return vis(monostate_val);                                     \
  |  | 9257|  54.6k|    }
  ------------------
 9322|       |
 9323|  54.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 54.6k]
  ------------------
 9324|  54.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  54.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  54.6k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 54.6k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 54.6k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  54.6k|            SCN_CLANG_POP
 9341|  54.6k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  11.6k|    {
 4351|  11.6k|        return sync(0);
 4352|  11.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|  1.89M|    {
 6194|  1.89M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|  1.89M|        return static_cast<std::size_t>(m_desc &
 6199|  1.89M|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|  1.89M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|  3.79M|    {
 6220|  3.79M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|  3.79M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|  1.89M|    {
 6162|  1.89M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|  1.89M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|  1.89M|        const auto t = type(id);
 6174|  1.89M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|  1.89M|        basic_scan_arg<Context> arg;
 6179|  1.89M|        arg.m_type = t;
 6180|  1.89M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 1.89M, False: 0]
  ------------------
 6181|  1.89M|            arg.m_value.ref_value = m_builtin_values[id];
 6182|  1.89M|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|  1.89M|        return arg;
 6187|  1.89M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|  1.89M|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|  1.89M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|  1.89M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|  1.89M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|  1.89M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|  1.89M|    {
 6224|  1.89M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|  1.89M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|  3.30M|    {
 5978|  3.30M|        return m_type != detail::arg_type::none_type;
 5979|  3.30M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|   926k|{
 9362|   926k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   926k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   926k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   926k|{
 9251|   926k|#define SCN_VISIT(Type)                                                \
 9252|   926k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   926k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   926k|    }                                                                  \
 9255|   926k|    else {                                                             \
 9256|   926k|        return vis(monostate_val);                                     \
 9257|   926k|    }
 9258|       |
 9259|   926k|    monostate monostate_val{};
 9260|       |
 9261|   926k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 926k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 926k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 926k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 926k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 926k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 926k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 926k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 926k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 926k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 926k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 926k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 926k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 926k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 926k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 926k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 926k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 926k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 926k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 926k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 926k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 926k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 926k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|   463k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 463k, False: 463k]
  ------------------
 9315|   463k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   463k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   463k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   463k|    }                                                                  \
  |  | 9255|   463k|    else {                                                             \
  |  | 9256|   463k|        return vis(monostate_val);                                     \
  |  | 9257|   463k|    }
  ------------------
 9316|   926k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 463k, False: 463k]
  ------------------
 9317|   926k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   926k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   926k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   926k|    }                                                                  \
  |  | 9255|   926k|    else {                                                             \
  |  | 9256|   926k|        return vis(monostate_val);                                     \
  |  | 9257|   926k|    }
  ------------------
 9318|   926k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 926k]
  ------------------
 9319|   926k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   926k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   926k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   926k|    }                                                                  \
  |  | 9255|   926k|    else {                                                             \
  |  | 9256|   926k|        return vis(monostate_val);                                     \
  |  | 9257|   926k|    }
  ------------------
 9320|   926k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 926k]
  ------------------
 9321|   926k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   926k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   926k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   926k|    }                                                                  \
  |  | 9255|   926k|    else {                                                             \
  |  | 9256|   926k|        return vis(monostate_val);                                     \
  |  | 9257|   926k|    }
  ------------------
 9322|       |
 9323|   926k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 926k]
  ------------------
 9324|   926k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   926k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   926k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 926k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 926k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   926k|            SCN_CLANG_POP
 9341|   926k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|  4.27M|{
 6023|  4.27M|    return arg.m_type;
 6024|  4.27M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|  2.33M|{
 6035|  2.33M|    return arg.m_value;
 6036|  2.33M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   323k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   323k|    {
 8964|   323k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|   646k|        : m_format{format},
 6293|   646k|          m_next_arg_id{next_arg_id},
 6294|   646k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   646k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   646k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   646k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   646k|    {
 6300|   646k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   646k|    {
 3074|   646k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   646k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   646k|    {
 3040|   646k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   646k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   646k|{
 7809|   646k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   646k|    handler.check_args_exhausted();
 7811|   646k|    return handler.get_error();
 7812|   646k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   646k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   646k|    auto begin = format.data();
 7777|   646k|    auto it = begin;
 7778|   646k|    const auto end = format.data() + format.size();
 7779|       |
 7780|  1.25M|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 646k, False: 610k]
  ------------------
 7781|   646k|        const auto ch = *it++;
 7782|   646k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 646k, False: 0]
  ------------------
 7783|   646k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   646k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   646k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 35.7k, False: 610k]
  ------------------
 7787|  35.7k|                return;
 7788|  35.7k|            }
 7789|   646k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   646k|    }
 7800|       |
 7801|   610k|    handler.on_literal_text(begin, end);
 7802|   610k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|   646k|{
 7706|   646k|    struct id_adapter {
 7707|   646k|        constexpr void operator()()
 7708|   646k|        {
 7709|   646k|            arg_id = handler.on_arg_id();
 7710|   646k|        }
 7711|   646k|        constexpr void operator()(std::size_t id)
 7712|   646k|        {
 7713|   646k|            arg_id = handler.on_arg_id(id);
 7714|   646k|        }
 7715|       |
 7716|   646k|        constexpr void on_error(const char* msg)
 7717|   646k|        {
 7718|   646k|            SCN_UNLIKELY_ATTR
 7719|   646k|            handler.on_error(msg);
 7720|   646k|        }
 7721|       |
 7722|   646k|        Handler& handler;
 7723|   646k|        std::size_t arg_id;
 7724|   646k|    };
 7725|       |
 7726|   646k|    ++begin;
 7727|   646k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 646k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   646k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 646k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   646k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 646k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   646k|    else {
 7739|   646k|        auto adapter = id_adapter{handler, 0};
 7740|   646k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   646k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 646k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   646k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 646k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   646k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 646k, False: 0]
  ------------------
 7751|   646k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 646k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   646k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   646k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.3k, False: 632k]
  |  |  |  Branch (986:45): [True: 0, False: 646k]
  |  |  |  Branch (986:45): [True: 14.3k, False: 632k]
  |  |  ------------------
  ------------------
 7757|  14.3k|                handler.on_error("Unknown format specifier");
 7758|  14.3k|                return begin;
 7759|  14.3k|            }
 7760|   646k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   646k|    }
 7767|   632k|    return begin + 1;
 7768|   646k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|   970k|    {
 8862|   970k|        return m_args.get(id);
 8863|   970k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|   970k|    {
 6328|   970k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   970k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 970k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   970k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   970k|        do_check_arg_id(id);
 6336|   970k|        return id;
 6337|   970k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|   970k|{
 6822|   970k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   970k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   970k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   646k|{
 7207|   646k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   646k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 646k, False: 0]
  |  Branch (7208:26): [True: 0, False: 646k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   646k|    handler();
 7213|   646k|    return begin;
 7214|   646k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7155|  21.4k|{
 7156|  21.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7157|  21.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7158|       |
 7159|  21.4k|    unsigned long long value = 0;
 7160|  42.9k|    do {
 7161|  42.9k|        value *= 10;
 7162|  42.9k|        value += static_cast<unsigned long long>(*begin - '0');
 7163|  42.9k|        if (value >
  ------------------
  |  Branch (7163:13): [True: 0, False: 42.9k]
  ------------------
 7164|  42.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7165|      0|            return -1;
 7166|      0|        }
 7167|  42.9k|        ++begin;
 7168|  42.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7168:14): [True: 42.9k, False: 0]
  |  Branch (7168:30): [True: 42.9k, False: 0]
  |  Branch (7168:47): [True: 21.4k, False: 21.4k]
  ------------------
 7169|  21.4k|    return static_cast<int>(value);
 7170|  21.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   646k|        {
 7709|   646k|            arg_id = handler.on_arg_id();
 7710|   646k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|   948k|    {
 6323|   948k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   948k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   786k|{
 4690|   786k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 786k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   786k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   786k|                            ranges::default_sentinel};
 4696|   786k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   786k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   786k|    {
 4454|   786k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   786k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   786k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|  1.91M|    {
 6312|  1.91M|        return m_format.data();
 6313|  1.91M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|   646k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   646k|    {
 7889|   646k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   646k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7621|   646k|{
 7622|   646k|    auto do_presentation = [&]() -> const CharT* {
 7623|   646k|        if (*begin == CharT{'['}) {
 7624|   646k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   646k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   646k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   646k|                return begin;
 7630|   646k|            }
 7631|   646k|            handler.on_character_set_string(set);
 7632|   646k|            return begin;
 7633|   646k|        }
 7634|   646k|        if (*begin == CharT{'/'}) {
 7635|   646k|            return parse_presentation_regex(begin, end, handler);
 7636|   646k|        }
 7637|   646k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   646k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   646k|            handler.on_error("Invalid type specifier in format string");
 7640|   646k|            return begin;
 7641|   646k|        }
 7642|   646k|        handler.on_type(type);
 7643|   646k|        return begin;
 7644|   646k|    };
 7645|       |
 7646|   646k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 646k, False: 0]
  |  Branch (7646:28): [True: 625k, False: 21.6k]
  ------------------
 7647|   646k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 625k, False: 0]
  |  Branch (7647:36): [True: 617k, False: 7.15k]
  ------------------
 7648|   617k|        return do_presentation();
 7649|   617k|    }
 7650|       |
 7651|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  28.8k|    begin = parse_align(begin, end, handler);
 7657|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  28.8k|    begin = parse_width(begin, end, handler);
 7663|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  28.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 28.8k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  28.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 7.15k, False: 21.6k]
  ------------------
 7682|  7.15k|        handler.on_localized();
 7683|  7.15k|        ++begin;
 7684|  7.15k|    }
 7685|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  28.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 28.8k, False: 0]
  |  Branch (7690:25): [True: 21.6k, False: 7.15k]
  ------------------
 7691|  21.6k|        do_presentation();
 7692|  21.6k|    }
 7693|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  28.8k|    return begin;
 7699|  28.8k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7270|   937k|{
 7271|   937k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 926k, False: 10.7k]
  |  Branch (7271:33): [True: 926k, False: 0]
  ------------------
 7272|   937k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 10.7k, False: 0]
  |  Branch (7272:33): [True: 10.7k, False: 0]
  ------------------
 7273|   937k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|   639k|    auto do_presentation = [&]() -> const CharT* {
 7623|   639k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 7.38k, False: 632k]
  ------------------
 7624|  7.38k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  7.38k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|  7.38k|            handler.on_character_set_string(set);
 7632|  7.38k|            return begin;
 7633|  7.38k|        }
 7634|   632k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 632k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   632k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   632k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.15k, False: 625k]
  |  |  ------------------
  ------------------
 7639|  7.15k|            handler.on_error("Invalid type specifier in format string");
 7640|  7.15k|            return begin;
 7641|  7.15k|        }
 7642|   625k|        handler.on_type(type);
 7643|   625k|        return begin;
 7644|   632k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7460|  7.38k|{
 7461|  7.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  7.38k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  7.38k|    auto start = begin;
 7465|  7.38k|    ++begin;
 7466|       |
 7467|  7.38k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|  7.38k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 0, False: 7.38k]
  ------------------
 7474|      0|        handler.on_charset_inverted();
 7475|      0|        ++begin;
 7476|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 0, False: 0]
  ------------------
 7483|      0|            handler.on_charset_single(char32_t{']'});
 7484|      0|            ++begin;
 7485|      0|        }
 7486|      0|    }
 7487|  7.38k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 7.38k]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|  22.1k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 22.1k, False: 0]
  ------------------
 7492|  22.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 22.1k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|  22.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 7.38k, False: 14.7k]
  ------------------
 7497|  7.38k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  7.38k|        }
 7499|       |
 7500|  14.7k|        parse_presentation_set_literal(begin, end, handler);
 7501|  14.7k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|  7.38k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7424|  14.7k|{
 7425|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  14.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  14.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|  14.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 14.7k, False: 0]
  |  Branch (7432:25): [True: 14.7k, False: 0]
  |  Branch (7432:49): [True: 14.7k, False: 0]
  ------------------
 7433|  14.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 14.7k, False: 0]
  ------------------
 7434|  14.7k|        ++begin;
 7435|       |
 7436|  14.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  14.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|  14.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|  14.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  14.7k|        return;
 7450|  14.7k|    }
 7451|       |
 7452|      0|    handler.on_charset_single(cp_first);
 7453|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7400|  29.5k|{
 7401|  29.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  29.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  29.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  59.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 29.5k]
  |  |  |  Branch (986:45): [True: 0, False: 29.5k]
  |  |  |  Branch (986:45): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  29.5k|    const auto cp =
 7410|  29.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  29.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|  29.5k|    begin += len;
 7417|  29.5k|    return cp;
 7418|  29.5k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7114|  11.0k|    {
 7115|  11.0k|        m_specs.charset_string_data = fmt.data();
 7116|  11.0k|        m_specs.charset_string_size = fmt.size();
 7117|  11.0k|        on_type(presentation_type::string_set);
 7118|  11.0k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7218|   948k|{
 7219|   948k|    switch (type) {
 7220|      0|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 0, False: 948k]
  ------------------
 7221|      0|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 0, False: 948k]
  ------------------
 7222|      0|            return presentation_type::int_binary;
 7223|      0|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 0, False: 948k]
  ------------------
 7224|      0|            return presentation_type::int_decimal;
 7225|      0|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 0, False: 948k]
  ------------------
 7226|      0|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 948k]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|      0|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 0, False: 948k]
  ------------------
 7230|      0|            return presentation_type::int_octal;
 7231|      0|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 0, False: 948k]
  ------------------
 7232|      0|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 948k]
  ------------------
 7233|      0|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 948k]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 948k]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|      0|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 0, False: 948k]
  ------------------
 7238|      0|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 948k]
  ------------------
 7239|      0|            return presentation_type::float_hex;
 7240|      0|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 0, False: 948k]
  ------------------
 7241|      0|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 948k]
  ------------------
 7242|      0|            return presentation_type::float_scientific;
 7243|      0|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 0, False: 948k]
  ------------------
 7244|      0|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 948k]
  ------------------
 7245|      0|            return presentation_type::float_fixed;
 7246|      0|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 0, False: 948k]
  ------------------
 7247|      0|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 948k]
  ------------------
 7248|      0|            return presentation_type::float_general;
 7249|   926k|        case 's':
  ------------------
  |  Branch (7249:9): [True: 926k, False: 21.4k]
  ------------------
 7250|   926k|            return presentation_type::string;
 7251|  10.7k|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 10.7k, False: 937k]
  ------------------
 7252|  10.7k|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 948k]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 948k]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 948k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 948k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|  10.7k|        default:
  ------------------
  |  Branch (7263:9): [True: 10.7k, False: 937k]
  ------------------
 7264|  10.7k|            return presentation_type::none;
 7265|   948k|    }
 7266|   948k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7295|  28.8k|{
 7296|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  28.8k|    auto check_align = [](wchar_t ch) {
 7299|  28.8k|        switch (ch) {
 7300|  28.8k|            case L'<':
 7301|  28.8k|                return align_type::left;
 7302|  28.8k|            case L'>':
 7303|  28.8k|                return align_type::right;
 7304|  28.8k|            case L'^':
 7305|  28.8k|                return align_type::center;
 7306|  28.8k|            default:
 7307|  28.8k|                return align_type::none;
 7308|  28.8k|        }
 7309|  28.8k|    };
 7310|       |
 7311|  28.8k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  28.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  57.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  |  Branch (986:45): [True: 0, False: 28.8k]
  |  |  |  Branch (986:45): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7313|  28.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  28.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  28.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  28.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  28.8k|    const auto begin_before_fill = begin;
 7323|  28.8k|    begin += potential_fill_len;
 7324|       |
 7325|  28.8k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 28.8k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  28.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  28.8k|    const auto begin_after_fill = begin;
 7331|  28.8k|    ++begin;
 7332|       |
 7333|  28.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 28.8k, False: 0]
  ------------------
 7334|  28.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  28.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 7.38k, False: 21.4k]
  ------------------
 7339|  7.38k|            return begin_before_fill;
 7340|  7.38k|        }
 7341|  28.8k|    }
 7342|       |
 7343|  21.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 21.4k, False: 0]
  ------------------
 7344|  21.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 21.4k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  21.4k|        return begin_before_fill;
 7349|  21.4k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  21.4k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7277|  43.2k|{
 7278|  43.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|  43.2k|    if constexpr (sizeof(CharT) != 1) {
 7280|  43.2k|        return 1;
 7281|       |    }
 7282|       |    else {
 7283|       |        const auto lengths =
 7284|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|       |            "\3\4";
 7286|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|       |        return len;
 7288|       |    }
 7289|  43.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|  57.6k|    auto check_align = [](wchar_t ch) {
 7299|  57.6k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 57.6k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 57.6k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 57.6k]
  ------------------
 7305|      0|                return align_type::center;
 7306|  57.6k|            default:
  ------------------
  |  Branch (7306:13): [True: 57.6k, False: 0]
  ------------------
 7307|  57.6k|                return align_type::none;
 7308|  57.6k|        }
 7309|  57.6k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7360|  28.8k|{
 7361|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  28.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 28.8k, False: 0]
  |  Branch (7363:33): [True: 14.3k, False: 14.5k]
  ------------------
 7364|  14.3k|        int width = parse_simple_int(begin, end);
 7365|  14.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  14.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 14.3k, False: 0]
  |  |  ------------------
  ------------------
 7366|  14.3k|            handler.on_width(width);
 7367|  14.3k|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|  14.3k|    }
 7373|  28.8k|    return begin;
 7374|  28.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7893|  7.15k|    {
 7894|  7.15k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  7.15k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 7.15k, False: 0]
  ------------------
 7896|  7.15k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 7.15k, False: 0]
  ------------------
 7897|  7.15k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 7.15k, False: 0]
  ------------------
 7898|  7.15k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 7.15k, False: 0]
  ------------------
 7899|  7.15k|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|  7.15k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|  7.15k|        }
 7904|       |
 7905|      0|        Handler::on_localized();
 7906|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|   632k|{
 9362|   632k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   632k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   632k|{
 9251|   632k|#define SCN_VISIT(Type)                                                \
 9252|   632k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   632k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   632k|    }                                                                  \
 9255|   632k|    else {                                                             \
 9256|   632k|        return vis(monostate_val);                                     \
 9257|   632k|    }
 9258|       |
 9259|   632k|    monostate monostate_val{};
 9260|       |
 9261|   632k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 632k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 632k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 632k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 632k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 632k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 632k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 632k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 632k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 632k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 632k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 632k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 632k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 632k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 632k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 632k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 632k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 632k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 632k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 632k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 632k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 632k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 632k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|   316k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 316k, False: 316k]
  ------------------
 9315|   316k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   316k|    }                                                                  \
  |  | 9255|   316k|    else {                                                             \
  |  | 9256|   316k|        return vis(monostate_val);                                     \
  |  | 9257|   316k|    }
  ------------------
 9316|   632k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 316k, False: 316k]
  ------------------
 9317|   632k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   632k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   632k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   632k|    }                                                                  \
  |  | 9255|   632k|    else {                                                             \
  |  | 9256|   632k|        return vis(monostate_val);                                     \
  |  | 9257|   632k|    }
  ------------------
 9318|   632k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 632k]
  ------------------
 9319|   632k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   632k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   632k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   632k|    }                                                                  \
  |  | 9255|   632k|    else {                                                             \
  |  | 9256|   632k|        return vis(monostate_val);                                     \
  |  | 9257|   632k|    }
  ------------------
 9320|   632k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 632k]
  ------------------
 9321|   632k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   632k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   632k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   632k|    }                                                                  \
  |  | 9255|   632k|    else {                                                             \
  |  | 9256|   632k|        return vis(monostate_val);                                     \
  |  | 9257|   632k|    }
  ------------------
 9322|       |
 9323|   632k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 632k]
  ------------------
 9324|   632k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   632k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   632k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 632k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 632k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   632k|            SCN_CLANG_POP
 9341|   632k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|   463k|{
 9362|   463k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   463k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   463k|{
 9251|   463k|#define SCN_VISIT(Type)                                                \
 9252|   463k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   463k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   463k|    }                                                                  \
 9255|   463k|    else {                                                             \
 9256|   463k|        return vis(monostate_val);                                     \
 9257|   463k|    }
 9258|       |
 9259|   463k|    monostate monostate_val{};
 9260|       |
 9261|   463k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 463k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 463k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 463k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 463k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 463k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 463k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 463k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 463k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 463k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 463k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 463k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 463k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 463k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 463k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 463k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 463k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 463k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 463k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 463k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 463k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 463k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 463k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 463k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|   463k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 463k, False: 0]
  ------------------
 9317|   463k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   463k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   463k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   463k|    }                                                                  \
  |  | 9255|   463k|    else {                                                             \
  |  | 9256|   463k|        return vis(monostate_val);                                     \
  |  | 9257|   463k|    }
  ------------------
 9318|   463k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 463k]
  ------------------
 9319|   463k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   463k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   463k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   463k|    }                                                                  \
  |  | 9255|   463k|    else {                                                             \
  |  | 9256|   463k|        return vis(monostate_val);                                     \
  |  | 9257|   463k|    }
  ------------------
 9320|   463k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 463k]
  ------------------
 9321|   463k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   463k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   463k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   463k|    }                                                                  \
  |  | 9255|   463k|    else {                                                             \
  |  | 9256|   463k|        return vis(monostate_val);                                     \
  |  | 9257|   463k|    }
  ------------------
 9322|       |
 9323|   463k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 463k]
  ------------------
 9324|   463k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   463k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   463k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 463k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 463k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   463k|            SCN_CLANG_POP
 9341|   463k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6292|   323k|        : m_format{format},
 6293|   323k|          m_next_arg_id{next_arg_id},
 6294|   323k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   323k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   323k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   323k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   323k|    {
 6300|   323k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   323k|{
 7809|   323k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   323k|    handler.check_args_exhausted();
 7811|   323k|    return handler.get_error();
 7812|   323k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   323k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   323k|    auto begin = format.data();
 7777|   323k|    auto it = begin;
 7778|   323k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   628k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 323k, False: 305k]
  ------------------
 7781|   323k|        const auto ch = *it++;
 7782|   323k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 323k, False: 0]
  ------------------
 7783|   323k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   323k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   323k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 17.8k, False: 305k]
  ------------------
 7787|  17.8k|                return;
 7788|  17.8k|            }
 7789|   323k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   323k|    }
 7800|       |
 7801|   305k|    handler.on_literal_text(begin, end);
 7802|   305k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9000|   305k|    {
 9001|   305k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   305k|    static_cast<    \
  |  | 1056|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   305k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7705|   323k|{
 7706|   323k|    struct id_adapter {
 7707|   323k|        constexpr void operator()()
 7708|   323k|        {
 7709|   323k|            arg_id = handler.on_arg_id();
 7710|   323k|        }
 7711|   323k|        constexpr void operator()(std::size_t id)
 7712|   323k|        {
 7713|   323k|            arg_id = handler.on_arg_id(id);
 7714|   323k|        }
 7715|       |
 7716|   323k|        constexpr void on_error(const char* msg)
 7717|   323k|        {
 7718|   323k|            SCN_UNLIKELY_ATTR
 7719|   323k|            handler.on_error(msg);
 7720|   323k|        }
 7721|       |
 7722|   323k|        Handler& handler;
 7723|   323k|        std::size_t arg_id;
 7724|   323k|    };
 7725|       |
 7726|   323k|    ++begin;
 7727|   323k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   323k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 323k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   323k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 323k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   323k|    else {
 7739|   323k|        auto adapter = id_adapter{handler, 0};
 7740|   323k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   323k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   323k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 323k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   323k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 323k, False: 0]
  ------------------
 7751|   323k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   323k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   323k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.15k, False: 316k]
  |  |  |  Branch (986:45): [True: 0, False: 323k]
  |  |  |  Branch (986:45): [True: 7.15k, False: 316k]
  |  |  ------------------
  ------------------
 7757|  7.15k|                handler.on_error("Unknown format specifier");
 7758|  7.15k|                return begin;
 7759|  7.15k|            }
 7760|   323k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   323k|    }
 7767|   316k|    return begin + 1;
 7768|   323k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   323k|{
 7207|   323k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   323k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 323k, False: 0]
  |  Branch (7208:26): [True: 0, False: 323k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   323k|    handler();
 7213|   323k|    return begin;
 7214|   323k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   323k|        {
 7709|   323k|            arg_id = handler.on_arg_id();
 7710|   323k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|   323k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   323k|    {
 7889|   323k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   323k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7621|   323k|{
 7622|   323k|    auto do_presentation = [&]() -> const CharT* {
 7623|   323k|        if (*begin == CharT{'['}) {
 7624|   323k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   323k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   323k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   323k|                return begin;
 7630|   323k|            }
 7631|   323k|            handler.on_character_set_string(set);
 7632|   323k|            return begin;
 7633|   323k|        }
 7634|   323k|        if (*begin == CharT{'/'}) {
 7635|   323k|            return parse_presentation_regex(begin, end, handler);
 7636|   323k|        }
 7637|   323k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   323k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   323k|            handler.on_error("Invalid type specifier in format string");
 7640|   323k|            return begin;
 7641|   323k|        }
 7642|   323k|        handler.on_type(type);
 7643|   323k|        return begin;
 7644|   323k|    };
 7645|       |
 7646|   323k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 323k, False: 0]
  |  Branch (7646:28): [True: 312k, False: 10.8k]
  ------------------
 7647|   323k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 312k, False: 0]
  |  Branch (7647:36): [True: 308k, False: 3.57k]
  ------------------
 7648|   308k|        return do_presentation();
 7649|   308k|    }
 7650|       |
 7651|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  14.4k|    begin = parse_align(begin, end, handler);
 7657|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  14.4k|    begin = parse_width(begin, end, handler);
 7663|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  14.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 14.4k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  14.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 3.57k, False: 10.8k]
  ------------------
 7682|  3.57k|        handler.on_localized();
 7683|  3.57k|        ++begin;
 7684|  3.57k|    }
 7685|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  14.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 14.4k, False: 0]
  |  Branch (7690:25): [True: 10.8k, False: 3.57k]
  ------------------
 7691|  10.8k|        do_presentation();
 7692|  10.8k|    }
 7693|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  14.4k|    return begin;
 7699|  14.4k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|   319k|    auto do_presentation = [&]() -> const CharT* {
 7623|   319k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 3.69k, False: 316k]
  ------------------
 7624|  3.69k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  3.69k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.69k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|  3.69k|            handler.on_character_set_string(set);
 7632|  3.69k|            return begin;
 7633|  3.69k|        }
 7634|   316k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 316k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   316k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   316k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 312k]
  |  |  ------------------
  ------------------
 7639|  3.57k|            handler.on_error("Invalid type specifier in format string");
 7640|  3.57k|            return begin;
 7641|  3.57k|        }
 7642|   312k|        handler.on_type(type);
 7643|   312k|        return begin;
 7644|   316k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7460|  3.69k|{
 7461|  3.69k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  3.69k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  3.69k|    auto start = begin;
 7465|  3.69k|    ++begin;
 7466|       |
 7467|  3.69k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.69k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|  3.69k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 0, False: 3.69k]
  ------------------
 7474|      0|        handler.on_charset_inverted();
 7475|      0|        ++begin;
 7476|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 0, False: 0]
  ------------------
 7483|      0|            handler.on_charset_single(char32_t{']'});
 7484|      0|            ++begin;
 7485|      0|        }
 7486|      0|    }
 7487|  3.69k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 3.69k]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|  11.0k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 11.0k, False: 0]
  ------------------
 7492|  11.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 11.0k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|  11.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 3.69k, False: 7.38k]
  ------------------
 7497|  3.69k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  3.69k|        }
 7499|       |
 7500|  7.38k|        parse_presentation_set_literal(begin, end, handler);
 7501|  7.38k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|  3.69k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7424|  7.38k|{
 7425|  7.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  7.38k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  7.38k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|  7.38k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 7.38k, False: 0]
  |  Branch (7432:25): [True: 7.38k, False: 0]
  |  Branch (7432:49): [True: 7.38k, False: 0]
  ------------------
 7433|  7.38k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 7.38k, False: 0]
  ------------------
 7434|  7.38k|        ++begin;
 7435|       |
 7436|  7.38k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  7.38k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|  7.38k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|  7.38k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  7.38k|        return;
 7450|  7.38k|    }
 7451|       |
 7452|      0|    handler.on_charset_single(cp_first);
 7453|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7400|  14.7k|{
 7401|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  14.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  14.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.7k]
  |  |  |  Branch (986:45): [True: 0, False: 14.7k]
  |  |  |  Branch (986:45): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  14.7k|    const auto cp =
 7410|  14.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  14.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|  14.7k|    begin += len;
 7417|  14.7k|    return cp;
 7418|  14.7k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7295|  14.4k|{
 7296|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  14.4k|    auto check_align = [](wchar_t ch) {
 7299|  14.4k|        switch (ch) {
 7300|  14.4k|            case L'<':
 7301|  14.4k|                return align_type::left;
 7302|  14.4k|            case L'>':
 7303|  14.4k|                return align_type::right;
 7304|  14.4k|            case L'^':
 7305|  14.4k|                return align_type::center;
 7306|  14.4k|            default:
 7307|  14.4k|                return align_type::none;
 7308|  14.4k|        }
 7309|  14.4k|    };
 7310|       |
 7311|  14.4k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  14.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  |  Branch (986:45): [True: 0, False: 14.4k]
  |  |  |  Branch (986:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7313|  14.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  14.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  14.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  14.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  14.4k|    const auto begin_before_fill = begin;
 7323|  14.4k|    begin += potential_fill_len;
 7324|       |
 7325|  14.4k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 14.4k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  14.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  14.4k|    const auto begin_after_fill = begin;
 7331|  14.4k|    ++begin;
 7332|       |
 7333|  14.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 14.4k, False: 0]
  ------------------
 7334|  14.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  14.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 3.69k, False: 10.7k]
  ------------------
 7339|  3.69k|            return begin_before_fill;
 7340|  3.69k|        }
 7341|  14.4k|    }
 7342|       |
 7343|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 10.7k, False: 0]
  ------------------
 7344|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 10.7k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  10.7k|        return begin_before_fill;
 7349|  10.7k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  10.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|  28.8k|    auto check_align = [](wchar_t ch) {
 7299|  28.8k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 28.8k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 28.8k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 28.8k]
  ------------------
 7305|      0|                return align_type::center;
 7306|  28.8k|            default:
  ------------------
  |  Branch (7306:13): [True: 28.8k, False: 0]
  ------------------
 7307|  28.8k|                return align_type::none;
 7308|  28.8k|        }
 7309|  28.8k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7360|  14.4k|{
 7361|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  14.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 14.4k, False: 0]
  |  Branch (7363:33): [True: 7.15k, False: 7.26k]
  ------------------
 7364|  7.15k|        int width = parse_simple_int(begin, end);
 7365|  7.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  7.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.15k, False: 0]
  |  |  ------------------
  ------------------
 7366|  7.15k|            handler.on_width(width);
 7367|  7.15k|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|  7.15k|    }
 7373|  14.4k|    return begin;
 7374|  14.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7893|  3.57k|    {
 7894|  3.57k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  3.57k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 3.57k, False: 0]
  ------------------
 7896|  3.57k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 3.57k, False: 0]
  ------------------
 7897|  3.57k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 3.57k, False: 0]
  ------------------
 7898|  3.57k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 3.57k, False: 0]
  ------------------
 7899|  3.57k|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|  3.57k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|  3.57k|        }
 7904|       |
 7905|      0|        Handler::on_localized();
 7906|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|   316k|{
 9362|   316k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   316k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   316k|{
 9251|   316k|#define SCN_VISIT(Type)                                                \
 9252|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   316k|    }                                                                  \
 9255|   316k|    else {                                                             \
 9256|   316k|        return vis(monostate_val);                                     \
 9257|   316k|    }
 9258|       |
 9259|   316k|    monostate monostate_val{};
 9260|       |
 9261|   316k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 316k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 316k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 316k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 316k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 316k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 316k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 316k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 316k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 316k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 316k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 316k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 316k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 316k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 316k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 316k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 316k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 316k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 316k]
  ------------------
 9305|      0|            SCN_VISIT(float);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9306|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 316k]
  ------------------
 9307|      0|            SCN_VISIT(double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9308|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 316k]
  ------------------
 9309|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9310|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 316k]
  ------------------
 9311|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9312|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 316k]
  ------------------
 9313|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9314|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 316k]
  ------------------
 9315|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9316|   316k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 316k, False: 0]
  ------------------
 9317|   316k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   316k|    }                                                                  \
  |  | 9255|   316k|    else {                                                             \
  |  | 9256|   316k|        return vis(monostate_val);                                     \
  |  | 9257|   316k|    }
  ------------------
 9318|   316k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 316k]
  ------------------
 9319|   316k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   316k|    }                                                                  \
  |  | 9255|   316k|    else {                                                             \
  |  | 9256|   316k|        return vis(monostate_val);                                     \
  |  | 9257|   316k|    }
  ------------------
 9320|   316k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 316k]
  ------------------
 9321|   316k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   316k|    }                                                                  \
  |  | 9255|   316k|    else {                                                             \
  |  | 9256|   316k|        return vis(monostate_val);                                     \
  |  | 9257|   316k|    }
  ------------------
 9322|       |
 9323|   316k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 316k]
  ------------------
 9324|   316k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   316k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   316k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 316k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 316k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   316k|            SCN_CLANG_POP
 9341|   316k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|  23.2k|    {
 4351|  23.2k|        return sync(0);
 4352|  23.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6147|  64.2k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6147|   463k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   316k|{
   89|   316k|    auto result = make_scan_result<Source, Args...>();
   90|   316k|    fill_scan_result(result,
   91|   316k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   316k|                           make_scan_args<wscan_context>(result->values())));
   93|   316k|    return result;
   94|   316k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   632k|{
   44|   632k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   632k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   316k|{
  131|   316k|    auto result = make_scan_result<Source, Args...>();
  132|   316k|    fill_scan_result(result,
  133|   316k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   316k|                           make_scan_args<wscan_context>(result->values())));
  135|   316k|    return result;
  136|   316k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   632k|{
   60|   632k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   632k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   154k|{
  171|   154k|    auto result = make_scan_result<Source, T>();
  172|   154k|    fill_scan_result(
  173|   154k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   154k|                            detail::make_arg<wscan_context>(result->value())));
  175|   154k|    return result;
  176|   154k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   308k|{
   72|   308k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   308k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   316k|{
   89|   316k|    auto result = make_scan_result<Source, Args...>();
   90|   316k|    fill_scan_result(result,
   91|   316k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   316k|                           make_scan_args<wscan_context>(result->values())));
   93|   316k|    return result;
   94|   316k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   316k|{
  131|   316k|    auto result = make_scan_result<Source, Args...>();
  132|   316k|    fill_scan_result(result,
  133|   316k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   316k|                           make_scan_args<wscan_context>(result->values())));
  135|   316k|    return result;
  136|   316k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   154k|{
  171|   154k|    auto result = make_scan_result<Source, T>();
  172|   154k|    fill_scan_result(
  173|   154k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   154k|                            detail::make_arg<wscan_context>(result->value())));
  175|   154k|    return result;
  176|   154k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   316k|{
   89|   316k|    auto result = make_scan_result<Source, Args...>();
   90|   316k|    fill_scan_result(result,
   91|   316k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   316k|                           make_scan_args<wscan_context>(result->values())));
   93|   316k|    return result;
   94|   316k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   316k|{
   44|   316k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   316k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   316k|{
  131|   316k|    auto result = make_scan_result<Source, Args...>();
  132|   316k|    fill_scan_result(result,
  133|   316k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   316k|                           make_scan_args<wscan_context>(result->values())));
  135|   316k|    return result;
  136|   316k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   316k|{
   60|   316k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   316k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   154k|{
  171|   154k|    auto result = make_scan_result<Source, T>();
  172|   154k|    fill_scan_result(
  173|   154k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   154k|                            detail::make_arg<wscan_context>(result->value())));
  175|   154k|    return result;
  176|   154k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   154k|{
   72|   154k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   154k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.08M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.08M|{
  309|  1.08M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.08M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|  86.0k|{
 2180|  86.0k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|  86.0k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2187|  54.2k|{
 2188|  54.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2189|  54.2k|    return sync_after_vscan(source, n);
 2190|  54.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|   632k|{
 2198|   632k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|   632k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2205|   316k|{
 2206|   316k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2207|   316k|    return sync_after_vscan(source, n);
 2208|   316k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   315k|{
  207|   315k|    return find_classic_impl(
  208|   315k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   315k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   315k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   319k|{
  215|   319k|    return find_classic_impl(
  216|   319k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   319k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   319k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|  86.0k|{
 2149|  86.0k|    return vscan_internal(source, format, args);
 2150|  86.0k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2154|  54.2k|{
 2155|  54.2k|    auto n = vscan_internal(source, format, args);
 2156|  54.2k|    return sync_after_vscan(source, n);
 2157|  54.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|   632k|{
 2163|   632k|    return vscan_internal(source, format, args);
 2164|   632k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2168|   316k|{
 2169|   316k|    auto n = vscan_internal(source, format, args);
 2170|   316k|    return sync_after_vscan(source, n);
 2171|   316k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2234|  39.0k|{
 2235|  39.0k|    return vscan_value_internal(source, arg);
 2236|  39.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2239|  25.1k|{
 2240|  25.1k|    auto n = vscan_value_internal(source, arg);
 2241|  25.1k|    return sync_after_vscan(source, n);
 2242|  25.1k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2247|   308k|{
 2248|   308k|    return vscan_value_internal(source, arg);
 2249|   308k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2253|   154k|{
 2254|   154k|    auto n = vscan_value_internal(source, arg);
 2255|   154k|    return sync_after_vscan(source, n);
 2256|   154k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   315k|{
  131|   315k|    auto it = source.begin();
  132|       |
  133|   561k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 433k, False: 128k]
  ------------------
  134|   433k|        auto sv =
  135|   433k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   433k|                .substr(0, 8);
  137|       |
  138|   433k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 293k, False: 139k]
  ------------------
  139|   293k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   293k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   293k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 120k, False: 172k]
  ------------------
  142|   120k|                break;
  143|   120k|            }
  144|   172k|            continue;
  145|   293k|        }
  146|       |
  147|   410k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 337k, False: 72.8k]
  ------------------
  148|   337k|            auto tmp =
  149|   337k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   337k|            auto res = get_next_code_point(tmp);
  151|   337k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 66.9k, False: 270k]
  ------------------
  152|  66.9k|                return it;
  153|  66.9k|            }
  154|   270k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   270k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   270k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|   270k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   270k|        }
  158|   139k|    }
  159|       |
  160|   248k|    return detail::make_string_view_iterator(source, it);
  161|   315k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   725k|{
  118|   725k|    static_assert(sizeof(*source.data()) == 1);
  119|   725k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|   725k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   725k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   725k|    uint64_t word{};
  121|   725k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   725k|    return has_byte_greater(word, 127) != 0;
  124|   725k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.05M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   337k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   319k|{
  131|   319k|    auto it = source.begin();
  132|       |
  133|   406k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 292k, False: 114k]
  ------------------
  134|   292k|        auto sv =
  135|   292k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   292k|                .substr(0, 8);
  137|       |
  138|   292k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 207k, False: 84.5k]
  ------------------
  139|   207k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   207k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   207k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 124k, False: 83.3k]
  ------------------
  142|   124k|                break;
  143|   124k|            }
  144|  83.3k|            continue;
  145|   207k|        }
  146|       |
  147|   165k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 161k, False: 3.80k]
  ------------------
  148|   161k|            auto tmp =
  149|   161k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   161k|            auto res = get_next_code_point(tmp);
  151|   161k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 80.7k, False: 81.2k]
  ------------------
  152|  80.7k|                return it;
  153|  80.7k|            }
  154|  81.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  81.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  81.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  81.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  81.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  81.2k|        }
  158|  84.5k|    }
  159|       |
  160|   238k|    return detail::make_string_view_iterator(source, it);
  161|   319k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   507k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   161k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   108k|{
 2046|   108k|    const auto argcount = args.size();
 2047|   108k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 50.2k, False: 58.2k]
  |  Branch (2047:60): [True: 50.2k, False: 0]
  ------------------
 2048|  50.2k|        auto arg = args.get(0);
 2049|  50.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  50.2k|    static_cast<    \
  |  | 1056|  50.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|  50.2k|    }
 2051|       |
 2052|  58.2k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 58.2k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|  58.2k|    SCN_UNLIKELY_ATTR
 2060|  58.2k|    {
 2061|  58.2k|        auto handler = format_handler<false, CharT>{
 2062|  58.2k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  58.2k|        return vscan_parse_format_string(format, handler);
 2064|  58.2k|    }
 2065|  58.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   280k|{
 1594|   280k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 152k, False: 128k]
  ------------------
 1595|   152k|        return false;
 1596|   152k|    }
 1597|   128k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 128k, False: 0]
  |  Branch (1597:39): [True: 128k, False: 0]
  ------------------
 1598|   280k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  75.3k|{
 1627|  75.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 75.3k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  75.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  75.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 75.3k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  75.3k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  75.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  75.3k|    static_cast<    \
  |  | 1056|  75.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  75.3k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  75.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  75.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  75.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.68k, False: 72.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|    }                                                  \
  |  |  |  | 3938|  75.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  72.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|  72.7k|    return it.position();
 1644|  75.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|  93.8k|        : format_handler_base{argcount},
 1870|  93.8k|          parse_ctx{source_tag<Source&&>, format},
 1871|  93.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  93.8k|    static_cast<    \
  |  | 1056|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  93.8k|    static_cast<    \
  |  | 1056|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  93.8k|    {
 1873|  93.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|  1.12M|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|  1.12M|    {
 1689|  1.12M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|  93.8k|        : contiguous_ctx(source, args, loc)
 1821|  93.8k|    {
 1822|  93.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  93.8k|{
 2011|  93.8k|    const auto beg = handler.get_ctx().begin();
 2012|  93.8k|    detail::parse_format_string<false>(format, handler);
 2013|  93.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 17.8k, False: 75.9k]
  |  |  ------------------
  ------------------
 2014|  17.8k|        return unexpected(err.error());
 2015|  17.8k|    }
 2016|  75.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  93.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|   606k|    {
 1995|   606k|        return ctx.get();
 1996|   606k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|   606k|    {
 1826|   606k|        return contiguous_ctx;
 1827|   606k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|   169k|    {
 1877|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 169k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|  48.2k|    {
 1737|  48.2k|        error = unexpected(err);
 1738|  48.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|  93.8k|{
 1649|  93.8k|    auto arg = ctx.arg(id);
 1650|  93.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 93.8k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  93.8k|    return arg;
 1654|  93.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|  1.12M|    {
 1763|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1764|      0|            on_error({scan_error::invalid_format_string,
 1765|      0|                      "Argument ID out-of-range"});
 1766|      0|            return;
 1767|      0|        }
 1768|       |
 1769|  1.12M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1770|      0|            on_error({scan_error::invalid_format_string,
 1771|      0|                      "Argument with this ID has already been scanned"});
 1772|      0|        }
 1773|       |
 1774|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1775|  1.12M|            visited_args_lower64 |= (1ull << id);
 1776|  1.12M|            return;
 1777|  1.12M|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|  1.12M|    {
 1747|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1754|  1.12M|            return (visited_args_lower64 >> id) & 1ull;
 1755|  1.12M|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|  93.8k|    {
 1917|  93.8k|        return parse_ctx.next_arg_id();
 1918|  93.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|  93.8k|    {
 1957|  93.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  93.8k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  93.8k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 93.8k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|  93.8k|        auto specs = detail::format_specs{};
 1970|  93.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|  93.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|  93.8k|            detail::get_arg_type(arg)};
 1973|       |
 1974|  93.8k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|  93.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 93.8k]
  |  Branch (1975:29): [True: 0, False: 93.8k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|  93.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.15k, False: 86.6k]
  |  |  ------------------
  ------------------
 1982|  7.15k|            return parse_ctx.begin();
 1983|  7.15k|        }
 1984|  86.6k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|  86.6k|        on_visit_scan_arg(
 1987|  86.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|  86.6k|                                           get_ctx().locale()},
 1989|  86.6k|            arg);
 1990|  86.6k|        return parse_ctx.begin();
 1991|  93.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1666|  93.8k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|  93.8k|    {
 1668|  93.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1927|  86.6k|    {
 1928|  86.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 86.6k]
  |  Branch (1928:13): [True: 0, False: 86.6k]
  |  Branch (1928:29): [True: 0, False: 86.6k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  86.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  86.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 75.9k]
  |  |  ------------------
  ------------------
 1935|  10.7k|            on_error(r.error());
 1936|  10.7k|        }
 1937|  75.9k|        else {
 1938|  75.9k|            get_ctx().advance_to(*r);
 1939|  75.9k|        }
 1940|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1730|  32.1k|    {
 1731|  32.1k|        SCN_UNLIKELY_ATTR
 1732|  32.1k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1733|  32.1k|                                              msg);
 1734|  32.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|  1.12M|    {
 1696|  1.12M|        {
 1697|  1.12M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 1.12M]
  ------------------
 1698|  1.12M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 1.12M]
  ------------------
 1699|  1.12M|                                      ? std::numeric_limits<uint64_t>::max()
 1700|  1.12M|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|  1.12M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 0, False: 1.12M]
  ------------------
 1703|      0|                return on_error({scan_error::invalid_format_string,
 1704|      0|                                 "Argument list not exhausted"});
 1705|      0|            }
 1706|  1.12M|        }
 1707|       |
 1708|  1.12M|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 1.12M, False: 0]
  ------------------
 1709|  1.12M|            return;
 1710|  1.12M|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|  4.45M|    {
 1742|  4.45M|        return error;
 1743|  4.45M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1869|  58.2k|        : format_handler_base{argcount},
 1870|  58.2k|          parse_ctx{source_tag<Source&&>, format},
 1871|  58.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  58.2k|    {
 1873|  58.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1796|  58.2k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|  58.2k|    static_cast<    \
  |  | 1056|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|  58.2k|    {
 1798|  58.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  58.2k|{
 2011|  58.2k|    const auto beg = handler.get_ctx().begin();
 2012|  58.2k|    detail::parse_format_string<false>(format, handler);
 2013|  58.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.94k, False: 49.3k]
  |  |  ------------------
  ------------------
 2014|  8.94k|        return unexpected(err.error());
 2015|  8.94k|    }
 2016|  49.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  58.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1994|   382k|    {
 1995|   382k|        return ctx.get();
 1996|   382k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1801|   382k|    {
 1802|   382k|        return ctx;
 1803|   382k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1876|   107k|    {
 1877|   107k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 107k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   107k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1648|  58.2k|{
 1649|  58.2k|    auto arg = ctx.arg(id);
 1650|  58.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 58.2k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|  58.2k|    return arg;
 1654|  58.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1916|  58.2k|    {
 1917|  58.2k|        return parse_ctx.next_arg_id();
 1918|  58.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1956|  58.2k|    {
 1957|  58.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  58.2k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  58.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 58.2k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|  58.2k|        auto specs = detail::format_specs{};
 1970|  58.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|  58.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|  58.2k|            detail::get_arg_type(arg)};
 1973|       |
 1974|  58.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|  58.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 58.2k]
  |  Branch (1975:29): [True: 0, False: 58.2k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|  58.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 54.6k]
  |  |  ------------------
  ------------------
 1982|  3.57k|            return parse_ctx.begin();
 1983|  3.57k|        }
 1984|  54.6k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|  54.6k|        on_visit_scan_arg(
 1987|  54.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|  54.6k|                                           get_ctx().locale()},
 1989|  54.6k|            arg);
 1990|  54.6k|        return parse_ctx.begin();
 1991|  58.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1666|  58.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|  58.2k|    {
 1668|  58.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|  54.6k|    {
 1928|  54.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 54.6k]
  |  Branch (1928:13): [True: 0, False: 54.6k]
  |  Branch (1928:29): [True: 0, False: 54.6k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|  54.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  54.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.36k, False: 49.3k]
  |  |  ------------------
  ------------------
 1935|  5.36k|            on_error(r.error());
 1936|  5.36k|        }
 1937|  49.3k|        else {
 1938|  49.3k|            get_ctx().advance_to(*r);
 1939|  49.3k|        }
 1940|  54.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   172k|{
 2026|   172k|    const auto argcount = args.size();
 2027|   172k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 78.1k, False: 93.8k]
  |  Branch (2027:60): [True: 78.1k, False: 0]
  ------------------
 2028|  78.1k|        auto arg = args.get(0);
 2029|  78.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  78.1k|    static_cast<    \
  |  | 1056|  78.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|  78.1k|    }
 2031|       |
 2032|  93.8k|    auto handler = format_handler<true, CharT>{
 2033|  93.8k|        ranges::subrange<const CharT*>{source.data(),
 2034|  93.8k|                                       source.data() + source.size()},
 2035|  93.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  93.8k|    static_cast<    \
  |  | 1056|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  93.8k|    static_cast<    \
  |  | 1056|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|  93.8k|    return vscan_parse_format_string(format, handler);
 2037|   172k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|   117k|{
 1607|   117k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|   117k|    auto reader =
 1613|   117k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|   117k|            ranges::subrange<const CharT*>{source.data(),
 1615|   117k|                                           source.data() + source.size()},
 1616|   117k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   117k|    static_cast<    \
  |  | 1056|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|   117k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.36k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.36k|    }                                                  \
  |  |  |  | 3938|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|   111k|    return ranges::distance(source.data(), it);
 1619|   117k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   133k|{
 2126|   133k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 122k, False: 11.6k]
  |  |  ------------------
  ------------------
 2127|   122k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|   122k|    }
 2133|  11.6k|    else {
 2134|  11.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  11.6k|    }
 2140|   133k|    return result;
 2141|   133k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|  1.26M|{
 2026|  1.26M|    const auto argcount = args.size();
 2027|  1.26M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 617k, False: 646k]
  |  Branch (2027:60): [True: 617k, False: 0]
  ------------------
 2028|   617k|        auto arg = args.get(0);
 2029|   617k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   617k|    static_cast<    \
  |  | 1056|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|   617k|    }
 2031|       |
 2032|   646k|    auto handler = format_handler<true, CharT>{
 2033|   646k|        ranges::subrange<const CharT*>{source.data(),
 2034|   646k|                                       source.data() + source.size()},
 2035|   646k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   646k|    static_cast<    \
  |  | 1056|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   646k|    static_cast<    \
  |  | 1056|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   646k|    return vscan_parse_format_string(format, handler);
 2037|  1.26M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|  1.89M|{
 1594|  1.89M|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 970k, False: 926k]
  ------------------
 1595|   970k|        return false;
 1596|   970k|    }
 1597|   926k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 926k, False: 0]
  |  Branch (1597:39): [True: 926k, False: 0]
  ------------------
 1598|  1.89M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|   926k|{
 1607|   926k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 926k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|   926k|    auto reader =
 1613|   926k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|   926k|            ranges::subrange<const CharT*>{source.data(),
 1615|   926k|                                           source.data() + source.size()},
 1616|   926k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   926k|    static_cast<    \
  |  | 1056|   926k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|   926k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   926k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   926k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   926k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10.7k, False: 916k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.7k|    }                                                  \
  |  |  |  | 3938|   926k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   916k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|   916k|    return ranges::distance(source.data(), it);
 1619|   926k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|   646k|        : format_handler_base{argcount},
 1870|   646k|          parse_ctx{source_tag<Source&&>, format},
 1871|   646k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   646k|    static_cast<    \
  |  | 1056|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   646k|    static_cast<    \
  |  | 1056|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   646k|    {
 1873|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|   646k|        : contiguous_ctx(source, args, loc)
 1821|   646k|    {
 1822|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   646k|{
 2011|   646k|    const auto beg = handler.get_ctx().begin();
 2012|   646k|    detail::parse_format_string<false>(format, handler);
 2013|   646k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 35.7k, False: 610k]
  |  |  ------------------
  ------------------
 2014|  35.7k|        return unexpected(err.error());
 2015|  35.7k|    }
 2016|   610k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   646k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|  4.42M|    {
 1995|  4.42M|        return ctx.get();
 1996|  4.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|  4.42M|    {
 1826|  4.42M|        return contiguous_ctx;
 1827|  4.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|  1.25M|    {
 1877|  1.25M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 1.25M]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|  1.25M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|   646k|{
 1649|   646k|    auto arg = ctx.arg(id);
 1650|   646k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 646k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   646k|    return arg;
 1654|   646k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|   646k|    {
 1917|   646k|        return parse_ctx.next_arg_id();
 1918|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|   646k|    {
 1957|   646k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   646k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   646k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 646k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   646k|        auto specs = detail::format_specs{};
 1970|   646k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   646k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   646k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   646k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   646k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 646k]
  |  Branch (1975:29): [True: 0, False: 646k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   646k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.3k, False: 632k]
  |  |  ------------------
  ------------------
 1982|  14.3k|            return parse_ctx.begin();
 1983|  14.3k|        }
 1984|   632k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   632k|        on_visit_scan_arg(
 1987|   632k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   632k|                                           get_ctx().locale()},
 1989|   632k|            arg);
 1990|   632k|        return parse_ctx.begin();
 1991|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1666|   646k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   646k|    {
 1668|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1927|   632k|    {
 1928|   632k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 632k]
  |  Branch (1928:13): [True: 0, False: 632k]
  |  Branch (1928:29): [True: 0, False: 632k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   632k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   632k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.4k, False: 610k]
  |  |  ------------------
  ------------------
 1935|  21.4k|            on_error(r.error());
 1936|  21.4k|        }
 1937|   610k|        else {
 1938|   610k|            get_ctx().advance_to(*r);
 1939|   610k|        }
 1940|   632k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   632k|{
 2046|   632k|    const auto argcount = args.size();
 2047|   632k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 308k, False: 323k]
  |  Branch (2047:60): [True: 308k, False: 0]
  ------------------
 2048|   308k|        auto arg = args.get(0);
 2049|   308k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   308k|    static_cast<    \
  |  | 1056|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|   308k|    }
 2051|       |
 2052|   323k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 323k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   323k|    SCN_UNLIKELY_ATTR
 2060|   323k|    {
 2061|   323k|        auto handler = format_handler<false, CharT>{
 2062|   323k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   323k|        return vscan_parse_format_string(format, handler);
 2064|   323k|    }
 2065|   323k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|   463k|{
 1627|   463k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|   463k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|   463k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|   463k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|   463k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   463k|    static_cast<    \
  |  | 1056|   463k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|   463k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.36k, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.36k|    }                                                  \
  |  |  |  | 3938|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|   458k|    return it.position();
 1644|   463k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1869|   323k|        : format_handler_base{argcount},
 1870|   323k|          parse_ctx{source_tag<Source&&>, format},
 1871|   323k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   323k|    {
 1873|   323k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1796|   323k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   323k|    static_cast<    \
  |  | 1056|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   323k|    {
 1798|   323k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   323k|{
 2011|   323k|    const auto beg = handler.get_ctx().begin();
 2012|   323k|    detail::parse_format_string<false>(format, handler);
 2013|   323k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 17.8k, False: 305k]
  |  |  ------------------
  ------------------
 2014|  17.8k|        return unexpected(err.error());
 2015|  17.8k|    }
 2016|   305k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   323k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1994|  2.21M|    {
 1995|  2.21M|        return ctx.get();
 1996|  2.21M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1801|  2.21M|    {
 1802|  2.21M|        return ctx;
 1803|  2.21M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1876|   628k|    {
 1877|   628k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 628k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   628k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1648|   323k|{
 1649|   323k|    auto arg = ctx.arg(id);
 1650|   323k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   323k|    return arg;
 1654|   323k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1916|   323k|    {
 1917|   323k|        return parse_ctx.next_arg_id();
 1918|   323k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1956|   323k|    {
 1957|   323k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   323k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   323k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 323k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   323k|        auto specs = detail::format_specs{};
 1970|   323k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   323k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   323k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   323k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   323k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 323k]
  |  Branch (1975:29): [True: 0, False: 323k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   323k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.15k, False: 316k]
  |  |  ------------------
  ------------------
 1982|  7.15k|            return parse_ctx.begin();
 1983|  7.15k|        }
 1984|   316k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   316k|        on_visit_scan_arg(
 1987|   316k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   316k|                                           get_ctx().locale()},
 1989|   316k|            arg);
 1990|   316k|        return parse_ctx.begin();
 1991|   323k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1666|   323k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   323k|    {
 1668|   323k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   316k|    {
 1928|   316k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 316k]
  |  Branch (1928:13): [True: 0, False: 316k]
  |  Branch (1928:29): [True: 0, False: 316k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   316k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   316k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 305k]
  |  |  ------------------
  ------------------
 1935|  10.7k|            on_error(r.error());
 1936|  10.7k|        }
 1937|   305k|        else {
 1938|   305k|            get_ctx().advance_to(*r);
 1939|   305k|        }
 1940|   316k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   786k|{
 2126|   786k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   786k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 763k, False: 23.2k]
  |  |  ------------------
  ------------------
 2127|   763k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 763k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|   763k|    }
 2133|  23.2k|    else {
 2134|  23.2k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  23.2k|    }
 2140|   786k|    return result;
 2141|   786k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  39.0k|{
 2072|  39.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  39.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  25.1k|{
 2072|  25.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  25.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|   308k|{
 2072|   308k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|   308k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|   154k|{
 2072|   154k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|   154k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    894|{
 1462|    894|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    894|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    894|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    894|            return transcode_to_string_impl_to32(src, dest);
 1473|    894|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    894|    SCN_EXPECT(false);
  ------------------
  |  | 1051|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    894|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    894|{
 1355|    894|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    894|    auto it = src.begin();
 1358|   300k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 299k, False: 894]
  ------------------
 1359|   299k|        auto res = get_next_code_point(
 1360|   299k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   299k|                                                                 src.end()));
 1362|   299k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.85k, False: 296k]
  |  |  ------------------
  ------------------
 1363|  2.85k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.85k|        }
 1365|   296k|        else {
 1366|   296k|            dest.push_back(res.value);
 1367|   296k|        }
 1368|   299k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   299k|    }
 1370|    894|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   798k|{
 1279|   798k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   798k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   798k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   798k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   798k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   798k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.3k, False: 784k]
  |  |  ------------------
  ------------------
 1283|  14.3k|        return {get_start_for_next_code_point(input),
 1284|  14.3k|                detail::invalid_code_point};
 1285|  14.3k|    }
 1286|   784k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   784k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.5k, False: 761k]
  |  |  ------------------
  ------------------
 1287|  23.5k|        return {input.end(), detail::invalid_code_point};
 1288|  23.5k|    }
 1289|       |
 1290|   761k|    return {input.begin() + len,
 1291|   761k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   784k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  14.3k|{
 1265|  14.3k|    auto it = input.begin();
 1266|  61.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 59.3k, False: 2.01k]
  ------------------
 1267|  59.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 12.2k, False: 47.0k]
  ------------------
 1268|  12.2k|            break;
 1269|  12.2k|        }
 1270|  59.3k|    }
 1271|  14.3k|    return it;
 1272|  14.3k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  16.0k|    {
 3046|  16.0k|        SCN_UNLIKELY_ATTR
 3047|  16.0k|        m_msg = msg;
 3048|  16.0k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  1.09M|    {
 3051|  1.09M|        return m_msg == nullptr;
 3052|  1.09M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.56M|{
  458|  1.56M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.56M|        static_cast<unsigned char>(ch))];
  460|  1.56M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  39.1k|{
  469|  39.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  39.1k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.2k|{
  474|  14.2k|#if WCHAR_MIN < 0
  475|  14.2k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.9k, False: 1.29k]
  |  Branch (475:23): [True: 9.00k, False: 3.91k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.2k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   725k|{
  539|   725k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   725k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.21M|{
  784|  4.21M|    return e != eof_error::good;
  785|  4.21M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  12.1k|{
  798|  12.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  12.1k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  12.1k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.04M|{
 6047|  1.04M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.04M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.04M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.04M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.04M|    return {};
 6061|  1.04M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   386k|    {
  304|   386k|        ranges::advance(x, n);
  305|   386k|        return x;
  306|   386k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   386k|    {
  268|   386k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   386k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   386k|    {
  151|   386k|        i += n;
  152|   386k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   939k|    {
  108|   939k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   939k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   939k|    {
   87|   939k|        return s - i;
   88|   939k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.52M|    {
  108|  1.52M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.52M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.52M|    {
   87|  1.52M|        return s - i;
   88|  1.52M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   256k|    {
 2993|   256k|        return m_current;
 2994|   256k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.89M|    {
 2993|  1.89M|        return m_current;
 2994|  1.89M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   128k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   128k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   128k|        auto beg = r.begin();
  991|   128k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 128k, False: 0]
  ------------------
  992|   128k|            return false;
  993|   128k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   128k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  31.8k|    {
  763|  31.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  31.8k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.40k|        : m_fptr([](storage fn,
  743|  7.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.40k|              cvref<T> obj = *get<T>(fn);
  745|  7.40k|              if constexpr (std::is_void_v<R>) {
  746|  7.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.40k|              }
  748|  7.40k|              else {
  749|  7.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.40k|              }
  751|  7.40k|          }),
  752|  7.40k|          m_storage(std::addressof(f))
  753|  7.40k|    {
  754|  7.40k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  15.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.9k|              else {
  749|  15.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.9k|              }
  751|  15.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.9k|        else if constexpr (std::is_object_v<T>) {
  688|  15.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.9k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.40k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.40k|        {
  662|  7.40k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  76.3M|    {
  763|  76.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  76.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  76.3M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.42M|        : m_fptr([](storage fn,
  743|  2.42M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.42M|              cvref<T> obj = *get<T>(fn);
  745|  2.42M|              if constexpr (std::is_void_v<R>) {
  746|  2.42M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.42M|              }
  748|  2.42M|              else {
  749|  2.42M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.42M|              }
  751|  2.42M|          }),
  752|  2.42M|          m_storage(std::addressof(f))
  753|  2.42M|    {
  754|  2.42M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.83M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.83M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.83M|              else {
  749|  5.83M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.83M|              }
  751|  5.83M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.83M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.83M|        else if constexpr (std::is_object_v<T>) {
  688|  5.83M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.83M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.42M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.42M|        {
  662|  2.42M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|  52.9k|    {
 6075|  52.9k|        const bool need_skipped_width =
 6076|  52.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 52.9k]
  |  Branch (6076:33): [True: 0, False: 52.9k]
  ------------------
 6077|  52.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  52.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 52.9k]
  ------------------
 6081|  52.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 52.9k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  52.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 52.9k, False: 0]
  |  Branch (6085:56): [True: 50.4k, False: 2.46k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  50.4k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 50.4k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  99.9k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 932, False: 49.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|    }                                                  \
  |  |  |  | 3938|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  99.9k|                            make_eof_scan_error));
 6096|       |
 6097|  99.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 49.5k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  49.5k|            return result_type{it, 0};
 6105|  99.9k|        }
 6106|       |
 6107|  2.46k|        return result_type{rng.begin(), 0};
 6108|  52.9k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.46k|{
 2075|  2.46k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.46k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.46k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.46k|    else {
 2060|  2.46k|        auto first = range.begin();
 2061|  5.37k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.30k, False: 76]
  ------------------
 2062|  5.30k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.39k, False: 2.90k]
  ------------------
 2063|  2.39k|                return first;
 2064|  2.39k|            }
 2065|  5.30k|        }
 2066|     76|        return first;
 2067|  2.46k|    }
 2068|  2.46k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  49.3k|    {
  108|  49.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  49.3k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  49.3k|    {
   94|  49.3k|        iter_difference_t<I> counter{0};
   95|   508k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 459k, False: 49.3k]
  ------------------
   96|   459k|            ++i;
   97|   459k|            ++counter;
   98|   459k|        }
   99|  49.3k|        return counter;
  100|  49.3k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   200k|{
  951|   200k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.16k, False: 198k]
  |  |  ------------------
  ------------------
  952|  2.16k|        return eof_error::eof;
  953|  2.16k|    }
  954|   198k|    return eof_error::good;
  955|   200k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.42M|{
  945|  1.42M|    return is_range_eof(r.begin(), r.end());
  946|  1.42M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.42M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.42M|    {
  938|  1.42M|        return begin == end;
  939|  1.42M|    }
  940|  1.42M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   124k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   124k|    else {
 1788|   124k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   124k|    }
 1790|   124k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   124k|    {
 1636|   124k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   124k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   124k|    {
 1720|   124k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   124k|                           ranges::common_range<Range>) {
 1737|   124k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   124k|            auto end_seg = range.end().contiguous_segment();
 1739|   124k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.09k, False: 121k]
  |  |  ------------------
  ------------------
 1740|   124k|                             detail::to_address(end_seg.end()))) {
 1741|  3.09k|                auto& str = m_storage.emplace();
 1742|  3.09k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.09k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.09k|                m_view = string_view_type{str};
 1745|  3.09k|                return;
 1746|  3.09k|            }
 1747|       |
 1748|   121k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   121k|                                                            end_seg.data());
 1750|   121k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   124k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   244k|    {
 1681|   244k|        return m_view;
 1682|   244k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   124k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  48.8k|    {
 6117|  48.8k|        const bool need_skipped_width =
 6118|  48.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 48.8k]
  |  Branch (6118:33): [True: 0, False: 48.8k]
  ------------------
 6119|  48.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  48.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 48.8k]
  ------------------
 6122|  48.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 48.8k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  48.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 48.8k, False: 0]
  ------------------
 6131|  48.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 642, False: 48.1k]
  ------------------
 6132|  48.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 642]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    642|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 642]
  ------------------
 6134|    642|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  48.8k|        return result_type{rng.begin(), 0};
 6156|  48.8k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   311k|{
  951|   311k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.27k, False: 308k]
  |  |  ------------------
  ------------------
  952|  3.27k|        return eof_error::eof;
  953|  3.27k|    }
  954|   308k|    return eof_error::good;
  955|   311k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   311k|{
  945|   311k|    return is_range_eof(r.begin(), r.end());
  946|   311k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   311k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   311k|    {
  938|   311k|        return begin == end;
  939|   311k|    }
  940|   311k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   193k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   193k|                  ranges::sized_range<Range>) {
 1785|   193k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   193k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   193k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   193k|    {
 1589|   193k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.06M|    {
 1602|  1.06M|        return sv;
 1603|  1.06M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.93k|{
 2075|  4.93k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.93k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  4.93k|{
 2056|  4.93k|    if constexpr (ranges::common_range<Range>) {
 2057|  4.93k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  4.93k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   194k|{
 3066|   194k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 194k, False: 0]
  ------------------
 3067|   194k|        auto it = read_while_classic_space(range);
 3068|   194k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   194k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.16k, False: 192k]
  |  |  ------------------
  ------------------
 3070|  2.16k|            return unexpected(e);
 3071|  2.16k|        }
 3072|       |
 3073|   192k|        return it;
 3074|   194k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   194k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   194k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   194k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   194k|        auto buf = make_contiguous_buffer(range);
 2220|   194k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   194k|        return ranges::next(range.begin(),
 2222|   194k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   194k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   386k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   386k|                  ranges::sized_range<Range>) {
 1785|   386k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   386k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   386k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   386k|    {
 1589|   386k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  12.9k|    {
  304|  12.9k|        ranges::advance(x, n);
  305|  12.9k|        return x;
  306|  12.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   248k|    {
  268|   248k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   248k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   248k|    {
  181|   454k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 206k, False: 248k]
  ------------------
  182|   206k|            ++i;
  183|   206k|        }
  184|   248k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   123k|    {
 1686|   123k|        return m_storage.has_value();
 1687|   123k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.88k|    {
 1691|  1.88k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.88k|        return *m_storage;
 1693|  1.88k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  54.6k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  54.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  54.6k|            auto rd = make_reader<T, char_type>();
 6237|  54.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  54.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.78k, False: 52.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.78k|    }
  ------------------
 6238|       |
 6239|  52.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 52.9k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  52.9k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  52.9k|                return impl(rd, range, value);
 6242|  52.9k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  54.6k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   232k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   232k|                       std::is_same_v<T, std::wstring>) {
 5867|   232k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   232k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   334k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   141k|    {
 3156|   141k|        reader_error_handler eh{};
 3157|   141k|        get_derived().check_specs_impl(specs, eh);
 3158|   141k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.36k, False: 136k]
  |  |  ------------------
  ------------------
 3159|  5.36k|            return detail::unexpected_scan_error(
 3160|  5.36k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  5.36k|        }
 3162|   136k|        return {};
 3163|   141k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   141k|    {
 3168|   141k|        return static_cast<Derived&>(*this);
 3169|   141k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   141k|    {
 5247|   141k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   141k|        SCN_GCC_PUSH
 5250|   141k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   141k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   141k|        SCN_CLANG_PUSH
 5254|   141k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   141k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   141k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 141k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 141k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   128k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 128k, False: 12.7k]
  ------------------
 5263|   128k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 128k]
  ------------------
 5264|   128k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 128k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   128k|                else {
 5268|   128k|                    m_type = reader_type::word;
 5269|   128k|                }
 5270|   128k|                break;
 5271|      0|            }
 5272|       |
 5273|  5.36k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 5.36k, False: 136k]
  ------------------
 5274|  5.36k|                m_type = reader_type::character;
 5275|  5.36k|                break;
 5276|       |
 5277|  7.40k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 7.40k, False: 133k]
  ------------------
 5278|  7.40k|                m_type = reader_type::character_set;
 5279|  7.40k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 141k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 141k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   141k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   141k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|  52.9k|    {
 6162|  52.9k|        const bool need_skipped_width =
 6163|  52.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 52.9k]
  |  Branch (6163:33): [True: 0, False: 52.9k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  52.9k|        auto it = rng.begin();
 6167|  52.9k|        std::ptrdiff_t prefix_width = 0;
 6168|  52.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 52.9k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  52.9k|        else {
 6176|  52.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 932, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|    }                                                  \
  |  |  |  | 3938|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.9k|        }
 6179|  51.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.9k|        std::ptrdiff_t value_width = 0;
 6183|  51.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.9k|        else {
 6199|  51.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.64k, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.64k|    }                                                  \
  |  | 3938|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  49.3k|                                             specs, value, loc));
 6201|       |
 6202|  49.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 49.3k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  49.3k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  49.3k|        std::ptrdiff_t postfix_width = 0;
 6211|  49.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 48.8k, False: 496]
  ------------------
 6212|  48.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  48.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  48.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  48.8k|                                 value_width));
 6216|  48.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  48.8k|        }
 6218|       |
 6219|  49.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  49.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  49.3k|            specs, prefix_width, value_width, postfix_width));
 6221|  49.3k|        return it;
 6222|  49.3k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   452k|    {
 5296|   452k|        return m_type == reader_type::word;
 5297|   452k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   317k|{
 1242|   317k|    auto it = src.begin();
 1243|  1.99M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.68M, False: 309k]
  ------------------
 1244|  1.68M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.68M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.79k, False: 1.67M]
  ------------------
 1246|  4.79k|            return false;
 1247|  4.79k|        }
 1248|  1.67M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 733, False: 1.67M]
  ------------------
 1249|    733|            return false;
 1250|    733|        }
 1251|  1.67M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.67M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.67M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.44k, False: 1.67M]
  ------------------
 1254|  2.44k|            return false;
 1255|  2.44k|        }
 1256|  1.67M|        it += len;
 1257|  1.67M|    }
 1258|   309k|    return true;
 1259|   317k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   122k|{
 3108|   122k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   122k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.88k, False: 120k]
  ------------------
 3110|  1.88k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1055|  1.88k|    static_cast<    \
  |  | 1056|  1.88k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.88k|        }
 3112|   120k|        else {
 3113|   120k|            dest.assign(source.view());
 3114|   120k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   122k|    return {};
 3121|   122k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  7.40k|        {
 5144|  7.40k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 7.40k, False: 0]
  ------------------
 5145|  7.40k|                return {};
 5146|  7.40k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  14.2k|        {
 5117|  14.2k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1051|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  14.2k|            const auto val =
 5119|  14.2k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  14.2k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  14.2k|                    (val % 8)) &
 5122|  14.2k|                   1u;
 5123|  14.2k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  15.9k|        {
 5168|  15.9k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.63k, False: 14.2k]
  ------------------
 5169|  1.63k|                return false;
 5170|  1.63k|            }
 5171|       |
 5172|  14.2k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  15.9k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  7.40k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  51.9k|    {
 5314|  51.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  51.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  51.9k|        return read_impl(range, specs, value);
 5316|  51.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  51.9k|    {
 5332|  51.9k|        SCN_CLANG_PUSH
 5333|  51.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  51.9k|        switch (m_type) {
 5336|  49.5k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 49.5k, False: 2.46k]
  ------------------
 5337|  49.5k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 51.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 51.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 49.5k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 51.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 51.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 51.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  51.9k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  51.9k|        }
 5368|       |
 5369|  51.9k|        SCN_CLANG_POP
 5370|  51.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   123k|    {
 4861|   123k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   123k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   123k|{
 4795|   123k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   123k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   123k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.30k, False: 121k]
  ------------------
 4799|  2.30k|        return detail::unexpected_scan_error(
 4800|  2.30k|            scan_error::invalid_scanned_value,
 4801|  2.30k|            "Invalid encoding in scanned string");
 4802|  2.30k|    }
 4803|       |
 4804|   121k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|   121k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|   121k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|   121k|    static_cast<    \
  |  | 1056|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   121k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   123k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   123k|    else {
 2196|   123k|        auto it = range.begin();
 2197|       |
 2198|   123k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   123k|            auto seg = get_contiguous_beginning(range);
 2200|   123k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   123k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 123k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   123k|            ranges::advance(it, seg.size());
 2205|   123k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   123k|            ranges::subrange{it, range.end()},
 2209|   123k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   123k|    }
 2211|   123k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   248k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   248k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   248k|        else {
 1055|   248k|            return r.begin().contiguous_segment();
 1056|   248k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   248k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   235k|{
 2160|   235k|    auto it = range.begin();
 2161|  1.22M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.22M, False: 3.86k]
  ------------------
 2162|  1.22M|        const auto val =
 2163|  1.22M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.22M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.20M, False: 16.0k]
  |  |  ------------------
  ------------------
 2165|  1.20M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.20M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.20M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 232k, False: 974k]
  ------------------
 2168|   232k|                return it;
 2169|   232k|            }
 2170|  1.20M|        }
 2171|   990k|        it = val.iterator;
 2172|   990k|    }
 2173|       |
 2174|  3.86k|    return it;
 2175|   235k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.22M|{
 1998|  1.22M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.22M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.22M|    auto it = range.begin();
 2002|  1.22M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.22M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 2005|  16.0k|        ++it;
 2006|  16.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  16.0k|        return {it, {}};
 2008|  16.0k|    }
 2009|       |
 2010|  1.20M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.14M, False: 63.9k]
  ------------------
 2011|  1.14M|        ++it;
 2012|  1.14M|        return {it, string_type(1, *range.begin())};
 2013|  1.14M|    }
 2014|       |
 2015|  63.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  63.9k|    return {it, string_type{range.begin(), it}};
 2017|  1.20M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  16.0k|{
 1265|  16.0k|    auto it = input.begin();
 1266|  32.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 32.2k, False: 535]
  ------------------
 1267|  32.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 15.4k, False: 16.8k]
  ------------------
 1268|  15.4k|            break;
 1269|  15.4k|        }
 1270|  32.2k|    }
 1271|  16.0k|    return it;
 1272|  16.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  63.9k|    {
  283|  63.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  63.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  63.9k|    {
  252|  63.9k|        constexpr iter_difference_t<I> zero{0};
  253|  63.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|   234k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 171k, False: 63.4k]
  |  Branch (255:30): [True: 170k, False: 523]
  ------------------
  256|   170k|            ++i;
  257|   170k|            ++counter;
  258|   170k|        }
  259|       |
  260|  63.9k|        return counter;
  261|  63.9k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.22M|    {
 1989|  1.22M|        return !codepoint.empty();
 1990|  1.22M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   688k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   688k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   688k|              else {
  749|   688k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   688k|              }
  751|   688k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   688k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   688k|        else if constexpr (std::is_object_v<T>) {
  688|   688k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   688k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   688k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.46k|    {
 5089|  2.46k|        auto it = read_source_impl(range, {specs});
 5090|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 680]
  |  |  ------------------
  ------------------
 5091|  1.78k|            return unexpected(it.error());
 5092|  1.78k|        }
 5093|       |
 5094|    680|        return read_string_impl(range, *it, value);
 5095|  2.46k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.46k|    {
 5192|  2.46k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.46k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.46k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|  2.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|  2.46k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.46k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.46k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.46k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.46k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.46k|        };
 5215|       |
 5216|  2.46k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.46k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.46k|        auto it = read_while_code_unit(range, cb);
 5221|  2.46k|        return check_nonempty(it, range);
 5222|  2.46k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.46k|    {
 5228|  2.46k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.78k, False: 680]
  ------------------
 5229|  1.78k|            return detail::unexpected_scan_error(
 5230|  1.78k|                scan_error::invalid_scanned_value,
 5231|  1.78k|                "No characters matched in [character set]");
 5232|  1.78k|        }
 5233|       |
 5234|    680|        return it;
 5235|  2.46k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   112k|{
 2181|   112k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   112k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.46k|        : m_fptr([](storage fn,
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
  752|  2.46k|          m_storage(std::addressof(f))
  753|  2.46k|    {
  754|  2.46k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.30k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.30k|              else {
  749|  5.30k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.30k|              }
  751|  5.30k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.30k|    {
  684|  5.30k|        if constexpr (std::is_const_v<T>) {
  685|  5.30k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.30k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.30k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.30k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.30k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.46k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.46k|        {
  667|  2.46k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    680|{
 4795|    680|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    680|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    680|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 680]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    680|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    680|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 680]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    680|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    680|    static_cast<    \
  |  | 1056|    680|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    680|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  40.9k|    {
 5314|  40.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  40.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  40.9k|        return read_impl(range, specs, value);
 5316|  40.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  40.9k|    {
 5332|  40.9k|        SCN_CLANG_PUSH
 5333|  40.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  40.9k|        switch (m_type) {
 5336|  38.4k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 38.4k, False: 2.46k]
  ------------------
 5337|  38.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 40.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 40.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 38.4k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 40.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 40.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 40.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  40.9k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  40.9k|        }
 5368|       |
 5369|  40.9k|        SCN_CLANG_POP
 5370|  40.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  96.0k|    {
 4861|  96.0k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  96.0k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  96.0k|{
 4795|  96.0k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  96.0k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  96.0k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.83k, False: 93.2k]
  ------------------
 4799|  2.83k|        return detail::unexpected_scan_error(
 4800|  2.83k|            scan_error::invalid_scanned_value,
 4801|  2.83k|            "Invalid encoding in scanned string");
 4802|  2.83k|    }
 4803|       |
 4804|  93.2k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|  93.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 93.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|  93.2k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|  93.2k|    static_cast<    \
  |  | 1056|  93.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  93.2k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  93.9k|{
 3128|  93.9k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  93.9k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  93.9k|    return {};
 3136|  93.9k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   192k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   192k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   192k|        auto buf = make_contiguous_buffer(range);
 2191|   192k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   192k|        return ranges::next(range.begin(),
 2193|   192k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   192k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.46k|    {
 5089|  2.46k|        auto it = read_source_impl(range, {specs});
 5090|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 680]
  |  |  ------------------
  ------------------
 5091|  1.78k|            return unexpected(it.error());
 5092|  1.78k|        }
 5093|       |
 5094|    680|        return read_string_impl(range, *it, value);
 5095|  2.46k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  4.93k|    {
 5192|  4.93k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  4.93k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  4.93k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|  4.93k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.93k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|  4.93k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  4.93k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 4.93k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  4.93k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.93k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.93k|        };
 5215|       |
 5216|  4.93k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.93k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  4.93k|        auto it = read_while_code_unit(range, cb);
 5221|  4.93k|        return check_nonempty(it, range);
 5222|  4.93k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  4.93k|    {
 5228|  4.93k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.57k, False: 1.36k]
  ------------------
 5229|  3.57k|            return detail::unexpected_scan_error(
 5230|  3.57k|                scan_error::invalid_scanned_value,
 5231|  3.57k|                "No characters matched in [character set]");
 5232|  3.57k|        }
 5233|       |
 5234|  1.36k|        return it;
 5235|  4.93k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.93k|        : m_fptr([](storage fn,
  743|  4.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.93k|              cvref<T> obj = *get<T>(fn);
  745|  4.93k|              if constexpr (std::is_void_v<R>) {
  746|  4.93k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.93k|              }
  748|  4.93k|              else {
  749|  4.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.93k|              }
  751|  4.93k|          }),
  752|  4.93k|          m_storage(std::addressof(f))
  753|  4.93k|    {
  754|  4.93k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  10.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.6k|              else {
  749|  10.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.6k|              }
  751|  10.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.6k|    {
  684|  10.6k|        if constexpr (std::is_const_v<T>) {
  685|  10.6k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.6k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  10.6k|        const auto cb = [&](SourceCharT ch) {
 5213|  10.6k|            return cb_wrapper.on_ascii_only(ch);
 5214|  10.6k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.93k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.93k|        {
  667|  4.93k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    680|{
 4795|    680|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    680|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    680|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 680]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    680|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    680|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 680]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    680|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    680|    static_cast<    \
  |  | 1056|    680|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    680|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|   101k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   101k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   101k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   101k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  40.9k|    {
 5314|  40.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  40.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  40.9k|        return read_impl(range, specs, value);
 5316|  40.9k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  40.9k|    {
 5332|  40.9k|        SCN_CLANG_PUSH
 5333|  40.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  40.9k|        switch (m_type) {
 5336|  38.4k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 38.4k, False: 2.46k]
  ------------------
 5337|  38.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 40.9k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 40.9k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 38.4k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 40.9k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 40.9k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 40.9k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  40.9k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  40.9k|        }
 5368|       |
 5369|  40.9k|        SCN_CLANG_POP
 5370|  40.9k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|  96.0k|    {
 4868|  96.0k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|  96.0k|                                     value);
 4870|  96.0k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  96.0k|{
 4814|  96.0k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  96.0k|    auto src = [&]() {
 4817|  96.0k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  96.0k|            return make_contiguous_buffer(
 4819|  96.0k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  96.0k|        }
 4821|  96.0k|        else {
 4822|  96.0k|            return make_contiguous_buffer(
 4823|  96.0k|                ranges::subrange{range.begin(), result});
 4824|  96.0k|        }
 4825|  96.0k|    }();
 4826|  96.0k|    using src_type = decltype(src);
 4827|       |
 4828|  96.0k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  96.0k|    else {
 4841|  96.0k|        const auto view = src.view();
 4842|  96.0k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  96.0k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 2.83k, False: 93.2k]
  ------------------
 4845|  2.83k|            return detail::unexpected_scan_error(
 4846|  2.83k|                scan_error::invalid_scanned_value,
 4847|  2.83k|                "Invalid encoding in scanned string_view");
 4848|  2.83k|        }
 4849|       |
 4850|  93.2k|        return SCN_MOVE(result);
  ------------------
  |  | 1055|  93.2k|    static_cast<    \
  |  | 1056|  93.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  96.0k|    }
 4852|  96.0k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  96.0k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  96.0k|        else {
 4822|  96.0k|            return make_contiguous_buffer(
 4823|  96.0k|                ranges::subrange{range.begin(), result});
 4824|  96.0k|        }
 4825|  96.0k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.46k|    {
 5103|  2.46k|        auto it = read_source_impl(range, {specs});
 5104|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.78k, False: 680]
  |  |  ------------------
  ------------------
 5105|  1.78k|            return unexpected(it.error());
 5106|  1.78k|        }
 5107|       |
 5108|    680|        return read_string_view_impl(range, *it, value);
 5109|  2.46k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    680|{
 4814|    680|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    680|    auto src = [&]() {
 4817|    680|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    680|            return make_contiguous_buffer(
 4819|    680|                ranges::subrange{range.begin().base(), result.base()});
 4820|    680|        }
 4821|    680|        else {
 4822|    680|            return make_contiguous_buffer(
 4823|    680|                ranges::subrange{range.begin(), result});
 4824|    680|        }
 4825|    680|    }();
 4826|    680|    using src_type = decltype(src);
 4827|       |
 4828|    680|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    680|    else {
 4841|    680|        const auto view = src.view();
 4842|    680|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    680|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 680]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    680|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    680|    static_cast<    \
  |  | 1056|    680|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    680|    }
 4852|    680|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    680|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    680|        else {
 4822|    680|            return make_contiguous_buffer(
 4823|    680|                ranges::subrange{range.begin(), result});
 4824|    680|        }
 4825|    680|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   125k|{
 3066|   125k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 125k, False: 0]
  ------------------
 3067|   125k|        auto it = read_while_classic_space(range);
 3068|   125k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   125k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.46k, False: 123k]
  |  |  ------------------
  ------------------
 3070|  1.46k|            return unexpected(e);
 3071|  1.46k|        }
 3072|       |
 3073|   123k|        return it;
 3074|   125k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   125k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   125k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   125k|    else {
 2225|   125k|        auto it = range.begin();
 2226|       |
 2227|   125k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   125k|            auto seg = get_contiguous_beginning(range);
 2229|   125k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   125k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 12.9k, False: 112k]
  ------------------
 2231|  12.9k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  12.9k|            }
 2233|   112k|            ranges::advance(it, seg.size());
 2234|   112k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   125k|            return detail::is_cp_space(cp);
 2238|   125k|        });
 2239|   125k|    }
 2240|   125k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   112k|        : m_fptr([](storage fn,
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|   112k|              if constexpr (std::is_void_v<R>) {
  746|   112k|                  obj(static_cast<decltype(args)>(args)...);
  747|   112k|              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
  752|   112k|          m_storage(std::addressof(f))
  753|   112k|    {
  754|   112k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   518k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   518k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   518k|              else {
  749|   518k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   518k|              }
  751|   518k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   518k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   518k|        else if constexpr (std::is_object_v<T>) {
  688|   518k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   518k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   518k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   518k|            return detail::is_cp_space(cp);
 2238|   518k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   112k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   112k|        {
  662|   112k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   776k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   776k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   776k|        auto beg = r.begin();
  991|   776k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 776k, False: 0]
  ------------------
  992|   776k|            return false;
  993|   776k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   776k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  28.4k|    {
  763|  28.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.4k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  11.0k|        : m_fptr([](storage fn,
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|  11.0k|              if constexpr (std::is_void_v<R>) {
  746|  11.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.0k|              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
  752|  11.0k|          m_storage(std::addressof(f))
  753|  11.0k|    {
  754|  11.0k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  14.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.2k|              else {
  749|  14.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.2k|              }
  751|  14.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  14.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.2k|        else if constexpr (std::is_object_v<T>) {
  688|  14.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.2k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  11.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.0k|        {
  662|  11.0k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   312k|    {
 6075|   312k|        const bool need_skipped_width =
 6076|   312k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 312k]
  |  Branch (6076:33): [True: 0, False: 312k]
  ------------------
 6077|   312k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   312k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 312k]
  ------------------
 6081|   312k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 312k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   312k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 312k, False: 0]
  |  Branch (6085:56): [True: 308k, False: 3.69k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   308k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 308k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   617k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 890, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    890|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    890|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    890|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    890|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    890|    }                                                  \
  |  |  |  | 3938|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   617k|                            make_eof_scan_error));
 6096|       |
 6097|   617k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 308k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   308k|            return result_type{it, 0};
 6105|   617k|        }
 6106|       |
 6107|  3.69k|        return result_type{rng.begin(), 0};
 6108|   312k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.69k|{
 2075|  3.69k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  3.69k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  3.69k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  3.69k|    else {
 2060|  3.69k|        auto first = range.begin();
 2061|  4.77k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.73k, False: 40]
  ------------------
 2062|  4.73k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 3.65k, False: 1.08k]
  ------------------
 2063|  3.65k|                return first;
 2064|  3.65k|            }
 2065|  4.73k|        }
 2066|     40|        return first;
 2067|  3.69k|    }
 2068|  3.69k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   305k|    {
  108|   305k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   305k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   305k|    {
   94|   305k|        iter_difference_t<I> counter{0};
   95|  8.81M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.51M, False: 305k]
  ------------------
   96|  8.51M|            ++i;
   97|  8.51M|            ++counter;
   98|  8.51M|        }
   99|   305k|        return counter;
  100|   305k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.23M|{
  951|  1.23M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.22k, False: 1.23M]
  |  |  ------------------
  ------------------
  952|  2.22k|        return eof_error::eof;
  953|  2.22k|    }
  954|  1.23M|    return eof_error::good;
  955|  1.23M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  24.3M|{
  945|  24.3M|    return is_range_eof(r.begin(), r.end());
  946|  24.3M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  24.3M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  24.3M|    {
  938|  24.3M|        return begin == end;
  939|  24.3M|    }
  940|  24.3M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   770k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   770k|    else {
 1788|   770k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   770k|    }
 1790|   770k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   770k|    {
 1636|   770k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   770k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   770k|    {
 1720|   770k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   770k|                           ranges::common_range<Range>) {
 1737|   770k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   770k|            auto end_seg = range.end().contiguous_segment();
 1739|   770k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.45k, False: 766k]
  |  |  ------------------
  ------------------
 1740|   770k|                             detail::to_address(end_seg.end()))) {
 1741|  3.45k|                auto& str = m_storage.emplace();
 1742|  3.45k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.45k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.45k|                m_view = string_view_type{str};
 1745|  3.45k|                return;
 1746|  3.45k|            }
 1747|       |
 1748|   766k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   766k|                                                            end_seg.data());
 1750|   766k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   770k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.53M|    {
 1681|  1.53M|        return m_view;
 1682|  1.53M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   770k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   304k|    {
 6117|   304k|        const bool need_skipped_width =
 6118|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 304k]
  |  Branch (6118:33): [True: 0, False: 304k]
  ------------------
 6119|   304k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   304k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 304k]
  ------------------
 6122|   304k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 304k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   304k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 304k, False: 0]
  ------------------
 6131|   304k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 96, False: 304k]
  ------------------
 6132|   304k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 96]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|     96|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 96]
  ------------------
 6134|     96|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   304k|        return result_type{rng.begin(), 0};
 6156|   304k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  46.2M|{
 1998|  46.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  46.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  46.2M|    auto it = range.begin();
 2002|  46.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  46.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  46.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 46.2M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  46.2M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 46.2M, False: 0]
  ------------------
 2011|  46.2M|        ++it;
 2012|  46.2M|        return {it, string_type(1, *range.begin())};
 2013|  46.2M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  46.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  48.7M|{
  945|  48.7M|    return is_range_eof(r.begin(), r.end());
  946|  48.7M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  48.7M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  48.7M|    {
  938|  48.7M|        return begin == end;
  939|  48.7M|    }
  940|  48.7M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  46.2M|    {
 1989|  46.2M|        return !codepoint.empty();
 1990|  46.2M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.46M|{
  951|  2.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  2.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.45k, False: 2.46M]
  |  |  ------------------
  ------------------
  952|  4.45k|        return eof_error::eof;
  953|  4.45k|    }
  954|  2.46M|    return eof_error::good;
  955|  2.46M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.54M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.54M|                  ranges::sized_range<Range>) {
 1785|  1.54M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.54M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.54M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.54M|    {
 1589|  1.54M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.30M|    {
 1602|  2.30M|        return sv;
 1603|  2.30M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.38k|{
 2075|  7.38k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  7.38k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  7.38k|{
 2056|  7.38k|    if constexpr (ranges::common_range<Range>) {
 2057|  7.38k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  7.38k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.54M|{
 3066|  1.54M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.54M, False: 0]
  ------------------
 3067|  1.54M|        auto it = read_while_classic_space(range);
 3068|  1.54M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.54M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.29k, False: 1.54M]
  |  |  ------------------
  ------------------
 3070|  2.29k|            return unexpected(e);
 3071|  2.29k|        }
 3072|       |
 3073|  1.54M|        return it;
 3074|  1.54M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.54M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.54M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.54M|    else {
 2225|  1.54M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.54M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.54M|            return detail::is_cp_space(cp);
 2238|  1.54M|        });
 2239|  1.54M|    }
 2240|  1.54M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.54M|{
 2181|  1.54M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.54M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.08M|{
 2160|  3.08M|    auto it = range.begin();
 2161|  46.2M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 46.2M, False: 12.4k]
  ------------------
 2162|  46.2M|        const auto val =
 2163|  46.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  46.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  46.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 46.2M, False: 0]
  |  |  ------------------
  ------------------
 2165|  46.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  46.2M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  46.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.07M, False: 43.1M]
  ------------------
 2168|  3.07M|                return it;
 2169|  3.07M|            }
 2170|  46.2M|        }
 2171|  43.1M|        it = val.iterator;
 2172|  43.1M|    }
 2173|       |
 2174|  12.4k|    return it;
 2175|  3.08M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.54M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.54M|              else {
  749|  3.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.54M|              }
  751|  3.54M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.54M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.54M|        else if constexpr (std::is_object_v<T>) {
  688|  3.54M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.54M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.54M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.54M|            return detail::is_cp_space(cp);
 2238|  3.54M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   764k|    {
 1686|   764k|        return m_storage.has_value();
 1687|   764k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.03k|    {
 1691|  1.03k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.03k|        return *m_storage;
 1693|  1.03k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  2.33M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   948k|    {
 3156|   948k|        reader_error_handler eh{};
 3157|   948k|        get_derived().check_specs_impl(specs, eh);
 3158|   948k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.7k, False: 937k]
  |  |  ------------------
  ------------------
 3159|  10.7k|            return detail::unexpected_scan_error(
 3160|  10.7k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  10.7k|        }
 3162|   937k|        return {};
 3163|   948k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|   948k|    {
 3168|   948k|        return static_cast<Derived&>(*this);
 3169|   948k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   948k|    {
 5247|   948k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   948k|        SCN_GCC_PUSH
 5250|   948k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   948k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   948k|        SCN_CLANG_PUSH
 5254|   948k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   948k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   948k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 948k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 948k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   926k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 926k, False: 21.8k]
  ------------------
 5263|   926k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 926k]
  ------------------
 5264|   926k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 926k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   926k|                else {
 5268|   926k|                    m_type = reader_type::word;
 5269|   926k|                }
 5270|   926k|                break;
 5271|      0|            }
 5272|       |
 5273|  10.7k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 10.7k, False: 937k]
  ------------------
 5274|  10.7k|                m_type = reader_type::character;
 5275|  10.7k|                break;
 5276|       |
 5277|  11.0k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 11.0k, False: 937k]
  ------------------
 5278|  11.0k|                m_type = reader_type::character_set;
 5279|  11.0k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 948k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 948k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   948k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   948k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  3.24M|    {
 5296|  3.24M|        return m_type == reader_type::word;
 5297|  3.24M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.31M|{
 1242|  2.31M|    auto it = src.begin();
 1243|  63.1M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 60.8M, False: 2.29M]
  ------------------
 1244|  60.8M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  60.8M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 60.8M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  60.8M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 60.8M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  60.8M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  60.8M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  60.8M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 20.1k, False: 60.8M]
  ------------------
 1254|  20.1k|            return false;
 1255|  20.1k|        }
 1256|  60.8M|        it += len;
 1257|  60.8M|    }
 1258|  2.29M|    return true;
 1259|  2.31M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  11.0k|        {
 5144|  11.0k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 11.0k, False: 0]
  ------------------
 5145|  11.0k|                return {};
 5146|  11.0k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  9.00k|        {
 5117|  9.00k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1051|  9.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  9.00k|            const auto val =
 5119|  9.00k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  9.00k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  9.00k|                    (val % 8)) &
 5122|  9.00k|                   1u;
 5123|  9.00k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  14.2k|        {
 5168|  14.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 5.20k, False: 9.00k]
  ------------------
 5169|  5.20k|                return false;
 5170|  5.20k|            }
 5171|       |
 5172|  9.00k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  14.2k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  11.0k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   770k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   770k|    else {
 2196|   770k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   770k|        return read_until_code_point(
 2208|   770k|            ranges::subrange{it, range.end()},
 2209|   770k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   770k|    }
 2211|   770k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.54M|{
 2160|  1.54M|    auto it = range.begin();
 2161|  23.1M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 23.1M, False: 6.20k]
  ------------------
 2162|  23.1M|        const auto val =
 2163|  23.1M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  23.1M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  23.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 23.1M, False: 0]
  |  |  ------------------
  ------------------
 2165|  23.1M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  23.1M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  23.1M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.53M, False: 21.5M]
  ------------------
 2168|  1.53M|                return it;
 2169|  1.53M|            }
 2170|  23.1M|        }
 2171|  21.5M|        it = val.iterator;
 2172|  21.5M|    }
 2173|       |
 2174|  6.20k|    return it;
 2175|  1.54M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  23.1M|{
 1998|  23.1M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  23.1M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  23.1M|    auto it = range.begin();
 2002|  23.1M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  23.1M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  23.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 23.1M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  23.1M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 23.1M, False: 0]
  ------------------
 2011|  23.1M|        ++it;
 2012|  23.1M|        return {it, string_type(1, *range.begin())};
 2013|  23.1M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  23.1M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  23.1M|    {
 1989|  23.1M|        return !codepoint.empty();
 1990|  23.1M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   770k|        : m_fptr([](storage fn,
  743|   770k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   770k|              cvref<T> obj = *get<T>(fn);
  745|   770k|              if constexpr (std::is_void_v<R>) {
  746|   770k|                  obj(static_cast<decltype(args)>(args)...);
  747|   770k|              }
  748|   770k|              else {
  749|   770k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   770k|              }
  751|   770k|          }),
  752|   770k|          m_storage(std::addressof(f))
  753|   770k|    {
  754|   770k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.3M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.3M|              else {
  749|  21.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.3M|              }
  751|  21.3M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.3M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.3M|        else if constexpr (std::is_object_v<T>) {
  688|  21.3M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.3M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  21.3M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   770k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   770k|        {
  662|   770k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  3.69k|    {
 5192|  3.69k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.69k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.69k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|  3.69k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 3.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|  3.69k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.69k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 3.69k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  3.69k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.69k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.69k|        };
 5215|       |
 5216|  3.69k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 3.69k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  3.69k|        auto it = read_while_code_unit(range, cb);
 5221|  3.69k|        return check_nonempty(it, range);
 5222|  3.69k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  3.69k|    {
 5228|  3.69k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.57k, False: 116]
  ------------------
 5229|  3.57k|            return detail::unexpected_scan_error(
 5230|  3.57k|                scan_error::invalid_scanned_value,
 5231|  3.57k|                "No characters matched in [character set]");
 5232|  3.57k|        }
 5233|       |
 5234|    116|        return it;
 5235|  3.69k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   771k|{
 2181|   771k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   771k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.69k|        : m_fptr([](storage fn,
  743|  3.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.69k|              cvref<T> obj = *get<T>(fn);
  745|  3.69k|              if constexpr (std::is_void_v<R>) {
  746|  3.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.69k|              }
  748|  3.69k|              else {
  749|  3.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.69k|              }
  751|  3.69k|          }),
  752|  3.69k|          m_storage(std::addressof(f))
  753|  3.69k|    {
  754|  3.69k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.73k|              else {
  749|  4.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.73k|              }
  751|  4.73k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.73k|    {
  684|  4.73k|        if constexpr (std::is_const_v<T>) {
  685|  4.73k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.73k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  4.73k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.73k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.73k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.69k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.69k|        {
  667|  3.69k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.54M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.54M|    else {
 2196|  1.54M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.54M|        return read_until_code_point(
 2208|  1.54M|            ranges::subrange{it, range.end()},
 2209|  1.54M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.54M|    }
 2211|  1.54M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  42.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.6M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.6M|              else {
  749|  42.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.6M|              }
  751|  42.6M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  42.6M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.6M|        else if constexpr (std::is_object_v<T>) {
  688|  42.6M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.6M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  42.6M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  7.38k|    {
 5192|  7.38k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  7.38k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  7.38k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|  7.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|  7.38k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  7.38k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 7.38k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  7.38k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.38k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.38k|        };
 5215|       |
 5216|  7.38k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 7.38k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  7.38k|        auto it = read_while_code_unit(range, cb);
 5221|  7.38k|        return check_nonempty(it, range);
 5222|  7.38k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  7.38k|    {
 5228|  7.38k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 7.15k, False: 232]
  ------------------
 5229|  7.15k|            return detail::unexpected_scan_error(
 5230|  7.15k|                scan_error::invalid_scanned_value,
 5231|  7.15k|                "No characters matched in [character set]");
 5232|  7.15k|        }
 5233|       |
 5234|    232|        return it;
 5235|  7.38k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.38k|        : m_fptr([](storage fn,
  743|  7.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.38k|              cvref<T> obj = *get<T>(fn);
  745|  7.38k|              if constexpr (std::is_void_v<R>) {
  746|  7.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.38k|              }
  748|  7.38k|              else {
  749|  7.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.38k|              }
  751|  7.38k|          }),
  752|  7.38k|          m_storage(std::addressof(f))
  753|  7.38k|    {
  754|  7.38k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.46k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.46k|              else {
  749|  9.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.46k|              }
  751|  9.46k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.46k|    {
  684|  9.46k|        if constexpr (std::is_const_v<T>) {
  685|  9.46k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.46k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  9.46k|        const auto cb = [&](SourceCharT ch) {
 5213|  9.46k|            return cb_wrapper.on_ascii_only(ch);
 5214|  9.46k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.38k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.38k|        {
  667|  7.38k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   316k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   316k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   316k|            auto rd = make_reader<T, char_type>();
 6237|   316k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   316k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.57k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.57k|    }
  ------------------
 6238|       |
 6239|   312k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 312k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   312k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   312k|                return impl(rd, range, value);
 6242|   312k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   316k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.55M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.55M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.55M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.55M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|   312k|    {
 6162|   312k|        const bool need_skipped_width =
 6163|   312k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 312k]
  |  Branch (6163:33): [True: 0, False: 312k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   312k|        auto it = rng.begin();
 6167|   312k|        std::ptrdiff_t prefix_width = 0;
 6168|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 312k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   312k|        else {
 6176|   312k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 890, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    890|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    890|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    890|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    890|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    890|    }                                                  \
  |  |  |  | 3938|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   311k|            std::tie(it, prefix_width) = prefix_result;
 6178|   311k|        }
 6179|   311k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   311k|        std::ptrdiff_t value_width = 0;
 6183|   311k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 311k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   311k|        else {
 6199|   311k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.26k, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|    }                                                  \
  |  | 3938|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   305k|                                             specs, value, loc));
 6201|       |
 6202|   305k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 305k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   305k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   305k|        std::ptrdiff_t postfix_width = 0;
 6211|   305k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 304k, False: 740]
  ------------------
 6212|   304k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   304k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   304k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   304k|                                 value_width));
 6216|   304k|            std::tie(it, postfix_width) = postfix_result;
 6217|   304k|        }
 6218|       |
 6219|   305k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   305k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   305k|            specs, prefix_width, value_width, postfix_width));
 6221|   305k|        return it;
 6222|   305k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   763k|{
 3108|   763k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   763k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.03k, False: 762k]
  ------------------
 3110|  1.03k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1055|  1.03k|    static_cast<    \
  |  | 1056|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.03k|        }
 3112|   762k|        else {
 3113|   762k|            dest.assign(source.view());
 3114|   762k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   763k|    return {};
 3121|   763k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   311k|    {
 5314|   311k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   311k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   311k|        return read_impl(range, specs, value);
 5316|   311k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   311k|    {
 5332|   311k|        SCN_CLANG_PUSH
 5333|   311k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   311k|        switch (m_type) {
 5336|   308k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308k, False: 3.69k]
  ------------------
 5337|   308k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 311k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 311k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.69k, False: 308k]
  ------------------
 5347|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.69k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 311k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 311k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 311k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   311k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   311k|        }
 5368|       |
 5369|   311k|        SCN_CLANG_POP
 5370|   311k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   770k|    {
 4861|   770k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   770k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   770k|{
 4795|   770k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   770k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   770k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.71k, False: 763k]
  ------------------
 4799|  6.71k|        return detail::unexpected_scan_error(
 4800|  6.71k|            scan_error::invalid_scanned_value,
 4801|  6.71k|            "Invalid encoding in scanned string");
 4802|  6.71k|    }
 4803|       |
 4804|   763k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|   763k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 763k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|   763k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   763k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  3.69k|    {
 5089|  3.69k|        auto it = read_source_impl(range, {specs});
 5090|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5091|  3.57k|            return unexpected(it.error());
 5092|  3.57k|        }
 5093|       |
 5094|    116|        return read_string_impl(range, *it, value);
 5095|  3.69k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    116|{
 4795|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 116]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    116|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    116|    static_cast<    \
  |  | 1056|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    116|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   311k|    {
 5314|   311k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   311k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   311k|        return read_impl(range, specs, value);
 5316|   311k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   311k|    {
 5332|   311k|        SCN_CLANG_PUSH
 5333|   311k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   311k|        switch (m_type) {
 5336|   308k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308k, False: 3.69k]
  ------------------
 5337|   308k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 311k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 311k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.69k, False: 308k]
  ------------------
 5347|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.69k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 311k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 311k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 311k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   311k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   311k|        }
 5368|       |
 5369|   311k|        SCN_CLANG_POP
 5370|   311k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   770k|    {
 4861|   770k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   770k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   770k|{
 4795|   770k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   770k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   770k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.71k, False: 763k]
  ------------------
 4799|  6.71k|        return detail::unexpected_scan_error(
 4800|  6.71k|            scan_error::invalid_scanned_value,
 4801|  6.71k|            "Invalid encoding in scanned string");
 4802|  6.71k|    }
 4803|       |
 4804|   763k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|   763k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 763k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|   763k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   763k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   763k|{
 3128|   763k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   763k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   763k|    return {};
 3136|   763k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  3.69k|    {
 5089|  3.69k|        auto it = read_source_impl(range, {specs});
 5090|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5091|  3.57k|            return unexpected(it.error());
 5092|  3.57k|        }
 5093|       |
 5094|    116|        return read_string_impl(range, *it, value);
 5095|  3.69k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    116|{
 4795|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 116]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    116|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    116|    static_cast<    \
  |  | 1056|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    116|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   779k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   779k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   779k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   779k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   311k|    {
 5314|   311k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   311k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   311k|        return read_impl(range, specs, value);
 5316|   311k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   311k|    {
 5332|   311k|        SCN_CLANG_PUSH
 5333|   311k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   311k|        switch (m_type) {
 5336|   308k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 308k, False: 3.69k]
  ------------------
 5337|   308k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 311k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 311k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.69k, False: 308k]
  ------------------
 5347|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.69k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 311k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 311k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 311k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   311k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   311k|        }
 5368|       |
 5369|   311k|        SCN_CLANG_POP
 5370|   311k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   770k|    {
 4868|   770k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   770k|                                     value);
 4870|   770k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   770k|{
 4814|   770k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   770k|    auto src = [&]() {
 4817|   770k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   770k|            return make_contiguous_buffer(
 4819|   770k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   770k|        }
 4821|   770k|        else {
 4822|   770k|            return make_contiguous_buffer(
 4823|   770k|                ranges::subrange{range.begin(), result});
 4824|   770k|        }
 4825|   770k|    }();
 4826|   770k|    using src_type = decltype(src);
 4827|       |
 4828|   770k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   770k|    else {
 4841|   770k|        const auto view = src.view();
 4842|   770k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   770k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6.71k, False: 763k]
  ------------------
 4845|  6.71k|            return detail::unexpected_scan_error(
 4846|  6.71k|                scan_error::invalid_scanned_value,
 4847|  6.71k|                "Invalid encoding in scanned string_view");
 4848|  6.71k|        }
 4849|       |
 4850|   763k|        return SCN_MOVE(result);
  ------------------
  |  | 1055|   763k|    static_cast<    \
  |  | 1056|   763k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   770k|    }
 4852|   770k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   770k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   770k|        else {
 4822|   770k|            return make_contiguous_buffer(
 4823|   770k|                ranges::subrange{range.begin(), result});
 4824|   770k|        }
 4825|   770k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  3.69k|    {
 5103|  3.69k|        auto it = read_source_impl(range, {specs});
 5104|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5105|  3.57k|            return unexpected(it.error());
 5106|  3.57k|        }
 5107|       |
 5108|    116|        return read_string_view_impl(range, *it, value);
 5109|  3.69k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    116|{
 4814|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    116|    auto src = [&]() {
 4817|    116|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    116|            return make_contiguous_buffer(
 4819|    116|                ranges::subrange{range.begin().base(), result.base()});
 4820|    116|        }
 4821|    116|        else {
 4822|    116|            return make_contiguous_buffer(
 4823|    116|                ranges::subrange{range.begin(), result});
 4824|    116|        }
 4825|    116|    }();
 4826|    116|    using src_type = decltype(src);
 4827|       |
 4828|    116|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    116|    else {
 4841|    116|        const auto view = src.view();
 4842|    116|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    116|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 116]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    116|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    116|    static_cast<    \
  |  | 1056|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    116|    }
 4852|    116|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    116|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    116|        else {
 4822|    116|            return make_contiguous_buffer(
 4823|    116|                ranges::subrange{range.begin(), result});
 4824|    116|        }
 4825|    116|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   771k|{
 3066|   771k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 771k, False: 0]
  ------------------
 3067|   771k|        auto it = read_while_classic_space(range);
 3068|   771k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   771k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.14k, False: 770k]
  |  |  ------------------
  ------------------
 3070|  1.14k|            return unexpected(e);
 3071|  1.14k|        }
 3072|       |
 3073|   770k|        return it;
 3074|   771k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   771k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   771k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   771k|    else {
 2225|   771k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   771k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   771k|            return detail::is_cp_space(cp);
 2238|   771k|        });
 2239|   771k|    }
 2240|   771k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   771k|        : m_fptr([](storage fn,
  743|   771k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   771k|              cvref<T> obj = *get<T>(fn);
  745|   771k|              if constexpr (std::is_void_v<R>) {
  746|   771k|                  obj(static_cast<decltype(args)>(args)...);
  747|   771k|              }
  748|   771k|              else {
  749|   771k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   771k|              }
  751|   771k|          }),
  752|   771k|          m_storage(std::addressof(f))
  753|   771k|    {
  754|   771k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.77M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.77M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.77M|              else {
  749|  1.77M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.77M|              }
  751|  1.77M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.77M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.77M|        else if constexpr (std::is_object_v<T>) {
  688|  1.77M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.77M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.77M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.77M|            return detail::is_cp_space(cp);
 2238|  1.77M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   771k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   771k|        {
  662|   771k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   117k|{
 5835|   117k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.10k, False: 116k]
  |  |  ------------------
  ------------------
 5836|  1.10k|        return unexpected(e);
 5837|  1.10k|    }
 5838|       |
 5839|   116k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 116k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   116k|    return skip_classic_whitespace(range);
 5844|   116k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  58.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  58.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  58.6k|            auto rd = make_reader<T, char_type>();
 5916|  58.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  58.6k|    {
 5903|  58.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 981, False: 57.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    981|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    981|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    981|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    981|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    981|    }                                                  \
  |  |  |  | 3938|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.6k|                        .transform_error(make_eof_scan_error));
 5905|  57.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  57.6k|    {
 5303|  57.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  57.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  57.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  57.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  58.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  58.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  58.6k|            auto rd = make_reader<T, char_type>();
 5916|  58.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  58.6k|    {
 5903|  58.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 981, False: 57.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    981|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    981|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    981|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    981|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    981|    }                                                  \
  |  |  |  | 3938|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.6k|                        .transform_error(make_eof_scan_error));
 5905|  57.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  57.6k|    {
 5303|  57.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  57.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  57.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  57.6k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  75.3k|{
 5835|  75.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 699, False: 74.6k]
  |  |  ------------------
  ------------------
 5836|    699|        return unexpected(e);
 5837|    699|    }
 5838|       |
 5839|  74.6k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 74.6k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  74.6k|    return skip_classic_whitespace(range);
 5844|  74.6k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  75.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  75.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  75.3k|            auto rd = make_reader<T, char_type>();
 5920|  75.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 75.3k, False: 0]
  ------------------
 5921|  75.3k|                return impl(rd, range, value);
 5922|  75.3k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  75.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  75.3k|    {
 5903|  75.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  75.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  75.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  75.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.23k, False: 74.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|    }                                                  \
  |  |  |  | 3938|  75.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  74.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  74.1k|                        .transform_error(make_eof_scan_error));
 5905|  74.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  75.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  74.1k|    {
 5303|  74.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  74.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  74.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  74.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  93.8k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  93.8k|    static_cast<    \
  |  | 1056|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  93.8k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  93.8k|          m_current(m_range.begin())
 2988|  93.8k|    {
 2989|  93.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   162k|    {
 2998|   162k|        return m_range.end();
 2999|   162k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  75.9k|    {
 3013|  75.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  75.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  75.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  75.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  75.9k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 75.9k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  75.9k|        }
 3019|  75.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  75.9k|    static_cast<    \
  |  | 1056|  75.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  75.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  86.6k|    {
 3003|  86.6k|        return ranges::subrange{begin(), end()};
 3004|  86.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  83.1k|    {
 6075|  83.1k|        const bool need_skipped_width =
 6076|  83.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 83.1k]
  |  Branch (6076:33): [True: 0, False: 83.1k]
  ------------------
 6077|  83.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  83.1k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 83.1k]
  ------------------
 6081|  83.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 83.1k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  83.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 83.1k, False: 0]
  |  Branch (6085:56): [True: 78.1k, False: 4.93k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  78.1k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 78.1k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   155k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|  78.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  78.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  78.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.30k, False: 76.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.30k|    }                                                  \
  |  |  |  | 3938|  78.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   155k|                            make_eof_scan_error));
 6096|       |
 6097|   155k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 76.8k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  76.8k|            return result_type{it, 0};
 6105|   155k|        }
 6106|       |
 6107|  4.93k|        return result_type{rng.begin(), 0};
 6108|  83.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  75.1k|    {
 6117|  75.1k|        const bool need_skipped_width =
 6118|  75.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 75.1k]
  |  Branch (6118:33): [True: 0, False: 75.1k]
  ------------------
 6119|  75.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  75.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 75.1k]
  ------------------
 6122|  75.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 75.1k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  75.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 75.1k, False: 0]
  ------------------
 6131|  75.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.28k, False: 73.8k]
  ------------------
 6132|  75.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.28k]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|  1.28k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 1.28k]
  ------------------
 6134|  1.28k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  75.1k|        return result_type{rng.begin(), 0};
 6156|  75.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  43.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  43.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  43.3k|            auto rd = make_reader<T, char_type>();
 6232|  43.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.78k, False: 41.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.78k|    }
  ------------------
 6233|  41.5k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  43.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  41.5k|    {
 6162|  41.5k|        const bool need_skipped_width =
 6163|  41.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 41.5k]
  |  Branch (6163:33): [True: 0, False: 41.5k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  41.5k|        auto it = rng.begin();
 6167|  41.5k|        std::ptrdiff_t prefix_width = 0;
 6168|  41.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 41.5k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  41.5k|        else {
 6176|  41.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 654, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    654|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    654|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    654|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    654|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    654|    }                                                  \
  |  |  |  | 3938|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  40.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  40.9k|        }
 6179|  40.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  40.9k|        std::ptrdiff_t value_width = 0;
 6183|  40.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 40.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  40.9k|        else {
 6199|  40.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  40.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  40.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.92k, False: 37.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.92k|    }                                                  \
  |  | 3938|  40.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  37.9k|                                             specs, value, loc));
 6201|       |
 6202|  37.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 37.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  37.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  37.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  37.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.5k, False: 406]
  ------------------
 6212|  37.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  37.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  37.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  37.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  37.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.5k|                                 value_width));
 6216|  37.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.5k|        }
 6218|       |
 6219|  37.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  37.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  37.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  37.9k|        return it;
 6222|  37.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  43.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  43.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  43.3k|            auto rd = make_reader<T, char_type>();
 6232|  43.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.78k, False: 41.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.78k|    }
  ------------------
 6233|  41.5k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  43.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  41.5k|    {
 6162|  41.5k|        const bool need_skipped_width =
 6163|  41.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 41.5k]
  |  Branch (6163:33): [True: 0, False: 41.5k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  41.5k|        auto it = rng.begin();
 6167|  41.5k|        std::ptrdiff_t prefix_width = 0;
 6168|  41.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 41.5k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  41.5k|        else {
 6176|  41.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 654, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    654|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    654|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    654|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    654|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    654|    }                                                  \
  |  |  |  | 3938|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  40.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  40.9k|        }
 6179|  40.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  40.9k|        std::ptrdiff_t value_width = 0;
 6183|  40.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 40.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  40.9k|        else {
 6199|  40.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  40.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  40.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.92k, False: 37.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.92k|    }                                                  \
  |  | 3938|  40.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  37.9k|                                             specs, value, loc));
 6201|       |
 6202|  37.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 37.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  37.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  37.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  37.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.5k, False: 406]
  ------------------
 6212|  37.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  37.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  37.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  37.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  37.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.5k|                                 value_width));
 6216|  37.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.5k|        }
 6218|       |
 6219|  37.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  37.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  37.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  37.9k|        return it;
 6222|  37.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   926k|{
 5835|   926k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.16k, False: 924k]
  |  |  ------------------
  ------------------
 5836|  2.16k|        return unexpected(e);
 5837|  2.16k|    }
 5838|       |
 5839|   924k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 924k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   924k|    return skip_classic_whitespace(range);
 5844|   924k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   463k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   463k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   463k|            auto rd = make_reader<T, char_type>();
 5916|   463k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   463k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   463k|    {
 5903|   463k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.33k, False: 462k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.33k|    }                                                  \
  |  |  |  | 3938|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   462k|                        .transform_error(make_eof_scan_error));
 5905|   462k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   463k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   462k|    {
 5303|   462k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   462k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   462k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   462k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   463k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   463k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   463k|            auto rd = make_reader<T, char_type>();
 5916|   463k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   463k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   463k|    {
 5903|   463k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.33k, False: 462k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.33k|    }                                                  \
  |  |  |  | 3938|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   462k|                        .transform_error(make_eof_scan_error));
 5905|   462k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   463k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   462k|    {
 5303|   462k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   462k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   462k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   462k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   646k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   646k|    static_cast<    \
  |  | 1056|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   646k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   646k|          m_current(m_range.begin())
 2988|   646k|    {
 2989|   646k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  1.24M|    {
 2998|  1.24M|        return m_range.end();
 2999|  1.24M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   610k|    {
 3013|   610k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   610k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   610k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 610k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   610k|        }
 3019|   610k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   610k|    static_cast<    \
  |  | 1056|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   610k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   632k|    {
 3003|   632k|        return ranges::subrange{begin(), end()};
 3004|   632k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   625k|    {
 6075|   625k|        const bool need_skipped_width =
 6076|   625k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 625k]
  |  Branch (6076:33): [True: 0, False: 625k]
  ------------------
 6077|   625k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   625k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 625k]
  ------------------
 6081|   625k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 625k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   625k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 625k, False: 0]
  |  Branch (6085:56): [True: 617k, False: 7.38k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   617k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 617k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.23M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   617k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.78k, False: 616k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.78k|    }                                                  \
  |  |  |  | 3938|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.23M|                            make_eof_scan_error));
 6096|       |
 6097|  1.23M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 616k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   616k|            return result_type{it, 0};
 6105|  1.23M|        }
 6106|       |
 6107|  7.38k|        return result_type{rng.begin(), 0};
 6108|   625k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   609k|    {
 6117|   609k|        const bool need_skipped_width =
 6118|   609k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 609k]
  |  Branch (6118:33): [True: 0, False: 609k]
  ------------------
 6119|   609k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   609k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 609k]
  ------------------
 6122|   609k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 609k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   609k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 609k, False: 0]
  ------------------
 6131|   609k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 192, False: 609k]
  ------------------
 6132|   609k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 192]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    192|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 192]
  ------------------
 6134|    192|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   609k|        return result_type{rng.begin(), 0};
 6156|   609k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   316k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   316k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   316k|            auto rd = make_reader<T, char_type>();
 6232|   316k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   316k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.57k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.57k|    }
  ------------------
 6233|   312k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   316k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|   312k|    {
 6162|   312k|        const bool need_skipped_width =
 6163|   312k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 312k]
  |  Branch (6163:33): [True: 0, False: 312k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   312k|        auto it = rng.begin();
 6167|   312k|        std::ptrdiff_t prefix_width = 0;
 6168|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 312k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   312k|        else {
 6176|   312k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 890, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    890|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    890|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    890|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    890|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    890|    }                                                  \
  |  |  |  | 3938|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   311k|            std::tie(it, prefix_width) = prefix_result;
 6178|   311k|        }
 6179|   311k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   311k|        std::ptrdiff_t value_width = 0;
 6183|   311k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 311k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   311k|        else {
 6199|   311k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.26k, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|    }                                                  \
  |  | 3938|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   305k|                                             specs, value, loc));
 6201|       |
 6202|   305k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 305k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   305k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   305k|        std::ptrdiff_t postfix_width = 0;
 6211|   305k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 304k, False: 740]
  ------------------
 6212|   304k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   304k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   304k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   304k|                                 value_width));
 6216|   304k|            std::tie(it, postfix_width) = postfix_result;
 6217|   304k|        }
 6218|       |
 6219|   305k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   305k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   305k|            specs, prefix_width, value_width, postfix_width));
 6221|   305k|        return it;
 6222|   305k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   316k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   316k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   316k|            auto rd = make_reader<T, char_type>();
 6232|   316k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   316k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.57k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.57k|    }
  ------------------
 6233|   312k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   316k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|   312k|    {
 6162|   312k|        const bool need_skipped_width =
 6163|   312k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 312k]
  |  Branch (6163:33): [True: 0, False: 312k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   312k|        auto it = rng.begin();
 6167|   312k|        std::ptrdiff_t prefix_width = 0;
 6168|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 312k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   312k|        else {
 6176|   312k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 890, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    890|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    890|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    890|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    890|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    890|    }                                                  \
  |  |  |  | 3938|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   311k|            std::tie(it, prefix_width) = prefix_result;
 6178|   311k|        }
 6179|   311k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   311k|        std::ptrdiff_t value_width = 0;
 6183|   311k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 311k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   311k|        else {
 6199|   311k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.26k, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|    }                                                  \
  |  | 3938|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   305k|                                             specs, value, loc));
 6201|       |
 6202|   305k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 305k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   305k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   305k|        std::ptrdiff_t postfix_width = 0;
 6211|   305k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 304k, False: 740]
  ------------------
 6212|   304k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   304k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   304k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   304k|                                 value_width));
 6216|   304k|            std::tie(it, postfix_width) = postfix_result;
 6217|   304k|        }
 6218|       |
 6219|   305k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   305k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   305k|            specs, prefix_width, value_width, postfix_width));
 6221|   305k|        return it;
 6222|   305k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   463k|{
 5835|   463k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.08k, False: 462k]
  |  |  ------------------
  ------------------
 5836|  1.08k|        return unexpected(e);
 5837|  1.08k|    }
 5838|       |
 5839|   462k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 462k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   462k|    return skip_classic_whitespace(range);
 5844|   462k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   463k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   463k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   463k|            auto rd = make_reader<T, char_type>();
 5920|   463k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 463k, False: 0]
  ------------------
 5921|   463k|                return impl(rd, range, value);
 5922|   463k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   463k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   463k|    {
 5903|   463k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.33k, False: 462k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.33k|    }                                                  \
  |  |  |  | 3938|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   462k|                        .transform_error(make_eof_scan_error));
 5905|   462k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   463k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   462k|    {
 5303|   462k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   462k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   462k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   462k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    894|{
   53|    894|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    894|    string_buffer.resize(size);
   57|    894|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    894|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    894|    const auto wsv_reinterpret_size =
   62|    894|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 148, False: 746]
  ------------------
   63|    894|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    894|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    894|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    894|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    894|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    894|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    894|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    894|{
  123|    894|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    894|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    894|    buf.resize(sizeof...(Args));
  126|    894|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    894|    return buf;
  128|    894|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    894|{
  109|    894|    if constexpr (std::is_same_v<CharT, char>) {
  110|    894|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    894|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    894|{
  186|    894|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    894|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    894|                                   format_strings);
  189|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  43.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.0k|            auto result = scn::scan<T>(
  140|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.0k|                scn::runtime_format(f));
  142|  43.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 37.6k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  37.6k|            it = result->begin();
  146|  37.6k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  43.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.0k|            auto result = scn::scan<T>(
  155|  43.0k|                global_locale,
  156|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.0k|                scn::runtime_format(f));
  158|  43.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 37.6k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  37.6k|            it = result->begin();
  162|  37.6k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 18.6k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  18.6k|            it = result->begin();
  176|  18.6k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  43.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.0k|            auto result = scn::scan<T>(
  140|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.0k|                scn::runtime_format(f));
  142|  43.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 37.6k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  37.6k|            it = result->begin();
  146|  37.6k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  43.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.0k|            auto result = scn::scan<T>(
  155|  43.0k|                global_locale,
  156|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.0k|                scn::runtime_format(f));
  158|  43.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 37.6k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  37.6k|            it = result->begin();
  162|  37.6k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 18.6k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  18.6k|            it = result->begin();
  176|  18.6k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  54.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  54.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  54.2k|            auto result = scn::scan<T>(
  140|  54.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  54.2k|                scn::runtime_format(f));
  142|  54.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 48.9k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  48.9k|            it = result->begin();
  146|  48.9k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  54.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  54.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  54.2k|            auto result = scn::scan<T>(
  155|  54.2k|                global_locale,
  156|  54.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  54.2k|                scn::runtime_format(f));
  158|  54.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 48.9k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  48.9k|            it = result->begin();
  162|  48.9k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  25.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  25.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  25.1k|            auto result = scn::scan_value<T>(
  171|  25.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  25.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 24.2k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  24.2k|            it = result->begin();
  176|  24.2k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    894|{
   91|    894|    using char_type = ranges::range_value_t<Source>;
   92|    894|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    894|    deque.clear();
   94|    894|    std::copy(ranges::begin(source), ranges::end(source),
   95|    894|              std::back_inserter(deque));
   96|    894|    return deque;
   97|    894|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    894|{
   80|    894|    if constexpr (std::is_same_v<CharT, char>) {
   81|    894|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    894|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    894|{
  123|    894|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    894|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    894|    buf.resize(sizeof...(Args));
  126|    894|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    894|    return buf;
  128|    894|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    894|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    894|    else {
  113|    894|        return wformat_string_view_buffer;
  114|    894|    }
  115|    894|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.78k|{
  186|  1.78k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.78k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.78k|                                   format_strings);
  189|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   316k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   316k|            auto result = scn::scan<T>(
  140|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   316k|                scn::runtime_format(f));
  142|   316k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 305k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   305k|            it = result->begin();
  146|   305k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   316k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   316k|            auto result = scn::scan<T>(
  155|   316k|                global_locale,
  156|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   316k|                scn::runtime_format(f));
  158|   316k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 305k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   305k|            it = result->begin();
  162|   305k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   154k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   154k|            auto result = scn::scan_value<T>(
  171|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   154k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 152k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   152k|            it = result->begin();
  176|   152k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   316k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   316k|            auto result = scn::scan<T>(
  140|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   316k|                scn::runtime_format(f));
  142|   316k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 305k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   305k|            it = result->begin();
  146|   305k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   316k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   316k|            auto result = scn::scan<T>(
  155|   316k|                global_locale,
  156|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   316k|                scn::runtime_format(f));
  158|   316k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 305k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   305k|            it = result->begin();
  162|   305k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   154k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   154k|            auto result = scn::scan_value<T>(
  171|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   154k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 152k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   152k|            it = result->begin();
  176|   152k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   316k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   316k|            auto result = scn::scan<T>(
  140|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   316k|                scn::runtime_format(f));
  142|   316k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 305k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   305k|            it = result->begin();
  146|   305k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   316k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   316k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   316k|            auto result = scn::scan<T>(
  155|   316k|                global_locale,
  156|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   316k|                scn::runtime_format(f));
  158|   316k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 305k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   305k|            it = result->begin();
  162|   305k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   154k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   154k|            auto result = scn::scan_value<T>(
  171|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   154k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 152k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   152k|            it = result->begin();
  176|   152k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.78k|{
   91|  1.78k|    using char_type = ranges::range_value_t<Source>;
   92|  1.78k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.78k|    deque.clear();
   94|  1.78k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.78k|              std::back_inserter(deque));
   96|  1.78k|    return deque;
   97|  1.78k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.78k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.78k|    else {
   84|  1.78k|        return wnoncontiguous_buffer;
   85|  1.78k|    }
   86|  1.78k|}

LLVMFuzzerTestOneInput:
   57|    895|{
   58|    895|    scn::fuzz::run(data, size);
   59|    895|    return 0;
   60|    895|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    895|{
   36|    895|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 894]
  |  Branch (36:35): [True: 0, False: 894]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    894|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    894|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    894|                                             "{:64U}", "{:[A-Za-z]}");
   44|    894|    do_basic_run(sv, f);
   45|       |
   46|    894|    const auto& wf = get_format_strings<wchar_t>(
   47|    894|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    894|    do_basic_run(wsv_reinterpret, wf);
   49|    894|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 894, False: 0]
  ------------------
   50|    894|        do_basic_run(wsv_transcode, wf);
   51|    894|    }
   52|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    894|{
   25|    894|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    894|                                                           format_strings);
   27|    894|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    894|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    894|            source, format_strings);
   30|    894|    }
   31|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    894|{
   25|    894|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    894|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.78k|{
   25|  1.78k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.78k|                                                           format_strings);
   27|  1.78k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.78k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.78k|            source, format_strings);
   30|  1.78k|    }
   31|  1.78k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.78k|{
   25|  1.78k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.78k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.78k|}

