_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  4.76M|{
 4068|  4.76M|    if constexpr (sizeof(U) == 1) {
 4069|  4.76M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  4.76M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  4.76M|{
 4032|  4.76M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  4.76M|    SCN_GCC_COMPAT_PUSH
 4035|  4.76M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  4.76M|    constexpr char lengths[] =
 4037|  4.76M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  4.76M|        "\1\1\1\1\1\1\1\1"
 4039|  4.76M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  4.76M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  4.76M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  4.76M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  4.76M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  4.76M|    SCN_GCC_COMPAT_POP
 4046|  4.76M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.58M|{
 4274|  4.58M|    if constexpr (sizeof(CharT) == 1) {
 4275|  4.58M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  4.58M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  4.58M|{
 4087|  4.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  4.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  4.58M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  4.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  4.58M|    };
 4092|       |
 4093|  4.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 4.15M, False: 438k]
  ------------------
 4094|  4.15M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 287, False: 4.14M]
  ------------------
 4095|    287|            SCN_UNLIKELY_ATTR
 4096|    287|            return invalid_code_point;
 4097|    287|        }
 4098|  4.14M|        return static_cast<char32_t>(input[0]);
 4099|  4.15M|    }
 4100|       |
 4101|   438k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 143k, False: 295k]
  ------------------
 4102|   143k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 206, False: 142k]
  ------------------
 4103|    206|            SCN_UNLIKELY_ATTR
 4104|    206|            return invalid_code_point;
 4105|    206|        }
 4106|   142k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 12.6k, False: 130k]
  ------------------
 4107|  12.6k|            SCN_UNLIKELY_ATTR
 4108|  12.6k|            return invalid_code_point;
 4109|  12.6k|        }
 4110|       |
 4111|   130k|        char32_t cp{};
 4112|   130k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   130k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   130k|        return cp;
 4115|   142k|    }
 4116|       |
 4117|   295k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 281k, False: 13.5k]
  ------------------
 4118|   281k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 35, False: 281k]
  ------------------
 4119|     35|            SCN_UNLIKELY_ATTR
 4120|     35|            return invalid_code_point;
 4121|     35|        }
 4122|   281k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.80k, False: 278k]
  ------------------
 4123|   281k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 1.11k, False: 277k]
  ------------------
 4124|  3.92k|            SCN_UNLIKELY_ATTR
 4125|  3.92k|            return invalid_code_point;
 4126|  3.92k|        }
 4127|       |
 4128|   277k|        char32_t cp{};
 4129|   277k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   277k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   277k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   277k|        return cp;
 4133|   281k|    }
 4134|       |
 4135|  13.5k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 13.5k, False: 0]
  ------------------
 4136|  13.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 13.5k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  13.5k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 4.71k, False: 8.80k]
  ------------------
 4141|  4.71k|            SCN_UNLIKELY_ATTR
 4142|  4.71k|            return invalid_code_point;
 4143|  4.71k|        }
 4144|  8.80k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.82k, False: 5.97k]
  ------------------
 4145|  8.80k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 150, False: 5.82k]
  ------------------
 4146|  8.80k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 118, False: 5.71k]
  ------------------
 4147|  3.09k|            SCN_UNLIKELY_ATTR
 4148|  3.09k|            return invalid_code_point;
 4149|  3.09k|        }
 4150|       |
 4151|  5.71k|        char32_t cp{};
 4152|  5.71k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  5.71k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  5.71k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  5.71k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  5.71k|        return cp;
 4157|  8.80k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   723k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   723k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   723k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.02M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.02M|    else {
 3966|  4.02M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.02M|                                       to_address(first), to_address(last)))};
 3968|  4.02M|    }
 3969|  4.02M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  12.4M|{
  316|  12.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  12.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  13.9M|{
  294|  13.9M|    return p;
  295|  13.9M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  2.01M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  2.01M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  2.01M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  2.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  2.01M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  2.01M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  27.1k|    {
 2869|  27.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  27.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  27.1k|    {
 2850|  27.1k|        return decay_copy(t.begin());
 2851|  27.1k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  2.39M|{
 2094|  2.39M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.39M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   507k|    {
 2926|   507k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   507k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   507k|    {
 2908|   507k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   507k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  51.5k|{
 9705|  51.5k|    auto result = make_scan_result<Source, Args...>();
 9706|  51.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  51.5k|                                   make_scan_args(result->values())));
 9708|  51.5k|    return result;
 9709|  51.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9660|   126k|{
 9661|   126k|    return scan_result_type<Source, Args...>();
 9662|   126k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   126k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   126k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   126k|    {
  613|   126k|        construct();
  614|   126k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   126k|    {
  694|   126k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   126k|        m_has_value = true;
  696|   126k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   126k|{
  396|   126k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   126k|        T(std::forward<Args>(args)...);
  398|   126k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|   126k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   253k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   253k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6384|   281k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   607k|    {
  718|   607k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   607k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   607k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   126k|{
 9646|   126k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 113k]
  |  |  ------------------
  ------------------
 9647|  13.0k|        out = unexpected(in.error());
 9648|  13.0k|    }
 9649|   113k|    else {
 9650|   113k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   113k|    static_cast<    \
  |  |  935|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   113k|    }
 9652|   126k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   253k|    {
 1740|   253k|        return has_value();
 1741|   253k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   506k|    {
  490|   506k|        return m_has_value;
  491|   506k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  26.1k|    {
 1746|  26.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  26.1k|        return this->get_unexpected().error();
 1748|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.1k|    {
  473|  26.1k|        return m_unexpected;
  474|  26.1k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.12M|    {
  365|  1.12M|        return m_unexpected;
  366|  1.12M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   492k|        : m_unexpected(std::forward<Err>(e))
  350|   492k|    {
  351|   492k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   492k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   492k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  13.0k|        : m_has_value(false)
  637|  13.0k|    {
  638|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  78.3k|{
  396|  78.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  78.3k|        T(std::forward<Args>(args)...);
  398|  78.3k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   646k|        : m_unexpected(std::forward<Args>(args)...)
  359|   646k|    {
  360|   646k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   646k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   646k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  65.3k|    {
  730|  65.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  65.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  65.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  65.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   646k|    {
  687|   646k|        return m_has_value;
  688|   646k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   353k|    {
  653|   353k|        return *value_ptr();
  654|   353k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   126k|    {
  708|   126k|        scn::detail::destroy_at(value_ptr());
  709|   126k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   126k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   126k|    else {
  408|   126k|        p->~T();
  409|   126k|    }
  410|   126k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|   126k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   117k|{
  396|   117k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   117k|        T(std::forward<Args>(args)...);
  398|   117k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.0k|    {
  678|  13.0k|        return std::move(*unexpected_ptr());
  679|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  26.1k|    {
  712|  26.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  26.1k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   156k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   156k|    else {
  408|   156k|        p->~T();
  409|   156k|    }
  410|   156k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   227k|    {
 6485|   227k|        m_range = std::forward<Other>(r);
 6486|   227k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   227k|    {
 1795|   227k|        return value();
 1796|   227k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   227k|    {
 1769|   227k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   227k|        return this->get_value();
 1771|   227k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   227k|    {
  456|   227k|        return m_value;
  457|   227k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|   103k|{
 9485|   103k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   103k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   103k|{
 9422|   103k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   103k|    auto result = vscan_impl(buffer, format, args);
 9425|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 91.0k]
  |  |  ------------------
  ------------------
 9426|  12.0k|        return unexpected(result.error());
 9427|  12.0k|    }
 9428|  91.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   103k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   253k|{
 5381|   253k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   253k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   253k|                  "\n"
 5385|   253k|                  "Unsupported range type given as input to a scanning "
 5386|   253k|                  "function.\n"
 5387|   253k|                  "A range needs to have a character type (value type) "
 5388|   253k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   253k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   253k|                  "to be included.\n"
 5391|   253k|                  "See the scnlib documentation for more details.");
 5392|   253k|    static_assert(
 5393|   253k|        !std::is_same_v<T, custom_char_traits>,
 5394|   253k|        "\n"
 5395|   253k|        "Unsupported range type given as input to a scanning "
 5396|   253k|        "function.\n"
 5397|   253k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   253k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   253k|        "not supported.");
 5400|   253k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   253k|                  "\n"
 5402|   253k|                  "Unsupported range type given as input to a scanning "
 5403|   253k|                  "function.\n"
 5404|   253k|                  "file_marker_found cannot be used as an "
 5405|   253k|                  "source range type to scn::scan.\n"
 5406|   253k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   253k|                  "and do not provide an explicit source range, "
 5408|   253k|                  "or use scn::scan with a FILE* directly.");
 5409|   253k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   253k|                  "\n"
 5411|   253k|                  "Unsupported range type given as input to a scanning "
 5412|   253k|                  "function.\n"
 5413|   253k|                  "In order to be scannable, a range needs to satisfy "
 5414|   253k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   253k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   253k|                  "\n"
 5417|   253k|                  "Unsupported range type given as input to a scanning "
 5418|   253k|                  "function.\n"
 5419|   253k|                  "A range needs to model forward_range and have a valid "
 5420|   253k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   253k|                  "Examples of scannable ranges are std::string, "
 5422|   253k|                  "std::string_view, "
 5423|   253k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   253k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   253k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   253k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   253k|{
 5320|   253k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   253k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   253k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   253k|    {
 3000|   253k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   253k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   253k|    {
 2981|   253k|        return t.data();
 2982|   253k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   253k|    {
 3383|   253k|        return detail::to_address(ranges::begin(derived()));
 3384|   253k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.46M|{
  316|  1.46M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.46M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   480k|    {
 2869|   480k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   480k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   480k|    {
 2850|   480k|        return decay_copy(t.begin());
 2851|   480k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  3.02M|    {
 3480|  3.02M|        return m_iterator;
 3481|  3.02M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   253k|    {
 3339|   253k|        return static_cast<const D&>(*this);
 3340|   253k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   253k|    {
 3075|   253k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   253k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   253k|    {
 3041|   253k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   253k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.80M|{
 2094|  2.80M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.80M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.06M|    {
 3496|  1.06M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.06M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  4.02M|    {
 1740|  4.02M|        return has_value();
 1741|  4.02M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  8.00M|    {
  490|  8.00M|        return m_has_value;
  491|  8.00M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   117k|    {
 1746|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   117k|        return this->get_unexpected().error();
 1748|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   117k|    {
  473|   117k|        return m_unexpected;
  474|   117k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  26.1k|        : base(unexpect, std::move(e.error())),
 1616|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.1k|    {
 1618|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  26.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.1k|          m_has_value(false)
  451|  26.1k|    {
  452|  26.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   253k|    {
 1316|   253k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   227k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   227k|                      ranges::iterator_t<SourceRange>>) {
 6717|   227k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   227k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.15M|    {
 2869|  1.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.15M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.15M|    {
 2850|  1.15M|        return decay_copy(t.begin());
 2851|  1.15M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   227k|{
 6702|   227k|    return ranges::end(source);
 6703|   227k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   227k|    {
 2926|   227k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   227k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   227k|    {
 2908|   227k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   227k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.45M|    {
 3484|  1.45M|        return m_sentinel;
 3485|  1.45M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  3.86M|    {
 1795|  3.86M|        return value();
 1796|  3.86M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  3.86M|    {
 1769|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.86M|        return this->get_value();
 1771|  3.86M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.86M|    {
  456|  3.86M|        return m_value;
  457|  3.86M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   227k|        : base(std::in_place, std::forward<U>(val)),
 1570|   227k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   227k|    {
 1572|   227k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   227k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   227k|    {
  442|   227k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8782|   103k|    {
 8783|   103k|        return m_str;
 8784|   103k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   228k|{
 6115|   228k|    detail::check_scan_arg_types<Args...>();
 6116|   228k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   228k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5829|   281k|{
 5830|   281k|    constexpr bool default_constructible_constraint =
 5831|   281k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   281k|    static_assert(default_constructible_constraint,
 5833|   281k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   281k|    constexpr bool destructible_constraint =
 5836|   281k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   281k|    static_assert(destructible_constraint,
 5838|   281k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   281k|    constexpr bool non_reference_constraint =
 5841|   281k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   281k|    static_assert(non_reference_constraint,
 5843|   281k|                  "Scan argument types must not be references");
 5844|       |
 5845|   281k|    constexpr bool movable_constraint =
 5846|   281k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   281k|    static_assert(movable_constraint,
 5848|   281k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   281k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   281k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   281k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|   228k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   228k|    {
 6092|   228k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   228k|    {
 6100|   228k|        return {detail::make_arg<
 6101|   228k|            kind, Context,
 6102|   228k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   228k|                                 typename Context::char_type>::value>(args)...};
 6104|   228k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|   228k|{
 5880|   228k|    return make_value<Context>(value).ref_value;
 5881|   228k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|   281k|{
 5815|   281k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   281k|                                  needs_context_tag>) {
 5819|   281k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   281k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|   281k|    {                                                                        \
 5654|   281k|        return val;                                                          \
 5655|   281k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5783|   281k|{
 5784|   281k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   281k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   281k|    constexpr bool scannable_char =
 5788|   281k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   281k|    static_assert(scannable_char,
 5790|   281k|                  "Cannot scan an argument of an unsupported character "
 5791|   281k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   281k|    constexpr bool scannable_const =
 5794|   281k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   281k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   281k|    constexpr bool scannable_disabled =
 5798|   281k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   281k|    static_assert(scannable_disabled,
 5800|   281k|                  "Cannot scan an argument that has been disabled by "
 5801|   281k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   281k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   281k|    static_assert(
 5805|   281k|        scannable,
 5806|   281k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   281k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   281k|    return arg_value{arg};
 5810|   281k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5596|   281k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   281k|    {
 5598|   281k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6393|   228k|    {
 6394|   228k|        return m_values;
 6395|   228k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   228k|        : basic_scan_args(store.desc, store.args.data())
 6141|   228k|    {
 6142|   228k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|   331k|        : m_desc(desc), m_builtin_values(data)
 6193|   331k|    {
 6194|   331k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.74M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.74M|    static_cast<    \
  |  |  935|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.74M|    static_cast<    \
  |  |  935|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.74M|    {
 3466|  1.74M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   331k|{
 8444|   331k|    return s;
 8445|   331k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   331k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   103k|        : m_str(r.str)
 8778|   103k|    {
 8779|   103k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   126k|    {
 1740|   126k|        return has_value();
 1741|   126k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   353k|    {
 1815|   353k|        return &value();
 1816|   353k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   353k|    {
 1769|   353k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   353k|        return this->get_value();
 1771|   353k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   227k|    {
 6474|   227k|        return ranges::begin(m_range);
 6475|   227k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   139k|    {
  643|   139k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 113k, False: 26.1k]
  ------------------
  644|   113k|            destroy_value();
  645|   113k|        }
  646|  26.1k|        else {
  647|  26.1k|            destroy_unexpected();
  648|  26.1k|        }
  649|   139k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  51.5k|{
 9774|  51.5k|    auto result = make_scan_result<Source, Args...>();
 9775|  51.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  51.5k|                                   make_scan_args(result->values())));
 9777|  51.5k|    return result;
 9778|  51.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|   103k|{
 9503|   103k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   103k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   103k|{
 9438|   103k|#if !SCN_DISABLE_LOCALE
 9439|   103k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   103k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   103k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   103k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 91.0k]
  |  |  ------------------
  ------------------
 9446|  12.0k|        return unexpected(result.error());
 9447|  12.0k|    }
 9448|  91.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   103k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|  23.5k|{
 9815|  23.5k|    auto result = make_scan_result<Source, T>();
 9816|  23.5k|    fill_scan_result(
 9817|  23.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  23.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  23.5k|    return result;
 9820|  23.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  47.1k|{
 9516|  47.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  47.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  47.1k|{
 9462|  47.1k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  47.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  47.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 45.1k]
  |  |  ------------------
  ------------------
 9466|  2.01k|        return unexpected(result.error());
 9467|  2.01k|    }
 9468|  45.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  47.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  52.5k|{
 5865|  52.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  52.5k|    basic_scan_arg<Context> arg;
 5868|  52.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  52.5k|    arg.m_value = make_value<Context>(value);
 5870|  52.5k|    return arg;
 5871|  52.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   407k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  3.00M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  52.5k|    {
 6416|  52.5k|        return std::get<0>(m_values);
 6417|  52.5k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9704|  51.5k|{
 9705|  51.5k|    auto result = make_scan_result<Source, Args...>();
 9706|  51.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  51.5k|                                   make_scan_args(result->values())));
 9708|  51.5k|    return result;
 9709|  51.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9660|   126k|{
 9661|   126k|    return scan_result_type<Source, Args...>();
 9662|   126k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   126k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   126k|        : m_value(T{}), m_has_value(true)
  427|   126k|    {
  428|   126k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6610|   126k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6384|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   126k|{
 9646|   126k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 113k]
  |  |  ------------------
  ------------------
 9647|  13.0k|        out = unexpected(in.error());
 9648|  13.0k|    }
 9649|   113k|    else {
 9650|   113k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   113k|    static_cast<    \
  |  |  935|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   113k|    }
 9652|   126k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.0k|          m_has_value(false)
  451|  13.0k|    {
  452|  13.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   506k|    {
  490|   506k|        return m_has_value;
  491|   506k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   353k|    {
  456|   353k|        return m_value;
  457|   353k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  13.0k|    {
  504|  13.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.0k|                                  std::forward<Args>(args)...);
  506|  13.0k|        m_has_value = false;
  507|  13.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.0k|    {
  473|  13.0k|        return m_unexpected;
  474|  13.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.0k|    {
  481|  13.0k|        return std::move(m_unexpected);
  482|  13.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8782|   103k|    {
 8783|   103k|        return m_str;
 8784|   103k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   103k|{
 6115|   103k|    detail::check_scan_arg_types<Args...>();
 6116|   103k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   103k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5829|   126k|{
 5830|   126k|    constexpr bool default_constructible_constraint =
 5831|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   126k|    static_assert(default_constructible_constraint,
 5833|   126k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   126k|    constexpr bool destructible_constraint =
 5836|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   126k|    static_assert(destructible_constraint,
 5838|   126k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   126k|    constexpr bool non_reference_constraint =
 5841|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   126k|    static_assert(non_reference_constraint,
 5843|   126k|                  "Scan argument types must not be references");
 5844|       |
 5845|   126k|    constexpr bool movable_constraint =
 5846|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   126k|    static_assert(movable_constraint,
 5848|   126k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|   103k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   103k|    {
 6092|   103k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   103k|    {
 6100|   103k|        return {detail::make_arg<
 6101|   103k|            kind, Context,
 6102|   103k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   103k|                                 typename Context::char_type>::value>(args)...};
 6104|   103k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5879|   103k|{
 5880|   103k|    return make_value<Context>(value).ref_value;
 5881|   103k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5814|   126k|{
 5815|   126k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   126k|                                  needs_context_tag>) {
 5819|   126k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   126k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5653|   126k|    {                                                                        \
 5654|   126k|        return val;                                                          \
 5655|   126k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5783|   126k|{
 5784|   126k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   126k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   126k|    constexpr bool scannable_char =
 5788|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   126k|    static_assert(scannable_char,
 5790|   126k|                  "Cannot scan an argument of an unsupported character "
 5791|   126k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   126k|    constexpr bool scannable_const =
 5794|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   126k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   126k|    constexpr bool scannable_disabled =
 5798|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   126k|    static_assert(scannable_disabled,
 5800|   126k|                  "Cannot scan an argument that has been disabled by "
 5801|   126k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   126k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   126k|    static_assert(
 5805|   126k|        scannable,
 5806|   126k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   126k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   126k|    return arg_value{arg};
 5810|   126k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5596|   126k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   126k|    {
 5598|   126k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6393|   103k|    {
 6394|   103k|        return m_values;
 6395|   103k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   103k|        : basic_scan_args(store.desc, store.args.data())
 6141|   103k|    {
 6142|   103k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   103k|        : m_str(r.str)
 8778|   103k|    {
 8779|   103k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   126k|    {
 1740|   126k|        return has_value();
 1741|   126k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   353k|    {
 1815|   353k|        return &value();
 1816|   353k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   353k|    {
 1769|   353k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   353k|        return this->get_value();
 1771|   353k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9773|  51.5k|{
 9774|  51.5k|    auto result = make_scan_result<Source, Args...>();
 9775|  51.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  51.5k|                                   make_scan_args(result->values())));
 9777|  51.5k|    return result;
 9778|  51.5k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9814|  23.5k|{
 9815|  23.5k|    auto result = make_scan_result<Source, T>();
 9816|  23.5k|    fill_scan_result(
 9817|  23.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  23.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  23.5k|    return result;
 9820|  23.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  23.5k|{
 5865|  23.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  23.5k|    basic_scan_arg<Context> arg;
 5868|  23.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  23.5k|    arg.m_value = make_value<Context>(value);
 5870|  23.5k|    return arg;
 5871|  23.5k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  23.5k|    {
 6416|  23.5k|        return std::get<0>(m_values);
 6417|  23.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  13.0k|    {
 2869|  13.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  13.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  13.0k|    {
 2850|  13.0k|        return decay_copy(t.begin());
 2851|  13.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  6.27M|{
 2094|  6.27M|    return SCN_FWD(t);
  ------------------
  |  |  936|  6.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  6.27M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   309k|    {
 2926|   309k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   309k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   309k|    {
 2908|   309k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   309k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9704|  62.7k|{
 9705|  62.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  62.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  62.7k|                                   make_scan_args(result->values())));
 9708|  62.7k|    return result;
 9709|  62.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9660|   154k|{
 9661|   154k|    return scan_result_type<Source, Args...>();
 9662|   154k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   154k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   154k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   154k|    {
  613|   154k|        construct();
  614|   154k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   154k|    {
  694|   154k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   154k|        m_has_value = true;
  696|   154k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   154k|{
  396|   154k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   154k|        T(std::forward<Args>(args)...);
  398|   154k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6610|   154k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|   154k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   154k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   746k|    {
  718|   746k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   746k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   746k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   154k|{
 9646|   154k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 141k]
  |  |  ------------------
  ------------------
 9647|  13.0k|        out = unexpected(in.error());
 9648|  13.0k|    }
 9649|   141k|    else {
 9650|   141k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   141k|    static_cast<    \
  |  |  935|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   141k|    }
 9652|   154k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   154k|    {
 1740|   154k|        return has_value();
 1741|   154k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   309k|    {
  490|   309k|        return m_has_value;
  491|   309k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  13.0k|    {
 1746|  13.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  13.0k|        return this->get_unexpected().error();
 1748|  13.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.0k|    {
  473|  13.0k|        return m_unexpected;
  474|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  13.0k|        : m_has_value(false)
  637|  13.0k|    {
  638|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  65.3k|    {
  730|  65.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  65.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  65.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  65.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   785k|    {
  687|   785k|        return m_has_value;
  688|   785k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   437k|    {
  653|   437k|        return *value_ptr();
  654|   437k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   154k|    {
  708|   154k|        scn::detail::destroy_at(value_ptr());
  709|   154k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   154k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   154k|    else {
  408|   154k|        p->~T();
  409|   154k|    }
  410|   154k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6617|   154k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.0k|    {
  678|  13.0k|        return std::move(*unexpected_ptr());
  679|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  26.1k|    {
  712|  26.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  26.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   141k|    {
 6485|   141k|        m_range = std::forward<Other>(r);
 6486|   141k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   141k|    {
 1795|   141k|        return value();
 1796|   141k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   141k|    {
 1769|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   141k|        return this->get_value();
 1771|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   141k|    {
  456|   141k|        return m_value;
  457|   141k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  62.7k|{
 9485|  62.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  62.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  62.7k|{
 9422|  62.7k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  62.7k|    auto result = vscan_impl(buffer, format, args);
 9425|  62.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.03k, False: 56.7k]
  |  |  ------------------
  ------------------
 9426|  6.03k|        return unexpected(result.error());
 9427|  6.03k|    }
 9428|  56.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  62.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   154k|{
 5381|   154k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   154k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   154k|                  "\n"
 5385|   154k|                  "Unsupported range type given as input to a scanning "
 5386|   154k|                  "function.\n"
 5387|   154k|                  "A range needs to have a character type (value type) "
 5388|   154k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   154k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   154k|                  "to be included.\n"
 5391|   154k|                  "See the scnlib documentation for more details.");
 5392|   154k|    static_assert(
 5393|   154k|        !std::is_same_v<T, custom_char_traits>,
 5394|   154k|        "\n"
 5395|   154k|        "Unsupported range type given as input to a scanning "
 5396|   154k|        "function.\n"
 5397|   154k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   154k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   154k|        "not supported.");
 5400|   154k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   154k|                  "\n"
 5402|   154k|                  "Unsupported range type given as input to a scanning "
 5403|   154k|                  "function.\n"
 5404|   154k|                  "file_marker_found cannot be used as an "
 5405|   154k|                  "source range type to scn::scan.\n"
 5406|   154k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   154k|                  "and do not provide an explicit source range, "
 5408|   154k|                  "or use scn::scan with a FILE* directly.");
 5409|   154k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   154k|                  "\n"
 5411|   154k|                  "Unsupported range type given as input to a scanning "
 5412|   154k|                  "function.\n"
 5413|   154k|                  "In order to be scannable, a range needs to satisfy "
 5414|   154k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   154k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   154k|                  "\n"
 5417|   154k|                  "Unsupported range type given as input to a scanning "
 5418|   154k|                  "function.\n"
 5419|   154k|                  "A range needs to model forward_range and have a valid "
 5420|   154k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   154k|                  "Examples of scannable ranges are std::string, "
 5422|   154k|                  "std::string_view, "
 5423|   154k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   154k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   154k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   154k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   154k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   154k|    else {
 5366|   154k|        return make_forward_scan_buffer(r);
 5367|   154k|    }
 5368|   154k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   154k|{
 5185|   154k|    return basic_scan_forward_buffer_impl(range);
 5186|   154k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   154k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   154k|          m_cursor(ranges::begin(*m_range))
 4766|   154k|    {
 4767|   154k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   154k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   154k|    {
 4738|   154k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   154k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   154k|    {
 4429|   154k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   154k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   296k|    {
 2869|   296k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   296k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   296k|    {
 2850|   296k|        return decay_copy(t.begin());
 2851|   296k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   437k|    {
 3480|   437k|        return m_iterator;
 3481|   437k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.80M|    {
 4771|  1.80M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 18.6k, False: 1.78M]
  ------------------
 4772|  18.6k|            return false;
 4773|  18.6k|        }
 4774|  1.78M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.78M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.78M|        }
 4777|  1.78M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.63M, False: 147k]
  ------------------
 4778|  1.63M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.63M|                                          this->m_current_view.begin(),
 4780|  1.63M|                                          this->m_current_view.end());
 4781|  1.63M|        }
 4782|  1.78M|        m_latest = *m_cursor;
 4783|  1.78M|        ++m_cursor;
 4784|  1.78M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.78M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.78M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.78M|        }
 4788|  1.78M|        return true;
 4789|  1.80M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  5.37M|    {
 2926|  5.37M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  5.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  5.37M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  5.37M|    {
 2908|  5.37M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  5.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  5.37M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  5.51M|    {
 3484|  5.51M|        return m_sentinel;
 3485|  5.51M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   154k|    {
 4346|   154k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   154k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   154k|        return true;
 4348|   154k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.0k|          m_has_value(false)
  451|  13.0k|    {
  452|  13.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   154k|    {
 1316|   154k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   141k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   141k|                      ranges::iterator_t<SourceRange>>) {
 6717|   141k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   141k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   141k|    {
 2869|   141k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   141k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   141k|    {
 2850|   141k|        return decay_copy(t.begin());
 2851|   141k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   141k|{
 6702|   141k|    return ranges::end(source);
 6703|   141k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   141k|    {
 2926|   141k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   141k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   141k|    {
 2908|   141k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   141k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   141k|        : base(std::in_place, std::forward<U>(val)),
 1570|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   141k|    {
 1572|   141k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   141k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   141k|    {
  442|   141k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8782|   125k|    {
 8783|   125k|        return m_str;
 8784|   125k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   296k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   296k|    static_cast<    \
  |  |  935|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   296k|    static_cast<    \
  |  |  935|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   296k|    {
 3466|   296k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   125k|        : m_str(r.str)
 8778|   125k|    {
 8779|   125k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   154k|    {
 1740|   154k|        return has_value();
 1741|   154k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   437k|    {
 1815|   437k|        return &value();
 1816|   437k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   437k|    {
 1769|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   437k|        return this->get_value();
 1771|   437k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   141k|    {
 6474|   141k|        return ranges::begin(m_range);
 6475|   141k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   167k|    {
  643|   167k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 141k, False: 26.1k]
  ------------------
  644|   141k|            destroy_value();
  645|   141k|        }
  646|  26.1k|        else {
  647|  26.1k|            destroy_unexpected();
  648|  26.1k|        }
  649|   167k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9773|  62.7k|{
 9774|  62.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  62.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  62.7k|                                   make_scan_args(result->values())));
 9777|  62.7k|    return result;
 9778|  62.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  62.7k|{
 9503|  62.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  62.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  62.7k|{
 9438|  62.7k|#if !SCN_DISABLE_LOCALE
 9439|  62.7k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  62.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  62.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  62.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  62.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.03k, False: 56.7k]
  |  |  ------------------
  ------------------
 9446|  6.03k|        return unexpected(result.error());
 9447|  6.03k|    }
 9448|  56.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  62.7k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9814|  28.9k|{
 9815|  28.9k|    auto result = make_scan_result<Source, T>();
 9816|  28.9k|    fill_scan_result(
 9817|  28.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  28.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  28.9k|    return result;
 9820|  28.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  28.9k|{
 9516|  28.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  28.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  28.9k|{
 9462|  28.9k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  28.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  28.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.00k, False: 27.9k]
  |  |  ------------------
  ------------------
 9466|  1.00k|        return unexpected(result.error());
 9467|  1.00k|    }
 9468|  27.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  28.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  54.2k|    {
 2869|  54.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  54.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  54.2k|    {
 2850|  54.2k|        return decay_copy(t.begin());
 2851|  54.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  13.3M|{
 2094|  13.3M|    return SCN_FWD(t);
  ------------------
  |  |  936|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  13.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.46M|    {
 2926|  3.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.46M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.46M|    {
 2908|  3.46M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.46M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9660|   864k|{
 9661|   864k|    return scan_result_type<Source, Args...>();
 9662|   864k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   864k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   864k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   864k|    {
  613|   864k|        construct();
  614|   864k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   864k|    {
  694|   864k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   864k|        m_has_value = true;
  696|   864k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   864k|{
  396|   864k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   864k|        T(std::forward<Args>(args)...);
  398|   864k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|   864k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  1.72M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.72M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6384|  1.72M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  4.27M|    {
  718|  4.27M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  4.27M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  4.27M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   864k|{
 9646|   864k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.1k, False: 838k]
  |  |  ------------------
  ------------------
 9647|  26.1k|        out = unexpected(in.error());
 9648|  26.1k|    }
 9649|   838k|    else {
 9650|   838k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   838k|    }
 9652|   864k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.72M|    {
 1740|  1.72M|        return has_value();
 1741|  1.72M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.45M|    {
  490|  3.45M|        return m_has_value;
  491|  3.45M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  52.2k|    {
 1746|  52.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  52.2k|        return this->get_unexpected().error();
 1748|  52.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  52.2k|    {
  473|  52.2k|        return m_unexpected;
  474|  52.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  26.1k|        : base(unexpect, std::move(e.error())),
 1616|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.1k|    {
 1618|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  26.1k|        : m_has_value(false)
  637|  26.1k|    {
  638|  26.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  26.1k|    {
  701|  26.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.1k|                                  std::forward<Args>(args)...);
  703|  26.1k|        m_has_value = false;
  704|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   130k|    {
  730|   130k|        return reinterpret_cast<unexpected<E>*>(
  731|   130k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   130k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.1k|    {
 1316|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  26.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  26.1k|    {
  903|  26.1k|        assign_common(std::move(other));
  904|  26.1k|        return *this;
  905|  26.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  26.1k|    {
  950|  26.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.1k, False: 0]
  ------------------
  951|  26.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  4.34M|    {
  687|  4.34M|        return m_has_value;
  688|  4.34M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.54M|    {
  653|  2.54M|        return *value_ptr();
  654|  2.54M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  26.1k|    {
 1046|  26.1k|        this->destroy_value();
 1047|  26.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   864k|    {
  708|   864k|        scn::detail::destroy_at(value_ptr());
  709|   864k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   864k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   864k|    else {
  408|   864k|        p->~T();
  409|   864k|    }
  410|   864k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|   864k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  26.1k|    {
  701|  26.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.1k|                                  std::forward<Args>(args)...);
  703|  26.1k|        m_has_value = false;
  704|  26.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  26.1k|    {
  678|  26.1k|        return std::move(*unexpected_ptr());
  679|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  52.2k|    {
  712|  52.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  52.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  1.67M|    {
 6485|  1.67M|        m_range = std::forward<Other>(r);
 6486|  1.67M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.67M|    {
 1795|  1.67M|        return value();
 1796|  1.67M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.67M|    {
 1769|  1.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.67M|        return this->get_value();
 1771|  1.67M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.67M|    {
  456|  1.67M|        return m_value;
  457|  1.67M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   694k|{
 9422|   694k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   694k|    auto result = vscan_impl(buffer, format, args);
 9425|   694k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.1k, False: 670k]
  |  |  ------------------
  ------------------
 9426|  24.1k|        return unexpected(result.error());
 9427|  24.1k|    }
 9428|   670k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   670k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   694k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.72M|{
 5381|  1.72M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.72M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.72M|                  "\n"
 5385|  1.72M|                  "Unsupported range type given as input to a scanning "
 5386|  1.72M|                  "function.\n"
 5387|  1.72M|                  "A range needs to have a character type (value type) "
 5388|  1.72M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.72M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.72M|                  "to be included.\n"
 5391|  1.72M|                  "See the scnlib documentation for more details.");
 5392|  1.72M|    static_assert(
 5393|  1.72M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.72M|        "\n"
 5395|  1.72M|        "Unsupported range type given as input to a scanning "
 5396|  1.72M|        "function.\n"
 5397|  1.72M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.72M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.72M|        "not supported.");
 5400|  1.72M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.72M|                  "\n"
 5402|  1.72M|                  "Unsupported range type given as input to a scanning "
 5403|  1.72M|                  "function.\n"
 5404|  1.72M|                  "file_marker_found cannot be used as an "
 5405|  1.72M|                  "source range type to scn::scan.\n"
 5406|  1.72M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.72M|                  "and do not provide an explicit source range, "
 5408|  1.72M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.72M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.72M|                  "\n"
 5411|  1.72M|                  "Unsupported range type given as input to a scanning "
 5412|  1.72M|                  "function.\n"
 5413|  1.72M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.72M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.72M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.72M|                  "\n"
 5417|  1.72M|                  "Unsupported range type given as input to a scanning "
 5418|  1.72M|                  "function.\n"
 5419|  1.72M|                  "A range needs to model forward_range and have a valid "
 5420|  1.72M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.72M|                  "Examples of scannable ranges are std::string, "
 5422|  1.72M|                  "std::string_view, "
 5423|  1.72M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.72M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.72M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.72M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.72M|{
 5320|  1.72M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.72M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.72M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.72M|    {
 3000|  1.72M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.72M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.72M|    {
 2981|  1.72M|        return t.data();
 2982|  1.72M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.72M|    {
 3383|  1.72M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.72M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  6.53M|{
  316|  6.53M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  6.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  6.53M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   210M|{
  294|   210M|    return p;
  295|   210M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.40M|    {
 2869|  3.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.40M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.40M|    {
 2850|  3.40M|        return decay_copy(t.begin());
 2851|  3.40M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   176M|    {
 3480|   176M|        return m_iterator;
 3481|   176M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.72M|    {
 3339|  1.72M|        return static_cast<const D&>(*this);
 3340|  1.72M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.72M|    {
 3075|  1.72M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.72M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.72M|    {
 3041|  1.72M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.72M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  4.13M|    {
 3496|  4.13M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  4.13M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  52.2k|        : base(unexpect, std::move(e.error())),
 1616|  52.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  52.2k|    {
 1618|  52.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  52.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  52.2k|          m_has_value(false)
  451|  52.2k|    {
  452|  52.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.72M|    {
 1316|  1.72M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  1.67M|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.67M|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.67M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.67M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.79M|    {
 2869|  4.79M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.79M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.79M|    {
 2850|  4.79M|        return decay_copy(t.begin());
 2851|  4.79M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  1.67M|{
 6702|  1.67M|    return ranges::end(source);
 6703|  1.67M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.67M|    {
 2926|  1.67M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.67M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.67M|    {
 2908|  1.67M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.67M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   167M|    {
 3484|   167M|        return m_sentinel;
 3485|   167M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.67M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.67M|    {
 1572|  1.67M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.67M|    {
  442|  1.67M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8782|   694k|    {
 8783|   694k|        return m_str;
 8784|   694k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  1.38M|{
 6115|  1.38M|    detail::check_scan_arg_types<Args...>();
 6116|  1.38M|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  1.38M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5829|  1.72M|{
 5830|  1.72M|    constexpr bool default_constructible_constraint =
 5831|  1.72M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.72M|    static_assert(default_constructible_constraint,
 5833|  1.72M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.72M|    constexpr bool destructible_constraint =
 5836|  1.72M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.72M|    static_assert(destructible_constraint,
 5838|  1.72M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.72M|    constexpr bool non_reference_constraint =
 5841|  1.72M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.72M|    static_assert(non_reference_constraint,
 5843|  1.72M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.72M|    constexpr bool movable_constraint =
 5846|  1.72M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.72M|    static_assert(movable_constraint,
 5848|  1.72M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.72M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.72M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.72M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  1.38M|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  1.38M|    {
 6092|  1.38M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  1.38M|    {
 6100|  1.38M|        return {detail::make_arg<
 6101|  1.38M|            kind, Context,
 6102|  1.38M|            mapped_type_constant<remove_cvref_t<A>,
 6103|  1.38M|                                 typename Context::char_type>::value>(args)...};
 6104|  1.38M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  1.38M|{
 5880|  1.38M|    return make_value<Context>(value).ref_value;
 5881|  1.38M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  1.72M|{
 5815|  1.72M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  1.72M|                                  needs_context_tag>) {
 5819|  1.72M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  1.72M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  1.72M|    {                                                                        \
 5654|  1.72M|        return val;                                                          \
 5655|  1.72M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5783|  1.72M|{
 5784|  1.72M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.72M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.72M|    constexpr bool scannable_char =
 5788|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.72M|    static_assert(scannable_char,
 5790|  1.72M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.72M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.72M|    constexpr bool scannable_const =
 5794|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.72M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.72M|    constexpr bool scannable_disabled =
 5798|  1.72M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.72M|    static_assert(scannable_disabled,
 5800|  1.72M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.72M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.72M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.72M|    static_assert(
 5805|  1.72M|        scannable,
 5806|  1.72M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.72M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.72M|    return arg_value{arg};
 5810|  1.72M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5596|  1.72M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.72M|    {
 5598|  1.72M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6393|  1.38M|    {
 6394|  1.38M|        return m_values;
 6395|  1.38M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  1.38M|        : basic_scan_args(store.desc, store.args.data())
 6141|  1.38M|    {
 6142|  1.38M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  2.08M|        : m_desc(desc), m_builtin_values(data)
 6193|  2.08M|    {
 6194|  2.08M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  65.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  65.7M|    static_cast<    \
  |  |  935|  65.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  65.7M|    static_cast<    \
  |  |  935|  65.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  65.7M|    {
 3466|  65.7M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  2.08M|{
 8449|  2.08M|    return s;
 8450|  2.08M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  2.08M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   694k|        : m_str(r.str)
 8778|   694k|    {
 8779|   694k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   864k|    {
 1740|   864k|        return has_value();
 1741|   864k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.54M|    {
 1815|  2.54M|        return &value();
 1816|  2.54M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  2.54M|    {
 1769|  2.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.54M|        return this->get_value();
 1771|  2.54M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  1.67M|    {
 6474|  1.67M|        return ranges::begin(m_range);
 6475|  1.67M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   890k|    {
  643|   890k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 838k, False: 52.2k]
  ------------------
  644|   838k|            destroy_value();
  645|   838k|        }
  646|  52.2k|        else {
  647|  52.2k|            destroy_unexpected();
  648|  52.2k|        }
  649|   890k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   694k|{
 9438|   694k|#if !SCN_DISABLE_LOCALE
 9439|   694k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   694k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   694k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   694k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   694k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.1k, False: 670k]
  |  |  ------------------
  ------------------
 9446|  24.1k|        return unexpected(result.error());
 9447|  24.1k|    }
 9448|   670k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   670k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   694k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   339k|{
 9462|   339k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   339k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   339k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 335k]
  |  |  ------------------
  ------------------
 9466|  4.02k|        return unexpected(result.error());
 9467|  4.02k|    }
 9468|   335k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   339k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   339k|{
 5865|   339k|    check_scan_arg_types<T>();
 5866|       |
 5867|   339k|    basic_scan_arg<Context> arg;
 5868|   339k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   339k|    arg.m_value = make_value<Context>(value);
 5870|   339k|    return arg;
 5871|   339k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  2.59M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   339k|    {
 6416|   339k|        return std::get<0>(m_values);
 6417|   339k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9660|   864k|{
 9661|   864k|    return scan_result_type<Source, Args...>();
 9662|   864k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   864k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   864k|        : m_value(T{}), m_has_value(true)
  427|   864k|    {
  428|   864k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6610|   864k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6384|   864k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   864k|{
 9646|   864k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.1k, False: 838k]
  |  |  ------------------
  ------------------
 9647|  26.1k|        out = unexpected(in.error());
 9648|  26.1k|    }
 9649|   838k|    else {
 9650|   838k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   838k|    }
 9652|   864k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  26.1k|        : base(unexpect, std::move(e.error())),
 1616|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.1k|    {
 1618|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  26.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.1k|          m_has_value(false)
  451|  26.1k|    {
  452|  26.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.1k|    {
 1316|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  26.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  26.1k|    {
  903|  26.1k|        assign_common(std::move(other));
  904|  26.1k|        return *this;
  905|  26.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  26.1k|    {
  950|  26.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.1k, False: 0]
  ------------------
  951|  26.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.45M|    {
  490|  3.45M|        return m_has_value;
  491|  3.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.54M|    {
  456|  2.54M|        return m_value;
  457|  2.54M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  26.1k|    {
 1046|  26.1k|        this->destroy_value();
 1047|  26.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  26.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  26.1k|    {
  504|  26.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  26.1k|                                  std::forward<Args>(args)...);
  506|  26.1k|        m_has_value = false;
  507|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.1k|    {
  473|  26.1k|        return m_unexpected;
  474|  26.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  26.1k|    {
  481|  26.1k|        return std::move(m_unexpected);
  482|  26.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8782|   694k|    {
 8783|   694k|        return m_str;
 8784|   694k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   694k|{
 6115|   694k|    detail::check_scan_arg_types<Args...>();
 6116|   694k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   694k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5829|   864k|{
 5830|   864k|    constexpr bool default_constructible_constraint =
 5831|   864k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   864k|    static_assert(default_constructible_constraint,
 5833|   864k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   864k|    constexpr bool destructible_constraint =
 5836|   864k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   864k|    static_assert(destructible_constraint,
 5838|   864k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   864k|    constexpr bool non_reference_constraint =
 5841|   864k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   864k|    static_assert(non_reference_constraint,
 5843|   864k|                  "Scan argument types must not be references");
 5844|       |
 5845|   864k|    constexpr bool movable_constraint =
 5846|   864k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   864k|    static_assert(movable_constraint,
 5848|   864k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   864k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   864k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   864k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|   694k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   694k|    {
 6092|   694k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   694k|    {
 6100|   694k|        return {detail::make_arg<
 6101|   694k|            kind, Context,
 6102|   694k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   694k|                                 typename Context::char_type>::value>(args)...};
 6104|   694k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5879|   694k|{
 5880|   694k|    return make_value<Context>(value).ref_value;
 5881|   694k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5814|   864k|{
 5815|   864k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   864k|                                  needs_context_tag>) {
 5819|   864k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   864k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5653|   864k|    {                                                                        \
 5654|   864k|        return val;                                                          \
 5655|   864k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5783|   864k|{
 5784|   864k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   864k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   864k|    constexpr bool scannable_char =
 5788|   864k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   864k|    static_assert(scannable_char,
 5790|   864k|                  "Cannot scan an argument of an unsupported character "
 5791|   864k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   864k|    constexpr bool scannable_const =
 5794|   864k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   864k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   864k|    constexpr bool scannable_disabled =
 5798|   864k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   864k|    static_assert(scannable_disabled,
 5800|   864k|                  "Cannot scan an argument that has been disabled by "
 5801|   864k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   864k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   864k|    static_assert(
 5805|   864k|        scannable,
 5806|   864k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   864k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   864k|    return arg_value{arg};
 5810|   864k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5596|   864k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   864k|    {
 5598|   864k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6393|   694k|    {
 6394|   694k|        return m_values;
 6395|   694k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   694k|        : basic_scan_args(store.desc, store.args.data())
 6141|   694k|    {
 6142|   694k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   694k|        : m_str(r.str)
 8778|   694k|    {
 8779|   694k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   864k|    {
 1740|   864k|        return has_value();
 1741|   864k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.54M|    {
 1815|  2.54M|        return &value();
 1816|  2.54M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  2.54M|    {
 1769|  2.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.54M|        return this->get_value();
 1771|  2.54M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   169k|{
 5865|   169k|    check_scan_arg_types<T>();
 5866|       |
 5867|   169k|    basic_scan_arg<Context> arg;
 5868|   169k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   169k|    arg.m_value = make_value<Context>(value);
 5870|   169k|    return arg;
 5871|   169k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   169k|    {
 6416|   169k|        return std::get<0>(m_values);
 6417|   169k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  26.1k|    {
 2869|  26.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  26.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  26.1k|    {
 2850|  26.1k|        return decay_copy(t.begin());
 2851|  26.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  82.7M|{
 2094|  82.7M|    return SCN_FWD(t);
  ------------------
  |  |  936|  82.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  82.7M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.72M|    {
 2926|  1.72M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.72M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.72M|    {
 2908|  1.72M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.72M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9660|   864k|{
 9661|   864k|    return scan_result_type<Source, Args...>();
 9662|   864k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   864k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   864k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   864k|    {
  613|   864k|        construct();
  614|   864k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   864k|    {
  694|   864k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   864k|        m_has_value = true;
  696|   864k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   864k|{
  396|   864k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   864k|        T(std::forward<Args>(args)...);
  398|   864k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6610|   864k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   864k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   864k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  4.27M|    {
  718|  4.27M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  4.27M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  4.27M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   864k|{
 9646|   864k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.1k, False: 838k]
  |  |  ------------------
  ------------------
 9647|  26.1k|        out = unexpected(in.error());
 9648|  26.1k|    }
 9649|   838k|    else {
 9650|   838k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   838k|    }
 9652|   864k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   864k|    {
 1740|   864k|        return has_value();
 1741|   864k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.72M|    {
  490|  1.72M|        return m_has_value;
  491|  1.72M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  26.1k|    {
 1746|  26.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  26.1k|        return this->get_unexpected().error();
 1748|  26.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.1k|    {
  473|  26.1k|        return m_unexpected;
  474|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  26.1k|        : base(unexpect, std::move(e.error())),
 1616|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.1k|    {
 1618|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  26.1k|        : m_has_value(false)
  637|  26.1k|    {
  638|  26.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  26.1k|    {
  701|  26.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.1k|                                  std::forward<Args>(args)...);
  703|  26.1k|        m_has_value = false;
  704|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   130k|    {
  730|   130k|        return reinterpret_cast<unexpected<E>*>(
  731|   130k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   130k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.1k|    {
 1316|  26.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  26.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  26.1k|    {
  903|  26.1k|        assign_common(std::move(other));
  904|  26.1k|        return *this;
  905|  26.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  26.1k|    {
  950|  26.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.1k, False: 0]
  ------------------
  951|  26.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  4.34M|    {
  687|  4.34M|        return m_has_value;
  688|  4.34M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.54M|    {
  653|  2.54M|        return *value_ptr();
  654|  2.54M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  26.1k|    {
 1046|  26.1k|        this->destroy_value();
 1047|  26.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   864k|    {
  708|   864k|        scn::detail::destroy_at(value_ptr());
  709|   864k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   864k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   864k|    else {
  408|   864k|        p->~T();
  409|   864k|    }
  410|   864k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6617|   864k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  26.1k|    {
  701|  26.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.1k|                                  std::forward<Args>(args)...);
  703|  26.1k|        m_has_value = false;
  704|  26.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  26.1k|    {
  678|  26.1k|        return std::move(*unexpected_ptr());
  679|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  52.2k|    {
  712|  52.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  52.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   838k|    {
 6485|   838k|        m_range = std::forward<Other>(r);
 6486|   838k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   838k|    {
 1795|   838k|        return value();
 1796|   838k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   838k|    {
 1769|   838k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   838k|        return this->get_value();
 1771|   838k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   838k|    {
  456|   838k|        return m_value;
  457|   838k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   347k|{
 9422|   347k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   347k|    auto result = vscan_impl(buffer, format, args);
 9425|   347k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 335k]
  |  |  ------------------
  ------------------
 9426|  12.0k|        return unexpected(result.error());
 9427|  12.0k|    }
 9428|   335k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   347k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   864k|{
 5381|   864k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   864k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   864k|                  "\n"
 5385|   864k|                  "Unsupported range type given as input to a scanning "
 5386|   864k|                  "function.\n"
 5387|   864k|                  "A range needs to have a character type (value type) "
 5388|   864k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   864k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   864k|                  "to be included.\n"
 5391|   864k|                  "See the scnlib documentation for more details.");
 5392|   864k|    static_assert(
 5393|   864k|        !std::is_same_v<T, custom_char_traits>,
 5394|   864k|        "\n"
 5395|   864k|        "Unsupported range type given as input to a scanning "
 5396|   864k|        "function.\n"
 5397|   864k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   864k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   864k|        "not supported.");
 5400|   864k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   864k|                  "\n"
 5402|   864k|                  "Unsupported range type given as input to a scanning "
 5403|   864k|                  "function.\n"
 5404|   864k|                  "file_marker_found cannot be used as an "
 5405|   864k|                  "source range type to scn::scan.\n"
 5406|   864k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   864k|                  "and do not provide an explicit source range, "
 5408|   864k|                  "or use scn::scan with a FILE* directly.");
 5409|   864k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   864k|                  "\n"
 5411|   864k|                  "Unsupported range type given as input to a scanning "
 5412|   864k|                  "function.\n"
 5413|   864k|                  "In order to be scannable, a range needs to satisfy "
 5414|   864k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   864k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   864k|                  "\n"
 5417|   864k|                  "Unsupported range type given as input to a scanning "
 5418|   864k|                  "function.\n"
 5419|   864k|                  "A range needs to model forward_range and have a valid "
 5420|   864k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   864k|                  "Examples of scannable ranges are std::string, "
 5422|   864k|                  "std::string_view, "
 5423|   864k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   864k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   864k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   864k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   864k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   864k|    else {
 5366|   864k|        return make_forward_scan_buffer(r);
 5367|   864k|    }
 5368|   864k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   864k|{
 5185|   864k|    return basic_scan_forward_buffer_impl(range);
 5186|   864k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   864k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   864k|          m_cursor(ranges::begin(*m_range))
 4766|   864k|    {
 4767|   864k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   864k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   864k|    {
 4738|   864k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   864k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   864k|    {
 4429|   864k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   864k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.70M|    {
 2869|  1.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.70M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.70M|    {
 2850|  1.70M|        return decay_copy(t.begin());
 2851|  1.70M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  2.54M|    {
 3480|  2.54M|        return m_iterator;
 3481|  2.54M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  25.8M|    {
 4771|  25.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 22.0k, False: 25.8M]
  ------------------
 4772|  22.0k|            return false;
 4773|  22.0k|        }
 4774|  25.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  25.8M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  25.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  25.8M|        }
 4777|  25.8M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 25.0M, False: 850k]
  ------------------
 4778|  25.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  25.0M|                                          this->m_current_view.begin(),
 4780|  25.0M|                                          this->m_current_view.end());
 4781|  25.0M|        }
 4782|  25.8M|        m_latest = *m_cursor;
 4783|  25.8M|        ++m_cursor;
 4784|  25.8M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  25.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  25.8M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  25.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  25.8M|        }
 4788|  25.8M|        return true;
 4789|  25.8M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  77.5M|    {
 2926|  77.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  77.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  77.5M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  77.5M|    {
 2908|  77.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  77.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  77.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  78.4M|    {
 3484|  78.4M|        return m_sentinel;
 3485|  78.4M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   864k|    {
 4346|   864k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   864k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   864k|        return true;
 4348|   864k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  26.1k|        : base(unexpect, std::move(e.error())),
 1616|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.1k|    {
 1618|  26.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  26.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.1k|          m_has_value(false)
  451|  26.1k|    {
  452|  26.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   864k|    {
 1316|   864k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   838k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   838k|                      ranges::iterator_t<SourceRange>>) {
 6717|   838k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   838k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   838k|    {
 2869|   838k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   838k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   838k|    {
 2850|   838k|        return decay_copy(t.begin());
 2851|   838k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   838k|{
 6702|   838k|    return ranges::end(source);
 6703|   838k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   838k|    {
 2926|   838k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   838k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   838k|    {
 2908|   838k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   838k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   838k|        : base(std::in_place, std::forward<U>(val)),
 1570|   838k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   838k|    {
 1572|   838k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   838k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   838k|    {
  442|   838k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8782|   694k|    {
 8783|   694k|        return m_str;
 8784|   694k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.70M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.70M|    static_cast<    \
  |  |  935|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.70M|    static_cast<    \
  |  |  935|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.70M|    {
 3466|  1.70M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   694k|        : m_str(r.str)
 8778|   694k|    {
 8779|   694k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   864k|    {
 1740|   864k|        return has_value();
 1741|   864k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.54M|    {
 1815|  2.54M|        return &value();
 1816|  2.54M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  2.54M|    {
 1769|  2.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.54M|        return this->get_value();
 1771|  2.54M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   838k|    {
 6474|   838k|        return ranges::begin(m_range);
 6475|   838k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   890k|    {
  643|   890k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 838k, False: 52.2k]
  ------------------
  644|   838k|            destroy_value();
  645|   838k|        }
  646|  52.2k|        else {
  647|  52.2k|            destroy_unexpected();
  648|  52.2k|        }
  649|   890k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   347k|{
 9438|   347k|#if !SCN_DISABLE_LOCALE
 9439|   347k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   347k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   347k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   347k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   347k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 335k]
  |  |  ------------------
  ------------------
 9446|  12.0k|        return unexpected(result.error());
 9447|  12.0k|    }
 9448|   335k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   347k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   169k|{
 9462|   169k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   169k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 167k]
  |  |  ------------------
  ------------------
 9466|  2.01k|        return unexpected(result.error());
 9467|  2.01k|    }
 9468|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   169k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   153k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   153k|    {
 3742|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   153k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   140k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   140k|    else {
 3981|   140k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   140k|    }
 3983|   140k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  5.99M|    {
 3480|  5.99M|        return m_iterator;
 3481|  5.99M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  85.0M|    {
 3480|  85.0M|        return m_iterator;
 3481|  85.0M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  9.44M|    {
  572|  9.44M|        return m_has_value;
  573|  9.44M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   108k|    {
  555|   108k|        return m_unexpected;
  556|   108k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   108k|    {
 1746|   108k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   108k|        return this->get_unexpected().error();
 1748|   108k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  1.24M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7037|  36.1k|    {
 7038|  36.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7038:13): [True: 0, False: 36.1k]
  |  Branch (7038:39): [True: 0, False: 0]
  ------------------
 7039|       |            // clang-format off
 7040|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7041|       |            // clang-format on
 7042|      0|        }
 7043|       |
 7044|  36.1k|        m_specs.width = width;
 7045|  36.1k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.21M|    {
 7059|  1.21M|        m_specs.type = type;
 7060|  1.21M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7075|  42.2k|    {
 7076|  42.2k|        const auto begin_value = static_cast<unsigned>(begin);
 7077|  42.2k|        const auto end_value = static_cast<unsigned>(end);
 7078|  42.2k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7079|       |
 7080|  42.2k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  42.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 42.2k, False: 0]
  |  |  ------------------
  ------------------
 7081|       |            // No need to bit-twiddle with a mask, because with the
 7082|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7083|  42.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  42.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7084|  1.14M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7084:40): [True: 1.09M, False: 42.2k]
  ------------------
 7085|  1.09M|                m_specs.charset_literals[v / 8] |=
 7086|  1.09M|                    static_cast<unsigned char>(1ul << (v % 8));
 7087|  1.09M|            }
 7088|  42.2k|        }
 7089|      0|        else {
 7090|      0|            m_specs.charset_has_nonascii = true;
 7091|      0|        }
 7092|  42.2k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  36.1k|    {
 7121|  36.1k|        SCN_UNLIKELY_ATTR
 7122|  36.1k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  36.1k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  1.30M|    {
 7132|  1.30M|        return m_error;
 7133|  1.30M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   140k|{
 3918|   140k|    return unexpected(scan_error{c, m});
 3919|   140k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  79.5M|{
 4308|       |    // Pattern_White_Space property
 4309|  79.5M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 15.3M, False: 64.2M]
  |  Branch (4309:27): [True: 3.12M, False: 12.2M]
  ------------------
 4310|  79.5M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 2.44M, False: 74.0M]
  ------------------
 4311|  79.5M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 478k, False: 73.5M]
  ------------------
 4312|  79.5M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 167k, False: 73.3M]
  ------------------
 4313|  79.5M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 260k, False: 73.1M]
  ------------------
 4314|  79.5M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 199k, False: 72.9M]
  ------------------
 4315|  79.5M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 72.9M]
  ------------------
 4316|  79.5M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|  18.0k|{
 7815|  18.0k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 18.0k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 18.0k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 18.0k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 18.0k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 18.0k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 18.0k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 18.0k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 18.0k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 18.0k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 18.0k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 18.0k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 18.0k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 18.0k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 18.0k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 18.0k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 18.0k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 18.0k]
  ------------------
 7843|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 18.0k]
  ------------------
 7844|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 18.0k]
  ------------------
 7845|      0|            return arg_type_category::floating;
 7846|       |
 7847|  2.01k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 2.01k, False: 16.0k]
  ------------------
 7848|  6.03k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 4.02k, False: 14.0k]
  ------------------
 7849|  10.0k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 4.02k, False: 14.0k]
  ------------------
 7850|  18.0k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 8.04k, False: 10.0k]
  ------------------
 7851|  18.0k|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 18.0k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 18.0k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|  18.0k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|  18.0k|            SCN_CLANG_POP
 7862|  18.0k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|  18.0k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  9.33M|    {
 1740|  9.33M|        return has_value();
 1741|  9.33M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7956|  1.21M|{
 7957|  1.21M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 1.21M]
  ------------------
 7958|  1.21M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7958:9): [True: 1.17M, False: 39.2k]
  ------------------
 7959|  1.21M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7959:9): [True: 21.1k, False: 18.0k]
  ------------------
 7960|  1.21M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7960:9): [True: 0, False: 18.0k]
  ------------------
 7961|  1.21M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7961:9): [True: 0, False: 18.0k]
  ------------------
 7962|  1.19M|        return;
 7963|  1.19M|    }
 7964|  18.0k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7964:9): [True: 18.0k, False: 0]
  ------------------
 7965|  18.0k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 7966|       |            // clang-format off
 7967|  18.0k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7968|       |            // clang-format on
 7969|  18.0k|        }
 7970|      0|        return;
 7971|  18.0k|    }
 7972|      0|    SCN_UNLIKELY_ATTR
 7973|      0|    handler.on_error("Invalid type specifier for string");
 7974|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  32.5M|    {
 4473|  32.5M|        assert(m_begin);
 4474|  32.5M|        return m_end == nullptr;
 4475|  32.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   724k|    {
 4490|   724k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 724k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   724k|        return parent()->get_segment_starting_at(position());
 4496|   724k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  18.9M|    {
 4484|  18.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  18.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  18.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  18.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   724k|    {
 4377|   724k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 411k, False: 312k]
  |  |  ------------------
  ------------------
 4378|   724k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   411k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   411k|        }
 4381|   312k|        const auto start = pos - m_putback_buffer.size();
 4382|   312k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   312k|        return m_current_view.substr(start);
 4384|   312k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   815k|    {
 4468|   815k|        return m_position;
 4469|   815k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   463k|    {
 4399|   463k|        return m_is_contiguous;
 4400|   463k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   469M|    {
 4473|   469M|        assert(m_begin);
 4474|   469M|        return m_end == nullptr;
 4475|   469M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   842k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   842k|    else {
 3981|   842k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   842k|    }
 3983|   842k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  2.54M|    {
 4490|  2.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 2.54M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  2.54M|        return parent()->get_segment_starting_at(position());
 4496|  2.54M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   273M|    {
 4484|   273M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   273M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   273M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   273M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  2.54M|    {
 4377|  2.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.68M, False: 860k]
  |  |  ------------------
  ------------------
 4378|  2.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.68M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.68M|        }
 4381|   860k|        const auto start = pos - m_putback_buffer.size();
 4382|   860k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   860k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   860k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   860k|        return m_current_view.substr(start);
 4384|   860k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.05M|    {
 4468|  3.05M|        return m_position;
 4469|  3.05M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  2.59M|    {
 4399|  2.59M|        return m_is_contiguous;
 4400|  2.59M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   923k|    {
 3334|   923k|        return static_cast<D&>(*this);
 3335|   923k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   923k|    {
 3375|   923k|        return detail::to_address(ranges::begin(derived()));
 3376|   923k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  3.11M|    {
 3334|  3.11M|        return static_cast<D&>(*this);
 3335|  3.11M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  3.11M|    {
 3375|  3.11M|        return detail::to_address(ranges::begin(derived()));
 3376|  3.11M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|  63.5k|    {
 8980|  63.5k|        return ranges::subrange{begin(), end()};
 8981|  63.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|  63.5k|    {
 8972|  63.5k|        return ranges::default_sentinel;
 8973|  63.5k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  2.20M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.20M|    static_cast<    \
  |  |  935|  2.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.20M|    static_cast<    \
  |  |  935|  2.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.20M|    {
 3466|  2.20M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  2.98M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   145k|    {
 1979|   145k|        return detail::transform_error_impl(std::move(*this),
 1980|   145k|                                            std::forward<F>(f));
 1981|   145k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   145k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   145k|    else {
 1472|   145k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   145k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 143k, False: 2.40k]
  |  |  ------------------
  ------------------
 1474|   145k|                   ? result(*std::forward<Exp>(exp))
 1475|   145k|                   : result(unexpect,
 1476|  2.40k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.40k|                                           std::forward<Exp>(exp).error()));
 1478|   145k|    }
 1479|   145k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   291k|    {
  490|   291k|        return m_has_value;
  491|   291k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   143k|    {
 1805|   143k|        return std::move(value());
 1806|   143k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   143k|    {
 1769|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   143k|        return this->get_value();
 1771|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   143k|    {
  456|   143k|        return m_value;
  457|   143k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   342k|        : base(std::in_place, std::forward<U>(val)),
 1570|   342k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   342k|    {
 1572|   342k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   342k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   342k|    {
  442|   342k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   359k|    {
 1316|   359k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  13.1k|{
 1350|  13.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  13.1k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.40k|    {
 1756|  2.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.40k|        return std::move(this->get_unexpected().error());
 1758|  2.40k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.40k|    {
  473|  2.40k|        return m_unexpected;
  474|  2.40k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  26.2k|    {
  365|  26.2k|        return m_unexpected;
  366|  26.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.40k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.40k|    {
 1628|  2.40k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  16.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  16.4k|          m_has_value(false)
  451|  16.4k|    {
  452|  16.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   347k|    {
 8980|   347k|        return ranges::subrange{begin(), end()};
 8981|   347k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   347k|    {
 8972|   347k|        return ranges::default_sentinel;
 8973|   347k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  29.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  29.9M|    static_cast<    \
  |  |  935|  29.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  29.9M|    static_cast<    \
  |  |  935|  29.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  29.9M|    {
 3466|  29.9M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   848k|    {
 1979|   848k|        return detail::transform_error_impl(std::move(*this),
 1980|   848k|                                            std::forward<F>(f));
 1981|   848k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   848k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   848k|    else {
 1472|   848k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   848k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   848k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 846k, False: 2.32k]
  |  |  ------------------
  ------------------
 1474|   848k|                   ? result(*std::forward<Exp>(exp))
 1475|   848k|                   : result(unexpect,
 1476|  2.32k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.32k|                                           std::forward<Exp>(exp).error()));
 1478|   848k|    }
 1479|   848k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.69M|    {
  490|  1.69M|        return m_has_value;
  491|  1.69M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   846k|    {
 1805|   846k|        return std::move(value());
 1806|   846k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   846k|    {
 1769|   846k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   846k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   846k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   846k|        return this->get_value();
 1771|   846k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   846k|    {
  456|   846k|        return m_value;
  457|   846k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.02M|    {
 1572|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.02M|    {
  442|  2.02M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.05M|    {
 1316|  2.05M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.32k|    {
 1756|  2.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.32k|        return std::move(this->get_unexpected().error());
 1758|  2.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.32k|    {
  473|  2.32k|        return m_unexpected;
  474|  2.32k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.32k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.32k|    {
 1628|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  31.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  31.5k|          m_has_value(false)
  451|  31.5k|    {
  452|  31.5k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   140k|        : m_unexpected(std::forward<Err>(e))
  350|   140k|    {
  351|   140k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   140k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   140k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   117k|        : base(unexpect, std::move(e.error())),
 1616|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   117k|    {
 1618|   117k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   117k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   117k|          m_has_value(false)
  451|   117k|    {
  452|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.00M|    {
 1316|  3.00M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  28.6k|        : base(unexpect, std::move(e.error())),
 1616|  28.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.6k|    {
 1618|  28.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  32.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  32.4k|          m_has_value(false)
  451|  32.4k|    {
  452|  32.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   585k|    {
 1316|   585k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   551k|        : base(std::in_place, std::forward<U>(val)),
 1570|   551k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   551k|    {
 1572|   551k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   551k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   551k|    {
  442|   551k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   585k|    {
 1740|   585k|        return has_value();
 1741|   585k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.17M|    {
  490|  1.17M|        return m_has_value;
  491|  1.17M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  32.4k|    {
 1746|  32.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  32.4k|        return this->get_unexpected().error();
 1748|  32.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  32.4k|    {
  473|  32.4k|        return m_unexpected;
  474|  32.4k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   459k|    {
 1805|   459k|        return std::move(value());
 1806|   459k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   552k|    {
 1769|   552k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   552k|        return this->get_value();
 1771|   552k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   552k|    {
  456|   552k|        return m_value;
  457|   552k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  58.4k|        : base(unexpect, std::move(e.error())),
 1616|  58.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  58.4k|    {
 1618|  58.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  63.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  63.0k|          m_has_value(false)
  451|  63.0k|    {
  452|  63.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.10M|    {
 1316|  4.10M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.04M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.04M|    {
 1572|  4.04M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.04M|    {
  442|  4.04M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  4.10M|    {
 1740|  4.10M|        return has_value();
 1741|  4.10M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  8.20M|    {
  490|  8.20M|        return m_has_value;
  491|  8.20M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  63.0k|    {
 1746|  63.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  63.0k|        return this->get_unexpected().error();
 1748|  63.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  63.0k|    {
  473|  63.0k|        return m_unexpected;
  474|  63.0k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.36M|    {
 1805|  3.36M|        return std::move(value());
 1806|  3.36M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  4.04M|    {
 1769|  4.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.04M|        return this->get_value();
 1771|  4.04M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  4.04M|    {
  456|  4.04M|        return m_value;
  457|  4.04M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   235k|    {
 1979|   235k|        return detail::transform_error_impl(std::move(*this),
 1980|   235k|                                            std::forward<F>(f));
 1981|   235k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   235k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   235k|    else {
 1472|   235k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   235k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 231k, False: 3.75k]
  |  |  ------------------
  ------------------
 1474|   235k|                   ? result(*std::forward<Exp>(exp))
 1475|   235k|                   : result(unexpect,
 1476|  3.75k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.75k|                                           std::forward<Exp>(exp).error()));
 1478|   235k|    }
 1479|   235k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   471k|    {
  490|   471k|        return m_has_value;
  491|   471k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   231k|    {
 1805|   231k|        return std::move(value());
 1806|   231k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   231k|    {
 1769|   231k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   231k|        return this->get_value();
 1771|   231k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   231k|    {
  456|   231k|        return m_value;
  457|   231k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.75k|    {
 1756|  3.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.75k|        return std::move(this->get_unexpected().error());
 1758|  3.75k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.75k|    {
  473|  3.75k|        return m_unexpected;
  474|  3.75k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.75k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.75k|    {
 1628|  3.75k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   188k|    {
 8964|   188k|        return m_current;
 8965|   188k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   167k|    {
 8857|   167k|        return m_locale;
 8858|   167k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   179k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   179k|    static_cast<    \
  |  |  935|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   179k|    static_cast<    \
  |  |  935|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   179k|    {
 8864|   179k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  14.0k|        : base(unexpect, std::move(e.error())),
 1616|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.0k|    {
 1618|  14.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|  1.03M|    {
 8964|  1.03M|        return m_current;
 8965|  1.03M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|  1.04M|    {
 8857|  1.04M|        return m_locale;
 8858|  1.04M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|  1.06M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.06M|    static_cast<    \
  |  |  935|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.06M|    static_cast<    \
  |  |  935|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  1.06M|    {
 8864|  1.06M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  29.2k|        : base(unexpect, std::move(e.error())),
 1616|  29.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.2k|    {
 1618|  29.2k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   144k|        : base(unexpect, std::move(e.error())),
 1616|   144k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   144k|    {
 1618|   144k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   144k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   144k|          m_has_value(false)
  550|   144k|    {
  551|   144k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   144k|    {
 1316|   144k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  8.06M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  8.06M|        : m_deferred_init(), m_has_value(true)
  529|  8.06M|    {
  530|  8.06M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.70M|    {
 4559|  1.70M|        return x.is_at_end();
 4560|  1.70M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  3.49M|    {
 4603|  3.49M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 3.49M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  3.49M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 3.49M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  3.49M|        return !read_at_position();
 4610|  3.49M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  9.63M|    {
 4583|  9.63M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  9.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  9.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 9.63M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  9.63M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  9.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.83M, False: 1.80M]
  |  |  ------------------
  ------------------
 4590|  7.83M|            return true;
 4591|  7.83M|        }
 4592|       |
 4593|  3.59M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.80M, False: 1.78M]
  ------------------
 4594|  1.80M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 18.6k, False: 1.78M]
  ------------------
 4595|  18.6k|                return false;
 4596|  18.6k|            }
 4597|  1.80M|        }
 4598|  1.78M|        return true;
 4599|  1.80M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  3.20M|    {
 4518|  3.20M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  3.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 3.20M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  3.20M|        auto res = read_at_position();
 4527|  3.20M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  3.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  3.20M|        return parent()->get_character_at(m_position);
 4529|  3.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  3.20M|    {
 4388|  3.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  3.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.74M, False: 1.45M]
  |  |  ------------------
  ------------------
 4389|  3.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.74M|            return m_putback_buffer[pos];
 4391|  1.74M|        }
 4392|  1.45M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.45M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.45M|        return m_current_view[start];
 4395|  1.45M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   143k|        : base(std::in_place, std::forward<U>(val)),
 1570|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   143k|    {
 1572|   143k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   143k|    {
  442|   143k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   145k|    {
 1316|   145k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.40k|        : base(unexpect, std::move(e.error())),
 1616|  2.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.40k|    {
 1618|  2.40k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.40k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.40k|          m_has_value(false)
  451|  2.40k|    {
  452|  2.40k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  13.1k|        : m_unexpected(std::forward<Args>(args)...)
  359|  13.1k|    {
  360|  13.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  13.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  2.93M|    {
 4504|  2.93M|        ++m_position;
 4505|  2.93M|        (void)read_at_position();
 4506|  2.93M|        return *this;
 4507|  2.93M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  1.27M|    {
 4553|  1.27M|        return !(lhs == rhs);
 4554|  1.27M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  1.28M|    {
 4548|  1.28M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 1.28M, False: 0]
  |  Branch (4548:46): [True: 218k, False: 1.06M]
  ------------------
 4549|  1.28M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  13.1k|        : m_unexpected(std::forward<Err>(e))
  350|  13.1k|    {
  351|  13.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  13.1k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.03k|        : base(unexpect, std::move(e.error())),
 1616|  1.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.03k|    {
 1618|  1.03k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03k|          m_has_value(false)
  451|  1.03k|    {
  452|  1.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   118k|    {
 1316|   118k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   117k|        : base(std::in_place, std::forward<U>(val)),
 1570|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   117k|    {
 1572|   117k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   117k|    {
  442|   117k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   118k|    {
 1740|   118k|        return has_value();
 1741|   118k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   236k|    {
  490|   236k|        return m_has_value;
  491|   236k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.03k|    {
 1746|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.03k|        return this->get_unexpected().error();
 1748|  1.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.03k|    {
  473|  1.03k|        return m_unexpected;
  474|  1.03k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   117k|    {
 1805|   117k|        return std::move(value());
 1806|   117k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   117k|    {
 1769|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   117k|        return this->get_value();
 1771|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   117k|    {
  456|   117k|        return m_value;
  457|   117k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  5.35M|    {
 3484|  5.35M|        return m_sentinel;
 3485|  5.35M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   359k|    {
 1740|   359k|        return has_value();
 1741|   359k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   719k|    {
  490|   719k|        return m_has_value;
  491|   719k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  16.4k|    {
 1746|  16.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.4k|        return this->get_unexpected().error();
 1748|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  16.4k|    {
  473|  16.4k|        return m_unexpected;
  474|  16.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   284k|    {
 1805|   284k|        return std::move(value());
 1806|   284k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   343k|    {
 1769|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   343k|        return this->get_value();
 1771|   343k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   343k|    {
  456|   343k|        return m_value;
  457|   343k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   151k|    {
 3480|   151k|        return m_iterator;
 3481|   151k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   151k|    {
 3484|   151k|        return m_sentinel;
 3485|   151k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   144k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   144k|    static_cast<    \
  |  |  935|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   144k|    static_cast<    \
  |  |  935|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   144k|    {
 3466|   144k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.79M|    {
 4570|  1.79M|        return !x.is_at_end();
 4571|  1.79M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.75k|        : base(unexpect, std::move(e.error())),
 1616|  3.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.75k|    {
 1618|  3.75k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.75k|          m_has_value(false)
  451|  3.75k|    {
  452|  3.75k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   235k|    {
 1316|   235k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   231k|        : base(std::in_place, std::forward<U>(val)),
 1570|   231k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   231k|    {
 1572|   231k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   231k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   231k|    {
  442|   231k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.50k|        : base(unexpect, std::move(e.error())),
 1616|  1.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.50k|    {
 1618|  1.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.50k|          m_has_value(false)
  451|  1.50k|    {
  452|  1.50k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   190k|    {
 1316|   190k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   189k|        : base(std::in_place, std::forward<U>(val)),
 1570|   189k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   189k|    {
 1572|   189k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   189k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   189k|    {
  442|   189k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   190k|    {
 1740|   190k|        return has_value();
 1741|   190k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   381k|    {
  490|   381k|        return m_has_value;
  491|   381k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.50k|    {
 1746|  1.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.50k|        return this->get_unexpected().error();
 1748|  1.50k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.50k|    {
  473|  1.50k|        return m_unexpected;
  474|  1.50k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   189k|    {
 1805|   189k|        return std::move(value());
 1806|   189k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   189k|    {
 1769|   189k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   189k|        return this->get_value();
 1771|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   189k|    {
  456|   189k|        return m_value;
  457|   189k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   923k|    {
 3000|   923k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   923k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   923k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   923k|    {
 2981|   923k|        return t.data();
 2982|   923k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.88M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.88M|    {
 1572|  2.88M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.88M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.88M|    {
  442|  2.88M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  58.3k|    {
 1795|  58.3k|        return value();
 1796|  58.3k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  93.5k|    {
 1795|  93.5k|        return value();
 1796|  93.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    828|        : base(std::in_place, std::forward<U>(val)),
 1570|    828|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    828|    {
 1572|    828|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    828|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    828|    {
  442|    828|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.65k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.65k|    {
 1572|  1.65k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.65k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.65k|    {
  442|  1.65k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  27.2M|    {
 4559|  27.2M|        return x.is_at_end();
 4560|  27.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  53.4M|    {
 4603|  53.4M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 53.4M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  53.4M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 53.4M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  53.4M|        return !read_at_position();
 4610|  53.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   141M|    {
 4583|   141M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   141M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   141M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 141M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   141M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   141M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 115M, False: 25.8M]
  |  |  ------------------
  ------------------
 4590|   115M|            return true;
 4591|   115M|        }
 4592|       |
 4593|  51.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 25.8M, False: 25.8M]
  ------------------
 4594|  25.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 22.0k, False: 25.8M]
  ------------------
 4595|  22.0k|                return false;
 4596|  22.0k|            }
 4597|  25.8M|        }
 4598|  25.8M|        return true;
 4599|  25.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   193M|    {
 4357|   193M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   193M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  52.1M|    {
 4518|  52.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  52.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  52.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 52.1M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  52.1M|        auto res = read_at_position();
 4527|  52.1M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  52.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  52.1M|        return parent()->get_character_at(m_position);
 4529|  52.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  52.1M|    {
 4388|  52.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.0M, False: 25.0M]
  |  |  ------------------
  ------------------
 4389|  52.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  27.0M|            return m_putback_buffer[pos];
 4391|  27.0M|        }
 4392|  25.0M|        const auto start = pos - m_putback_buffer.size();
 4393|  25.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  25.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  25.0M|        return m_current_view[start];
 4395|  25.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   846k|        : base(std::in_place, std::forward<U>(val)),
 1570|   846k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   846k|    {
 1572|   846k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   846k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   846k|    {
  442|   846k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   848k|    {
 1316|   848k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.32k|        : base(unexpect, std::move(e.error())),
 1616|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.32k|    {
 1618|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.32k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.32k|          m_has_value(false)
  451|  2.32k|    {
  452|  2.32k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  35.7M|    {
 4504|  35.7M|        ++m_position;
 4505|  35.7M|        (void)read_at_position();
 4506|  35.7M|        return *this;
 4507|  35.7M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  10.2M|    {
 4553|  10.2M|        return !(lhs == rhs);
 4554|  10.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  10.2M|    {
 4548|  10.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 10.2M, False: 0]
  |  Branch (4548:46): [True: 343k, False: 9.91M]
  ------------------
 4549|  10.2M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   145M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   145M|    else {
 4075|       |        // utf-32
 4076|   145M|        static_assert(sizeof(U) == 4);
 4077|   145M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   145M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   145M|        return 1;
 4079|   145M|    }
 4080|   145M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   145M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   145M|    else {
 4281|   145M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   145M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   145M|        auto cp = static_cast<char32_t>(input.front());
 4283|   145M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   145M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 944k, False: 144M]
  |  |  ------------------
  ------------------
 4284|   944k|            return invalid_code_point;
 4285|   944k|        }
 4286|   144M|        return cp;
 4287|   145M|    }
 4288|   145M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    930|        : base(unexpect, std::move(e.error())),
 1616|    930|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    930|    {
 1618|    930|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    930|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    930|          m_has_value(false)
  451|    930|    {
  452|    930|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   678k|    {
 1316|   678k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   677k|        : base(std::in_place, std::forward<U>(val)),
 1570|   677k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   677k|    {
 1572|   677k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   677k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   677k|    {
  442|   677k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   678k|    {
 1740|   678k|        return has_value();
 1741|   678k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.35M|    {
  490|  1.35M|        return m_has_value;
  491|  1.35M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    930|    {
 1746|    930|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    930|        return this->get_unexpected().error();
 1748|    930|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    930|    {
  473|    930|        return m_unexpected;
  474|    930|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   677k|    {
 1805|   677k|        return std::move(value());
 1806|   677k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   677k|    {
 1769|   677k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   677k|        return this->get_value();
 1771|   677k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   677k|    {
  456|   677k|        return m_value;
  457|   677k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  82.1M|    {
 3484|  82.1M|        return m_sentinel;
 3485|  82.1M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  2.05M|    {
 1740|  2.05M|        return has_value();
 1741|  2.05M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.10M|    {
  490|  4.10M|        return m_has_value;
  491|  4.10M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  31.5k|    {
 1746|  31.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  31.5k|        return this->get_unexpected().error();
 1748|  31.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  31.5k|    {
  473|  31.5k|        return m_unexpected;
  474|  31.5k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.68M|    {
 1805|  1.68M|        return std::move(value());
 1806|  1.68M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  2.02M|    {
 1769|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.02M|        return this->get_value();
 1771|  2.02M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.02M|    {
  456|  2.02M|        return m_value;
  457|  2.02M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  68.0M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  68.0M|    else {
 3966|  68.0M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  68.0M|                                       to_address(first), to_address(last)))};
 3968|  68.0M|    }
 3969|  68.0M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   204M|{
  316|   204M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   204M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   204M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   853k|    {
 3480|   853k|        return m_iterator;
 3481|   853k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   853k|    {
 3484|   853k|        return m_sentinel;
 3485|   853k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   846k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   846k|    static_cast<    \
  |  |  935|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   846k|    static_cast<    \
  |  |  935|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   846k|    {
 3466|   846k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  26.2M|    {
 4570|  26.2M|        return !x.is_at_end();
 4571|  26.2M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  4.65k|        : base(unexpect, std::move(e.error())),
 1616|  4.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.65k|    {
 1618|  4.65k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.65k|          m_has_value(false)
  451|  4.65k|    {
  452|  4.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.69M|    {
 1316|  1.69M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.69M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.69M|    {
 1572|  1.69M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.69M|    {
  442|  1.69M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.39M|    {
  490|  3.39M|        return m_has_value;
  491|  3.39M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.69M|    {
 1769|  1.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.69M|        return this->get_value();
 1771|  1.69M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.69M|    {
  456|  1.69M|        return m_value;
  457|  1.69M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.86k|        : base(unexpect, std::move(e.error())),
 1616|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.86k|    {
 1618|  1.86k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.86k|          m_has_value(false)
  451|  1.86k|    {
  452|  1.86k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.35M|    {
 1316|  1.35M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.35M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.35M|    {
 1572|  1.35M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.35M|    {
  442|  1.35M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.69M|    {
 1979|  1.69M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.69M|                                            std::forward<F>(f));
 1981|  1.69M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.69M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.69M|    else {
 1472|  1.69M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.69M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.69M, False: 4.65k]
  |  |  ------------------
  ------------------
 1474|  1.69M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.69M|                   : result(unexpect,
 1476|  4.65k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.65k|                                           std::forward<Exp>(exp).error()));
 1478|  1.69M|    }
 1479|  1.69M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.69M|    {
 1805|  1.69M|        return std::move(value());
 1806|  1.69M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  4.65k|    {
 1756|  4.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.65k|        return std::move(this->get_unexpected().error());
 1758|  4.65k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.65k|    {
  473|  4.65k|        return m_unexpected;
  474|  4.65k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.65k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.65k|    {
 1628|  4.65k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.35M|    {
 1740|  1.35M|        return has_value();
 1741|  1.35M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.71M|    {
  490|  2.71M|        return m_has_value;
  491|  2.71M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.86k|    {
 1746|  1.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.86k|        return this->get_unexpected().error();
 1748|  1.86k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.86k|    {
  473|  1.86k|        return m_unexpected;
  474|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.35M|    {
 1805|  1.35M|        return std::move(value());
 1806|  1.35M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.35M|    {
 1769|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.35M|        return this->get_value();
 1771|  1.35M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.35M|    {
  456|  1.35M|        return m_value;
  457|  1.35M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.11M|    {
 3000|  3.11M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  3.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.11M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.11M|    {
 2981|  3.11M|        return t.data();
 2982|  3.11M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   335k|    {
 1795|   335k|        return value();
 1796|   335k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   671k|    {
 1795|   671k|        return value();
 1796|   671k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    182|        : base(std::in_place, std::forward<U>(val)),
 1570|    182|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    182|    {
 1572|    182|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    182|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    182|    {
  442|    182|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    364|        : base(std::in_place, std::forward<U>(val)),
 1570|    364|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    364|    {
 1572|    364|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    364|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    364|    {
  442|    364|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  13.2M|    {
 4357|  13.2M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  13.2M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   331k|    {
 6182|   331k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   331k|        return static_cast<std::size_t>(m_desc &
 6187|   331k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   331k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   663k|    {
 6208|   663k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   663k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   331k|    {
 6150|   331k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   331k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   331k|        const auto t = type(id);
 6162|   331k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   331k|        basic_scan_arg<Context> arg;
 6167|   331k|        arg.m_type = t;
 6168|   331k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 331k, False: 0]
  ------------------
 6169|   331k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   331k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   331k|        return arg;
 6175|   331k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   331k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   331k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   331k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   331k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   331k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   331k|    {
 6212|   331k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   331k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   575k|    {
 5966|   575k|        return m_type != detail::arg_type::none_type;
 5967|   575k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   141k|{
 9324|   141k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   141k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   141k|{
 9225|   141k|#define SCN_VISIT(Type)                                                \
 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   141k|    }                                                                  \
 9229|   141k|    else {                                                             \
 9230|   141k|        return vis(monostate_val);                                     \
 9231|   141k|    }
 9232|       |
 9233|   141k|    monostate monostate_val{};
 9234|       |
 9235|   141k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 141k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 141k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 141k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 141k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 141k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 141k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 141k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 141k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 141k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 141k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 141k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 141k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 141k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 141k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 141k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 141k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 141k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 141k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  70.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 70.6k, False: 70.6k]
  ------------------
 9273|  70.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  70.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  70.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  70.6k|    }                                                                  \
  |  | 9229|  70.6k|    else {                                                             \
  |  | 9230|  70.6k|        return vis(monostate_val);                                     \
  |  | 9231|  70.6k|    }
  ------------------
 9274|   141k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 70.6k, False: 70.6k]
  ------------------
 9275|   141k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9276|   141k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 141k]
  ------------------
 9277|   141k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9278|   141k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 141k]
  ------------------
 9279|   141k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9280|   141k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 141k]
  ------------------
 9281|   141k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9282|   141k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 141k]
  ------------------
 9283|   141k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9284|       |
 9285|   141k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 141k]
  ------------------
 9286|   141k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   141k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   141k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 141k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 141k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   141k|            SCN_CLANG_POP
 9303|   141k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   754k|{
 6011|   754k|    return arg.m_type;
 6012|   754k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   395k|{
 6023|   395k|    return arg.m_value;
 6024|   395k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|  67.5k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  67.5k|    {
 8949|  67.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   154k|{
 4691|   154k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 154k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   154k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   154k|                            ranges::default_sentinel};
 4697|   154k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   154k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   154k|    {
 4455|   154k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   154k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   154k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  86.9k|{
 9324|  86.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  86.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  86.9k|{
 9225|  86.9k|#define SCN_VISIT(Type)                                                \
 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  86.9k|    }                                                                  \
 9229|  86.9k|    else {                                                             \
 9230|  86.9k|        return vis(monostate_val);                                     \
 9231|  86.9k|    }
 9232|       |
 9233|  86.9k|    monostate monostate_val{};
 9234|       |
 9235|  86.9k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 86.9k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 86.9k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 86.9k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 86.9k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 86.9k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 86.9k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 86.9k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 86.9k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 86.9k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 86.9k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 86.9k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 86.9k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 86.9k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 86.9k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 86.9k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 86.9k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 86.9k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 86.9k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 86.9k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  86.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 86.9k, False: 0]
  ------------------
 9275|  86.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  86.9k|    }                                                                  \
  |  | 9229|  86.9k|    else {                                                             \
  |  | 9230|  86.9k|        return vis(monostate_val);                                     \
  |  | 9231|  86.9k|    }
  ------------------
 9276|  86.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 86.9k]
  ------------------
 9277|  86.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  86.9k|    }                                                                  \
  |  | 9229|  86.9k|    else {                                                             \
  |  | 9230|  86.9k|        return vis(monostate_val);                                     \
  |  | 9231|  86.9k|    }
  ------------------
 9278|  86.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 86.9k]
  ------------------
 9279|  86.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  86.9k|    }                                                                  \
  |  | 9229|  86.9k|    else {                                                             \
  |  | 9230|  86.9k|        return vis(monostate_val);                                     \
  |  | 9231|  86.9k|    }
  ------------------
 9280|  86.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 86.9k]
  ------------------
 9281|  86.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  86.9k|    }                                                                  \
  |  | 9229|  86.9k|    else {                                                             \
  |  | 9230|  86.9k|        return vis(monostate_val);                                     \
  |  | 9231|  86.9k|    }
  ------------------
 9282|  86.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 86.9k]
  ------------------
 9283|  86.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  86.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  86.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  86.9k|    }                                                                  \
  |  | 9229|  86.9k|    else {                                                             \
  |  | 9230|  86.9k|        return vis(monostate_val);                                     \
  |  | 9231|  86.9k|    }
  ------------------
 9284|       |
 9285|  86.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 86.9k]
  ------------------
 9286|  86.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  86.9k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  86.9k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 86.9k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 86.9k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  86.9k|            SCN_CLANG_POP
 9303|  86.9k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   111k|        : m_format{format},
 6280|   111k|          m_next_arg_id{next_arg_id},
 6281|   111k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   111k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   111k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   111k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   111k|    {
 6287|   111k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   111k|    {
 3075|   111k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   111k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   111k|    {
 3041|   111k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   111k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   111k|{
 7796|   111k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   111k|    handler.check_args_exhausted();
 7798|   111k|    return handler.get_error();
 7799|   111k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   111k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   111k|    auto begin = format.data();
 7764|   111k|    auto it = begin;
 7765|   111k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   203k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 111k, False: 91.8k]
  ------------------
 7768|   111k|        const auto ch = *it++;
 7769|   111k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 111k, False: 0]
  ------------------
 7770|   111k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   111k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   111k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 20.1k, False: 91.8k]
  ------------------
 7774|  20.1k|                return;
 7775|  20.1k|            }
 7776|   111k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   111k|    }
 7787|       |
 7788|  91.8k|    handler.on_literal_text(begin, end);
 7789|  91.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   111k|{
 7693|   111k|    struct id_adapter {
 7694|   111k|        constexpr void operator()()
 7695|   111k|        {
 7696|   111k|            arg_id = handler.on_arg_id();
 7697|   111k|        }
 7698|   111k|        constexpr void operator()(std::size_t id)
 7699|   111k|        {
 7700|   111k|            arg_id = handler.on_arg_id(id);
 7701|   111k|        }
 7702|       |
 7703|   111k|        constexpr void on_error(const char* msg)
 7704|   111k|        {
 7705|   111k|            SCN_UNLIKELY_ATTR
 7706|   111k|            handler.on_error(msg);
 7707|   111k|        }
 7708|       |
 7709|   111k|        Handler& handler;
 7710|   111k|        std::size_t arg_id;
 7711|   111k|    };
 7712|       |
 7713|   111k|    ++begin;
 7714|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   111k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 111k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   111k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 111k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   111k|    else {
 7726|   111k|        auto adapter = id_adapter{handler, 0};
 7727|   111k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   111k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   111k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 111k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   111k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 111k, False: 0]
  ------------------
 7738|   111k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   111k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   111k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.04k, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 111k]
  |  |  |  Branch (865:45): [True: 8.04k, False: 103k]
  |  |  ------------------
  ------------------
 7744|  8.04k|                handler.on_error("Unknown format specifier");
 7745|  8.04k|                return begin;
 7746|  8.04k|            }
 7747|   111k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   111k|    }
 7754|   103k|    return begin + 1;
 7755|   111k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   179k|    {
 8847|   179k|        return m_args.get(id);
 8848|   179k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   179k|    {
 6315|   179k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   179k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   179k|        do_check_arg_id(id);
 6323|   179k|        return id;
 6324|   179k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   179k|{
 6809|   179k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   179k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   179k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   111k|{
 7194|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   111k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 111k, False: 0]
  |  Branch (7195:26): [True: 0, False: 111k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   111k|    handler();
 7200|   111k|    return begin;
 7201|   111k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7142|  12.0k|{
 7143|  12.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  12.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  12.0k|    unsigned long long value = 0;
 7147|  24.1k|    do {
 7148|  24.1k|        value *= 10;
 7149|  24.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  24.1k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 24.1k]
  ------------------
 7151|  24.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  24.1k|        ++begin;
 7155|  24.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 24.1k, False: 0]
  |  Branch (7155:30): [True: 24.1k, False: 0]
  |  Branch (7155:47): [True: 12.0k, False: 12.0k]
  ------------------
 7156|  12.0k|    return static_cast<int>(value);
 7157|  12.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   111k|        {
 7696|   111k|            arg_id = handler.on_arg_id();
 7697|   111k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   167k|    {
 6310|   167k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   167k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   347k|    {
 6299|   347k|        return m_format.data();
 6300|   347k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   111k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   111k|    {
 7874|   111k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   111k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   111k|{
 7609|   111k|    auto do_presentation = [&]() -> const CharT* {
 7610|   111k|        if (*begin == CharT{'['}) {
 7611|   111k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   111k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   111k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   111k|                return begin;
 7617|   111k|            }
 7618|   111k|            handler.on_character_set_string(set);
 7619|   111k|            return begin;
 7620|   111k|        }
 7621|   111k|        if (*begin == CharT{'/'}) {
 7622|   111k|            return parse_presentation_regex(begin, end, handler);
 7623|   111k|        }
 7624|   111k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   111k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   111k|            handler.on_error("Invalid type specifier in format string");
 7627|   111k|            return begin;
 7628|   111k|        }
 7629|   111k|        handler.on_type(type);
 7630|   111k|        return begin;
 7631|   111k|    };
 7632|       |
 7633|   111k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 111k, False: 0]
  |  Branch (7633:28): [True: 98.2k, False: 13.7k]
  ------------------
 7634|   111k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 98.2k, False: 0]
  |  Branch (7634:36): [True: 94.2k, False: 4.02k]
  ------------------
 7635|  94.2k|        return do_presentation();
 7636|  94.2k|    }
 7637|       |
 7638|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  17.7k|    begin = parse_align(begin, end, handler);
 7644|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  17.7k|    begin = parse_width(begin, end, handler);
 7650|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  17.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 17.7k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  17.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 4.02k, False: 13.7k]
  ------------------
 7669|  4.02k|        handler.on_localized();
 7670|  4.02k|        ++begin;
 7671|  4.02k|    }
 7672|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  17.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 17.7k, False: 0]
  |  Branch (7677:25): [True: 13.7k, False: 4.02k]
  ------------------
 7678|  13.7k|        do_presentation();
 7679|  13.7k|    }
 7680|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  17.7k|    return begin;
 7686|  17.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|   158k|{
 7258|   158k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 152k, False: 6.03k]
  |  Branch (7258:33): [True: 152k, False: 0]
  ------------------
 7259|   158k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 6.03k, False: 0]
  |  Branch (7259:33): [True: 6.03k, False: 0]
  ------------------
 7260|   158k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   107k|    auto do_presentation = [&]() -> const CharT* {
 7610|   107k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 5.67k, False: 102k]
  ------------------
 7611|  5.67k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  5.67k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  5.67k|            handler.on_character_set_string(set);
 7619|  5.67k|            return begin;
 7620|  5.67k|        }
 7621|   102k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 102k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   102k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   102k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 98.2k]
  |  |  ------------------
  ------------------
 7626|  4.02k|            handler.on_error("Invalid type specifier in format string");
 7627|  4.02k|            return begin;
 7628|  4.02k|        }
 7629|  98.2k|        handler.on_type(type);
 7630|  98.2k|        return begin;
 7631|   102k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  5.67k|{
 7448|  5.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  5.67k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  5.67k|    auto start = begin;
 7452|  5.67k|    ++begin;
 7453|       |
 7454|  5.67k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  5.67k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 5.67k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  5.67k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 5.67k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  17.0k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 17.0k, False: 0]
  ------------------
 7479|  17.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  17.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 5.67k, False: 11.3k]
  ------------------
 7484|  5.67k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  5.67k|        }
 7486|       |
 7487|  11.3k|        parse_presentation_set_literal(begin, end, handler);
 7488|  11.3k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  5.67k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7411|  11.3k|{
 7412|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  11.3k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  11.3k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  11.3k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 11.3k, False: 0]
  |  Branch (7419:25): [True: 11.3k, False: 0]
  |  Branch (7419:49): [True: 11.3k, False: 0]
  ------------------
 7420|  11.3k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 11.3k, False: 0]
  ------------------
 7421|  11.3k|        ++begin;
 7422|       |
 7423|  11.3k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  11.3k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  11.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  11.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  11.3k|        return;
 7437|  11.3k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7387|  22.7k|{
 7388|  22.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  22.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  22.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.7k]
  |  |  |  Branch (865:45): [True: 0, False: 22.7k]
  |  |  |  Branch (865:45): [True: 0, False: 22.7k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  22.7k|    const auto cp =
 7397|  22.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  22.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.7k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  22.7k|    begin += len;
 7404|  22.7k|    return cp;
 7405|  22.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  8.51k|    {
 7102|  8.51k|        m_specs.charset_string_data = fmt.data();
 7103|  8.51k|        m_specs.charset_string_size = fmt.size();
 7104|  8.51k|        on_type(presentation_type::string_set);
 7105|  8.51k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|   164k|{
 7206|   164k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 164k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 164k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 164k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 164k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 164k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 164k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 164k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 164k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 164k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 164k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 164k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 164k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 164k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 164k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 164k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 164k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 164k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 164k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   152k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 152k, False: 12.0k]
  ------------------
 7237|   152k|            return presentation_type::string;
 7238|  6.03k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 6.03k, False: 158k]
  ------------------
 7239|  6.03k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 164k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 164k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 164k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 164k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  6.03k|        default:
  ------------------
  |  Branch (7250:9): [True: 6.03k, False: 158k]
  ------------------
 7251|  6.03k|            return presentation_type::none;
 7252|   164k|    }
 7253|   164k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  17.7k|{
 7283|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  17.7k|    auto check_align = [](wchar_t ch) {
 7286|  17.7k|        switch (ch) {
 7287|  17.7k|            case L'<':
 7288|  17.7k|                return align_type::left;
 7289|  17.7k|            case L'>':
 7290|  17.7k|                return align_type::right;
 7291|  17.7k|            case L'^':
 7292|  17.7k|                return align_type::center;
 7293|  17.7k|            default:
 7294|  17.7k|                return align_type::none;
 7295|  17.7k|        }
 7296|  17.7k|    };
 7297|       |
 7298|  17.7k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  17.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  |  Branch (865:45): [True: 0, False: 17.7k]
  |  |  |  Branch (865:45): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7300|  17.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  17.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  17.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  17.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  17.7k|    const auto begin_before_fill = begin;
 7310|  17.7k|    begin += potential_fill_len;
 7311|       |
 7312|  17.7k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 17.7k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  17.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  17.7k|    const auto begin_after_fill = begin;
 7318|  17.7k|    ++begin;
 7319|       |
 7320|  17.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 17.7k, False: 0]
  ------------------
 7321|  17.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  17.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 5.67k, False: 12.0k]
  ------------------
 7326|  5.67k|            return begin_before_fill;
 7327|  5.67k|        }
 7328|  17.7k|    }
 7329|       |
 7330|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 12.0k, False: 0]
  ------------------
 7331|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 12.0k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  12.0k|        return begin_before_fill;
 7336|  12.0k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  12.0k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|  26.6k|{
 7265|  26.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|  26.6k|    else {
 7270|  26.6k|        const auto lengths =
 7271|  26.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|  26.6k|            "\3\4";
 7273|  26.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|  26.6k|        return len;
 7275|  26.6k|    }
 7276|  26.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  35.4k|    auto check_align = [](wchar_t ch) {
 7286|  35.4k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 35.4k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 35.4k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 35.4k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  35.4k|            default:
  ------------------
  |  Branch (7293:13): [True: 35.4k, False: 0]
  ------------------
 7294|  35.4k|                return align_type::none;
 7295|  35.4k|        }
 7296|  35.4k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  17.7k|{
 7348|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  17.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 17.7k, False: 0]
  |  Branch (7350:33): [True: 8.04k, False: 9.69k]
  ------------------
 7351|  8.04k|        int width = parse_simple_int(begin, end);
 7352|  8.04k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  8.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.04k, False: 0]
  |  |  ------------------
  ------------------
 7353|  8.04k|            handler.on_width(width);
 7354|  8.04k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  8.04k|    }
 7360|  17.7k|    return begin;
 7361|  17.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|  4.02k|    {
 7879|  4.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  4.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 4.02k, False: 0]
  ------------------
 7881|  4.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 4.02k, False: 0]
  ------------------
 7882|  4.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 4.02k, False: 0]
  ------------------
 7883|  4.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 4.02k, False: 0]
  ------------------
 7884|  4.02k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  4.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  4.02k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   103k|{
 9324|   103k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   103k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   103k|{
 9225|   103k|#define SCN_VISIT(Type)                                                \
 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   103k|    }                                                                  \
 9229|   103k|    else {                                                             \
 9230|   103k|        return vis(monostate_val);                                     \
 9231|   103k|    }
 9232|       |
 9233|   103k|    monostate monostate_val{};
 9234|       |
 9235|   103k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 103k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 103k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 103k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 103k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 103k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 103k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 103k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 103k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 103k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 103k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 103k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 103k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 103k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 103k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 103k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 103k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 103k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 103k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  51.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 51.9k, False: 51.9k]
  ------------------
 9273|  51.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  51.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  51.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  51.9k|    }                                                                  \
  |  | 9229|  51.9k|    else {                                                             \
  |  | 9230|  51.9k|        return vis(monostate_val);                                     \
  |  | 9231|  51.9k|    }
  ------------------
 9274|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 51.9k, False: 51.9k]
  ------------------
 9275|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   103k|    }                                                                  \
  |  | 9229|   103k|    else {                                                             \
  |  | 9230|   103k|        return vis(monostate_val);                                     \
  |  | 9231|   103k|    }
  ------------------
 9276|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 103k]
  ------------------
 9277|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   103k|    }                                                                  \
  |  | 9229|   103k|    else {                                                             \
  |  | 9230|   103k|        return vis(monostate_val);                                     \
  |  | 9231|   103k|    }
  ------------------
 9278|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 103k]
  ------------------
 9279|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   103k|    }                                                                  \
  |  | 9229|   103k|    else {                                                             \
  |  | 9230|   103k|        return vis(monostate_val);                                     \
  |  | 9231|   103k|    }
  ------------------
 9280|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 103k]
  ------------------
 9281|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   103k|    }                                                                  \
  |  | 9229|   103k|    else {                                                             \
  |  | 9230|   103k|        return vis(monostate_val);                                     \
  |  | 9231|   103k|    }
  ------------------
 9282|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 103k]
  ------------------
 9283|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   103k|    }                                                                  \
  |  | 9229|   103k|    else {                                                             \
  |  | 9230|   103k|        return vis(monostate_val);                                     \
  |  | 9231|   103k|    }
  ------------------
 9284|       |
 9285|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 103k]
  ------------------
 9286|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   103k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   103k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 103k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 103k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   103k|            SCN_CLANG_POP
 9303|   103k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  67.5k|        : m_format{format},
 6280|  67.5k|          m_next_arg_id{next_arg_id},
 6281|  67.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  67.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  67.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  67.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  67.5k|    {
 6287|  67.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  67.5k|{
 7796|  67.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  67.5k|    handler.check_args_exhausted();
 7798|  67.5k|    return handler.get_error();
 7799|  67.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  67.5k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  67.5k|    auto begin = format.data();
 7764|  67.5k|    auto it = begin;
 7765|  67.5k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   125k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 67.5k, False: 57.4k]
  ------------------
 7768|  67.5k|        const auto ch = *it++;
 7769|  67.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 67.5k, False: 0]
  ------------------
 7770|  67.5k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  67.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  67.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 10.0k, False: 57.4k]
  ------------------
 7774|  10.0k|                return;
 7775|  10.0k|            }
 7776|  67.5k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  67.5k|    }
 7787|       |
 7788|  57.4k|    handler.on_literal_text(begin, end);
 7789|  57.4k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|  57.4k|    {
 8986|  57.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  57.4k|    static_cast<    \
  |  |  935|  57.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  57.4k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  67.5k|{
 7693|  67.5k|    struct id_adapter {
 7694|  67.5k|        constexpr void operator()()
 7695|  67.5k|        {
 7696|  67.5k|            arg_id = handler.on_arg_id();
 7697|  67.5k|        }
 7698|  67.5k|        constexpr void operator()(std::size_t id)
 7699|  67.5k|        {
 7700|  67.5k|            arg_id = handler.on_arg_id(id);
 7701|  67.5k|        }
 7702|       |
 7703|  67.5k|        constexpr void on_error(const char* msg)
 7704|  67.5k|        {
 7705|  67.5k|            SCN_UNLIKELY_ATTR
 7706|  67.5k|            handler.on_error(msg);
 7707|  67.5k|        }
 7708|       |
 7709|  67.5k|        Handler& handler;
 7710|  67.5k|        std::size_t arg_id;
 7711|  67.5k|    };
 7712|       |
 7713|  67.5k|    ++begin;
 7714|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  67.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 67.5k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  67.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 67.5k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  67.5k|    else {
 7726|  67.5k|        auto adapter = id_adapter{handler, 0};
 7727|  67.5k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  67.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  67.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 67.5k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  67.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 67.5k, False: 0]
  ------------------
 7738|  67.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  67.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  67.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 63.5k]
  |  |  |  Branch (865:45): [True: 0, False: 67.5k]
  |  |  |  Branch (865:45): [True: 4.02k, False: 63.5k]
  |  |  ------------------
  ------------------
 7744|  4.02k|                handler.on_error("Unknown format specifier");
 7745|  4.02k|                return begin;
 7746|  4.02k|            }
 7747|  67.5k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  67.5k|    }
 7754|  63.5k|    return begin + 1;
 7755|  67.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  67.5k|{
 7194|  67.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  67.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 67.5k, False: 0]
  |  Branch (7195:26): [True: 0, False: 67.5k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  67.5k|    handler();
 7200|  67.5k|    return begin;
 7201|  67.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  67.5k|        {
 7696|  67.5k|            arg_id = handler.on_arg_id();
 7697|  67.5k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|  67.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  67.5k|    {
 7874|  67.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  67.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|  67.5k|{
 7609|  67.5k|    auto do_presentation = [&]() -> const CharT* {
 7610|  67.5k|        if (*begin == CharT{'['}) {
 7611|  67.5k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  67.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  67.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  67.5k|                return begin;
 7617|  67.5k|            }
 7618|  67.5k|            handler.on_character_set_string(set);
 7619|  67.5k|            return begin;
 7620|  67.5k|        }
 7621|  67.5k|        if (*begin == CharT{'/'}) {
 7622|  67.5k|            return parse_presentation_regex(begin, end, handler);
 7623|  67.5k|        }
 7624|  67.5k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  67.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  67.5k|            handler.on_error("Invalid type specifier in format string");
 7627|  67.5k|            return begin;
 7628|  67.5k|        }
 7629|  67.5k|        handler.on_type(type);
 7630|  67.5k|        return begin;
 7631|  67.5k|    };
 7632|       |
 7633|  67.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 67.5k, False: 0]
  |  Branch (7633:28): [True: 60.6k, False: 6.85k]
  ------------------
 7634|  67.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 60.6k, False: 0]
  |  Branch (7634:36): [True: 58.6k, False: 2.01k]
  ------------------
 7635|  58.6k|        return do_presentation();
 7636|  58.6k|    }
 7637|       |
 7638|  8.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  8.86k|    begin = parse_align(begin, end, handler);
 7644|  8.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  8.86k|    begin = parse_width(begin, end, handler);
 7650|  8.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  8.86k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 8.86k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  8.86k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 2.01k, False: 6.85k]
  ------------------
 7669|  2.01k|        handler.on_localized();
 7670|  2.01k|        ++begin;
 7671|  2.01k|    }
 7672|  8.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  8.86k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 8.86k, False: 0]
  |  Branch (7677:25): [True: 6.85k, False: 2.01k]
  ------------------
 7678|  6.85k|        do_presentation();
 7679|  6.85k|    }
 7680|  8.86k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  8.86k|    return begin;
 7686|  8.86k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|  65.5k|    auto do_presentation = [&]() -> const CharT* {
 7610|  65.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 2.83k, False: 62.6k]
  ------------------
 7611|  2.83k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  2.83k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  2.83k|            handler.on_character_set_string(set);
 7619|  2.83k|            return begin;
 7620|  2.83k|        }
 7621|  62.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 62.6k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  62.6k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  62.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 60.6k]
  |  |  ------------------
  ------------------
 7626|  2.01k|            handler.on_error("Invalid type specifier in format string");
 7627|  2.01k|            return begin;
 7628|  2.01k|        }
 7629|  60.6k|        handler.on_type(type);
 7630|  60.6k|        return begin;
 7631|  62.6k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  2.83k|{
 7448|  2.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  2.83k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  2.83k|    auto start = begin;
 7452|  2.83k|    ++begin;
 7453|       |
 7454|  2.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  2.83k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 2.83k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  2.83k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 2.83k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  8.51k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 8.51k, False: 0]
  ------------------
 7479|  8.51k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  8.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.51k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  8.51k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 2.83k, False: 5.67k]
  ------------------
 7484|  2.83k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  2.83k|        }
 7486|       |
 7487|  5.67k|        parse_presentation_set_literal(begin, end, handler);
 7488|  5.67k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  2.83k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7411|  5.67k|{
 7412|  5.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  5.67k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  5.67k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  5.67k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 5.67k, False: 0]
  |  Branch (7419:25): [True: 5.67k, False: 0]
  |  Branch (7419:49): [True: 5.67k, False: 0]
  ------------------
 7420|  5.67k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 5.67k, False: 0]
  ------------------
 7421|  5.67k|        ++begin;
 7422|       |
 7423|  5.67k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  5.67k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  5.67k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  5.67k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  5.67k|        return;
 7437|  5.67k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7387|  11.3k|{
 7388|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  11.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  11.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  |  Branch (865:45): [True: 0, False: 11.3k]
  |  |  |  Branch (865:45): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  11.3k|    const auto cp =
 7397|  11.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  11.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  11.3k|    begin += len;
 7404|  11.3k|    return cp;
 7405|  11.3k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|  8.86k|{
 7283|  8.86k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  8.86k|    auto check_align = [](wchar_t ch) {
 7286|  8.86k|        switch (ch) {
 7287|  8.86k|            case L'<':
 7288|  8.86k|                return align_type::left;
 7289|  8.86k|            case L'>':
 7290|  8.86k|                return align_type::right;
 7291|  8.86k|            case L'^':
 7292|  8.86k|                return align_type::center;
 7293|  8.86k|            default:
 7294|  8.86k|                return align_type::none;
 7295|  8.86k|        }
 7296|  8.86k|    };
 7297|       |
 7298|  8.86k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  8.86k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  |  Branch (865:45): [True: 0, False: 8.86k]
  |  |  |  Branch (865:45): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7300|  8.86k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  8.86k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  8.86k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  8.86k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  8.86k|    const auto begin_before_fill = begin;
 7310|  8.86k|    begin += potential_fill_len;
 7311|       |
 7312|  8.86k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 8.86k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  8.86k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  8.86k|    const auto begin_after_fill = begin;
 7318|  8.86k|    ++begin;
 7319|       |
 7320|  8.86k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 8.86k, False: 0]
  ------------------
 7321|  8.86k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  8.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  8.86k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 2.83k, False: 6.03k]
  ------------------
 7326|  2.83k|            return begin_before_fill;
 7327|  2.83k|        }
 7328|  8.86k|    }
 7329|       |
 7330|  6.03k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 6.03k, False: 0]
  ------------------
 7331|  6.03k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 6.03k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  6.03k|        return begin_before_fill;
 7336|  6.03k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  6.03k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  17.7k|    auto check_align = [](wchar_t ch) {
 7286|  17.7k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 17.7k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 17.7k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 17.7k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  17.7k|            default:
  ------------------
  |  Branch (7293:13): [True: 17.7k, False: 0]
  ------------------
 7294|  17.7k|                return align_type::none;
 7295|  17.7k|        }
 7296|  17.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|  8.86k|{
 7348|  8.86k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  8.86k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 8.86k, False: 0]
  |  Branch (7350:33): [True: 4.02k, False: 4.84k]
  ------------------
 7351|  4.02k|        int width = parse_simple_int(begin, end);
 7352|  4.02k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  4.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.02k, False: 0]
  |  |  ------------------
  ------------------
 7353|  4.02k|            handler.on_width(width);
 7354|  4.02k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  4.02k|    }
 7360|  8.86k|    return begin;
 7361|  8.86k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|  2.01k|    {
 7879|  2.01k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  2.01k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 2.01k, False: 0]
  ------------------
 7881|  2.01k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 2.01k, False: 0]
  ------------------
 7882|  2.01k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 2.01k, False: 0]
  ------------------
 7883|  2.01k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 2.01k, False: 0]
  ------------------
 7884|  2.01k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  2.01k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  2.01k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|  63.5k|{
 9324|  63.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  63.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  63.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  63.5k|{
 9225|  63.5k|#define SCN_VISIT(Type)                                                \
 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  63.5k|    }                                                                  \
 9229|  63.5k|    else {                                                             \
 9230|  63.5k|        return vis(monostate_val);                                     \
 9231|  63.5k|    }
 9232|       |
 9233|  63.5k|    monostate monostate_val{};
 9234|       |
 9235|  63.5k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 63.5k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 63.5k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 63.5k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 63.5k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 63.5k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 63.5k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 63.5k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 63.5k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 63.5k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 63.5k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 63.5k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 63.5k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 63.5k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 63.5k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 63.5k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 63.5k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 63.5k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 63.5k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 63.5k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  63.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 63.5k, False: 0]
  ------------------
 9275|  63.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  63.5k|    }                                                                  \
  |  | 9229|  63.5k|    else {                                                             \
  |  | 9230|  63.5k|        return vis(monostate_val);                                     \
  |  | 9231|  63.5k|    }
  ------------------
 9276|  63.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 63.5k]
  ------------------
 9277|  63.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  63.5k|    }                                                                  \
  |  | 9229|  63.5k|    else {                                                             \
  |  | 9230|  63.5k|        return vis(monostate_val);                                     \
  |  | 9231|  63.5k|    }
  ------------------
 9278|  63.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 63.5k]
  ------------------
 9279|  63.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  63.5k|    }                                                                  \
  |  | 9229|  63.5k|    else {                                                             \
  |  | 9230|  63.5k|        return vis(monostate_val);                                     \
  |  | 9231|  63.5k|    }
  ------------------
 9280|  63.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 63.5k]
  ------------------
 9281|  63.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  63.5k|    }                                                                  \
  |  | 9229|  63.5k|    else {                                                             \
  |  | 9230|  63.5k|        return vis(monostate_val);                                     \
  |  | 9231|  63.5k|    }
  ------------------
 9282|  63.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 63.5k]
  ------------------
 9283|  63.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  63.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  63.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  63.5k|    }                                                                  \
  |  | 9229|  63.5k|    else {                                                             \
  |  | 9230|  63.5k|        return vis(monostate_val);                                     \
  |  | 9231|  63.5k|    }
  ------------------
 9284|       |
 9285|  63.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 63.5k]
  ------------------
 9286|  63.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  63.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  63.5k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 63.5k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 63.5k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  63.5k|            SCN_CLANG_POP
 9303|  63.5k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  13.0k|    {
 4352|  13.0k|        return sync(0);
 4353|  13.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  2.08M|    {
 6182|  2.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  2.08M|        return static_cast<std::size_t>(m_desc &
 6187|  2.08M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  2.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  4.16M|    {
 6208|  4.16M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  4.16M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  2.08M|    {
 6150|  2.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  2.08M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  2.08M|        const auto t = type(id);
 6162|  2.08M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  2.08M|        basic_scan_arg<Context> arg;
 6167|  2.08M|        arg.m_type = t;
 6168|  2.08M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 2.08M, False: 0]
  ------------------
 6169|  2.08M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  2.08M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  2.08M|        return arg;
 6175|  2.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  2.08M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  2.08M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  2.08M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  2.08M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  2.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  2.08M|    {
 6212|  2.08M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  2.08M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  3.63M|    {
 5966|  3.63M|        return m_type != detail::arg_type::none_type;
 5967|  3.63M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  1.01M|{
 9324|  1.01M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  1.01M|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  1.01M|{
 9225|  1.01M|#define SCN_VISIT(Type)                                                \
 9226|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  1.01M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  1.01M|    }                                                                  \
 9229|  1.01M|    else {                                                             \
 9230|  1.01M|        return vis(monostate_val);                                     \
 9231|  1.01M|    }
 9232|       |
 9233|  1.01M|    monostate monostate_val{};
 9234|       |
 9235|  1.01M|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 1.01M]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 1.01M]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 1.01M]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 1.01M]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 1.01M]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 1.01M]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 1.01M]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 1.01M]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 1.01M]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 1.01M]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 1.01M]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 1.01M]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 1.01M]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 1.01M]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 1.01M]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 1.01M]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 1.01M]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 1.01M]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 1.01M]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 1.01M]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   509k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 509k, False: 509k]
  ------------------
 9277|   509k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   509k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   509k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   509k|    }                                                                  \
  |  | 9229|   509k|    else {                                                             \
  |  | 9230|   509k|        return vis(monostate_val);                                     \
  |  | 9231|   509k|    }
  ------------------
 9278|  1.01M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 509k, False: 509k]
  ------------------
 9279|  1.01M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.01M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.01M|    }                                                                  \
  |  | 9229|  1.01M|    else {                                                             \
  |  | 9230|  1.01M|        return vis(monostate_val);                                     \
  |  | 9231|  1.01M|    }
  ------------------
 9280|  1.01M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 1.01M]
  ------------------
 9281|  1.01M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.01M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.01M|    }                                                                  \
  |  | 9229|  1.01M|    else {                                                             \
  |  | 9230|  1.01M|        return vis(monostate_val);                                     \
  |  | 9231|  1.01M|    }
  ------------------
 9282|  1.01M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 1.01M]
  ------------------
 9283|  1.01M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  1.01M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  1.01M|    }                                                                  \
  |  | 9229|  1.01M|    else {                                                             \
  |  | 9230|  1.01M|        return vis(monostate_val);                                     \
  |  | 9231|  1.01M|    }
  ------------------
 9284|       |
 9285|  1.01M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 1.01M]
  ------------------
 9286|  1.01M|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  1.01M|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  1.01M|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 1.01M]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 1.01M]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  1.01M|            SCN_CLANG_POP
 9303|  1.01M|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.70M|{
 6011|  4.70M|    return arg.m_type;
 6012|  4.70M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.56M|{
 6023|  2.56M|    return arg.m_value;
 6024|  2.56M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   355k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   355k|    {
 8949|   355k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   711k|        : m_format{format},
 6280|   711k|          m_next_arg_id{next_arg_id},
 6281|   711k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   711k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   711k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   711k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   711k|    {
 6287|   711k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   711k|    {
 3075|   711k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   711k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   711k|    {
 3041|   711k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   711k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   711k|{
 7796|   711k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   711k|    handler.check_args_exhausted();
 7798|   711k|    return handler.get_error();
 7799|   711k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   711k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   711k|    auto begin = format.data();
 7764|   711k|    auto it = begin;
 7765|   711k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.38M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 711k, False: 671k]
  ------------------
 7768|   711k|        const auto ch = *it++;
 7769|   711k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 711k, False: 0]
  ------------------
 7770|   711k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   711k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   711k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 40.2k, False: 671k]
  ------------------
 7774|  40.2k|                return;
 7775|  40.2k|            }
 7776|   711k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   711k|    }
 7787|       |
 7788|   671k|    handler.on_literal_text(begin, end);
 7789|   671k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   711k|{
 7693|   711k|    struct id_adapter {
 7694|   711k|        constexpr void operator()()
 7695|   711k|        {
 7696|   711k|            arg_id = handler.on_arg_id();
 7697|   711k|        }
 7698|   711k|        constexpr void operator()(std::size_t id)
 7699|   711k|        {
 7700|   711k|            arg_id = handler.on_arg_id(id);
 7701|   711k|        }
 7702|       |
 7703|   711k|        constexpr void on_error(const char* msg)
 7704|   711k|        {
 7705|   711k|            SCN_UNLIKELY_ATTR
 7706|   711k|            handler.on_error(msg);
 7707|   711k|        }
 7708|       |
 7709|   711k|        Handler& handler;
 7710|   711k|        std::size_t arg_id;
 7711|   711k|    };
 7712|       |
 7713|   711k|    ++begin;
 7714|   711k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 711k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   711k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 711k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   711k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 711k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   711k|    else {
 7726|   711k|        auto adapter = id_adapter{handler, 0};
 7727|   711k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   711k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 711k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   711k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 711k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   711k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 711k, False: 0]
  ------------------
 7738|   711k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 711k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   711k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   711k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 695k]
  |  |  |  Branch (865:45): [True: 0, False: 711k]
  |  |  |  Branch (865:45): [True: 16.0k, False: 695k]
  |  |  ------------------
  ------------------
 7744|  16.0k|                handler.on_error("Unknown format specifier");
 7745|  16.0k|                return begin;
 7746|  16.0k|            }
 7747|   711k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   711k|    }
 7754|   695k|    return begin + 1;
 7755|   711k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|  1.06M|    {
 8847|  1.06M|        return m_args.get(id);
 8848|  1.06M|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|  1.06M|    {
 6315|  1.06M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|  1.06M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  1.06M|        do_check_arg_id(id);
 6323|  1.06M|        return id;
 6324|  1.06M|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|  1.06M|{
 6809|  1.06M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  1.06M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  1.06M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   711k|{
 7194|   711k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   711k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 711k, False: 0]
  |  Branch (7195:26): [True: 0, False: 711k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   711k|    handler();
 7200|   711k|    return begin;
 7201|   711k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7142|  24.1k|{
 7143|  24.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  24.1k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  24.1k|    unsigned long long value = 0;
 7147|  48.2k|    do {
 7148|  48.2k|        value *= 10;
 7149|  48.2k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  48.2k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 48.2k]
  ------------------
 7151|  48.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  48.2k|        ++begin;
 7155|  48.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 48.2k, False: 0]
  |  Branch (7155:30): [True: 48.2k, False: 0]
  |  Branch (7155:47): [True: 24.1k, False: 24.1k]
  ------------------
 7156|  24.1k|    return static_cast<int>(value);
 7157|  24.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   711k|        {
 7696|   711k|            arg_id = handler.on_arg_id();
 7697|   711k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|  1.04M|    {
 6310|  1.04M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  1.04M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   864k|{
 4691|   864k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 864k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   864k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   864k|                            ranges::default_sentinel};
 4697|   864k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   864k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   864k|    {
 4455|   864k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   864k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   864k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  2.10M|    {
 6299|  2.10M|        return m_format.data();
 6300|  2.10M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   711k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   711k|    {
 7874|   711k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   711k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   711k|{
 7609|   711k|    auto do_presentation = [&]() -> const CharT* {
 7610|   711k|        if (*begin == CharT{'['}) {
 7611|   711k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   711k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   711k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   711k|                return begin;
 7617|   711k|            }
 7618|   711k|            handler.on_character_set_string(set);
 7619|   711k|            return begin;
 7620|   711k|        }
 7621|   711k|        if (*begin == CharT{'/'}) {
 7622|   711k|            return parse_presentation_regex(begin, end, handler);
 7623|   711k|        }
 7624|   711k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   711k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   711k|            handler.on_error("Invalid type specifier in format string");
 7627|   711k|            return begin;
 7628|   711k|        }
 7629|   711k|        handler.on_type(type);
 7630|   711k|        return begin;
 7631|   711k|    };
 7632|       |
 7633|   711k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 711k, False: 0]
  |  Branch (7633:28): [True: 686k, False: 24.4k]
  ------------------
 7634|   711k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 686k, False: 0]
  |  Branch (7634:36): [True: 678k, False: 8.04k]
  ------------------
 7635|   678k|        return do_presentation();
 7636|   678k|    }
 7637|       |
 7638|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  32.5k|    begin = parse_align(begin, end, handler);
 7644|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  32.5k|    begin = parse_width(begin, end, handler);
 7650|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  32.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 32.5k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  32.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 8.04k, False: 24.4k]
  ------------------
 7669|  8.04k|        handler.on_localized();
 7670|  8.04k|        ++begin;
 7671|  8.04k|    }
 7672|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  32.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 32.5k, False: 0]
  |  Branch (7677:25): [True: 24.4k, False: 8.04k]
  ------------------
 7678|  24.4k|        do_presentation();
 7679|  24.4k|    }
 7680|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  32.5k|    return begin;
 7686|  32.5k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|  1.03M|{
 7258|  1.03M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 1.01M, False: 12.0k]
  |  Branch (7258:33): [True: 1.01M, False: 0]
  ------------------
 7259|  1.03M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 12.0k, False: 0]
  |  Branch (7259:33): [True: 12.0k, False: 0]
  ------------------
 7260|  1.03M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   703k|    auto do_presentation = [&]() -> const CharT* {
 7610|   703k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 8.40k, False: 694k]
  ------------------
 7611|  8.40k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  8.40k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  8.40k|            handler.on_character_set_string(set);
 7619|  8.40k|            return begin;
 7620|  8.40k|        }
 7621|   694k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 694k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   694k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   694k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.04k, False: 686k]
  |  |  ------------------
  ------------------
 7626|  8.04k|            handler.on_error("Invalid type specifier in format string");
 7627|  8.04k|            return begin;
 7628|  8.04k|        }
 7629|   686k|        handler.on_type(type);
 7630|   686k|        return begin;
 7631|   694k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  8.40k|{
 7448|  8.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  8.40k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  8.40k|    auto start = begin;
 7452|  8.40k|    ++begin;
 7453|       |
 7454|  8.40k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  8.40k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 8.40k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  8.40k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 8.40k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  25.2k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 25.2k, False: 0]
  ------------------
 7479|  25.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  25.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 8.40k, False: 16.8k]
  ------------------
 7484|  8.40k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  8.40k|        }
 7486|       |
 7487|  16.8k|        parse_presentation_set_literal(begin, end, handler);
 7488|  16.8k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  8.40k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7411|  16.8k|{
 7412|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  16.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  16.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  16.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 16.8k, False: 0]
  |  Branch (7419:25): [True: 16.8k, False: 0]
  |  Branch (7419:49): [True: 16.8k, False: 0]
  ------------------
 7420|  16.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 16.8k, False: 0]
  ------------------
 7421|  16.8k|        ++begin;
 7422|       |
 7423|  16.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  16.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  16.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  16.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  16.8k|        return;
 7437|  16.8k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7387|  33.6k|{
 7388|  33.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  33.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  33.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 33.6k]
  |  |  |  Branch (865:45): [True: 0, False: 33.6k]
  |  |  |  Branch (865:45): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  33.6k|    const auto cp =
 7397|  33.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  33.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  33.6k|    begin += len;
 7404|  33.6k|    return cp;
 7405|  33.6k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  12.6k|    {
 7102|  12.6k|        m_specs.charset_string_data = fmt.data();
 7103|  12.6k|        m_specs.charset_string_size = fmt.size();
 7104|  12.6k|        on_type(presentation_type::string_set);
 7105|  12.6k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|  1.04M|{
 7206|  1.04M|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.04M]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 1.04M]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 1.04M]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 1.04M]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 1.04M]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.04M]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.04M]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.04M]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 1.04M]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.04M]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 1.04M]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.04M]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 1.04M]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.04M]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 1.04M]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.04M]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 1.04M]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 1.04M]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|  1.01M|        case 's':
  ------------------
  |  Branch (7236:9): [True: 1.01M, False: 24.1k]
  ------------------
 7237|  1.01M|            return presentation_type::string;
 7238|  12.0k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 12.0k, False: 1.03M]
  ------------------
 7239|  12.0k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 1.04M]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.04M]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 1.04M]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 1.04M]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  12.0k|        default:
  ------------------
  |  Branch (7250:9): [True: 12.0k, False: 1.03M]
  ------------------
 7251|  12.0k|            return presentation_type::none;
 7252|  1.04M|    }
 7253|  1.04M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  32.5k|{
 7283|  32.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  32.5k|    auto check_align = [](wchar_t ch) {
 7286|  32.5k|        switch (ch) {
 7287|  32.5k|            case L'<':
 7288|  32.5k|                return align_type::left;
 7289|  32.5k|            case L'>':
 7290|  32.5k|                return align_type::right;
 7291|  32.5k|            case L'^':
 7292|  32.5k|                return align_type::center;
 7293|  32.5k|            default:
 7294|  32.5k|                return align_type::none;
 7295|  32.5k|        }
 7296|  32.5k|    };
 7297|       |
 7298|  32.5k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  32.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  65.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  |  Branch (865:45): [True: 0, False: 32.5k]
  |  |  |  Branch (865:45): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7300|  32.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  32.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  32.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  32.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  32.5k|    const auto begin_before_fill = begin;
 7310|  32.5k|    begin += potential_fill_len;
 7311|       |
 7312|  32.5k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 32.5k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  32.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  32.5k|    const auto begin_after_fill = begin;
 7318|  32.5k|    ++begin;
 7319|       |
 7320|  32.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 32.5k, False: 0]
  ------------------
 7321|  32.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.5k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  32.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 8.40k, False: 24.1k]
  ------------------
 7326|  8.40k|            return begin_before_fill;
 7327|  8.40k|        }
 7328|  32.5k|    }
 7329|       |
 7330|  24.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 24.1k, False: 0]
  ------------------
 7331|  24.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 24.1k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  24.1k|        return begin_before_fill;
 7336|  24.1k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  24.1k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|  48.7k|{
 7265|  48.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  48.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|  48.7k|    if constexpr (sizeof(CharT) != 1) {
 7267|  48.7k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|  48.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  65.0k|    auto check_align = [](wchar_t ch) {
 7286|  65.0k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 65.0k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 65.0k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 65.0k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  65.0k|            default:
  ------------------
  |  Branch (7293:13): [True: 65.0k, False: 0]
  ------------------
 7294|  65.0k|                return align_type::none;
 7295|  65.0k|        }
 7296|  65.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  32.5k|{
 7348|  32.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  32.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 32.5k, False: 0]
  |  Branch (7350:33): [True: 16.0k, False: 16.4k]
  ------------------
 7351|  16.0k|        int width = parse_simple_int(begin, end);
 7352|  16.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  16.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 7353|  16.0k|            handler.on_width(width);
 7354|  16.0k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  16.0k|    }
 7360|  32.5k|    return begin;
 7361|  32.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|  8.04k|    {
 7879|  8.04k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  8.04k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 8.04k, False: 0]
  ------------------
 7881|  8.04k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 8.04k, False: 0]
  ------------------
 7882|  8.04k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 8.04k, False: 0]
  ------------------
 7883|  8.04k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 8.04k, False: 0]
  ------------------
 7884|  8.04k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  8.04k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  8.04k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   695k|{
 9324|   695k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   695k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   695k|{
 9225|   695k|#define SCN_VISIT(Type)                                                \
 9226|   695k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   695k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   695k|    }                                                                  \
 9229|   695k|    else {                                                             \
 9230|   695k|        return vis(monostate_val);                                     \
 9231|   695k|    }
 9232|       |
 9233|   695k|    monostate monostate_val{};
 9234|       |
 9235|   695k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 695k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 695k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 695k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 695k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 695k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 695k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 695k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 695k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 695k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 695k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 695k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 695k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 695k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 695k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 695k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 695k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 695k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 695k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 695k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 695k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   347k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 347k, False: 347k]
  ------------------
 9277|   347k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   347k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   347k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   347k|    }                                                                  \
  |  | 9229|   347k|    else {                                                             \
  |  | 9230|   347k|        return vis(monostate_val);                                     \
  |  | 9231|   347k|    }
  ------------------
 9278|   695k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 347k, False: 347k]
  ------------------
 9279|   695k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   695k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   695k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   695k|    }                                                                  \
  |  | 9229|   695k|    else {                                                             \
  |  | 9230|   695k|        return vis(monostate_val);                                     \
  |  | 9231|   695k|    }
  ------------------
 9280|   695k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 695k]
  ------------------
 9281|   695k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   695k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   695k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   695k|    }                                                                  \
  |  | 9229|   695k|    else {                                                             \
  |  | 9230|   695k|        return vis(monostate_val);                                     \
  |  | 9231|   695k|    }
  ------------------
 9282|   695k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 695k]
  ------------------
 9283|   695k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   695k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   695k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   695k|    }                                                                  \
  |  | 9229|   695k|    else {                                                             \
  |  | 9230|   695k|        return vis(monostate_val);                                     \
  |  | 9231|   695k|    }
  ------------------
 9284|       |
 9285|   695k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 695k]
  ------------------
 9286|   695k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   695k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   695k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 695k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 695k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   695k|            SCN_CLANG_POP
 9303|   695k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   509k|{
 9324|   509k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   509k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   509k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   509k|{
 9225|   509k|#define SCN_VISIT(Type)                                                \
 9226|   509k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   509k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   509k|    }                                                                  \
 9229|   509k|    else {                                                             \
 9230|   509k|        return vis(monostate_val);                                     \
 9231|   509k|    }
 9232|       |
 9233|   509k|    monostate monostate_val{};
 9234|       |
 9235|   509k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 509k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 509k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 509k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 509k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 509k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 509k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 509k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 509k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 509k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 509k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 509k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 509k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 509k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 509k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 509k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 509k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 509k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 509k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 509k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 509k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 509k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   509k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 509k, False: 0]
  ------------------
 9279|   509k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   509k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   509k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   509k|    }                                                                  \
  |  | 9229|   509k|    else {                                                             \
  |  | 9230|   509k|        return vis(monostate_val);                                     \
  |  | 9231|   509k|    }
  ------------------
 9280|   509k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 509k]
  ------------------
 9281|   509k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   509k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   509k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   509k|    }                                                                  \
  |  | 9229|   509k|    else {                                                             \
  |  | 9230|   509k|        return vis(monostate_val);                                     \
  |  | 9231|   509k|    }
  ------------------
 9282|   509k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 509k]
  ------------------
 9283|   509k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   509k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   509k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   509k|    }                                                                  \
  |  | 9229|   509k|    else {                                                             \
  |  | 9230|   509k|        return vis(monostate_val);                                     \
  |  | 9231|   509k|    }
  ------------------
 9284|       |
 9285|   509k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 509k]
  ------------------
 9286|   509k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   509k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   509k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 509k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 509k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   509k|            SCN_CLANG_POP
 9303|   509k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   355k|        : m_format{format},
 6280|   355k|          m_next_arg_id{next_arg_id},
 6281|   355k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   355k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   355k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   355k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   355k|    {
 6287|   355k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   355k|{
 7796|   355k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   355k|    handler.check_args_exhausted();
 7798|   355k|    return handler.get_error();
 7799|   355k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   355k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   355k|    auto begin = format.data();
 7764|   355k|    auto it = begin;
 7765|   355k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   691k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 355k, False: 335k]
  ------------------
 7768|   355k|        const auto ch = *it++;
 7769|   355k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 355k, False: 0]
  ------------------
 7770|   355k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   355k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   355k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 20.1k, False: 335k]
  ------------------
 7774|  20.1k|                return;
 7775|  20.1k|            }
 7776|   355k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   355k|    }
 7787|       |
 7788|   335k|    handler.on_literal_text(begin, end);
 7789|   335k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   335k|    {
 8986|   335k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   335k|    static_cast<    \
  |  |  935|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   335k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   355k|{
 7693|   355k|    struct id_adapter {
 7694|   355k|        constexpr void operator()()
 7695|   355k|        {
 7696|   355k|            arg_id = handler.on_arg_id();
 7697|   355k|        }
 7698|   355k|        constexpr void operator()(std::size_t id)
 7699|   355k|        {
 7700|   355k|            arg_id = handler.on_arg_id(id);
 7701|   355k|        }
 7702|       |
 7703|   355k|        constexpr void on_error(const char* msg)
 7704|   355k|        {
 7705|   355k|            SCN_UNLIKELY_ATTR
 7706|   355k|            handler.on_error(msg);
 7707|   355k|        }
 7708|       |
 7709|   355k|        Handler& handler;
 7710|   355k|        std::size_t arg_id;
 7711|   355k|    };
 7712|       |
 7713|   355k|    ++begin;
 7714|   355k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   355k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 355k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   355k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 355k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   355k|    else {
 7726|   355k|        auto adapter = id_adapter{handler, 0};
 7727|   355k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   355k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   355k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 355k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   355k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 355k, False: 0]
  ------------------
 7738|   355k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   355k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   355k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.04k, False: 347k]
  |  |  |  Branch (865:45): [True: 0, False: 355k]
  |  |  |  Branch (865:45): [True: 8.04k, False: 347k]
  |  |  ------------------
  ------------------
 7744|  8.04k|                handler.on_error("Unknown format specifier");
 7745|  8.04k|                return begin;
 7746|  8.04k|            }
 7747|   355k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   355k|    }
 7754|   347k|    return begin + 1;
 7755|   355k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   355k|{
 7194|   355k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   355k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 355k, False: 0]
  |  Branch (7195:26): [True: 0, False: 355k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   355k|    handler();
 7200|   355k|    return begin;
 7201|   355k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   355k|        {
 7696|   355k|            arg_id = handler.on_arg_id();
 7697|   355k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   355k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   355k|    {
 7874|   355k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   355k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   355k|{
 7609|   355k|    auto do_presentation = [&]() -> const CharT* {
 7610|   355k|        if (*begin == CharT{'['}) {
 7611|   355k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   355k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   355k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   355k|                return begin;
 7617|   355k|            }
 7618|   355k|            handler.on_character_set_string(set);
 7619|   355k|            return begin;
 7620|   355k|        }
 7621|   355k|        if (*begin == CharT{'/'}) {
 7622|   355k|            return parse_presentation_regex(begin, end, handler);
 7623|   355k|        }
 7624|   355k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   355k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   355k|            handler.on_error("Invalid type specifier in format string");
 7627|   355k|            return begin;
 7628|   355k|        }
 7629|   355k|        handler.on_type(type);
 7630|   355k|        return begin;
 7631|   355k|    };
 7632|       |
 7633|   355k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 355k, False: 0]
  |  Branch (7633:28): [True: 343k, False: 12.2k]
  ------------------
 7634|   355k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 343k, False: 0]
  |  Branch (7634:36): [True: 339k, False: 4.02k]
  ------------------
 7635|   339k|        return do_presentation();
 7636|   339k|    }
 7637|       |
 7638|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  16.2k|    begin = parse_align(begin, end, handler);
 7644|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  16.2k|    begin = parse_width(begin, end, handler);
 7650|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  16.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 16.2k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  16.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 4.02k, False: 12.2k]
  ------------------
 7669|  4.02k|        handler.on_localized();
 7670|  4.02k|        ++begin;
 7671|  4.02k|    }
 7672|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  16.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 16.2k, False: 0]
  |  Branch (7677:25): [True: 12.2k, False: 4.02k]
  ------------------
 7678|  12.2k|        do_presentation();
 7679|  12.2k|    }
 7680|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  16.2k|    return begin;
 7686|  16.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   351k|    auto do_presentation = [&]() -> const CharT* {
 7610|   351k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 4.20k, False: 347k]
  ------------------
 7611|  4.20k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  4.20k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  4.20k|            handler.on_character_set_string(set);
 7619|  4.20k|            return begin;
 7620|  4.20k|        }
 7621|   347k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 347k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   347k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   347k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 343k]
  |  |  ------------------
  ------------------
 7626|  4.02k|            handler.on_error("Invalid type specifier in format string");
 7627|  4.02k|            return begin;
 7628|  4.02k|        }
 7629|   343k|        handler.on_type(type);
 7630|   343k|        return begin;
 7631|   347k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  4.20k|{
 7448|  4.20k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  4.20k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  4.20k|    auto start = begin;
 7452|  4.20k|    ++begin;
 7453|       |
 7454|  4.20k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  4.20k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 4.20k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  4.20k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 4.20k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  12.6k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 12.6k, False: 0]
  ------------------
 7479|  12.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  12.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 4.20k, False: 8.40k]
  ------------------
 7484|  4.20k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  4.20k|        }
 7486|       |
 7487|  8.40k|        parse_presentation_set_literal(begin, end, handler);
 7488|  8.40k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  4.20k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7411|  8.40k|{
 7412|  8.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  8.40k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  8.40k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  8.40k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 8.40k, False: 0]
  |  Branch (7419:25): [True: 8.40k, False: 0]
  |  Branch (7419:49): [True: 8.40k, False: 0]
  ------------------
 7420|  8.40k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 8.40k, False: 0]
  ------------------
 7421|  8.40k|        ++begin;
 7422|       |
 7423|  8.40k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  8.40k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  8.40k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  8.40k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  8.40k|        return;
 7437|  8.40k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7387|  16.8k|{
 7388|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  16.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  16.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  Branch (865:45): [True: 0, False: 16.8k]
  |  |  |  Branch (865:45): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  16.8k|    const auto cp =
 7397|  16.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  16.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  16.8k|    begin += len;
 7404|  16.8k|    return cp;
 7405|  16.8k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|  16.2k|{
 7283|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  16.2k|    auto check_align = [](wchar_t ch) {
 7286|  16.2k|        switch (ch) {
 7287|  16.2k|            case L'<':
 7288|  16.2k|                return align_type::left;
 7289|  16.2k|            case L'>':
 7290|  16.2k|                return align_type::right;
 7291|  16.2k|            case L'^':
 7292|  16.2k|                return align_type::center;
 7293|  16.2k|            default:
 7294|  16.2k|                return align_type::none;
 7295|  16.2k|        }
 7296|  16.2k|    };
 7297|       |
 7298|  16.2k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  16.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  |  Branch (865:45): [True: 0, False: 16.2k]
  |  |  |  Branch (865:45): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7300|  16.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  16.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  16.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  16.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  16.2k|    const auto begin_before_fill = begin;
 7310|  16.2k|    begin += potential_fill_len;
 7311|       |
 7312|  16.2k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 16.2k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  16.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  16.2k|    const auto begin_after_fill = begin;
 7318|  16.2k|    ++begin;
 7319|       |
 7320|  16.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 16.2k, False: 0]
  ------------------
 7321|  16.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  16.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 4.20k, False: 12.0k]
  ------------------
 7326|  4.20k|            return begin_before_fill;
 7327|  4.20k|        }
 7328|  16.2k|    }
 7329|       |
 7330|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 12.0k, False: 0]
  ------------------
 7331|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 12.0k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  12.0k|        return begin_before_fill;
 7336|  12.0k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  12.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  32.5k|    auto check_align = [](wchar_t ch) {
 7286|  32.5k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 32.5k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 32.5k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 32.5k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  32.5k|            default:
  ------------------
  |  Branch (7293:13): [True: 32.5k, False: 0]
  ------------------
 7294|  32.5k|                return align_type::none;
 7295|  32.5k|        }
 7296|  32.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|  16.2k|{
 7348|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  16.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 16.2k, False: 0]
  |  Branch (7350:33): [True: 8.04k, False: 8.22k]
  ------------------
 7351|  8.04k|        int width = parse_simple_int(begin, end);
 7352|  8.04k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  8.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.04k, False: 0]
  |  |  ------------------
  ------------------
 7353|  8.04k|            handler.on_width(width);
 7354|  8.04k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  8.04k|    }
 7360|  16.2k|    return begin;
 7361|  16.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|  4.02k|    {
 7879|  4.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  4.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 4.02k, False: 0]
  ------------------
 7881|  4.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 4.02k, False: 0]
  ------------------
 7882|  4.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 4.02k, False: 0]
  ------------------
 7883|  4.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 4.02k, False: 0]
  ------------------
 7884|  4.02k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  4.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  4.02k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   347k|{
 9324|   347k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   347k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   347k|{
 9225|   347k|#define SCN_VISIT(Type)                                                \
 9226|   347k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   347k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   347k|    }                                                                  \
 9229|   347k|    else {                                                             \
 9230|   347k|        return vis(monostate_val);                                     \
 9231|   347k|    }
 9232|       |
 9233|   347k|    monostate monostate_val{};
 9234|       |
 9235|   347k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 347k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 347k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 347k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 347k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 347k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 347k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 347k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 347k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 347k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 347k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 347k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 347k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 347k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 347k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 347k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 347k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 347k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 347k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 347k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 347k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 347k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   347k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 347k, False: 0]
  ------------------
 9279|   347k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   347k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   347k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   347k|    }                                                                  \
  |  | 9229|   347k|    else {                                                             \
  |  | 9230|   347k|        return vis(monostate_val);                                     \
  |  | 9231|   347k|    }
  ------------------
 9280|   347k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 347k]
  ------------------
 9281|   347k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   347k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   347k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   347k|    }                                                                  \
  |  | 9229|   347k|    else {                                                             \
  |  | 9230|   347k|        return vis(monostate_val);                                     \
  |  | 9231|   347k|    }
  ------------------
 9282|   347k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 347k]
  ------------------
 9283|   347k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   347k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   347k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   347k|    }                                                                  \
  |  | 9229|   347k|    else {                                                             \
  |  | 9230|   347k|        return vis(monostate_val);                                     \
  |  | 9231|   347k|    }
  ------------------
 9284|       |
 9285|   347k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 347k]
  ------------------
 9286|   347k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   347k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   347k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 347k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 347k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   347k|            SCN_CLANG_POP
 9303|   347k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  26.1k|    {
 4352|  26.1k|        return sync(0);
 4353|  26.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  76.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   509k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto result = make_scan_result<Source, Args...>();
   90|   347k|    fill_scan_result(result,
   91|   347k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   347k|                           make_scan_args<wscan_context>(result->values())));
   93|   347k|    return result;
   94|   347k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   694k|{
   44|   694k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   694k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   347k|{
  131|   347k|    auto result = make_scan_result<Source, Args...>();
  132|   347k|    fill_scan_result(result,
  133|   347k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   347k|                           make_scan_args<wscan_context>(result->values())));
  135|   347k|    return result;
  136|   347k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   694k|{
   60|   694k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   694k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   169k|{
  171|   169k|    auto result = make_scan_result<Source, T>();
  172|   169k|    fill_scan_result(
  173|   169k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   169k|                            detail::make_arg<wscan_context>(result->value())));
  175|   169k|    return result;
  176|   169k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   339k|{
   72|   339k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   339k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto result = make_scan_result<Source, Args...>();
   90|   347k|    fill_scan_result(result,
   91|   347k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   347k|                           make_scan_args<wscan_context>(result->values())));
   93|   347k|    return result;
   94|   347k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   347k|{
  131|   347k|    auto result = make_scan_result<Source, Args...>();
  132|   347k|    fill_scan_result(result,
  133|   347k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   347k|                           make_scan_args<wscan_context>(result->values())));
  135|   347k|    return result;
  136|   347k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   169k|{
  171|   169k|    auto result = make_scan_result<Source, T>();
  172|   169k|    fill_scan_result(
  173|   169k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   169k|                            detail::make_arg<wscan_context>(result->value())));
  175|   169k|    return result;
  176|   169k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto result = make_scan_result<Source, Args...>();
   90|   347k|    fill_scan_result(result,
   91|   347k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   347k|                           make_scan_args<wscan_context>(result->values())));
   93|   347k|    return result;
   94|   347k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   347k|{
   44|   347k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   347k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   347k|{
  131|   347k|    auto result = make_scan_result<Source, Args...>();
  132|   347k|    fill_scan_result(result,
  133|   347k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   347k|                           make_scan_args<wscan_context>(result->values())));
  135|   347k|    return result;
  136|   347k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   347k|{
   60|   347k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   347k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   169k|{
  171|   169k|    auto result = make_scan_result<Source, T>();
  172|   169k|    fill_scan_result(
  173|   169k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   169k|                            detail::make_arg<wscan_context>(result->value())));
  175|   169k|    return result;
  176|   169k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   169k|{
   72|   169k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   169k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.20M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.20M|{
  309|  1.20M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.20M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   103k|{
 1903|   103k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   103k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  62.7k|{
 1911|  62.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  62.7k|    return sync_after_vscan(source, n);
 1913|  62.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   694k|{
 1921|   694k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   694k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   347k|{
 1929|   347k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   347k|    return sync_after_vscan(source, n);
 1931|   347k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   375k|{
  207|   375k|    return find_classic_impl(
  208|   375k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   375k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   375k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   379k|{
  215|   379k|    return find_classic_impl(
  216|   379k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   379k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   379k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   103k|{
 1872|   103k|    return vscan_internal(source, format, args);
 1873|   103k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  62.7k|{
 1878|  62.7k|    auto n = vscan_internal(source, format, args);
 1879|  62.7k|    return sync_after_vscan(source, n);
 1880|  62.7k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   694k|{
 1886|   694k|    return vscan_internal(source, format, args);
 1887|   694k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   347k|{
 1892|   347k|    auto n = vscan_internal(source, format, args);
 1893|   347k|    return sync_after_vscan(source, n);
 1894|   347k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  47.1k|{
 1958|  47.1k|    return vscan_value_internal(source, arg);
 1959|  47.1k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  28.9k|{
 1963|  28.9k|    auto n = vscan_value_internal(source, arg);
 1964|  28.9k|    return sync_after_vscan(source, n);
 1965|  28.9k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|   339k|{
 1971|   339k|    return vscan_value_internal(source, arg);
 1972|   339k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|   169k|{
 1977|   169k|    auto n = vscan_value_internal(source, arg);
 1978|   169k|    return sync_after_vscan(source, n);
 1979|   169k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   375k|{
  131|   375k|    auto it = source.begin();
  132|       |
  133|   680k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 532k, False: 148k]
  ------------------
  134|   532k|        auto sv =
  135|   532k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   532k|                .substr(0, 8);
  137|       |
  138|   532k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 368k, False: 163k]
  ------------------
  139|   368k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   368k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   368k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 151k, False: 216k]
  ------------------
  142|   151k|                break;
  143|   151k|            }
  144|   216k|            continue;
  145|   368k|        }
  146|       |
  147|   482k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 394k, False: 88.3k]
  ------------------
  148|   394k|            auto tmp =
  149|   394k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   394k|            auto res = get_next_code_point(tmp);
  151|   394k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 75.4k, False: 318k]
  ------------------
  152|  75.4k|                return it;
  153|  75.4k|            }
  154|   318k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   318k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   318k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   318k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   318k|        }
  158|   163k|    }
  159|       |
  160|   299k|    return detail::make_string_view_iterator(source, it);
  161|   375k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   885k|{
  118|   885k|    static_assert(sizeof(*source.data()) == 1);
  119|   885k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   885k|    uint64_t word{};
  121|   885k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   885k|    return has_byte_greater(word, 127) != 0;
  124|   885k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.41M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   394k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   379k|{
  131|   379k|    auto it = source.begin();
  132|       |
  133|   486k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 353k, False: 133k]
  ------------------
  134|   353k|        auto sv =
  135|   353k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   353k|                .substr(0, 8);
  137|       |
  138|   353k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 257k, False: 95.2k]
  ------------------
  139|   257k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   257k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   257k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 154k, False: 102k]
  ------------------
  142|   154k|                break;
  143|   154k|            }
  144|   102k|            continue;
  145|   257k|        }
  146|       |
  147|   187k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 183k, False: 4.19k]
  ------------------
  148|   183k|            auto tmp =
  149|   183k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   183k|            auto res = get_next_code_point(tmp);
  151|   183k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 91.0k, False: 92.5k]
  ------------------
  152|  91.0k|                return it;
  153|  91.0k|            }
  154|  92.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  92.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  92.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  92.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  92.5k|        }
  158|  95.2k|    }
  159|       |
  160|   288k|    return detail::make_string_view_iterator(source, it);
  161|   379k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   667k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   183k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   125k|{
 1769|   125k|    const auto argcount = args.size();
 1770|   125k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 57.9k, False: 67.5k]
  |  Branch (1770:60): [True: 57.9k, False: 0]
  ------------------
 1771|  57.9k|        auto arg = args.get(0);
 1772|  57.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  57.9k|    static_cast<    \
  |  |  935|  57.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  57.9k|    }
 1774|       |
 1775|  67.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 67.5k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  67.5k|    SCN_UNLIKELY_ATTR
 1783|  67.5k|    {
 1784|  67.5k|        auto handler = format_handler<false, CharT>{
 1785|  67.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  67.5k|        return vscan_parse_format_string(format, handler);
 1787|  67.5k|    }
 1788|  67.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   331k|{
 1317|   331k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 179k, False: 152k]
  ------------------
 1318|   179k|        return false;
 1319|   179k|    }
 1320|   152k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 152k, False: 0]
  |  Branch (1320:39): [True: 152k, False: 0]
  ------------------
 1321|   331k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  86.9k|{
 1350|  86.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.9k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  86.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  86.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 86.9k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  86.9k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  86.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  86.9k|    static_cast<    \
  |  |  935|  86.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  86.9k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  86.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  86.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  86.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.01k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.01k|    }                                                  \
  |  |  |  | 3939|  86.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  83.9k|    return it.position();
 1367|  86.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   111k|        : format_handler_base{argcount},
 1593|   111k|          parse_ctx{source_tag<Source&&>, format},
 1594|   111k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   111k|    {
 1596|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.24M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.24M|    {
 1412|  1.24M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.24M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   111k|        : contiguous_ctx(source, args, loc)
 1544|   111k|    {
 1545|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   111k|{
 1734|   111k|    const auto beg = handler.get_ctx().begin();
 1735|   111k|    detail::parse_format_string<false>(format, handler);
 1736|   111k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.1k, False: 91.8k]
  |  |  ------------------
  ------------------
 1737|  20.1k|        return unexpected(err.error());
 1738|  20.1k|    }
 1739|  91.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   111k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   727k|    {
 1718|   727k|        return ctx.get();
 1719|   727k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   727k|    {
 1549|   727k|        return contiguous_ctx;
 1550|   727k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   203k|    {
 1600|   203k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 203k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   203k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  54.2k|    {
 1460|  54.2k|        error = unexpected(err);
 1461|  54.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   111k|{
 1372|   111k|    auto arg = ctx.arg(id);
 1373|   111k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   111k|    return arg;
 1377|   111k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.24M|    {
 1486|  1.24M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.24M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.24M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.24M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.24M|            visited_args_lower64 |= (1ull << id);
 1499|  1.24M|            return;
 1500|  1.24M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.24M|    {
 1470|  1.24M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.24M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.24M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.24M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.24M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.24M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   111k|    {
 1640|   111k|        return parse_ctx.next_arg_id();
 1641|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   111k|    {
 1680|   111k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   111k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   111k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 111k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   111k|        auto specs = detail::format_specs{};
 1693|   111k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   111k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   111k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   111k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   111k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 111k]
  |  Branch (1698:29): [True: 0, False: 111k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   111k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.04k, False: 103k]
  |  |  ------------------
  ------------------
 1705|  8.04k|            return parse_ctx.begin();
 1706|  8.04k|        }
 1707|   103k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   103k|        on_visit_scan_arg(
 1710|   103k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   103k|                                           get_ctx().locale()},
 1712|   103k|            arg);
 1713|   103k|        return parse_ctx.begin();
 1714|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   111k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   111k|    {
 1391|   111k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   103k|    {
 1651|   103k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:29): [True: 0, False: 103k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   103k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 91.8k]
  |  |  ------------------
  ------------------
 1658|  12.0k|            on_error(r.error());
 1659|  12.0k|        }
 1660|  91.8k|        else {
 1661|  91.8k|            get_ctx().advance_to(*r);
 1662|  91.8k|        }
 1663|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  36.1k|    {
 1454|  36.1k|        SCN_UNLIKELY_ATTR
 1455|  36.1k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  36.1k|                                              msg);
 1457|  36.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.24M|    {
 1419|  1.24M|        {
 1420|  1.24M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.24M]
  ------------------
 1421|  1.24M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.24M]
  ------------------
 1422|  1.24M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.24M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.24M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.24M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.24M|        }
 1430|       |
 1431|  1.24M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.24M, False: 0]
  ------------------
 1432|  1.24M|            return;
 1433|  1.24M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  4.94M|    {
 1465|  4.94M|        return error;
 1466|  4.94M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  67.5k|        : format_handler_base{argcount},
 1593|  67.5k|          parse_ctx{source_tag<Source&&>, format},
 1594|  67.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  67.5k|    {
 1596|  67.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  67.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  67.5k|    {
 1521|  67.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  67.5k|{
 1734|  67.5k|    const auto beg = handler.get_ctx().begin();
 1735|  67.5k|    detail::parse_format_string<false>(format, handler);
 1736|  67.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 57.4k]
  |  |  ------------------
  ------------------
 1737|  10.0k|        return unexpected(err.error());
 1738|  10.0k|    }
 1739|  57.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  67.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   444k|    {
 1718|   444k|        return ctx.get();
 1719|   444k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   444k|    {
 1525|   444k|        return ctx;
 1526|   444k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   125k|    {
 1600|   125k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 125k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   125k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  67.5k|{
 1372|  67.5k|    auto arg = ctx.arg(id);
 1373|  67.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  67.5k|    return arg;
 1377|  67.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  67.5k|    {
 1640|  67.5k|        return parse_ctx.next_arg_id();
 1641|  67.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  67.5k|    {
 1680|  67.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  67.5k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  67.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 67.5k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  67.5k|        auto specs = detail::format_specs{};
 1693|  67.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  67.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  67.5k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  67.5k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  67.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 67.5k]
  |  Branch (1698:29): [True: 0, False: 67.5k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  67.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 63.5k]
  |  |  ------------------
  ------------------
 1705|  4.02k|            return parse_ctx.begin();
 1706|  4.02k|        }
 1707|  63.5k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  63.5k|        on_visit_scan_arg(
 1710|  63.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  63.5k|                                           get_ctx().locale()},
 1712|  63.5k|            arg);
 1713|  63.5k|        return parse_ctx.begin();
 1714|  67.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|  67.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  67.5k|    {
 1391|  67.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  63.5k|    {
 1651|  63.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 63.5k]
  |  Branch (1651:13): [True: 0, False: 63.5k]
  |  Branch (1651:29): [True: 0, False: 63.5k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  63.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  63.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  63.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.03k, False: 57.4k]
  |  |  ------------------
  ------------------
 1658|  6.03k|            on_error(r.error());
 1659|  6.03k|        }
 1660|  57.4k|        else {
 1661|  57.4k|            get_ctx().advance_to(*r);
 1662|  57.4k|        }
 1663|  63.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   206k|{
 1749|   206k|    const auto argcount = args.size();
 1750|   206k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 94.2k, False: 111k]
  |  Branch (1750:60): [True: 94.2k, False: 0]
  ------------------
 1751|  94.2k|        auto arg = args.get(0);
 1752|  94.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  94.2k|    static_cast<    \
  |  |  935|  94.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  94.2k|    }
 1754|       |
 1755|   111k|    auto handler = format_handler<true, CharT>{
 1756|   111k|        ranges::subrange<const CharT*>{source.data(),
 1757|   111k|                                       source.data() + source.size()},
 1758|   111k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   111k|    return vscan_parse_format_string(format, handler);
 1760|   206k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   141k|{
 1330|   141k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   141k|    auto reader =
 1336|   141k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   141k|            ranges::subrange<const CharT*>{source.data(),
 1338|   141k|                                           source.data() + source.size()},
 1339|   141k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   141k|    static_cast<    \
  |  |  935|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   141k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.03k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.03k|    }                                                  \
  |  |  |  | 3939|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   135k|    return ranges::distance(source.data(), it);
 1342|   141k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   154k|{
 1849|   154k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   154k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 141k, False: 13.0k]
  |  |  ------------------
  ------------------
 1850|   141k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   141k|    }
 1856|  13.0k|    else {
 1857|  13.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.0k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  13.0k|    }
 1863|   154k|    return result;
 1864|   154k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  1.38M|{
 1749|  1.38M|    const auto argcount = args.size();
 1750|  1.38M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 678k, False: 711k]
  |  Branch (1750:60): [True: 678k, False: 0]
  ------------------
 1751|   678k|        auto arg = args.get(0);
 1752|   678k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   678k|    static_cast<    \
  |  |  935|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   678k|    }
 1754|       |
 1755|   711k|    auto handler = format_handler<true, CharT>{
 1756|   711k|        ranges::subrange<const CharT*>{source.data(),
 1757|   711k|                                       source.data() + source.size()},
 1758|   711k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   711k|    static_cast<    \
  |  |  935|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   711k|    static_cast<    \
  |  |  935|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   711k|    return vscan_parse_format_string(format, handler);
 1760|  1.38M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  2.08M|{
 1317|  2.08M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 1.06M, False: 1.01M]
  ------------------
 1318|  1.06M|        return false;
 1319|  1.06M|    }
 1320|  1.01M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 1.01M, False: 0]
  |  Branch (1320:39): [True: 1.01M, False: 0]
  ------------------
 1321|  2.08M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  1.01M|{
 1330|  1.01M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  1.01M|    auto reader =
 1336|  1.01M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  1.01M|            ranges::subrange<const CharT*>{source.data(),
 1338|  1.01M|                                           source.data() + source.size()},
 1339|  1.01M|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  1.01M|    static_cast<    \
  |  |  935|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  1.01M|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.0k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.0k|    }                                                  \
  |  |  |  | 3939|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  1.00M|    return ranges::distance(source.data(), it);
 1342|  1.01M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   711k|        : format_handler_base{argcount},
 1593|   711k|          parse_ctx{source_tag<Source&&>, format},
 1594|   711k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   711k|    static_cast<    \
  |  |  935|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   711k|    static_cast<    \
  |  |  935|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   711k|    {
 1596|   711k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   711k|        : contiguous_ctx(source, args, loc)
 1544|   711k|    {
 1545|   711k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   711k|{
 1734|   711k|    const auto beg = handler.get_ctx().begin();
 1735|   711k|    detail::parse_format_string<false>(format, handler);
 1736|   711k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40.2k, False: 671k]
  |  |  ------------------
  ------------------
 1737|  40.2k|        return unexpected(err.error());
 1738|  40.2k|    }
 1739|   671k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   711k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  4.86M|    {
 1718|  4.86M|        return ctx.get();
 1719|  4.86M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  4.86M|    {
 1549|  4.86M|        return contiguous_ctx;
 1550|  4.86M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  1.38M|    {
 1600|  1.38M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.38M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   711k|{
 1372|   711k|    auto arg = ctx.arg(id);
 1373|   711k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 711k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   711k|    return arg;
 1377|   711k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   711k|    {
 1640|   711k|        return parse_ctx.next_arg_id();
 1641|   711k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   711k|    {
 1680|   711k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   711k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   711k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 711k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   711k|        auto specs = detail::format_specs{};
 1693|   711k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   711k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   711k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   711k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   711k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 711k]
  |  Branch (1698:29): [True: 0, False: 711k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   711k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 695k]
  |  |  ------------------
  ------------------
 1705|  16.0k|            return parse_ctx.begin();
 1706|  16.0k|        }
 1707|   695k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   695k|        on_visit_scan_arg(
 1710|   695k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   695k|                                           get_ctx().locale()},
 1712|   695k|            arg);
 1713|   695k|        return parse_ctx.begin();
 1714|   711k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   711k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   711k|    {
 1391|   711k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   695k|    {
 1651|   695k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 695k]
  |  Branch (1651:13): [True: 0, False: 695k]
  |  Branch (1651:29): [True: 0, False: 695k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   695k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   695k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.1k, False: 671k]
  |  |  ------------------
  ------------------
 1658|  24.1k|            on_error(r.error());
 1659|  24.1k|        }
 1660|   671k|        else {
 1661|   671k|            get_ctx().advance_to(*r);
 1662|   671k|        }
 1663|   695k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   694k|{
 1769|   694k|    const auto argcount = args.size();
 1770|   694k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 339k, False: 355k]
  |  Branch (1770:60): [True: 339k, False: 0]
  ------------------
 1771|   339k|        auto arg = args.get(0);
 1772|   339k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   339k|    static_cast<    \
  |  |  935|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   339k|    }
 1774|       |
 1775|   355k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 355k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   355k|    SCN_UNLIKELY_ATTR
 1783|   355k|    {
 1784|   355k|        auto handler = format_handler<false, CharT>{
 1785|   355k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   355k|        return vscan_parse_format_string(format, handler);
 1787|   355k|    }
 1788|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   509k|{
 1350|   509k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   509k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   509k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   509k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   509k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   509k|    static_cast<    \
  |  |  935|   509k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   509k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.03k, False: 503k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.03k|    }                                                  \
  |  |  |  | 3939|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   503k|    return it.position();
 1367|   509k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   355k|        : format_handler_base{argcount},
 1593|   355k|          parse_ctx{source_tag<Source&&>, format},
 1594|   355k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   355k|    {
 1596|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   355k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   355k|    {
 1521|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   355k|{
 1734|   355k|    const auto beg = handler.get_ctx().begin();
 1735|   355k|    detail::parse_format_string<false>(format, handler);
 1736|   355k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.1k, False: 335k]
  |  |  ------------------
  ------------------
 1737|  20.1k|        return unexpected(err.error());
 1738|  20.1k|    }
 1739|   335k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.43M|    {
 1718|  2.43M|        return ctx.get();
 1719|  2.43M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.43M|    {
 1525|  2.43M|        return ctx;
 1526|  2.43M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   691k|    {
 1600|   691k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 691k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   691k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   355k|{
 1372|   355k|    auto arg = ctx.arg(id);
 1373|   355k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   355k|    return arg;
 1377|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   355k|    {
 1640|   355k|        return parse_ctx.next_arg_id();
 1641|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   355k|    {
 1680|   355k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   355k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   355k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 355k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   355k|        auto specs = detail::format_specs{};
 1693|   355k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   355k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   355k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   355k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   355k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 355k]
  |  Branch (1698:29): [True: 0, False: 355k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   355k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.04k, False: 347k]
  |  |  ------------------
  ------------------
 1705|  8.04k|            return parse_ctx.begin();
 1706|  8.04k|        }
 1707|   347k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   347k|        on_visit_scan_arg(
 1710|   347k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   347k|                                           get_ctx().locale()},
 1712|   347k|            arg);
 1713|   347k|        return parse_ctx.begin();
 1714|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   355k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   355k|    {
 1391|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   347k|    {
 1651|   347k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 347k]
  |  Branch (1651:13): [True: 0, False: 347k]
  |  Branch (1651:29): [True: 0, False: 347k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   347k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   347k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 335k]
  |  |  ------------------
  ------------------
 1658|  12.0k|            on_error(r.error());
 1659|  12.0k|        }
 1660|   335k|        else {
 1661|   335k|            get_ctx().advance_to(*r);
 1662|   335k|        }
 1663|   347k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   864k|{
 1849|   864k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   864k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 838k, False: 26.1k]
  |  |  ------------------
  ------------------
 1850|   838k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 838k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   838k|    }
 1856|  26.1k|    else {
 1857|  26.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  26.1k|    }
 1863|   864k|    return result;
 1864|   864k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  47.1k|{
 1795|  47.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  47.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  28.9k|{
 1795|  28.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  28.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   339k|{
 1795|   339k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   339k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   169k|{
 1795|   169k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   169k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  1.00k|{
 1462|  1.00k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  1.00k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  1.00k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  1.00k|            return transcode_to_string_impl_to32(src, dest);
 1473|  1.00k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  1.00k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  1.00k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  1.00k|{
 1355|  1.00k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  1.00k|    auto it = src.begin();
 1358|   385k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 384k, False: 1.00k]
  ------------------
 1359|   384k|        auto res = get_next_code_point(
 1360|   384k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   384k|                                                                 src.end()));
 1362|   384k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.61k, False: 381k]
  |  |  ------------------
  ------------------
 1363|  3.61k|            dest.push_back(DestCharT{0xfffd});
 1364|  3.61k|        }
 1365|   381k|        else {
 1366|   381k|            dest.push_back(res.value);
 1367|   381k|        }
 1368|   384k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   384k|    }
 1370|  1.00k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   962k|{
 1279|   962k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   962k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   962k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   962k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   962k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   962k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.0k, False: 945k]
  |  |  ------------------
  ------------------
 1283|  17.0k|        return {get_start_for_next_code_point(input),
 1284|  17.0k|                detail::invalid_code_point};
 1285|  17.0k|    }
 1286|   945k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   945k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 920k]
  |  |  ------------------
  ------------------
 1287|  25.1k|        return {input.end(), detail::invalid_code_point};
 1288|  25.1k|    }
 1289|       |
 1290|   920k|    return {input.begin() + len,
 1291|   920k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   945k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  17.0k|{
 1265|  17.0k|    auto it = input.begin();
 1266|  74.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 72.4k, False: 2.10k]
  ------------------
 1267|  72.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 14.9k, False: 57.5k]
  ------------------
 1268|  14.9k|            break;
 1269|  14.9k|        }
 1270|  72.4k|    }
 1271|  17.0k|    return it;
 1272|  17.0k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  18.0k|    {
 3046|  18.0k|        SCN_UNLIKELY_ATTR
 3047|  18.0k|        m_msg = msg;
 3048|  18.0k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  1.21M|    {
 3051|  1.21M|        return m_msg == nullptr;
 3052|  1.21M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  2.08M|{
  458|  2.08M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.08M|        static_cast<unsigned char>(ch))];
  460|  2.08M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  45.6k|{
  469|  45.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  45.6k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  17.2k|{
  474|  17.2k|#if WCHAR_MIN < 0
  475|  17.2k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 15.7k, False: 1.47k]
  |  Branch (475:23): [True: 11.5k, False: 4.21k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  17.2k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   885k|{
  539|   885k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   885k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.67M|{
  784|  4.67M|    return e != eof_error::good;
  785|  4.67M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  13.1k|{
  798|  13.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  13.1k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  13.1k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.15M|{
 6047|  1.15M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.15M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.15M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.15M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.15M|    return {};
 6061|  1.15M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   466k|    {
  304|   466k|        ranges::advance(x, n);
  305|   466k|        return x;
  306|   466k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   466k|    {
  268|   466k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   466k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   466k|    {
  151|   466k|        i += n;
  152|   466k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.11M|    {
  108|  1.11M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.11M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.11M|    {
   87|  1.11M|        return s - i;
   88|  1.11M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.67M|    {
  108|  1.67M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.67M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.67M|    {
   87|  1.67M|        return s - i;
   88|  1.67M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   307k|    {
 2993|   307k|        return m_current;
 2994|   307k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  2.07M|    {
 2993|  2.07M|        return m_current;
 2994|  2.07M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   148k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   148k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   148k|        auto beg = r.begin();
  991|   148k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 148k, False: 0]
  ------------------
  992|   148k|            return false;
  993|   148k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   148k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  35.8k|    {
  763|  35.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  35.8k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  8.51k|        : m_fptr([](storage fn,
  743|  8.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.51k|              cvref<T> obj = *get<T>(fn);
  745|  8.51k|              if constexpr (std::is_void_v<R>) {
  746|  8.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.51k|              }
  748|  8.51k|              else {
  749|  8.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.51k|              }
  751|  8.51k|          }),
  752|  8.51k|          m_storage(std::addressof(f))
  753|  8.51k|    {
  754|  8.51k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.9k|              else {
  749|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.9k|              }
  751|  17.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  17.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.9k|        else if constexpr (std::is_object_v<T>) {
  688|  17.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.9k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  8.51k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.51k|        {
  662|  8.51k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  85.5M|    {
  763|  85.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  85.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  85.5M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.67M|        : m_fptr([](storage fn,
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|  2.67M|              if constexpr (std::is_void_v<R>) {
  746|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.67M|              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
  752|  2.67M|          m_storage(std::addressof(f))
  753|  2.67M|    {
  754|  2.67M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.51M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.51M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.51M|              else {
  749|  6.51M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.51M|              }
  751|  6.51M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.51M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.51M|        else if constexpr (std::is_object_v<T>) {
  688|  6.51M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.51M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.67M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.67M|        {
  662|  2.67M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|  61.5k|    {
 6075|  61.5k|        const bool need_skipped_width =
 6076|  61.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 61.5k]
  |  Branch (6076:33): [True: 0, False: 61.5k]
  ------------------
 6077|  61.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  61.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 61.5k]
  ------------------
 6081|  61.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 61.5k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  61.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 61.5k, False: 0]
  |  Branch (6085:56): [True: 58.6k, False: 2.83k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  58.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 58.6k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   116k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.03k, False: 57.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.03k|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   116k|                            make_eof_scan_error));
 6096|       |
 6097|   116k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 57.6k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  57.6k|            return result_type{it, 0};
 6105|   116k|        }
 6106|       |
 6107|  2.83k|        return result_type{rng.begin(), 0};
 6108|  61.5k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.83k|{
 2075|  2.83k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.83k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.83k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.83k|    else {
 2060|  2.83k|        auto first = range.begin();
 2061|  6.05k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.97k, False: 80]
  ------------------
 2062|  5.97k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.75k, False: 3.22k]
  ------------------
 2063|  2.75k|                return first;
 2064|  2.75k|            }
 2065|  5.97k|        }
 2066|     80|        return first;
 2067|  2.83k|    }
 2068|  2.83k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  57.4k|    {
  108|  57.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  57.4k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  57.4k|    {
   94|  57.4k|        iter_difference_t<I> counter{0};
   95|   612k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 554k, False: 57.4k]
  ------------------
   96|   554k|            ++i;
   97|   554k|            ++counter;
   98|   554k|        }
   99|  57.4k|        return counter;
  100|  57.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   231k|{
  951|   231k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.40k, False: 229k]
  |  |  ------------------
  ------------------
  952|  2.40k|        return eof_error::eof;
  953|  2.40k|    }
  954|   229k|    return eof_error::good;
  955|   231k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.70M|{
  945|  1.70M|    return is_range_eof(r.begin(), r.end());
  946|  1.70M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.70M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.70M|    {
  938|  1.70M|        return begin == end;
  939|  1.70M|    }
  940|  1.70M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   144k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   144k|    else {
 1788|   144k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   144k|    }
 1790|   144k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   144k|    {
 1636|   144k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   144k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   144k|    {
 1720|   144k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   144k|                           ranges::common_range<Range>) {
 1737|   144k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   144k|            auto end_seg = range.end().contiguous_segment();
 1739|   144k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.48k, False: 140k]
  |  |  ------------------
  ------------------
 1740|   144k|                             detail::to_address(end_seg.end()))) {
 1741|  3.48k|                auto& str = m_storage.emplace();
 1742|  3.48k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.48k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.48k|                m_view = string_view_type{str};
 1745|  3.48k|                return;
 1746|  3.48k|            }
 1747|       |
 1748|   140k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   140k|                                                            end_seg.data());
 1750|   140k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   144k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   283k|    {
 1681|   283k|        return m_view;
 1682|   283k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   144k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  56.9k|    {
 6117|  56.9k|        const bool need_skipped_width =
 6118|  56.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 56.9k]
  |  Branch (6118:33): [True: 0, False: 56.9k]
  ------------------
 6119|  56.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  56.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 56.9k]
  ------------------
 6122|  56.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 56.9k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  56.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 56.9k, False: 0]
  ------------------
 6131|  56.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 788, False: 56.1k]
  ------------------
 6132|  56.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 788]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    788|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 788]
  ------------------
 6134|    788|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  56.9k|        return result_type{rng.begin(), 0};
 6156|  56.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   375k|{
  951|   375k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.75k, False: 372k]
  |  |  ------------------
  ------------------
  952|  3.75k|        return eof_error::eof;
  953|  3.75k|    }
  954|   372k|    return eof_error::good;
  955|   375k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   375k|{
  945|   375k|    return is_range_eof(r.begin(), r.end());
  946|   375k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   375k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   375k|    {
  938|   375k|        return begin == end;
  939|   375k|    }
  940|   375k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   233k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   233k|                  ranges::sized_range<Range>) {
 1785|   233k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   233k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   233k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   233k|    {
 1589|   233k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.27M|    {
 1602|  1.27M|        return sv;
 1603|  1.27M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  5.67k|{
 2075|  5.67k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  5.67k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  5.67k|{
 2056|  5.67k|    if constexpr (ranges::common_range<Range>) {
 2057|  5.67k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  5.67k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   234k|{
 3066|   234k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 234k, False: 0]
  ------------------
 3067|   234k|        auto it = read_while_classic_space(range);
 3068|   234k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   234k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.50k, False: 231k]
  |  |  ------------------
  ------------------
 3070|  2.50k|            return unexpected(e);
 3071|  2.50k|        }
 3072|       |
 3073|   231k|        return it;
 3074|   234k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   234k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   234k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   234k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   234k|        auto buf = make_contiguous_buffer(range);
 2220|   234k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   234k|        return ranges::next(range.begin(),
 2222|   234k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   234k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   466k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   466k|                  ranges::sized_range<Range>) {
 1785|   466k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   466k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   466k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   466k|    {
 1589|   466k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  14.0k|    {
  304|  14.0k|        ranges::advance(x, n);
  305|  14.0k|        return x;
  306|  14.0k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   288k|    {
  268|   288k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   288k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   288k|    {
  181|   531k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 242k, False: 288k]
  ------------------
  182|   242k|            ++i;
  183|   242k|        }
  184|   288k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   143k|    {
 1686|   143k|        return m_storage.has_value();
 1687|   143k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  2.19k|    {
 1691|  2.19k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  2.19k|        return *m_storage;
 1693|  2.19k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  63.5k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  63.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  63.5k|            auto rd = make_reader<T, char_type>();
 6237|  63.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 61.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.01k|    }
  ------------------
 6238|       |
 6239|  61.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 61.5k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  61.5k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  61.5k|                return impl(rd, range, value);
 6242|  61.5k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  63.5k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   273k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   273k|                       std::is_same_v<T, std::wstring>) {
 5867|   273k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   273k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   395k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   167k|    {
 3156|   167k|        reader_error_handler eh{};
 3157|   167k|        get_derived().check_specs_impl(specs, eh);
 3158|   167k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.03k, False: 161k]
  |  |  ------------------
  ------------------
 3159|  6.03k|            return detail::unexpected_scan_error(
 3160|  6.03k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  6.03k|        }
 3162|   161k|        return {};
 3163|   167k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   167k|    {
 3168|   167k|        return static_cast<Derived&>(*this);
 3169|   167k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   167k|    {
 5247|   167k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   167k|        SCN_GCC_PUSH
 5250|   167k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   167k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   167k|        SCN_CLANG_PUSH
 5254|   167k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   167k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   167k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 167k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 167k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   152k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 152k, False: 14.5k]
  ------------------
 5263|   152k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 152k]
  ------------------
 5264|   152k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 152k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   152k|                else {
 5268|   152k|                    m_type = reader_type::word;
 5269|   152k|                }
 5270|   152k|                break;
 5271|      0|            }
 5272|       |
 5273|  6.03k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 6.03k, False: 161k]
  ------------------
 5274|  6.03k|                m_type = reader_type::character;
 5275|  6.03k|                break;
 5276|       |
 5277|  8.51k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 8.51k, False: 158k]
  ------------------
 5278|  8.51k|                m_type = reader_type::character_set;
 5279|  8.51k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 167k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 167k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   167k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   167k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|  61.5k|    {
 6162|  61.5k|        const bool need_skipped_width =
 6163|  61.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 61.5k]
  |  Branch (6163:33): [True: 0, False: 61.5k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  61.5k|        auto it = rng.begin();
 6167|  61.5k|        std::ptrdiff_t prefix_width = 0;
 6168|  61.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 61.5k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  61.5k|        else {
 6176|  61.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  61.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.03k, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.03k|    }                                                  \
  |  |  |  | 3939|  61.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  60.4k|            std::tie(it, prefix_width) = prefix_result;
 6178|  60.4k|        }
 6179|  60.4k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  60.4k|        std::ptrdiff_t value_width = 0;
 6183|  60.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 60.4k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  60.4k|        else {
 6199|  60.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.99k, False: 57.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.99k|    }                                                  \
  |  | 3939|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  57.4k|                                             specs, value, loc));
 6201|       |
 6202|  57.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 57.4k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  57.4k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  57.4k|        std::ptrdiff_t postfix_width = 0;
 6211|  57.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 56.9k, False: 536]
  ------------------
 6212|  56.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  56.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  56.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  56.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  56.9k|                                 value_width));
 6216|  56.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  56.9k|        }
 6218|       |
 6219|  57.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  57.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 57.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  57.4k|            specs, prefix_width, value_width, postfix_width));
 6221|  57.4k|        return it;
 6222|  57.4k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   537k|    {
 5296|   537k|        return m_type == reader_type::word;
 5297|   537k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   377k|{
 1242|   377k|    auto it = src.begin();
 1243|  2.54M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 2.18M, False: 368k]
  ------------------
 1244|  2.18M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  2.18M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 5.32k, False: 2.17M]
  ------------------
 1246|  5.32k|            return false;
 1247|  5.32k|        }
 1248|  2.17M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 625, False: 2.17M]
  ------------------
 1249|    625|            return false;
 1250|    625|        }
 1251|  2.17M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  2.17M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  2.17M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.97k, False: 2.17M]
  ------------------
 1254|  2.97k|            return false;
 1255|  2.97k|        }
 1256|  2.17M|        it += len;
 1257|  2.17M|    }
 1258|   368k|    return true;
 1259|   377k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   141k|{
 3108|   141k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   141k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 2.19k, False: 139k]
  ------------------
 3110|  2.19k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  2.19k|    static_cast<    \
  |  |  935|  2.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  2.19k|        }
 3112|   139k|        else {
 3113|   139k|            dest.assign(source.view());
 3114|   139k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   141k|    return {};
 3121|   141k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  8.51k|        {
 5144|  8.51k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 8.51k, False: 0]
  ------------------
 5145|  8.51k|                return {};
 5146|  8.51k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  16.1k|        {
 5117|  16.1k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  16.1k|            const auto val =
 5119|  16.1k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  16.1k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  16.1k|                    (val % 8)) &
 5122|  16.1k|                   1u;
 5123|  16.1k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  17.9k|        {
 5168|  17.9k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.78k, False: 16.1k]
  ------------------
 5169|  1.78k|                return false;
 5170|  1.78k|            }
 5171|       |
 5172|  16.1k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  17.9k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  8.51k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  60.4k|    {
 5314|  60.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  60.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  60.4k|        return read_impl(range, specs, value);
 5316|  60.4k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  60.4k|    {
 5332|  60.4k|        SCN_CLANG_PUSH
 5333|  60.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  60.4k|        switch (m_type) {
 5336|  57.6k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 57.6k, False: 2.83k]
  ------------------
 5337|  57.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 60.4k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 60.4k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.83k, False: 57.6k]
  ------------------
 5347|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.83k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 60.4k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 60.4k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 60.4k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  60.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  60.4k|        }
 5368|       |
 5369|  60.4k|        SCN_CLANG_POP
 5370|  60.4k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   143k|    {
 4861|   143k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   143k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   143k|{
 4795|   143k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   143k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   143k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.62k, False: 140k]
  ------------------
 4799|  2.62k|        return detail::unexpected_scan_error(
 4800|  2.62k|            scan_error::invalid_scanned_value,
 4801|  2.62k|            "Invalid encoding in scanned string");
 4802|  2.62k|    }
 4803|       |
 4804|   140k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   140k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   140k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   140k|    static_cast<    \
  |  |  935|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   140k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   143k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   143k|    else {
 2196|   143k|        auto it = range.begin();
 2197|       |
 2198|   143k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   143k|            auto seg = get_contiguous_beginning(range);
 2200|   143k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   143k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 143k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   143k|            ranges::advance(it, seg.size());
 2205|   143k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   143k|            ranges::subrange{it, range.end()},
 2209|   143k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   143k|    }
 2211|   143k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   288k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   288k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   288k|        else {
 1055|   288k|            return r.begin().contiguous_segment();
 1056|   288k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   288k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   274k|{
 2160|   274k|    auto it = range.begin();
 2161|  1.48M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.47M, False: 4.19k]
  ------------------
 2162|  1.47M|        const auto val =
 2163|  1.47M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.47M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.45M, False: 17.9k]
  |  |  ------------------
  ------------------
 2165|  1.45M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.45M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.45M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 269k, False: 1.18M]
  ------------------
 2168|   269k|                return it;
 2169|   269k|            }
 2170|  1.45M|        }
 2171|  1.20M|        it = val.iterator;
 2172|  1.20M|    }
 2173|       |
 2174|  4.19k|    return it;
 2175|   274k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.47M|{
 1998|  1.47M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.47M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.47M|    auto it = range.begin();
 2002|  1.47M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.47M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.9k, False: 1.45M]
  |  |  ------------------
  ------------------
 2005|  17.9k|        ++it;
 2006|  17.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  17.9k|        return {it, {}};
 2008|  17.9k|    }
 2009|       |
 2010|  1.45M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.38M, False: 77.8k]
  ------------------
 2011|  1.38M|        ++it;
 2012|  1.38M|        return {it, string_type(1, *range.begin())};
 2013|  1.38M|    }
 2014|       |
 2015|  77.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  77.8k|    return {it, string_type{range.begin(), it}};
 2017|  1.45M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  17.9k|{
 1265|  17.9k|    auto it = input.begin();
 1266|  39.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 38.6k, False: 569]
  ------------------
 1267|  38.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 17.3k, False: 21.2k]
  ------------------
 1268|  17.3k|            break;
 1269|  17.3k|        }
 1270|  38.6k|    }
 1271|  17.9k|    return it;
 1272|  17.9k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  77.8k|    {
  283|  77.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  77.8k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  77.8k|    {
  252|  77.8k|        constexpr iter_difference_t<I> zero{0};
  253|  77.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|   284k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 207k, False: 77.2k]
  |  Branch (255:30): [True: 206k, False: 528]
  ------------------
  256|   206k|            ++i;
  257|   206k|            ++counter;
  258|   206k|        }
  259|       |
  260|  77.8k|        return counter;
  261|  77.8k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.47M|    {
 1989|  1.47M|        return !codepoint.empty();
 1990|  1.47M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   143k|        : m_fptr([](storage fn,
  743|   143k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143k|              cvref<T> obj = *get<T>(fn);
  745|   143k|              if constexpr (std::is_void_v<R>) {
  746|   143k|                  obj(static_cast<decltype(args)>(args)...);
  747|   143k|              }
  748|   143k|              else {
  749|   143k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143k|              }
  751|   143k|          }),
  752|   143k|          m_storage(std::addressof(f))
  753|   143k|    {
  754|   143k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   868k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   868k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   868k|              else {
  749|   868k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   868k|              }
  751|   868k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   868k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   868k|        else if constexpr (std::is_object_v<T>) {
  688|   868k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   868k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   868k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   143k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   143k|        {
  662|   143k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.83k|    {
 5089|  2.83k|        auto it = read_source_impl(range, {specs});
 5090|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 828]
  |  |  ------------------
  ------------------
 5091|  2.01k|            return unexpected(it.error());
 5092|  2.01k|        }
 5093|       |
 5094|    828|        return read_string_impl(range, *it, value);
 5095|  2.83k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.83k|    {
 5192|  2.83k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.83k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.83k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.83k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.83k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.83k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.83k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.83k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.83k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.83k|        };
 5215|       |
 5216|  2.83k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.83k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.83k|        auto it = read_while_code_unit(range, cb);
 5221|  2.83k|        return check_nonempty(it, range);
 5222|  2.83k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.83k|    {
 5228|  2.83k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 2.01k, False: 828]
  ------------------
 5229|  2.01k|            return detail::unexpected_scan_error(
 5230|  2.01k|                scan_error::invalid_scanned_value,
 5231|  2.01k|                "No characters matched in [character set]");
 5232|  2.01k|        }
 5233|       |
 5234|    828|        return it;
 5235|  2.83k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   130k|{
 2181|   130k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   130k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.83k|        : m_fptr([](storage fn,
  743|  2.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.83k|              cvref<T> obj = *get<T>(fn);
  745|  2.83k|              if constexpr (std::is_void_v<R>) {
  746|  2.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.83k|              }
  748|  2.83k|              else {
  749|  2.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.83k|              }
  751|  2.83k|          }),
  752|  2.83k|          m_storage(std::addressof(f))
  753|  2.83k|    {
  754|  2.83k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.97k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.97k|              else {
  749|  5.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.97k|              }
  751|  5.97k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.97k|    {
  684|  5.97k|        if constexpr (std::is_const_v<T>) {
  685|  5.97k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.97k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.97k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.97k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.97k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.83k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.83k|        {
  667|  2.83k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    828|{
 4795|    828|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    828|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    828|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 828]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    828|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    828|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 828]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    828|    return SCN_MOVE(result);
  ------------------
  |  |  934|    828|    static_cast<    \
  |  |  935|    828|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    828|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  49.2k|    {
 5314|  49.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  49.2k|        return read_impl(range, specs, value);
 5316|  49.2k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  49.2k|    {
 5332|  49.2k|        SCN_CLANG_PUSH
 5333|  49.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  49.2k|        switch (m_type) {
 5336|  46.3k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 46.3k, False: 2.83k]
  ------------------
 5337|  46.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 49.2k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 49.2k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.83k, False: 46.3k]
  ------------------
 5347|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.83k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 49.2k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 49.2k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 49.2k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  49.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  49.2k|        }
 5368|       |
 5369|  49.2k|        SCN_CLANG_POP
 5370|  49.2k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   115k|    {
 4861|   115k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   115k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   115k|{
 4795|   115k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   115k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   115k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 3.15k, False: 112k]
  ------------------
 4799|  3.15k|        return detail::unexpected_scan_error(
 4800|  3.15k|            scan_error::invalid_scanned_value,
 4801|  3.15k|            "Invalid encoding in scanned string");
 4802|  3.15k|    }
 4803|       |
 4804|   112k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   112k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   112k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   112k|    static_cast<    \
  |  |  935|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   112k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   113k|{
 3128|   113k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   113k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   113k|    return {};
 3136|   113k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   231k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   231k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   231k|        auto buf = make_contiguous_buffer(range);
 2191|   231k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   231k|        return ranges::next(range.begin(),
 2193|   231k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   231k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.83k|    {
 5089|  2.83k|        auto it = read_source_impl(range, {specs});
 5090|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 828]
  |  |  ------------------
  ------------------
 5091|  2.01k|            return unexpected(it.error());
 5092|  2.01k|        }
 5093|       |
 5094|    828|        return read_string_impl(range, *it, value);
 5095|  2.83k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  5.67k|    {
 5192|  5.67k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  5.67k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  5.67k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  5.67k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  5.67k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  5.67k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 5.67k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  5.67k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.67k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.67k|        };
 5215|       |
 5216|  5.67k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 5.67k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  5.67k|        auto it = read_while_code_unit(range, cb);
 5221|  5.67k|        return check_nonempty(it, range);
 5222|  5.67k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  5.67k|    {
 5228|  5.67k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 4.02k, False: 1.65k]
  ------------------
 5229|  4.02k|            return detail::unexpected_scan_error(
 5230|  4.02k|                scan_error::invalid_scanned_value,
 5231|  4.02k|                "No characters matched in [character set]");
 5232|  4.02k|        }
 5233|       |
 5234|  1.65k|        return it;
 5235|  5.67k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.67k|        : m_fptr([](storage fn,
  743|  5.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.67k|              cvref<T> obj = *get<T>(fn);
  745|  5.67k|              if constexpr (std::is_void_v<R>) {
  746|  5.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.67k|              }
  748|  5.67k|              else {
  749|  5.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.67k|              }
  751|  5.67k|          }),
  752|  5.67k|          m_storage(std::addressof(f))
  753|  5.67k|    {
  754|  5.67k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.9k|              else {
  749|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.9k|              }
  751|  11.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  11.9k|    {
  684|  11.9k|        if constexpr (std::is_const_v<T>) {
  685|  11.9k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.9k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  11.9k|        const auto cb = [&](SourceCharT ch) {
 5213|  11.9k|            return cb_wrapper.on_ascii_only(ch);
 5214|  11.9k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.67k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.67k|        {
  667|  5.67k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    828|{
 4795|    828|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    828|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    828|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 828]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    828|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    828|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 828]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    828|    return SCN_MOVE(result);
  ------------------
  |  |  934|    828|    static_cast<    \
  |  |  935|    828|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    828|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|   122k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   122k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   122k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   122k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  49.2k|    {
 5314|  49.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  49.2k|        return read_impl(range, specs, value);
 5316|  49.2k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  49.2k|    {
 5332|  49.2k|        SCN_CLANG_PUSH
 5333|  49.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  49.2k|        switch (m_type) {
 5336|  46.3k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 46.3k, False: 2.83k]
  ------------------
 5337|  46.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 49.2k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 49.2k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.83k, False: 46.3k]
  ------------------
 5347|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.83k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 49.2k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 49.2k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 49.2k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  49.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  49.2k|        }
 5368|       |
 5369|  49.2k|        SCN_CLANG_POP
 5370|  49.2k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   115k|    {
 4868|   115k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   115k|                                     value);
 4870|   115k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   115k|{
 4814|   115k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   115k|    auto src = [&]() {
 4817|   115k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   115k|            return make_contiguous_buffer(
 4819|   115k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   115k|        }
 4821|   115k|        else {
 4822|   115k|            return make_contiguous_buffer(
 4823|   115k|                ranges::subrange{range.begin(), result});
 4824|   115k|        }
 4825|   115k|    }();
 4826|   115k|    using src_type = decltype(src);
 4827|       |
 4828|   115k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   115k|    else {
 4841|   115k|        const auto view = src.view();
 4842|   115k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   115k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 3.15k, False: 112k]
  ------------------
 4845|  3.15k|            return detail::unexpected_scan_error(
 4846|  3.15k|                scan_error::invalid_scanned_value,
 4847|  3.15k|                "Invalid encoding in scanned string_view");
 4848|  3.15k|        }
 4849|       |
 4850|   112k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   112k|    static_cast<    \
  |  |  935|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   115k|    }
 4852|   115k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   115k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   115k|        else {
 4822|   115k|            return make_contiguous_buffer(
 4823|   115k|                ranges::subrange{range.begin(), result});
 4824|   115k|        }
 4825|   115k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.83k|    {
 5103|  2.83k|        auto it = read_source_impl(range, {specs});
 5104|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 828]
  |  |  ------------------
  ------------------
 5105|  2.01k|            return unexpected(it.error());
 5106|  2.01k|        }
 5107|       |
 5108|    828|        return read_string_view_impl(range, *it, value);
 5109|  2.83k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    828|{
 4814|    828|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    828|    auto src = [&]() {
 4817|    828|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    828|            return make_contiguous_buffer(
 4819|    828|                ranges::subrange{range.begin().base(), result.base()});
 4820|    828|        }
 4821|    828|        else {
 4822|    828|            return make_contiguous_buffer(
 4823|    828|                ranges::subrange{range.begin(), result});
 4824|    828|        }
 4825|    828|    }();
 4826|    828|    using src_type = decltype(src);
 4827|       |
 4828|    828|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    828|    else {
 4841|    828|        const auto view = src.view();
 4842|    828|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    828|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 828]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    828|        return SCN_MOVE(result);
  ------------------
  |  |  934|    828|    static_cast<    \
  |  |  935|    828|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    828|    }
 4852|    828|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    828|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    828|        else {
 4822|    828|            return make_contiguous_buffer(
 4823|    828|                ranges::subrange{range.begin(), result});
 4824|    828|        }
 4825|    828|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   144k|{
 3066|   144k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 144k, False: 0]
  ------------------
 3067|   144k|        auto it = read_while_classic_space(range);
 3068|   144k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   144k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.62k, False: 143k]
  |  |  ------------------
  ------------------
 3070|  1.62k|            return unexpected(e);
 3071|  1.62k|        }
 3072|       |
 3073|   143k|        return it;
 3074|   144k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   144k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   144k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   144k|    else {
 2225|   144k|        auto it = range.begin();
 2226|       |
 2227|   144k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   144k|            auto seg = get_contiguous_beginning(range);
 2229|   144k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   144k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 14.0k, False: 130k]
  ------------------
 2231|  14.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  14.0k|            }
 2233|   130k|            ranges::advance(it, seg.size());
 2234|   130k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   144k|            return detail::is_cp_space(cp);
 2238|   144k|        });
 2239|   144k|    }
 2240|   144k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   590k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   590k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   590k|              else {
  749|   590k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   590k|              }
  751|   590k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   590k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   590k|        else if constexpr (std::is_object_v<T>) {
  688|   590k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   590k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   590k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   590k|            return detail::is_cp_space(cp);
 2238|   590k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   852k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   852k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   852k|        auto beg = r.begin();
  991|   852k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 852k, False: 0]
  ------------------
  992|   852k|            return false;
  993|   852k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   852k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  34.4k|    {
  763|  34.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  34.4k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.6k|        : m_fptr([](storage fn,
  743|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.6k|              cvref<T> obj = *get<T>(fn);
  745|  12.6k|              if constexpr (std::is_void_v<R>) {
  746|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.6k|              }
  748|  12.6k|              else {
  749|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.6k|              }
  751|  12.6k|          }),
  752|  12.6k|          m_storage(std::addressof(f))
  753|  12.6k|    {
  754|  12.6k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  17.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.2k|              else {
  749|  17.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2k|              }
  751|  17.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  17.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.2k|        else if constexpr (std::is_object_v<T>) {
  688|  17.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.2k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.6k|        {
  662|  12.6k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   343k|    {
 6075|   343k|        const bool need_skipped_width =
 6076|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 343k]
  |  Branch (6076:33): [True: 0, False: 343k]
  ------------------
 6077|   343k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   343k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 343k]
  ------------------
 6081|   343k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 343k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   343k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 343k, False: 0]
  |  Branch (6085:56): [True: 339k, False: 4.20k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   339k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 339k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   677k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 930, False: 338k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    930|    }                                                  \
  |  |  |  | 3939|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   677k|                            make_eof_scan_error));
 6096|       |
 6097|   677k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 338k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   338k|            return result_type{it, 0};
 6105|   677k|        }
 6106|       |
 6107|  4.20k|        return result_type{rng.begin(), 0};
 6108|   343k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  4.20k|{
 2075|  4.20k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.20k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  4.20k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  4.20k|    else {
 2060|  4.20k|        auto first = range.begin();
 2061|  5.78k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.73k, False: 48]
  ------------------
 2062|  5.73k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 4.15k, False: 1.58k]
  ------------------
 2063|  4.15k|                return first;
 2064|  4.15k|            }
 2065|  5.73k|        }
 2066|     48|        return first;
 2067|  4.20k|    }
 2068|  4.20k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   335k|    {
  108|   335k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   335k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   335k|    {
   94|   335k|        iter_difference_t<I> counter{0};
   95|  9.84M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 9.51M, False: 335k]
  ------------------
   96|  9.51M|            ++i;
   97|  9.51M|            ++counter;
   98|  9.51M|        }
   99|   335k|        return counter;
  100|   335k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.35M|{
  951|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 1.35M]
  |  |  ------------------
  ------------------
  952|  2.32k|        return eof_error::eof;
  953|  2.32k|    }
  954|  1.35M|    return eof_error::good;
  955|  1.35M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  27.2M|{
  945|  27.2M|    return is_range_eof(r.begin(), r.end());
  946|  27.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  27.2M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  27.2M|    {
  938|  27.2M|        return begin == end;
  939|  27.2M|    }
  940|  27.2M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   846k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   846k|    else {
 1788|   846k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   846k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   846k|    }
 1790|   846k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   846k|    {
 1636|   846k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   846k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   846k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   846k|    {
 1720|   846k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   846k|                           ranges::common_range<Range>) {
 1737|   846k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   846k|            auto end_seg = range.end().contiguous_segment();
 1739|   846k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.86k, False: 842k]
  |  |  ------------------
  ------------------
 1740|   846k|                             detail::to_address(end_seg.end()))) {
 1741|  3.86k|                auto& str = m_storage.emplace();
 1742|  3.86k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.86k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.86k|                m_view = string_view_type{str};
 1745|  3.86k|                return;
 1746|  3.86k|            }
 1747|       |
 1748|   842k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   842k|                                                            end_seg.data());
 1750|   842k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   846k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.68M|    {
 1681|  1.68M|        return m_view;
 1682|  1.68M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   846k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   334k|    {
 6117|   334k|        const bool need_skipped_width =
 6118|   334k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 334k]
  |  Branch (6118:33): [True: 0, False: 334k]
  ------------------
 6119|   334k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   334k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 334k]
  ------------------
 6122|   334k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 334k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   334k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 334k, False: 0]
  ------------------
 6131|   334k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 158, False: 334k]
  ------------------
 6132|   334k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 158]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    158|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 158]
  ------------------
 6134|    158|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   334k|        return result_type{rng.begin(), 0};
 6156|   334k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  51.7M|{
 1998|  51.7M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  51.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  51.7M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  51.7M|    auto it = range.begin();
 2002|  51.7M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  51.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  51.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 51.7M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  51.7M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 51.7M, False: 0]
  ------------------
 2011|  51.7M|        ++it;
 2012|  51.7M|        return {it, string_type(1, *range.begin())};
 2013|  51.7M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  51.7M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  54.4M|{
  945|  54.4M|    return is_range_eof(r.begin(), r.end());
  946|  54.4M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  54.4M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  54.4M|    {
  938|  54.4M|        return begin == end;
  939|  54.4M|    }
  940|  54.4M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  51.7M|    {
 1989|  51.7M|        return !codepoint.empty();
 1990|  51.7M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.71M|{
  951|  2.71M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.65k, False: 2.70M]
  |  |  ------------------
  ------------------
  952|  4.65k|        return eof_error::eof;
  953|  4.65k|    }
  954|  2.70M|    return eof_error::good;
  955|  2.71M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.69M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.69M|                  ranges::sized_range<Range>) {
 1785|  1.69M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.69M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.69M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.69M|    {
 1589|  1.69M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.53M|    {
 1602|  2.53M|        return sv;
 1603|  2.53M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  8.40k|{
 2075|  8.40k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  8.40k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  8.40k|{
 2056|  8.40k|    if constexpr (ranges::common_range<Range>) {
 2057|  8.40k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  8.40k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.69M|{
 3066|  1.69M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.69M, False: 0]
  ------------------
 3067|  1.69M|        auto it = read_while_classic_space(range);
 3068|  1.69M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.69M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 1.69M]
  |  |  ------------------
  ------------------
 3070|  2.44k|            return unexpected(e);
 3071|  2.44k|        }
 3072|       |
 3073|  1.69M|        return it;
 3074|  1.69M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.69M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.69M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.69M|    else {
 2225|  1.69M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.69M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.69M|            return detail::is_cp_space(cp);
 2238|  1.69M|        });
 2239|  1.69M|    }
 2240|  1.69M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.69M|{
 2181|  1.69M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.69M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.38M|{
 2160|  3.38M|    auto it = range.begin();
 2161|  51.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 51.7M, False: 13.2k]
  ------------------
 2162|  51.7M|        const auto val =
 2163|  51.7M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  51.7M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  51.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 51.7M, False: 0]
  |  |  ------------------
  ------------------
 2165|  51.7M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  51.7M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  51.7M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.37M, False: 48.3M]
  ------------------
 2168|  3.37M|                return it;
 2169|  3.37M|            }
 2170|  51.7M|        }
 2171|  48.3M|        it = val.iterator;
 2172|  48.3M|    }
 2173|       |
 2174|  13.2k|    return it;
 2175|  3.38M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.69M|        : m_fptr([](storage fn,
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|  1.69M|              if constexpr (std::is_void_v<R>) {
  746|  1.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.69M|              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
  752|  1.69M|          m_storage(std::addressof(f))
  753|  1.69M|    {
  754|  1.69M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.94M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.94M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.94M|              else {
  749|  3.94M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.94M|              }
  751|  3.94M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.94M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.94M|        else if constexpr (std::is_object_v<T>) {
  688|  3.94M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.94M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.94M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.94M|            return detail::is_cp_space(cp);
 2238|  3.94M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.69M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.69M|        {
  662|  1.69M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   839k|    {
 1686|   839k|        return m_storage.has_value();
 1687|   839k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.19k|    {
 1691|  1.19k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.19k|        return *m_storage;
 1693|  1.19k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  2.56M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.04M|    {
 3156|  1.04M|        reader_error_handler eh{};
 3157|  1.04M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.04M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 1.03M]
  |  |  ------------------
  ------------------
 3159|  12.0k|            return detail::unexpected_scan_error(
 3160|  12.0k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  12.0k|        }
 3162|  1.03M|        return {};
 3163|  1.04M|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|  1.04M|    {
 3168|  1.04M|        return static_cast<Derived&>(*this);
 3169|  1.04M|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  1.04M|    {
 5247|  1.04M|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  1.04M|        SCN_GCC_PUSH
 5250|  1.04M|        SCN_GCC_IGNORE("-Wswitch")
 5251|  1.04M|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  1.04M|        SCN_CLANG_PUSH
 5254|  1.04M|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  1.04M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  1.04M|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 1.04M]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 1.04M]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|  1.01M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 1.01M, False: 24.6k]
  ------------------
 5263|  1.01M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 1.01M]
  ------------------
 5264|  1.01M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 1.01M]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|  1.01M|                else {
 5268|  1.01M|                    m_type = reader_type::word;
 5269|  1.01M|                }
 5270|  1.01M|                break;
 5271|      0|            }
 5272|       |
 5273|  12.0k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 12.0k, False: 1.03M]
  ------------------
 5274|  12.0k|                m_type = reader_type::character;
 5275|  12.0k|                break;
 5276|       |
 5277|  12.6k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 12.6k, False: 1.03M]
  ------------------
 5278|  12.6k|                m_type = reader_type::character_set;
 5279|  12.6k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 1.04M]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 1.04M]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|  1.04M|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  1.04M|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  3.56M|    {
 5296|  3.56M|        return m_type == reader_type::word;
 5297|  3.56M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.53M|{
 1242|  2.53M|    auto it = src.begin();
 1243|  70.5M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 68.0M, False: 2.51M]
  ------------------
 1244|  68.0M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  68.0M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 68.0M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  68.0M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 68.0M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  68.0M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  68.0M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  68.0M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 23.1k, False: 68.0M]
  ------------------
 1254|  23.1k|            return false;
 1255|  23.1k|        }
 1256|  68.0M|        it += len;
 1257|  68.0M|    }
 1258|  2.51M|    return true;
 1259|  2.53M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  12.6k|        {
 5144|  12.6k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 12.6k, False: 0]
  ------------------
 5145|  12.6k|                return {};
 5146|  12.6k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  11.5k|        {
 5117|  11.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  11.5k|            const auto val =
 5119|  11.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  11.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  11.5k|                    (val % 8)) &
 5122|  11.5k|                   1u;
 5123|  11.5k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  17.2k|        {
 5168|  17.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 5.68k, False: 11.5k]
  ------------------
 5169|  5.68k|                return false;
 5170|  5.68k|            }
 5171|       |
 5172|  11.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  17.2k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  12.6k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   846k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   846k|    else {
 2196|   846k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   846k|        return read_until_code_point(
 2208|   846k|            ranges::subrange{it, range.end()},
 2209|   846k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   846k|    }
 2211|   846k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.69M|{
 2160|  1.69M|    auto it = range.begin();
 2161|  25.8M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 25.8M, False: 6.60k]
  ------------------
 2162|  25.8M|        const auto val =
 2163|  25.8M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  25.8M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  25.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 25.8M, False: 0]
  |  |  ------------------
  ------------------
 2165|  25.8M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  25.8M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  25.8M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.68M, False: 24.1M]
  ------------------
 2168|  1.68M|                return it;
 2169|  1.68M|            }
 2170|  25.8M|        }
 2171|  24.1M|        it = val.iterator;
 2172|  24.1M|    }
 2173|       |
 2174|  6.60k|    return it;
 2175|  1.69M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  25.8M|{
 1998|  25.8M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  25.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  25.8M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  25.8M|    auto it = range.begin();
 2002|  25.8M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  25.8M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  25.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.8M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  25.8M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 25.8M, False: 0]
  ------------------
 2011|  25.8M|        ++it;
 2012|  25.8M|        return {it, string_type(1, *range.begin())};
 2013|  25.8M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  25.8M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  25.8M|    {
 1989|  25.8M|        return !codepoint.empty();
 1990|  25.8M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   846k|        : m_fptr([](storage fn,
  743|   846k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   846k|              cvref<T> obj = *get<T>(fn);
  745|   846k|              if constexpr (std::is_void_v<R>) {
  746|   846k|                  obj(static_cast<decltype(args)>(args)...);
  747|   846k|              }
  748|   846k|              else {
  749|   846k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   846k|              }
  751|   846k|          }),
  752|   846k|          m_storage(std::addressof(f))
  753|   846k|    {
  754|   846k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  23.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  23.8M|              else {
  749|  23.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.8M|              }
  751|  23.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  23.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  23.8M|        else if constexpr (std::is_object_v<T>) {
  688|  23.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  23.8M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  23.8M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   846k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   846k|        {
  662|   846k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  4.20k|    {
 5192|  4.20k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  4.20k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  4.20k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  4.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  4.20k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  4.20k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 4.20k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  4.20k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.20k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.20k|        };
 5215|       |
 5216|  4.20k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.20k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  4.20k|        auto it = read_while_code_unit(range, cb);
 5221|  4.20k|        return check_nonempty(it, range);
 5222|  4.20k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  4.20k|    {
 5228|  4.20k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 4.02k, False: 182]
  ------------------
 5229|  4.02k|            return detail::unexpected_scan_error(
 5230|  4.02k|                scan_error::invalid_scanned_value,
 5231|  4.02k|                "No characters matched in [character set]");
 5232|  4.02k|        }
 5233|       |
 5234|    182|        return it;
 5235|  4.20k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   847k|{
 2181|   847k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   847k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.20k|        : m_fptr([](storage fn,
  743|  4.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.20k|              cvref<T> obj = *get<T>(fn);
  745|  4.20k|              if constexpr (std::is_void_v<R>) {
  746|  4.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.20k|              }
  748|  4.20k|              else {
  749|  4.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.20k|              }
  751|  4.20k|          }),
  752|  4.20k|          m_storage(std::addressof(f))
  753|  4.20k|    {
  754|  4.20k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  5.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.73k|              else {
  749|  5.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.73k|              }
  751|  5.73k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  5.73k|    {
  684|  5.73k|        if constexpr (std::is_const_v<T>) {
  685|  5.73k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.73k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  5.73k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.73k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.73k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.20k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.20k|        {
  667|  4.20k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.69M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.69M|    else {
 2196|  1.69M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.69M|        return read_until_code_point(
 2208|  1.69M|            ranges::subrange{it, range.end()},
 2209|  1.69M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.69M|    }
 2211|  1.69M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.69M|        : m_fptr([](storage fn,
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|  1.69M|              if constexpr (std::is_void_v<R>) {
  746|  1.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.69M|              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
  752|  1.69M|          m_storage(std::addressof(f))
  753|  1.69M|    {
  754|  1.69M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  47.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.7M|              else {
  749|  47.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.7M|              }
  751|  47.7M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  47.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.7M|        else if constexpr (std::is_object_v<T>) {
  688|  47.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.7M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  47.7M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.69M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.69M|        {
  662|  1.69M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  8.40k|    {
 5192|  8.40k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  8.40k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  8.40k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  8.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 8.40k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  8.40k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  8.40k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 8.40k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  8.40k|        const auto cb = [&](SourceCharT ch) {
 5213|  8.40k|            return cb_wrapper.on_ascii_only(ch);
 5214|  8.40k|        };
 5215|       |
 5216|  8.40k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 8.40k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  8.40k|        auto it = read_while_code_unit(range, cb);
 5221|  8.40k|        return check_nonempty(it, range);
 5222|  8.40k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  8.40k|    {
 5228|  8.40k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 8.04k, False: 364]
  ------------------
 5229|  8.04k|            return detail::unexpected_scan_error(
 5230|  8.04k|                scan_error::invalid_scanned_value,
 5231|  8.04k|                "No characters matched in [character set]");
 5232|  8.04k|        }
 5233|       |
 5234|    364|        return it;
 5235|  8.40k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.40k|        : m_fptr([](storage fn,
  743|  8.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.40k|              cvref<T> obj = *get<T>(fn);
  745|  8.40k|              if constexpr (std::is_void_v<R>) {
  746|  8.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.40k|              }
  748|  8.40k|              else {
  749|  8.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.40k|              }
  751|  8.40k|          }),
  752|  8.40k|          m_storage(std::addressof(f))
  753|  8.40k|    {
  754|  8.40k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  11.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.4k|              else {
  749|  11.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.4k|              }
  751|  11.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  11.4k|    {
  684|  11.4k|        if constexpr (std::is_const_v<T>) {
  685|  11.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  11.4k|        const auto cb = [&](SourceCharT ch) {
 5213|  11.4k|            return cb_wrapper.on_ascii_only(ch);
 5214|  11.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.40k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.40k|        {
  667|  8.40k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   347k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   347k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   347k|            auto rd = make_reader<T, char_type>();
 6237|   347k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   347k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 343k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.02k|    }
  ------------------
 6238|       |
 6239|   343k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 343k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   343k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   343k|                return impl(rd, range, value);
 6242|   343k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   347k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.71M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.71M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.71M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.71M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|   343k|    {
 6162|   343k|        const bool need_skipped_width =
 6163|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 343k]
  |  Branch (6163:33): [True: 0, False: 343k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   343k|        auto it = rng.begin();
 6167|   343k|        std::ptrdiff_t prefix_width = 0;
 6168|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 343k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   343k|        else {
 6176|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 930, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    930|    }                                                  \
  |  |  |  | 3939|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   342k|            std::tie(it, prefix_width) = prefix_result;
 6178|   342k|        }
 6179|   342k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   342k|        std::ptrdiff_t value_width = 0;
 6183|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 342k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   342k|        else {
 6199|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.11k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.11k|    }                                                  \
  |  | 3939|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   335k|                                             specs, value, loc));
 6201|       |
 6202|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 335k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   335k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   335k|        std::ptrdiff_t postfix_width = 0;
 6211|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 334k, False: 760]
  ------------------
 6212|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   334k|                                 value_width));
 6216|   334k|            std::tie(it, postfix_width) = postfix_result;
 6217|   334k|        }
 6218|       |
 6219|   335k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   335k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   335k|            specs, prefix_width, value_width, postfix_width));
 6221|   335k|        return it;
 6222|   335k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   838k|{
 3108|   838k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   838k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.19k, False: 837k]
  ------------------
 3110|  1.19k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.19k|    static_cast<    \
  |  |  935|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.19k|        }
 3112|   837k|        else {
 3113|   837k|            dest.assign(source.view());
 3114|   837k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   838k|    return {};
 3121|   838k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   342k|    {
 5314|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   342k|        return read_impl(range, specs, value);
 5316|   342k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   342k|    {
 5332|   342k|        SCN_CLANG_PUSH
 5333|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   342k|        switch (m_type) {
 5336|   338k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 338k, False: 4.20k]
  ------------------
 5337|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 342k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 342k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 4.20k, False: 338k]
  ------------------
 5347|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  4.20k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 342k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 342k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 342k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   342k|        }
 5368|       |
 5369|   342k|        SCN_CLANG_POP
 5370|   342k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   846k|    {
 4861|   846k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   846k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   846k|{
 4795|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   846k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   846k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 7.72k, False: 838k]
  ------------------
 4799|  7.72k|        return detail::unexpected_scan_error(
 4800|  7.72k|            scan_error::invalid_scanned_value,
 4801|  7.72k|            "Invalid encoding in scanned string");
 4802|  7.72k|    }
 4803|       |
 4804|   838k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   838k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 838k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   838k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   838k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  4.20k|    {
 5089|  4.20k|        auto it = read_source_impl(range, {specs});
 5090|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 182]
  |  |  ------------------
  ------------------
 5091|  4.02k|            return unexpected(it.error());
 5092|  4.02k|        }
 5093|       |
 5094|    182|        return read_string_impl(range, *it, value);
 5095|  4.20k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    182|{
 4795|    182|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    182|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    182|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 182]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    182|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    182|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 182]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    182|    return SCN_MOVE(result);
  ------------------
  |  |  934|    182|    static_cast<    \
  |  |  935|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    182|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   342k|    {
 5314|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   342k|        return read_impl(range, specs, value);
 5316|   342k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   342k|    {
 5332|   342k|        SCN_CLANG_PUSH
 5333|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   342k|        switch (m_type) {
 5336|   338k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 338k, False: 4.20k]
  ------------------
 5337|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 342k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 342k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 4.20k, False: 338k]
  ------------------
 5347|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  4.20k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 342k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 342k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 342k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   342k|        }
 5368|       |
 5369|   342k|        SCN_CLANG_POP
 5370|   342k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   846k|    {
 4861|   846k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   846k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   846k|{
 4795|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   846k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   846k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 7.72k, False: 838k]
  ------------------
 4799|  7.72k|        return detail::unexpected_scan_error(
 4800|  7.72k|            scan_error::invalid_scanned_value,
 4801|  7.72k|            "Invalid encoding in scanned string");
 4802|  7.72k|    }
 4803|       |
 4804|   838k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   838k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 838k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   838k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   838k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   838k|{
 3128|   838k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   838k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   838k|    return {};
 3136|   838k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  4.20k|    {
 5089|  4.20k|        auto it = read_source_impl(range, {specs});
 5090|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 182]
  |  |  ------------------
  ------------------
 5091|  4.02k|            return unexpected(it.error());
 5092|  4.02k|        }
 5093|       |
 5094|    182|        return read_string_impl(range, *it, value);
 5095|  4.20k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    182|{
 4795|    182|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    182|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    182|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 182]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    182|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    182|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 182]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    182|    return SCN_MOVE(result);
  ------------------
  |  |  934|    182|    static_cast<    \
  |  |  935|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    182|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   856k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   856k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   856k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   856k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   342k|    {
 5314|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   342k|        return read_impl(range, specs, value);
 5316|   342k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   342k|    {
 5332|   342k|        SCN_CLANG_PUSH
 5333|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   342k|        switch (m_type) {
 5336|   338k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 338k, False: 4.20k]
  ------------------
 5337|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 342k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 342k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 4.20k, False: 338k]
  ------------------
 5347|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  4.20k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 342k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 342k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 342k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   342k|        }
 5368|       |
 5369|   342k|        SCN_CLANG_POP
 5370|   342k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   846k|    {
 4868|   846k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   846k|                                     value);
 4870|   846k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   846k|{
 4814|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   846k|    auto src = [&]() {
 4817|   846k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   846k|            return make_contiguous_buffer(
 4819|   846k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   846k|        }
 4821|   846k|        else {
 4822|   846k|            return make_contiguous_buffer(
 4823|   846k|                ranges::subrange{range.begin(), result});
 4824|   846k|        }
 4825|   846k|    }();
 4826|   846k|    using src_type = decltype(src);
 4827|       |
 4828|   846k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   846k|    else {
 4841|   846k|        const auto view = src.view();
 4842|   846k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   846k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 7.72k, False: 838k]
  ------------------
 4845|  7.72k|            return detail::unexpected_scan_error(
 4846|  7.72k|                scan_error::invalid_scanned_value,
 4847|  7.72k|                "Invalid encoding in scanned string_view");
 4848|  7.72k|        }
 4849|       |
 4850|   838k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   838k|    static_cast<    \
  |  |  935|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   846k|    }
 4852|   846k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   846k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   846k|        else {
 4822|   846k|            return make_contiguous_buffer(
 4823|   846k|                ranges::subrange{range.begin(), result});
 4824|   846k|        }
 4825|   846k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  4.20k|    {
 5103|  4.20k|        auto it = read_source_impl(range, {specs});
 5104|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.02k, False: 182]
  |  |  ------------------
  ------------------
 5105|  4.02k|            return unexpected(it.error());
 5106|  4.02k|        }
 5107|       |
 5108|    182|        return read_string_view_impl(range, *it, value);
 5109|  4.20k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    182|{
 4814|    182|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    182|    auto src = [&]() {
 4817|    182|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    182|            return make_contiguous_buffer(
 4819|    182|                ranges::subrange{range.begin().base(), result.base()});
 4820|    182|        }
 4821|    182|        else {
 4822|    182|            return make_contiguous_buffer(
 4823|    182|                ranges::subrange{range.begin(), result});
 4824|    182|        }
 4825|    182|    }();
 4826|    182|    using src_type = decltype(src);
 4827|       |
 4828|    182|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    182|    else {
 4841|    182|        const auto view = src.view();
 4842|    182|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    182|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 182]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    182|        return SCN_MOVE(result);
  ------------------
  |  |  934|    182|    static_cast<    \
  |  |  935|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    182|    }
 4852|    182|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    182|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    182|        else {
 4822|    182|            return make_contiguous_buffer(
 4823|    182|                ranges::subrange{range.begin(), result});
 4824|    182|        }
 4825|    182|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   847k|{
 3066|   847k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 847k, False: 0]
  ------------------
 3067|   847k|        auto it = read_while_classic_space(range);
 3068|   847k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   847k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   847k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.22k, False: 846k]
  |  |  ------------------
  ------------------
 3070|  1.22k|            return unexpected(e);
 3071|  1.22k|        }
 3072|       |
 3073|   846k|        return it;
 3074|   847k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   847k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   847k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   847k|    else {
 2225|   847k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   847k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   847k|            return detail::is_cp_space(cp);
 2238|   847k|        });
 2239|   847k|    }
 2240|   847k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   847k|        : m_fptr([](storage fn,
  743|   847k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   847k|              cvref<T> obj = *get<T>(fn);
  745|   847k|              if constexpr (std::is_void_v<R>) {
  746|   847k|                  obj(static_cast<decltype(args)>(args)...);
  747|   847k|              }
  748|   847k|              else {
  749|   847k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   847k|              }
  751|   847k|          }),
  752|   847k|          m_storage(std::addressof(f))
  753|   847k|    {
  754|   847k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.97M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.97M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.97M|              else {
  749|  1.97M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.97M|              }
  751|  1.97M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.97M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.97M|        else if constexpr (std::is_object_v<T>) {
  688|  1.97M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.97M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.97M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.97M|            return detail::is_cp_space(cp);
 2238|  1.97M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   847k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   847k|        {
  662|   847k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   141k|{
 5835|   141k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.24k, False: 140k]
  |  |  ------------------
  ------------------
 5836|  1.24k|        return unexpected(e);
 5837|  1.24k|    }
 5838|       |
 5839|   140k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 140k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   140k|    return skip_classic_whitespace(range);
 5844|   140k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  70.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  70.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  70.6k|            auto rd = make_reader<T, char_type>();
 5916|  70.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  70.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  70.6k|    {
 5903|  70.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.12k, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.12k|    }                                                  \
  |  |  |  | 3939|  70.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  69.5k|                        .transform_error(make_eof_scan_error));
 5905|  69.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  70.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  69.5k|    {
 5303|  69.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  69.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  69.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  69.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  70.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  70.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  70.6k|            auto rd = make_reader<T, char_type>();
 5916|  70.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  70.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  70.6k|    {
 5903|  70.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.12k, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.12k|    }                                                  \
  |  |  |  | 3939|  70.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  69.5k|                        .transform_error(make_eof_scan_error));
 5905|  69.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  70.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  69.5k|    {
 5303|  69.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  69.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  69.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  69.5k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  86.9k|{
 5835|  86.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 783, False: 86.2k]
  |  |  ------------------
  ------------------
 5836|    783|        return unexpected(e);
 5837|    783|    }
 5838|       |
 5839|  86.2k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 86.2k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  86.2k|    return skip_classic_whitespace(range);
 5844|  86.2k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  86.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  86.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  86.9k|            auto rd = make_reader<T, char_type>();
 5920|  86.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 86.9k, False: 0]
  ------------------
 5921|  86.9k|                return impl(rd, range, value);
 5922|  86.9k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  86.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  86.9k|    {
 5903|  86.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  86.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  86.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  86.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.37k, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.37k|    }                                                  \
  |  |  |  | 3939|  86.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  85.6k|                        .transform_error(make_eof_scan_error));
 5905|  85.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  86.9k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  85.6k|    {
 5303|  85.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  85.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  85.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  85.6k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   111k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   111k|    static_cast<    \
  |  |  935|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   111k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   111k|          m_current(m_range.begin())
 2988|   111k|    {
 2989|   111k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   195k|    {
 2998|   195k|        return m_range.end();
 2999|   195k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  91.8k|    {
 3013|  91.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  91.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  91.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 91.8k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  91.8k|        }
 3019|  91.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  91.8k|    static_cast<    \
  |  |  935|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  91.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   103k|    {
 3003|   103k|        return ranges::subrange{begin(), end()};
 3004|   103k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  99.9k|    {
 6075|  99.9k|        const bool need_skipped_width =
 6076|  99.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 99.9k]
  |  Branch (6076:33): [True: 0, False: 99.9k]
  ------------------
 6077|  99.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  99.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 99.9k]
  ------------------
 6081|  99.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 99.9k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  99.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 99.9k, False: 0]
  |  Branch (6085:56): [True: 94.2k, False: 5.67k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  94.2k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 94.2k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   187k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 92.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   187k|                            make_eof_scan_error));
 6096|       |
 6097|   187k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 92.7k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  92.7k|            return result_type{it, 0};
 6105|   187k|        }
 6106|       |
 6107|  5.67k|        return result_type{rng.begin(), 0};
 6108|  99.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  90.9k|    {
 6117|  90.9k|        const bool need_skipped_width =
 6118|  90.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 90.9k]
  |  Branch (6118:33): [True: 0, False: 90.9k]
  ------------------
 6119|  90.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  90.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 90.9k]
  ------------------
 6122|  90.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 90.9k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  90.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 90.9k, False: 0]
  ------------------
 6131|  90.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.57k, False: 89.4k]
  ------------------
 6132|  90.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.57k]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|  1.57k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 1.57k]
  ------------------
 6134|  1.57k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  90.9k|        return result_type{rng.begin(), 0};
 6156|  90.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  51.9k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.9k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.9k|            auto rd = make_reader<T, char_type>();
 6232|  51.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 49.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.01k|    }
  ------------------
 6233|  49.9k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  49.9k|    {
 6162|  49.9k|        const bool need_skipped_width =
 6163|  49.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 49.9k]
  |  Branch (6163:33): [True: 0, False: 49.9k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  49.9k|        auto it = rng.begin();
 6167|  49.9k|        std::ptrdiff_t prefix_width = 0;
 6168|  49.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 49.9k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  49.9k|        else {
 6176|  49.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  49.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 750, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    750|    }                                                  \
  |  |  |  | 3939|  49.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.2k|        }
 6179|  49.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.2k|        std::ptrdiff_t value_width = 0;
 6183|  49.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.2k|        else {
 6199|  49.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  49.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  49.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.27k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.27k|    }                                                  \
  |  | 3939|  49.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  45.9k|                                             specs, value, loc));
 6201|       |
 6202|  45.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 45.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  45.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  45.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  45.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 45.4k, False: 456]
  ------------------
 6212|  45.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  45.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  45.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  45.4k|                                 value_width));
 6216|  45.4k|            std::tie(it, postfix_width) = postfix_result;
 6217|  45.4k|        }
 6218|       |
 6219|  45.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  45.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  45.9k|        return it;
 6222|  45.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  51.9k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.9k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.9k|            auto rd = make_reader<T, char_type>();
 6232|  51.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 49.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.01k|    }
  ------------------
 6233|  49.9k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  49.9k|    {
 6162|  49.9k|        const bool need_skipped_width =
 6163|  49.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 49.9k]
  |  Branch (6163:33): [True: 0, False: 49.9k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  49.9k|        auto it = rng.begin();
 6167|  49.9k|        std::ptrdiff_t prefix_width = 0;
 6168|  49.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 49.9k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  49.9k|        else {
 6176|  49.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  49.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 750, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    750|    }                                                  \
  |  |  |  | 3939|  49.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.2k|        }
 6179|  49.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.2k|        std::ptrdiff_t value_width = 0;
 6183|  49.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.2k|        else {
 6199|  49.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  49.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  49.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.27k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.27k|    }                                                  \
  |  | 3939|  49.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  45.9k|                                             specs, value, loc));
 6201|       |
 6202|  45.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 45.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  45.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  45.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  45.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 45.4k, False: 456]
  ------------------
 6212|  45.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  45.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  45.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  45.4k|                                 value_width));
 6216|  45.4k|            std::tie(it, postfix_width) = postfix_result;
 6217|  45.4k|        }
 6218|       |
 6219|  45.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  45.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  45.9k|        return it;
 6222|  45.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  1.01M|{
 5835|  1.01M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.20k, False: 1.01M]
  |  |  ------------------
  ------------------
 5836|  2.20k|        return unexpected(e);
 5837|  2.20k|    }
 5838|       |
 5839|  1.01M|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 1.01M]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  1.01M|    return skip_classic_whitespace(range);
 5844|  1.01M|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   509k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   509k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   509k|            auto rd = make_reader<T, char_type>();
 5916|   509k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   509k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   509k|    {
 5903|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   507k|                        .transform_error(make_eof_scan_error));
 5905|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   509k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   507k|    {
 5303|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   507k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   509k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   509k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   509k|            auto rd = make_reader<T, char_type>();
 5916|   509k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   509k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   509k|    {
 5903|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   507k|                        .transform_error(make_eof_scan_error));
 5905|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   509k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   507k|    {
 5303|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   507k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   711k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   711k|    static_cast<    \
  |  |  935|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   711k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   711k|          m_current(m_range.begin())
 2988|   711k|    {
 2989|   711k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  1.36M|    {
 2998|  1.36M|        return m_range.end();
 2999|  1.36M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   671k|    {
 3013|   671k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   671k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   671k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 671k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   671k|        }
 3019|   671k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   671k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   695k|    {
 3003|   695k|        return ranges::subrange{begin(), end()};
 3004|   695k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   687k|    {
 6075|   687k|        const bool need_skipped_width =
 6076|   687k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 687k]
  |  Branch (6076:33): [True: 0, False: 687k]
  ------------------
 6077|   687k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   687k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 687k]
  ------------------
 6081|   687k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 687k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   687k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 687k, False: 0]
  |  Branch (6085:56): [True: 678k, False: 8.40k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   678k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 678k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.35M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   678k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   678k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   678k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.86k, False: 676k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.86k|    }                                                  \
  |  |  |  | 3939|   678k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.35M|                            make_eof_scan_error));
 6096|       |
 6097|  1.35M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 676k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   676k|            return result_type{it, 0};
 6105|  1.35M|        }
 6106|       |
 6107|  8.40k|        return result_type{rng.begin(), 0};
 6108|   687k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   669k|    {
 6117|   669k|        const bool need_skipped_width =
 6118|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 669k]
  |  Branch (6118:33): [True: 0, False: 669k]
  ------------------
 6119|   669k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   669k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 669k]
  ------------------
 6122|   669k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 669k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   669k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 669k, False: 0]
  ------------------
 6131|   669k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 316, False: 669k]
  ------------------
 6132|   669k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 316]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    316|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 316]
  ------------------
 6134|    316|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   669k|        return result_type{rng.begin(), 0};
 6156|   669k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   347k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   347k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   347k|            auto rd = make_reader<T, char_type>();
 6232|   347k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   347k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 343k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.02k|    }
  ------------------
 6233|   343k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   347k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|   343k|    {
 6162|   343k|        const bool need_skipped_width =
 6163|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 343k]
  |  Branch (6163:33): [True: 0, False: 343k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   343k|        auto it = rng.begin();
 6167|   343k|        std::ptrdiff_t prefix_width = 0;
 6168|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 343k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   343k|        else {
 6176|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 930, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    930|    }                                                  \
  |  |  |  | 3939|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   342k|            std::tie(it, prefix_width) = prefix_result;
 6178|   342k|        }
 6179|   342k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   342k|        std::ptrdiff_t value_width = 0;
 6183|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 342k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   342k|        else {
 6199|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.11k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.11k|    }                                                  \
  |  | 3939|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   335k|                                             specs, value, loc));
 6201|       |
 6202|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 335k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   335k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   335k|        std::ptrdiff_t postfix_width = 0;
 6211|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 334k, False: 760]
  ------------------
 6212|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   334k|                                 value_width));
 6216|   334k|            std::tie(it, postfix_width) = postfix_result;
 6217|   334k|        }
 6218|       |
 6219|   335k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   335k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   335k|            specs, prefix_width, value_width, postfix_width));
 6221|   335k|        return it;
 6222|   335k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   347k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   347k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   347k|            auto rd = make_reader<T, char_type>();
 6232|   347k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   347k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 343k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.02k|    }
  ------------------
 6233|   343k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   347k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|   343k|    {
 6162|   343k|        const bool need_skipped_width =
 6163|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 343k]
  |  Branch (6163:33): [True: 0, False: 343k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   343k|        auto it = rng.begin();
 6167|   343k|        std::ptrdiff_t prefix_width = 0;
 6168|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 343k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   343k|        else {
 6176|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 930, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    930|    }                                                  \
  |  |  |  | 3939|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   342k|            std::tie(it, prefix_width) = prefix_result;
 6178|   342k|        }
 6179|   342k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   342k|        std::ptrdiff_t value_width = 0;
 6183|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 342k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   342k|        else {
 6199|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.11k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.11k|    }                                                  \
  |  | 3939|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   335k|                                             specs, value, loc));
 6201|       |
 6202|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 335k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   335k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   335k|        std::ptrdiff_t postfix_width = 0;
 6211|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 334k, False: 760]
  ------------------
 6212|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   334k|                                 value_width));
 6216|   334k|            std::tie(it, postfix_width) = postfix_result;
 6217|   334k|        }
 6218|       |
 6219|   335k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   335k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   335k|            specs, prefix_width, value_width, postfix_width));
 6221|   335k|        return it;
 6222|   335k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   509k|{
 5835|   509k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.10k, False: 507k]
  |  |  ------------------
  ------------------
 5836|  1.10k|        return unexpected(e);
 5837|  1.10k|    }
 5838|       |
 5839|   507k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 507k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   507k|    return skip_classic_whitespace(range);
 5844|   507k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   509k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   509k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   509k|            auto rd = make_reader<T, char_type>();
 5920|   509k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 509k, False: 0]
  ------------------
 5921|   509k|                return impl(rd, range, value);
 5922|   509k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   509k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   509k|    {
 5903|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   507k|                        .transform_error(make_eof_scan_error));
 5905|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   509k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   507k|    {
 5303|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   507k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.00k|{
   53|  1.00k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.00k|    string_buffer.resize(size);
   57|  1.00k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.00k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.00k|    const auto wsv_reinterpret_size =
   62|  1.00k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 165, False: 840]
  ------------------
   63|  1.00k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.00k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.00k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.00k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.00k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.00k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.00k|{
  123|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.00k|    buf.resize(sizeof...(Args));
  126|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.00k|    return buf;
  128|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.00k|{
  109|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.00k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.00k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.00k|{
  186|  1.00k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.00k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.00k|                                   format_strings);
  189|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.00k|{
  134|       |    // Regular scan
  135|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.03k, False: 1.00k]
  ------------------
  136|  6.03k|        auto it = scn::ranges::begin(source);
  137|  51.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  51.5k|            auto result = scn::scan<T>(
  140|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  51.5k|                scn::runtime_format(f));
  142|  51.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.03k, False: 45.5k]
  ------------------
  143|  6.03k|                break;
  144|  6.03k|            }
  145|  45.5k|            it = result->begin();
  146|  45.5k|        }
  147|  6.03k|    }
  148|       |
  149|       |    // scan localized
  150|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.03k, False: 1.00k]
  ------------------
  151|  6.03k|        auto it = scn::ranges::begin(source);
  152|  51.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  51.5k|            auto result = scn::scan<T>(
  155|  51.5k|                global_locale,
  156|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.5k|                scn::runtime_format(f));
  158|  51.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.03k, False: 45.5k]
  ------------------
  159|  6.03k|                break;
  160|  6.03k|            }
  161|  45.5k|            it = result->begin();
  162|  45.5k|        }
  163|  6.03k|    }
  164|       |
  165|       |    // scan_value
  166|  1.00k|    {
  167|  1.00k|        auto it = scn::ranges::begin(source);
  168|  23.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  23.5k|            auto result = scn::scan_value<T>(
  171|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  23.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.00k, False: 22.5k]
  ------------------
  173|  1.00k|                break;
  174|  1.00k|            }
  175|  22.5k|            it = result->begin();
  176|  22.5k|        }
  177|  1.00k|    }
  178|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.00k|{
  134|       |    // Regular scan
  135|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.03k, False: 1.00k]
  ------------------
  136|  6.03k|        auto it = scn::ranges::begin(source);
  137|  51.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  51.5k|            auto result = scn::scan<T>(
  140|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  51.5k|                scn::runtime_format(f));
  142|  51.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.03k, False: 45.5k]
  ------------------
  143|  6.03k|                break;
  144|  6.03k|            }
  145|  45.5k|            it = result->begin();
  146|  45.5k|        }
  147|  6.03k|    }
  148|       |
  149|       |    // scan localized
  150|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.03k, False: 1.00k]
  ------------------
  151|  6.03k|        auto it = scn::ranges::begin(source);
  152|  51.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  51.5k|            auto result = scn::scan<T>(
  155|  51.5k|                global_locale,
  156|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.5k|                scn::runtime_format(f));
  158|  51.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.03k, False: 45.5k]
  ------------------
  159|  6.03k|                break;
  160|  6.03k|            }
  161|  45.5k|            it = result->begin();
  162|  45.5k|        }
  163|  6.03k|    }
  164|       |
  165|       |    // scan_value
  166|  1.00k|    {
  167|  1.00k|        auto it = scn::ranges::begin(source);
  168|  23.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  23.5k|            auto result = scn::scan_value<T>(
  171|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  23.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.00k, False: 22.5k]
  ------------------
  173|  1.00k|                break;
  174|  1.00k|            }
  175|  22.5k|            it = result->begin();
  176|  22.5k|        }
  177|  1.00k|    }
  178|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.00k|{
  134|       |    // Regular scan
  135|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.03k, False: 1.00k]
  ------------------
  136|  6.03k|        auto it = scn::ranges::begin(source);
  137|  62.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  62.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  62.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  62.7k|            auto result = scn::scan<T>(
  140|  62.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  62.7k|                scn::runtime_format(f));
  142|  62.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.03k, False: 56.7k]
  ------------------
  143|  6.03k|                break;
  144|  6.03k|            }
  145|  56.7k|            it = result->begin();
  146|  56.7k|        }
  147|  6.03k|    }
  148|       |
  149|       |    // scan localized
  150|  6.03k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.03k, False: 1.00k]
  ------------------
  151|  6.03k|        auto it = scn::ranges::begin(source);
  152|  62.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  62.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  62.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  62.7k|            auto result = scn::scan<T>(
  155|  62.7k|                global_locale,
  156|  62.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.7k|                scn::runtime_format(f));
  158|  62.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.03k, False: 56.7k]
  ------------------
  159|  6.03k|                break;
  160|  6.03k|            }
  161|  56.7k|            it = result->begin();
  162|  56.7k|        }
  163|  6.03k|    }
  164|       |
  165|       |    // scan_value
  166|  1.00k|    {
  167|  1.00k|        auto it = scn::ranges::begin(source);
  168|  28.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  28.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  28.9k|            auto result = scn::scan_value<T>(
  171|  28.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  28.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.00k, False: 27.9k]
  ------------------
  173|  1.00k|                break;
  174|  1.00k|            }
  175|  27.9k|            it = result->begin();
  176|  27.9k|        }
  177|  1.00k|    }
  178|  1.00k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.00k|{
   91|  1.00k|    using char_type = ranges::range_value_t<Source>;
   92|  1.00k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.00k|    deque.clear();
   94|  1.00k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.00k|              std::back_inserter(deque));
   96|  1.00k|    return deque;
   97|  1.00k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.00k|{
   80|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.00k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.00k|{
  123|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.00k|    buf.resize(sizeof...(Args));
  126|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.00k|    return buf;
  128|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.00k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.00k|    else {
  113|  1.00k|        return wformat_string_view_buffer;
  114|  1.00k|    }
  115|  1.00k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.01k|{
  186|  2.01k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.01k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.01k|                                   format_strings);
  189|  2.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  2.01k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 2.01k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|   347k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   347k|            auto result = scn::scan<T>(
  140|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   347k|                scn::runtime_format(f));
  142|   347k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 335k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|   335k|            it = result->begin();
  146|   335k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 2.01k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|   347k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   347k|            auto result = scn::scan<T>(
  155|   347k|                global_locale,
  156|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   347k|                scn::runtime_format(f));
  158|   347k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 335k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|   335k|            it = result->begin();
  162|   335k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.01k|    {
  167|  2.01k|        auto it = scn::ranges::begin(source);
  168|   169k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   169k|            auto result = scn::scan_value<T>(
  171|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   169k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.01k, False: 167k]
  ------------------
  173|  2.01k|                break;
  174|  2.01k|            }
  175|   167k|            it = result->begin();
  176|   167k|        }
  177|  2.01k|    }
  178|  2.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.01k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 2.01k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|   347k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   347k|            auto result = scn::scan<T>(
  140|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   347k|                scn::runtime_format(f));
  142|   347k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 335k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|   335k|            it = result->begin();
  146|   335k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 2.01k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|   347k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   347k|            auto result = scn::scan<T>(
  155|   347k|                global_locale,
  156|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   347k|                scn::runtime_format(f));
  158|   347k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 335k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|   335k|            it = result->begin();
  162|   335k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.01k|    {
  167|  2.01k|        auto it = scn::ranges::begin(source);
  168|   169k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   169k|            auto result = scn::scan_value<T>(
  171|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   169k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.01k, False: 167k]
  ------------------
  173|  2.01k|                break;
  174|  2.01k|            }
  175|   167k|            it = result->begin();
  176|   167k|        }
  177|  2.01k|    }
  178|  2.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  2.01k|{
  134|       |    // Regular scan
  135|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.0k, False: 2.01k]
  ------------------
  136|  12.0k|        auto it = scn::ranges::begin(source);
  137|   347k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   347k|            auto result = scn::scan<T>(
  140|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   347k|                scn::runtime_format(f));
  142|   347k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.0k, False: 335k]
  ------------------
  143|  12.0k|                break;
  144|  12.0k|            }
  145|   335k|            it = result->begin();
  146|   335k|        }
  147|  12.0k|    }
  148|       |
  149|       |    // scan localized
  150|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.0k, False: 2.01k]
  ------------------
  151|  12.0k|        auto it = scn::ranges::begin(source);
  152|   347k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   347k|            auto result = scn::scan<T>(
  155|   347k|                global_locale,
  156|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   347k|                scn::runtime_format(f));
  158|   347k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.0k, False: 335k]
  ------------------
  159|  12.0k|                break;
  160|  12.0k|            }
  161|   335k|            it = result->begin();
  162|   335k|        }
  163|  12.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.01k|    {
  167|  2.01k|        auto it = scn::ranges::begin(source);
  168|   169k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   169k|            auto result = scn::scan_value<T>(
  171|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   169k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.01k, False: 167k]
  ------------------
  173|  2.01k|                break;
  174|  2.01k|            }
  175|   167k|            it = result->begin();
  176|   167k|        }
  177|  2.01k|    }
  178|  2.01k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  2.01k|{
   91|  2.01k|    using char_type = ranges::range_value_t<Source>;
   92|  2.01k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.01k|    deque.clear();
   94|  2.01k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.01k|              std::back_inserter(deque));
   96|  2.01k|    return deque;
   97|  2.01k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  2.01k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  2.01k|    else {
   84|  2.01k|        return wnoncontiguous_buffer;
   85|  2.01k|    }
   86|  2.01k|}

LLVMFuzzerTestOneInput:
   57|  1.00k|{
   58|  1.00k|    scn::fuzz::run(data, size);
   59|  1.00k|    return 0;
   60|  1.00k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.00k|{
   36|  1.00k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.00k]
  |  Branch (36:35): [True: 0, False: 1.00k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.00k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.00k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.00k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.00k|    do_basic_run(sv, f);
   45|       |
   46|  1.00k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.00k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.00k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.00k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.00k, False: 0]
  ------------------
   50|  1.00k|        do_basic_run(wsv_transcode, wf);
   51|  1.00k|    }
   52|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|  1.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.00k|            source, format_strings);
   30|  1.00k|    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.01k|{
   25|  2.01k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.01k|                                                           format_strings);
   27|  2.01k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.01k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.01k|            source, format_strings);
   30|  2.01k|    }
   31|  2.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.01k|{
   25|  2.01k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.01k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.01k|}

