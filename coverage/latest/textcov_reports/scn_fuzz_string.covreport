_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  3.84M|{
 4068|  3.84M|    if constexpr (sizeof(U) == 1) {
 4069|  3.84M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  3.84M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  3.84M|{
 4032|  3.84M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  3.84M|    SCN_GCC_COMPAT_PUSH
 4035|  3.84M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  3.84M|    constexpr char lengths[] =
 4037|  3.84M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  3.84M|        "\1\1\1\1\1\1\1\1"
 4039|  3.84M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  3.84M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  3.84M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  3.84M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  3.84M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  3.84M|    SCN_GCC_COMPAT_POP
 4046|  3.84M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  3.68M|{
 4274|  3.68M|    if constexpr (sizeof(CharT) == 1) {
 4275|  3.68M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  3.68M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  3.68M|{
 4087|  3.68M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  945|  3.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  3.68M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  3.68M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  3.68M|    };
 4092|       |
 4093|  3.68M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 3.30M, False: 381k]
  ------------------
 4094|  3.30M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 323, False: 3.30M]
  ------------------
 4095|    323|            SCN_UNLIKELY_ATTR
 4096|    323|            return invalid_code_point;
 4097|    323|        }
 4098|  3.30M|        return static_cast<char32_t>(input[0]);
 4099|  3.30M|    }
 4100|       |
 4101|   381k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 115k, False: 266k]
  ------------------
 4102|   115k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 169, False: 115k]
  ------------------
 4103|    169|            SCN_UNLIKELY_ATTR
 4104|    169|            return invalid_code_point;
 4105|    169|        }
 4106|   115k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 9.46k, False: 105k]
  ------------------
 4107|  9.46k|            SCN_UNLIKELY_ATTR
 4108|  9.46k|            return invalid_code_point;
 4109|  9.46k|        }
 4110|       |
 4111|   105k|        char32_t cp{};
 4112|   105k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   105k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   105k|        return cp;
 4115|   115k|    }
 4116|       |
 4117|   266k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 257k, False: 8.80k]
  ------------------
 4118|   257k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 35, False: 257k]
  ------------------
 4119|     35|            SCN_UNLIKELY_ATTR
 4120|     35|            return invalid_code_point;
 4121|     35|        }
 4122|   257k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 3.35k, False: 254k]
  ------------------
 4123|   257k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 787, False: 253k]
  ------------------
 4124|  4.14k|            SCN_UNLIKELY_ATTR
 4125|  4.14k|            return invalid_code_point;
 4126|  4.14k|        }
 4127|       |
 4128|   253k|        char32_t cp{};
 4129|   253k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   253k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   253k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   253k|        return cp;
 4133|   257k|    }
 4134|       |
 4135|  8.80k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 8.80k, False: 0]
  ------------------
 4136|  8.80k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 8.80k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  8.80k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 2.39k, False: 6.41k]
  ------------------
 4141|  2.39k|            SCN_UNLIKELY_ATTR
 4142|  2.39k|            return invalid_code_point;
 4143|  2.39k|        }
 4144|  6.41k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.33k, False: 4.07k]
  ------------------
 4145|  6.41k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 150, False: 3.92k]
  ------------------
 4146|  6.41k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 114, False: 3.81k]
  ------------------
 4147|  2.60k|            SCN_UNLIKELY_ATTR
 4148|  2.60k|            return invalid_code_point;
 4149|  2.60k|        }
 4150|       |
 4151|  3.81k|        char32_t cp{};
 4152|  3.81k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.81k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.81k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.81k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.81k|        return cp;
 4157|  6.41k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   641k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   641k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   641k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  3.20M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  3.20M|    else {
 3966|  3.20M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  3.20M|                                       to_address(first), to_address(last)))};
 3968|  3.20M|    }
 3969|  3.20M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  9.96M|{
  316|  9.96M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  9.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  9.96M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  11.1M|{
  294|  11.1M|    return p;
  295|  11.1M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.60M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.60M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.60M|        SCN_UNUSED(sv);
  ------------------
  |  |  930|  1.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.60M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.60M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  24.2k|    {
 2869|  24.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  24.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  24.2k|    {
 2850|  24.2k|        return decay_copy(t.begin());
 2851|  24.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  1.93M|{
 2094|  1.93M|    return SCN_FWD(t);
  ------------------
  |  |  951|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.93M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   412k|    {
 2926|   412k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   412k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   412k|    {
 2908|   412k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   412k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  41.9k|{
 9705|  41.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  41.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  41.9k|                                   make_scan_args(result->values())));
 9708|  41.9k|    return result;
 9709|  41.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9660|   102k|{
 9661|   102k|    return scan_result_type<Source, Args...>();
 9662|   102k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   102k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   102k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   102k|    {
  613|   102k|        construct();
  614|   102k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   102k|    {
  694|   102k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   102k|        m_has_value = true;
  696|   102k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   102k|{
  396|   102k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   102k|        T(std::forward<Args>(args)...);
  398|   102k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|   102k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   205k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   205k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6384|   233k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   490k|    {
  718|   490k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  915|   490k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   490k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   102k|{
 9646|   102k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 11.6k, False: 91.1k]
  |  |  ------------------
  ------------------
 9647|  11.6k|        out = unexpected(in.error());
 9648|  11.6k|    }
 9649|  91.1k|    else {
 9650|  91.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|  91.1k|    static_cast<    \
  |  |  950|  91.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  91.1k|    }
 9652|   102k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   205k|    {
 1740|   205k|        return has_value();
 1741|   205k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   411k|    {
  490|   411k|        return m_has_value;
  491|   411k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  23.3k|    {
 1746|  23.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.3k|        return this->get_unexpected().error();
 1748|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.3k|    {
  473|  23.3k|        return m_unexpected;
  474|  23.3k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.00M|    {
  365|  1.00M|        return m_unexpected;
  366|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   441k|        : m_unexpected(std::forward<Err>(e))
  350|   441k|    {
  351|   441k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|   441k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   441k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  70.1k|{
  396|  70.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  70.1k|        T(std::forward<Args>(args)...);
  398|  70.1k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   578k|        : m_unexpected(std::forward<Args>(args)...)
  359|   578k|    {
  360|   578k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|   578k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   578k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.4k|    {
  730|  58.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  915|  58.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   525k|    {
  687|   525k|        return m_has_value;
  688|   525k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   285k|    {
  653|   285k|        return *value_ptr();
  654|   285k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   102k|    {
  708|   102k|        scn::detail::destroy_at(value_ptr());
  709|   102k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   102k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   102k|    else {
  408|   102k|        p->~T();
  409|   102k|    }
  410|   102k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|   102k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   105k|{
  396|   105k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   105k|        T(std::forward<Args>(args)...);
  398|   105k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.3k|    {
  712|  23.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.3k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   140k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   140k|    else {
  408|   140k|        p->~T();
  409|   140k|    }
  410|   140k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   182k|    {
 6485|   182k|        m_range = std::forward<Other>(r);
 6486|   182k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   182k|    {
 1795|   182k|        return value();
 1796|   182k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   182k|    {
 1769|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   182k|        return this->get_value();
 1771|   182k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  83.8k|{
 9485|  83.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  951|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  83.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  83.8k|{
 9422|  83.8k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  83.8k|    auto result = vscan_impl(buffer, format, args);
 9425|  83.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 73.0k]
  |  |  ------------------
  ------------------
 9426|  10.7k|        return unexpected(result.error());
 9427|  10.7k|    }
 9428|  73.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  83.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   205k|{
 5381|   205k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   205k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   205k|                  "\n"
 5385|   205k|                  "Unsupported range type given as input to a scanning "
 5386|   205k|                  "function.\n"
 5387|   205k|                  "A range needs to have a character type (value type) "
 5388|   205k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   205k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   205k|                  "to be included.\n"
 5391|   205k|                  "See the scnlib documentation for more details.");
 5392|   205k|    static_assert(
 5393|   205k|        !std::is_same_v<T, custom_char_traits>,
 5394|   205k|        "\n"
 5395|   205k|        "Unsupported range type given as input to a scanning "
 5396|   205k|        "function.\n"
 5397|   205k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   205k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   205k|        "not supported.");
 5400|   205k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   205k|                  "\n"
 5402|   205k|                  "Unsupported range type given as input to a scanning "
 5403|   205k|                  "function.\n"
 5404|   205k|                  "file_marker_found cannot be used as an "
 5405|   205k|                  "source range type to scn::scan.\n"
 5406|   205k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   205k|                  "and do not provide an explicit source range, "
 5408|   205k|                  "or use scn::scan with a FILE* directly.");
 5409|   205k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   205k|                  "\n"
 5411|   205k|                  "Unsupported range type given as input to a scanning "
 5412|   205k|                  "function.\n"
 5413|   205k|                  "In order to be scannable, a range needs to satisfy "
 5414|   205k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   205k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   205k|                  "\n"
 5417|   205k|                  "Unsupported range type given as input to a scanning "
 5418|   205k|                  "function.\n"
 5419|   205k|                  "A range needs to model forward_range and have a valid "
 5420|   205k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   205k|                  "Examples of scannable ranges are std::string, "
 5422|   205k|                  "std::string_view, "
 5423|   205k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   205k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   205k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   205k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   205k|{
 5320|   205k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   205k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   205k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   205k|    {
 3000|   205k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   205k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   205k|    {
 2981|   205k|        return t.data();
 2982|   205k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   205k|    {
 3383|   205k|        return detail::to_address(ranges::begin(derived()));
 3384|   205k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.19M|{
  316|  1.19M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.19M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   387k|    {
 2869|   387k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   387k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   387k|    {
 2850|   387k|        return decay_copy(t.begin());
 2851|   387k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  2.44M|    {
 3480|  2.44M|        return m_iterator;
 3481|  2.44M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   205k|    {
 3339|   205k|        return static_cast<const D&>(*this);
 3340|   205k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   205k|    {
 3075|   205k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   205k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   205k|    {
 3041|   205k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   205k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.52M|{
 2094|  2.52M|    return SCN_FWD(t);
  ------------------
  |  |  951|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.52M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   860k|    {
 3496|   860k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   860k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  3.62M|    {
 1740|  3.62M|        return has_value();
 1741|  3.62M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.21M|    {
  490|  7.21M|        return m_has_value;
  491|  7.21M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   105k|    {
 1746|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   105k|        return this->get_unexpected().error();
 1748|   105k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   105k|    {
  473|   105k|        return m_unexpected;
  474|   105k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  23.3k|        : base(unexpect, std::move(e.error())),
 1616|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.3k|    {
 1618|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.3k|          m_has_value(false)
  451|  23.3k|    {
  452|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   205k|    {
 1316|   205k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   182k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   182k|                      ranges::iterator_t<SourceRange>>) {
 6717|   182k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   182k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   928k|    {
 2869|   928k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   928k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   928k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   928k|    {
 2850|   928k|        return decay_copy(t.begin());
 2851|   928k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   182k|{
 6702|   182k|    return ranges::end(source);
 6703|   182k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   182k|    {
 2926|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   182k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   182k|    {
 2908|   182k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   182k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.17M|    {
 3484|  1.17M|        return m_sentinel;
 3485|  1.17M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  3.48M|    {
 1795|  3.48M|        return value();
 1796|  3.48M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  3.48M|    {
 1769|  3.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.48M|        return this->get_value();
 1771|  3.48M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.48M|    {
  456|  3.48M|        return m_value;
  457|  3.48M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   182k|        : base(std::in_place, std::forward<U>(val)),
 1570|   182k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   182k|    {
 1572|   182k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   182k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   182k|    {
  442|   182k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8782|  83.8k|    {
 8783|  83.8k|        return m_str;
 8784|  83.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   190k|{
 6115|   190k|    detail::check_scan_arg_types<Args...>();
 6116|   190k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   190k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5829|   233k|{
 5830|   233k|    constexpr bool default_constructible_constraint =
 5831|   233k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   233k|    static_assert(default_constructible_constraint,
 5833|   233k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   233k|    constexpr bool destructible_constraint =
 5836|   233k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   233k|    static_assert(destructible_constraint,
 5838|   233k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   233k|    constexpr bool non_reference_constraint =
 5841|   233k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   233k|    static_assert(non_reference_constraint,
 5843|   233k|                  "Scan argument types must not be references");
 5844|       |
 5845|   233k|    constexpr bool movable_constraint =
 5846|   233k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   233k|    static_assert(movable_constraint,
 5848|   233k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   233k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   233k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   233k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|   190k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   190k|    {
 6092|   190k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   190k|    {
 6100|   190k|        return {detail::make_arg<
 6101|   190k|            kind, Context,
 6102|   190k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   190k|                                 typename Context::char_type>::value>(args)...};
 6104|   190k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|   190k|{
 5880|   190k|    return make_value<Context>(value).ref_value;
 5881|   190k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|   233k|{
 5815|   233k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   233k|                                  needs_context_tag>) {
 5819|   233k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   233k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|   233k|    {                                                                        \
 5654|   233k|        return val;                                                          \
 5655|   233k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5783|   233k|{
 5784|   233k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   233k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   233k|    constexpr bool scannable_char =
 5788|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   233k|    static_assert(scannable_char,
 5790|   233k|                  "Cannot scan an argument of an unsupported character "
 5791|   233k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   233k|    constexpr bool scannable_const =
 5794|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   233k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   233k|    constexpr bool scannable_disabled =
 5798|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   233k|    static_assert(scannable_disabled,
 5800|   233k|                  "Cannot scan an argument that has been disabled by "
 5801|   233k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   233k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   233k|    static_assert(
 5805|   233k|        scannable,
 5806|   233k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   233k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   233k|    return arg_value{arg};
 5810|   233k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5596|   233k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   233k|    {
 5598|   233k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6393|   190k|    {
 6394|   190k|        return m_values;
 6395|   190k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   190k|        : basic_scan_args(store.desc, store.args.data())
 6141|   190k|    {
 6142|   190k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|   274k|        : m_desc(desc), m_builtin_values(data)
 6193|   274k|    {
 6194|   274k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.41M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.41M|    static_cast<    \
  |  |  950|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.41M|    static_cast<    \
  |  |  950|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.41M|    {
 3466|  1.41M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   274k|{
 8444|   274k|    return s;
 8445|   274k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   274k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  83.8k|        : m_str(r.str)
 8778|  83.8k|    {
 8779|  83.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   102k|    {
 1740|   102k|        return has_value();
 1741|   102k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   285k|    {
 1815|   285k|        return &value();
 1816|   285k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   285k|    {
 1769|   285k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   285k|        return this->get_value();
 1771|   285k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   182k|    {
 6474|   182k|        return ranges::begin(m_range);
 6475|   182k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   114k|    {
  643|   114k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 91.1k, False: 23.3k]
  ------------------
  644|  91.1k|            destroy_value();
  645|  91.1k|        }
  646|  23.3k|        else {
  647|  23.3k|            destroy_unexpected();
  648|  23.3k|        }
  649|   114k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  41.9k|{
 9774|  41.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  41.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  41.9k|                                   make_scan_args(result->values())));
 9777|  41.9k|    return result;
 9778|  41.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  83.8k|{
 9503|  83.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  951|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  83.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  83.8k|{
 9438|  83.8k|#if !SCN_DISABLE_LOCALE
 9439|  83.8k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  83.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  83.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  83.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  83.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 73.0k]
  |  |  ------------------
  ------------------
 9446|  10.7k|        return unexpected(result.error());
 9447|  10.7k|    }
 9448|  73.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  83.8k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|  18.9k|{
 9815|  18.9k|    auto result = make_scan_result<Source, T>();
 9816|  18.9k|    fill_scan_result(
 9817|  18.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  18.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  18.9k|    return result;
 9820|  18.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  37.9k|{
 9516|  37.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  951|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  37.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  37.9k|{
 9462|  37.9k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  37.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 36.1k]
  |  |  ------------------
  ------------------
 9466|  1.79k|        return unexpected(result.error());
 9467|  1.79k|    }
 9468|  36.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  37.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  43.3k|{
 5865|  43.3k|    check_scan_arg_types<T>();
 5866|       |
 5867|  43.3k|    basic_scan_arg<Context> arg;
 5868|  43.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  43.3k|    arg.m_value = make_value<Context>(value);
 5870|  43.3k|    return arg;
 5871|  43.3k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   336k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  2.70M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  43.3k|    {
 6416|  43.3k|        return std::get<0>(m_values);
 6417|  43.3k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9704|  41.9k|{
 9705|  41.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  41.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  41.9k|                                   make_scan_args(result->values())));
 9708|  41.9k|    return result;
 9709|  41.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9660|   102k|{
 9661|   102k|    return scan_result_type<Source, Args...>();
 9662|   102k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   102k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   102k|        : m_value(T{}), m_has_value(true)
  427|   102k|    {
  428|   102k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6610|   102k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6384|   102k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   102k|{
 9646|   102k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 11.6k, False: 91.1k]
  |  |  ------------------
  ------------------
 9647|  11.6k|        out = unexpected(in.error());
 9648|  11.6k|    }
 9649|  91.1k|    else {
 9650|  91.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|  91.1k|    static_cast<    \
  |  |  950|  91.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  91.1k|    }
 9652|   102k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   411k|    {
  490|   411k|        return m_has_value;
  491|   411k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   285k|    {
  456|   285k|        return m_value;
  457|   285k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  11.6k|    {
  504|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.6k|                                  std::forward<Args>(args)...);
  506|  11.6k|        m_has_value = false;
  507|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.6k|    {
  481|  11.6k|        return std::move(m_unexpected);
  482|  11.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8782|  83.8k|    {
 8783|  83.8k|        return m_str;
 8784|  83.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  83.8k|{
 6115|  83.8k|    detail::check_scan_arg_types<Args...>();
 6116|  83.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  83.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5829|   102k|{
 5830|   102k|    constexpr bool default_constructible_constraint =
 5831|   102k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   102k|    static_assert(default_constructible_constraint,
 5833|   102k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   102k|    constexpr bool destructible_constraint =
 5836|   102k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   102k|    static_assert(destructible_constraint,
 5838|   102k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   102k|    constexpr bool non_reference_constraint =
 5841|   102k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   102k|    static_assert(non_reference_constraint,
 5843|   102k|                  "Scan argument types must not be references");
 5844|       |
 5845|   102k|    constexpr bool movable_constraint =
 5846|   102k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   102k|    static_assert(movable_constraint,
 5848|   102k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   102k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   102k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   102k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|  83.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  83.8k|    {
 6092|  83.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  83.8k|    {
 6100|  83.8k|        return {detail::make_arg<
 6101|  83.8k|            kind, Context,
 6102|  83.8k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  83.8k|                                 typename Context::char_type>::value>(args)...};
 6104|  83.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5879|  83.8k|{
 5880|  83.8k|    return make_value<Context>(value).ref_value;
 5881|  83.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5814|   102k|{
 5815|   102k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   102k|                                  needs_context_tag>) {
 5819|   102k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   102k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5653|   102k|    {                                                                        \
 5654|   102k|        return val;                                                          \
 5655|   102k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5783|   102k|{
 5784|   102k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   102k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   102k|    constexpr bool scannable_char =
 5788|   102k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   102k|    static_assert(scannable_char,
 5790|   102k|                  "Cannot scan an argument of an unsupported character "
 5791|   102k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   102k|    constexpr bool scannable_const =
 5794|   102k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   102k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   102k|    constexpr bool scannable_disabled =
 5798|   102k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   102k|    static_assert(scannable_disabled,
 5800|   102k|                  "Cannot scan an argument that has been disabled by "
 5801|   102k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   102k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   102k|    static_assert(
 5805|   102k|        scannable,
 5806|   102k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   102k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   102k|    return arg_value{arg};
 5810|   102k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5596|   102k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   102k|    {
 5598|   102k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6393|  83.8k|    {
 6394|  83.8k|        return m_values;
 6395|  83.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  83.8k|        : basic_scan_args(store.desc, store.args.data())
 6141|  83.8k|    {
 6142|  83.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  83.8k|        : m_str(r.str)
 8778|  83.8k|    {
 8779|  83.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   102k|    {
 1740|   102k|        return has_value();
 1741|   102k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   285k|    {
 1815|   285k|        return &value();
 1816|   285k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   285k|    {
 1769|   285k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   285k|        return this->get_value();
 1771|   285k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9773|  41.9k|{
 9774|  41.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  41.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  41.9k|                                   make_scan_args(result->values())));
 9777|  41.9k|    return result;
 9778|  41.9k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9814|  18.9k|{
 9815|  18.9k|    auto result = make_scan_result<Source, T>();
 9816|  18.9k|    fill_scan_result(
 9817|  18.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  18.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  18.9k|    return result;
 9820|  18.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  18.9k|{
 5865|  18.9k|    check_scan_arg_types<T>();
 5866|       |
 5867|  18.9k|    basic_scan_arg<Context> arg;
 5868|  18.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  18.9k|    arg.m_value = make_value<Context>(value);
 5870|  18.9k|    return arg;
 5871|  18.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  18.9k|    {
 6416|  18.9k|        return std::get<0>(m_values);
 6417|  18.9k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.6k|    {
 2869|  11.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.6k|    {
 2850|  11.6k|        return decay_copy(t.begin());
 2851|  11.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  5.23M|{
 2094|  5.23M|    return SCN_FWD(t);
  ------------------
  |  |  951|  5.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.23M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   261k|    {
 2926|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   261k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   261k|    {
 2908|   261k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   261k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9704|  53.1k|{
 9705|  53.1k|    auto result = make_scan_result<Source, Args...>();
 9706|  53.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  53.1k|                                   make_scan_args(result->values())));
 9708|  53.1k|    return result;
 9709|  53.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9660|   130k|{
 9661|   130k|    return scan_result_type<Source, Args...>();
 9662|   130k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   130k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   130k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   130k|    {
  613|   130k|        construct();
  614|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   130k|    {
  694|   130k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   130k|        m_has_value = true;
  696|   130k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   130k|{
  396|   130k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   130k|        T(std::forward<Args>(args)...);
  398|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6610|   130k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|   130k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   130k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   630k|    {
  718|   630k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  915|   630k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   630k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   130k|{
 9646|   130k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 11.6k, False: 119k]
  |  |  ------------------
  ------------------
 9647|  11.6k|        out = unexpected(in.error());
 9648|  11.6k|    }
 9649|   119k|    else {
 9650|   119k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   119k|    static_cast<    \
  |  |  950|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   119k|    }
 9652|   130k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  11.6k|    {
 1746|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.6k|        return this->get_unexpected().error();
 1748|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.4k|    {
  730|  58.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  915|  58.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   665k|    {
  687|   665k|        return m_has_value;
  688|   665k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   368k|    {
  653|   368k|        return *value_ptr();
  654|   368k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   130k|    {
  708|   130k|        scn::detail::destroy_at(value_ptr());
  709|   130k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   130k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   130k|    else {
  408|   130k|        p->~T();
  409|   130k|    }
  410|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6617|   130k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.3k|    {
  712|  23.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   119k|    {
 6485|   119k|        m_range = std::forward<Other>(r);
 6486|   119k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   119k|    {
 1795|   119k|        return value();
 1796|   119k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   119k|    {
 1769|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   119k|        return this->get_value();
 1771|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   119k|    {
  456|   119k|        return m_value;
  457|   119k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  53.1k|{
 9485|  53.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  951|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  53.1k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  53.1k|{
 9422|  53.1k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  53.1k|    auto result = vscan_impl(buffer, format, args);
 9425|  53.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 5.39k, False: 47.8k]
  |  |  ------------------
  ------------------
 9426|  5.39k|        return unexpected(result.error());
 9427|  5.39k|    }
 9428|  47.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  53.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   130k|{
 5381|   130k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   130k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   130k|                  "\n"
 5385|   130k|                  "Unsupported range type given as input to a scanning "
 5386|   130k|                  "function.\n"
 5387|   130k|                  "A range needs to have a character type (value type) "
 5388|   130k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   130k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   130k|                  "to be included.\n"
 5391|   130k|                  "See the scnlib documentation for more details.");
 5392|   130k|    static_assert(
 5393|   130k|        !std::is_same_v<T, custom_char_traits>,
 5394|   130k|        "\n"
 5395|   130k|        "Unsupported range type given as input to a scanning "
 5396|   130k|        "function.\n"
 5397|   130k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   130k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   130k|        "not supported.");
 5400|   130k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   130k|                  "\n"
 5402|   130k|                  "Unsupported range type given as input to a scanning "
 5403|   130k|                  "function.\n"
 5404|   130k|                  "file_marker_found cannot be used as an "
 5405|   130k|                  "source range type to scn::scan.\n"
 5406|   130k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   130k|                  "and do not provide an explicit source range, "
 5408|   130k|                  "or use scn::scan with a FILE* directly.");
 5409|   130k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   130k|                  "\n"
 5411|   130k|                  "Unsupported range type given as input to a scanning "
 5412|   130k|                  "function.\n"
 5413|   130k|                  "In order to be scannable, a range needs to satisfy "
 5414|   130k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   130k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   130k|                  "\n"
 5417|   130k|                  "Unsupported range type given as input to a scanning "
 5418|   130k|                  "function.\n"
 5419|   130k|                  "A range needs to model forward_range and have a valid "
 5420|   130k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   130k|                  "Examples of scannable ranges are std::string, "
 5422|   130k|                  "std::string_view, "
 5423|   130k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   130k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   130k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   130k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   130k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   130k|    else {
 5366|   130k|        return make_forward_scan_buffer(r);
 5367|   130k|    }
 5368|   130k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   130k|{
 5185|   130k|    return basic_scan_forward_buffer_impl(range);
 5186|   130k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   130k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  951|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   130k|          m_cursor(ranges::begin(*m_range))
 4766|   130k|    {
 4767|   130k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   130k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   130k|    {
 4738|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   130k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   130k|    {
 4429|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   130k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   249k|    {
 2869|   249k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   249k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   249k|    {
 2850|   249k|        return decay_copy(t.begin());
 2851|   249k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   368k|    {
 3480|   368k|        return m_iterator;
 3481|   368k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.50M|    {
 4771|  1.50M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 17.4k, False: 1.48M]
  ------------------
 4772|  17.4k|            return false;
 4773|  17.4k|        }
 4774|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.48M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  945|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.48M|        }
 4777|  1.48M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.36M, False: 124k]
  ------------------
 4778|  1.36M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.36M|                                          this->m_current_view.begin(),
 4780|  1.36M|                                          this->m_current_view.end());
 4781|  1.36M|        }
 4782|  1.48M|        m_latest = *m_cursor;
 4783|  1.48M|        ++m_cursor;
 4784|  1.48M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.48M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  945|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.48M|        }
 4788|  1.48M|        return true;
 4789|  1.50M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.47M|    {
 2926|  4.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  4.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.47M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.47M|    {
 2908|  4.47M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  4.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.47M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  4.59M|    {
 3484|  4.59M|        return m_sentinel;
 3485|  4.59M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   130k|    {
 4346|   130k|        SCN_UNUSED(position);
  ------------------
  |  |  930|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   130k|        return true;
 4348|   130k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   119k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   119k|                      ranges::iterator_t<SourceRange>>) {
 6717|   119k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   119k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   119k|    {
 2869|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   119k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   119k|    {
 2850|   119k|        return decay_copy(t.begin());
 2851|   119k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   119k|{
 6702|   119k|    return ranges::end(source);
 6703|   119k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   119k|    {
 2926|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   119k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   119k|    {
 2908|   119k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   119k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   119k|        : base(std::in_place, std::forward<U>(val)),
 1570|   119k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   119k|    {
 1572|   119k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   119k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   119k|    {
  442|   119k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8782|   106k|    {
 8783|   106k|        return m_str;
 8784|   106k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   249k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   249k|    static_cast<    \
  |  |  950|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   249k|    static_cast<    \
  |  |  950|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   249k|    {
 3466|   249k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   106k|        : m_str(r.str)
 8778|   106k|    {
 8779|   106k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   368k|    {
 1815|   368k|        return &value();
 1816|   368k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   368k|    {
 1769|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   368k|        return this->get_value();
 1771|   368k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   119k|    {
 6474|   119k|        return ranges::begin(m_range);
 6475|   119k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   142k|    {
  643|   142k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 119k, False: 23.3k]
  ------------------
  644|   119k|            destroy_value();
  645|   119k|        }
  646|  23.3k|        else {
  647|  23.3k|            destroy_unexpected();
  648|  23.3k|        }
  649|   142k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9773|  53.1k|{
 9774|  53.1k|    auto result = make_scan_result<Source, Args...>();
 9775|  53.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  53.1k|                                   make_scan_args(result->values())));
 9777|  53.1k|    return result;
 9778|  53.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  53.1k|{
 9503|  53.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  951|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  53.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  53.1k|{
 9438|  53.1k|#if !SCN_DISABLE_LOCALE
 9439|  53.1k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  53.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  53.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  53.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  53.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 5.39k, False: 47.8k]
  |  |  ------------------
  ------------------
 9446|  5.39k|        return unexpected(result.error());
 9447|  5.39k|    }
 9448|  47.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  53.1k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9814|  24.3k|{
 9815|  24.3k|    auto result = make_scan_result<Source, T>();
 9816|  24.3k|    fill_scan_result(
 9817|  24.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  24.3k|                            detail::make_arg<scan_context>(result->value())));
 9819|  24.3k|    return result;
 9820|  24.3k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  24.3k|{
 9516|  24.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  951|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  24.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  24.3k|{
 9462|  24.3k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  24.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 899, False: 23.4k]
  |  |  ------------------
  ------------------
 9466|    899|        return unexpected(result.error());
 9467|    899|    }
 9468|  23.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  24.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  48.5k|    {
 2869|  48.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  48.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  48.5k|    {
 2850|  48.5k|        return decay_copy(t.begin());
 2851|  48.5k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  12.2M|{
 2094|  12.2M|    return SCN_FWD(t);
  ------------------
  |  |  951|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.16M|    {
 2926|  3.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  3.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.16M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.16M|    {
 2908|  3.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  3.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.16M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9660|   789k|{
 9661|   789k|    return scan_result_type<Source, Args...>();
 9662|   789k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   789k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   789k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   789k|    {
  613|   789k|        construct();
  614|   789k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   789k|    {
  694|   789k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   789k|        m_has_value = true;
  696|   789k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   789k|{
  396|   789k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   789k|        T(std::forward<Args>(args)...);
  398|   789k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|   789k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  1.57M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.57M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6384|  1.57M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.90M|    {
  718|  3.90M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  915|  3.90M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.90M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   789k|{
 9646|   789k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 23.3k, False: 766k]
  |  |  ------------------
  ------------------
 9647|  23.3k|        out = unexpected(in.error());
 9648|  23.3k|    }
 9649|   766k|    else {
 9650|   766k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   766k|    }
 9652|   789k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.57M|    {
 1740|  1.57M|        return has_value();
 1741|  1.57M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.15M|    {
  490|  3.15M|        return m_has_value;
  491|  3.15M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  46.7k|    {
 1746|  46.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  46.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  46.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  46.7k|        return this->get_unexpected().error();
 1748|  46.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  46.7k|    {
  473|  46.7k|        return m_unexpected;
  474|  46.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.3k|        : base(unexpect, std::move(e.error())),
 1616|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.3k|    {
 1618|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.3k|        : m_has_value(false)
  637|  23.3k|    {
  638|  23.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  23.3k|    {
  701|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.3k|                                  std::forward<Args>(args)...);
  703|  23.3k|        m_has_value = false;
  704|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  915|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.3k|    {
 1316|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.3k|    {
  903|  23.3k|        assign_common(std::move(other));
  904|  23.3k|        return *this;
  905|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.3k|    {
  950|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.3k, False: 0]
  ------------------
  951|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.97M|    {
  687|  3.97M|        return m_has_value;
  688|  3.97M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.32M|    {
  653|  2.32M|        return *value_ptr();
  654|  2.32M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.3k|    {
 1046|  23.3k|        this->destroy_value();
 1047|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   789k|    {
  708|   789k|        scn::detail::destroy_at(value_ptr());
  709|   789k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   789k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   789k|    else {
  408|   789k|        p->~T();
  409|   789k|    }
  410|   789k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|   789k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.3k|    {
  701|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.3k|                                  std::forward<Args>(args)...);
  703|  23.3k|        m_has_value = false;
  704|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.3k|    {
  678|  23.3k|        return std::move(*unexpected_ptr());
  679|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.7k|    {
  712|  46.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  1.53M|    {
 6485|  1.53M|        m_range = std::forward<Other>(r);
 6486|  1.53M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.53M|    {
 1795|  1.53M|        return value();
 1796|  1.53M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.53M|    {
 1769|  1.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.53M|        return this->get_value();
 1771|  1.53M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.53M|    {
  456|  1.53M|        return m_value;
  457|  1.53M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   634k|{
 9422|   634k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   634k|    auto result = vscan_impl(buffer, format, args);
 9425|   634k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 21.5k, False: 613k]
  |  |  ------------------
  ------------------
 9426|  21.5k|        return unexpected(result.error());
 9427|  21.5k|    }
 9428|   613k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   634k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.57M|{
 5381|  1.57M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.57M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.57M|                  "\n"
 5385|  1.57M|                  "Unsupported range type given as input to a scanning "
 5386|  1.57M|                  "function.\n"
 5387|  1.57M|                  "A range needs to have a character type (value type) "
 5388|  1.57M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.57M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.57M|                  "to be included.\n"
 5391|  1.57M|                  "See the scnlib documentation for more details.");
 5392|  1.57M|    static_assert(
 5393|  1.57M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.57M|        "\n"
 5395|  1.57M|        "Unsupported range type given as input to a scanning "
 5396|  1.57M|        "function.\n"
 5397|  1.57M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.57M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.57M|        "not supported.");
 5400|  1.57M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.57M|                  "\n"
 5402|  1.57M|                  "Unsupported range type given as input to a scanning "
 5403|  1.57M|                  "function.\n"
 5404|  1.57M|                  "file_marker_found cannot be used as an "
 5405|  1.57M|                  "source range type to scn::scan.\n"
 5406|  1.57M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.57M|                  "and do not provide an explicit source range, "
 5408|  1.57M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.57M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.57M|                  "\n"
 5411|  1.57M|                  "Unsupported range type given as input to a scanning "
 5412|  1.57M|                  "function.\n"
 5413|  1.57M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.57M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.57M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.57M|                  "\n"
 5417|  1.57M|                  "Unsupported range type given as input to a scanning "
 5418|  1.57M|                  "function.\n"
 5419|  1.57M|                  "A range needs to model forward_range and have a valid "
 5420|  1.57M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.57M|                  "Examples of scannable ranges are std::string, "
 5422|  1.57M|                  "std::string_view, "
 5423|  1.57M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.57M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.57M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.57M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.57M|{
 5320|  1.57M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.57M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.57M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.57M|    {
 3000|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.57M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.57M|    {
 2981|  1.57M|        return t.data();
 2982|  1.57M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.57M|    {
 3383|  1.57M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.57M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  5.97M|{
  316|  5.97M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  5.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  5.97M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   190M|{
  294|   190M|    return p;
  295|   190M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.11M|    {
 2869|  3.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  3.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.11M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.11M|    {
 2850|  3.11M|        return decay_copy(t.begin());
 2851|  3.11M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   159M|    {
 3480|   159M|        return m_iterator;
 3481|   159M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.57M|    {
 3339|  1.57M|        return static_cast<const D&>(*this);
 3340|  1.57M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.57M|    {
 3075|  1.57M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.57M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.57M|    {
 3041|  1.57M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.57M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.77M|    {
 3496|  3.77M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.77M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  46.7k|        : base(unexpect, std::move(e.error())),
 1616|  46.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  46.7k|    {
 1618|  46.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  46.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  46.7k|          m_has_value(false)
  451|  46.7k|    {
  452|  46.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.57M|    {
 1316|  1.57M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  1.53M|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.53M|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.53M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.53M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.37M|    {
 2869|  4.37M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  4.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.37M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.37M|    {
 2850|  4.37M|        return decay_copy(t.begin());
 2851|  4.37M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  1.53M|{
 6702|  1.53M|    return ranges::end(source);
 6703|  1.53M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.53M|    {
 2926|  1.53M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.53M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.53M|    {
 2908|  1.53M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.53M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   151M|    {
 3484|   151M|        return m_sentinel;
 3485|   151M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.53M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.53M|    {
 1572|  1.53M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.53M|    {
  442|  1.53M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8782|   634k|    {
 8783|   634k|        return m_str;
 8784|   634k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  1.26M|{
 6115|  1.26M|    detail::check_scan_arg_types<Args...>();
 6116|  1.26M|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  1.26M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5829|  1.57M|{
 5830|  1.57M|    constexpr bool default_constructible_constraint =
 5831|  1.57M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.57M|    static_assert(default_constructible_constraint,
 5833|  1.57M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.57M|    constexpr bool destructible_constraint =
 5836|  1.57M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.57M|    static_assert(destructible_constraint,
 5838|  1.57M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.57M|    constexpr bool non_reference_constraint =
 5841|  1.57M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.57M|    static_assert(non_reference_constraint,
 5843|  1.57M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.57M|    constexpr bool movable_constraint =
 5846|  1.57M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.57M|    static_assert(movable_constraint,
 5848|  1.57M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.57M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.57M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.57M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  1.26M|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  1.26M|    {
 6092|  1.26M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  1.26M|    {
 6100|  1.26M|        return {detail::make_arg<
 6101|  1.26M|            kind, Context,
 6102|  1.26M|            mapped_type_constant<remove_cvref_t<A>,
 6103|  1.26M|                                 typename Context::char_type>::value>(args)...};
 6104|  1.26M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  1.26M|{
 5880|  1.26M|    return make_value<Context>(value).ref_value;
 5881|  1.26M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  1.57M|{
 5815|  1.57M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  1.57M|                                  needs_context_tag>) {
 5819|  1.57M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  1.57M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  1.57M|    {                                                                        \
 5654|  1.57M|        return val;                                                          \
 5655|  1.57M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5783|  1.57M|{
 5784|  1.57M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.57M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.57M|    constexpr bool scannable_char =
 5788|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.57M|    static_assert(scannable_char,
 5790|  1.57M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.57M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.57M|    constexpr bool scannable_const =
 5794|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.57M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.57M|    constexpr bool scannable_disabled =
 5798|  1.57M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.57M|    static_assert(scannable_disabled,
 5800|  1.57M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.57M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.57M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.57M|    static_assert(
 5805|  1.57M|        scannable,
 5806|  1.57M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.57M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.57M|    return arg_value{arg};
 5810|  1.57M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5596|  1.57M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.57M|    {
 5598|  1.57M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6393|  1.26M|    {
 6394|  1.26M|        return m_values;
 6395|  1.26M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  1.26M|        : basic_scan_args(store.desc, store.args.data())
 6141|  1.26M|    {
 6142|  1.26M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.90M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.90M|    {
 6194|  1.90M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  59.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  59.4M|    static_cast<    \
  |  |  950|  59.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  59.4M|    static_cast<    \
  |  |  950|  59.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  59.4M|    {
 3466|  59.4M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.90M|{
 8449|  1.90M|    return s;
 8450|  1.90M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.90M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   634k|        : m_str(r.str)
 8778|   634k|    {
 8779|   634k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   789k|    {
 1740|   789k|        return has_value();
 1741|   789k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.32M|    {
 1815|  2.32M|        return &value();
 1816|  2.32M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  2.32M|    {
 1769|  2.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.32M|        return this->get_value();
 1771|  2.32M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  1.53M|    {
 6474|  1.53M|        return ranges::begin(m_range);
 6475|  1.53M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   813k|    {
  643|   813k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 766k, False: 46.7k]
  ------------------
  644|   766k|            destroy_value();
  645|   766k|        }
  646|  46.7k|        else {
  647|  46.7k|            destroy_unexpected();
  648|  46.7k|        }
  649|   813k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   634k|{
 9438|   634k|#if !SCN_DISABLE_LOCALE
 9439|   634k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   634k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   634k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   634k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   634k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 21.5k, False: 613k]
  |  |  ------------------
  ------------------
 9446|  21.5k|        return unexpected(result.error());
 9447|  21.5k|    }
 9448|   613k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   634k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   310k|{
 9462|   310k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   310k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   310k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 306k]
  |  |  ------------------
  ------------------
 9466|  3.59k|        return unexpected(result.error());
 9467|  3.59k|    }
 9468|   306k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   310k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   310k|{
 5865|   310k|    check_scan_arg_types<T>();
 5866|       |
 5867|   310k|    basic_scan_arg<Context> arg;
 5868|   310k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   310k|    arg.m_value = make_value<Context>(value);
 5870|   310k|    return arg;
 5871|   310k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  2.36M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   310k|    {
 6416|   310k|        return std::get<0>(m_values);
 6417|   310k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9660|   789k|{
 9661|   789k|    return scan_result_type<Source, Args...>();
 9662|   789k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   789k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   789k|        : m_value(T{}), m_has_value(true)
  427|   789k|    {
  428|   789k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6610|   789k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6384|   789k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   789k|{
 9646|   789k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 23.3k, False: 766k]
  |  |  ------------------
  ------------------
 9647|  23.3k|        out = unexpected(in.error());
 9648|  23.3k|    }
 9649|   766k|    else {
 9650|   766k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   766k|    }
 9652|   789k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  23.3k|        : base(unexpect, std::move(e.error())),
 1616|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.3k|    {
 1618|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.3k|          m_has_value(false)
  451|  23.3k|    {
  452|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.3k|    {
 1316|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  23.3k|    {
  903|  23.3k|        assign_common(std::move(other));
  904|  23.3k|        return *this;
  905|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  23.3k|    {
  950|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.3k, False: 0]
  ------------------
  951|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.15M|    {
  490|  3.15M|        return m_has_value;
  491|  3.15M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.32M|    {
  456|  2.32M|        return m_value;
  457|  2.32M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  23.3k|    {
 1046|  23.3k|        this->destroy_value();
 1047|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  23.3k|    {
  504|  23.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.3k|                                  std::forward<Args>(args)...);
  506|  23.3k|        m_has_value = false;
  507|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.3k|    {
  473|  23.3k|        return m_unexpected;
  474|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.3k|    {
  481|  23.3k|        return std::move(m_unexpected);
  482|  23.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8782|   634k|    {
 8783|   634k|        return m_str;
 8784|   634k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   634k|{
 6115|   634k|    detail::check_scan_arg_types<Args...>();
 6116|   634k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   634k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5829|   789k|{
 5830|   789k|    constexpr bool default_constructible_constraint =
 5831|   789k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   789k|    static_assert(default_constructible_constraint,
 5833|   789k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   789k|    constexpr bool destructible_constraint =
 5836|   789k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   789k|    static_assert(destructible_constraint,
 5838|   789k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   789k|    constexpr bool non_reference_constraint =
 5841|   789k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   789k|    static_assert(non_reference_constraint,
 5843|   789k|                  "Scan argument types must not be references");
 5844|       |
 5845|   789k|    constexpr bool movable_constraint =
 5846|   789k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   789k|    static_assert(movable_constraint,
 5848|   789k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   789k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   789k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   789k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|   634k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   634k|    {
 6092|   634k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   634k|    {
 6100|   634k|        return {detail::make_arg<
 6101|   634k|            kind, Context,
 6102|   634k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   634k|                                 typename Context::char_type>::value>(args)...};
 6104|   634k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5879|   634k|{
 5880|   634k|    return make_value<Context>(value).ref_value;
 5881|   634k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5814|   789k|{
 5815|   789k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   789k|                                  needs_context_tag>) {
 5819|   789k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   789k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5653|   789k|    {                                                                        \
 5654|   789k|        return val;                                                          \
 5655|   789k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5783|   789k|{
 5784|   789k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   789k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   789k|    constexpr bool scannable_char =
 5788|   789k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   789k|    static_assert(scannable_char,
 5790|   789k|                  "Cannot scan an argument of an unsupported character "
 5791|   789k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   789k|    constexpr bool scannable_const =
 5794|   789k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   789k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   789k|    constexpr bool scannable_disabled =
 5798|   789k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   789k|    static_assert(scannable_disabled,
 5800|   789k|                  "Cannot scan an argument that has been disabled by "
 5801|   789k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   789k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   789k|    static_assert(
 5805|   789k|        scannable,
 5806|   789k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   789k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   789k|    return arg_value{arg};
 5810|   789k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5596|   789k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   789k|    {
 5598|   789k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6393|   634k|    {
 6394|   634k|        return m_values;
 6395|   634k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   634k|        : basic_scan_args(store.desc, store.args.data())
 6141|   634k|    {
 6142|   634k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   634k|        : m_str(r.str)
 8778|   634k|    {
 8779|   634k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   789k|    {
 1740|   789k|        return has_value();
 1741|   789k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.32M|    {
 1815|  2.32M|        return &value();
 1816|  2.32M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  2.32M|    {
 1769|  2.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.32M|        return this->get_value();
 1771|  2.32M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   155k|{
 5865|   155k|    check_scan_arg_types<T>();
 5866|       |
 5867|   155k|    basic_scan_arg<Context> arg;
 5868|   155k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   155k|    arg.m_value = make_value<Context>(value);
 5870|   155k|    return arg;
 5871|   155k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   155k|    {
 6416|   155k|        return std::get<0>(m_values);
 6417|   155k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  23.3k|    {
 2869|  23.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  23.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  23.3k|    {
 2850|  23.3k|        return decay_copy(t.begin());
 2851|  23.3k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  74.7M|{
 2094|  74.7M|    return SCN_FWD(t);
  ------------------
  |  |  951|  74.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  74.7M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.57M|    {
 2926|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.57M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.57M|    {
 2908|  1.57M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.57M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9660|   789k|{
 9661|   789k|    return scan_result_type<Source, Args...>();
 9662|   789k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   789k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   789k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   789k|    {
  613|   789k|        construct();
  614|   789k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   789k|    {
  694|   789k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   789k|        m_has_value = true;
  696|   789k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   789k|{
  396|   789k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   789k|        T(std::forward<Args>(args)...);
  398|   789k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6610|   789k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   789k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   789k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.90M|    {
  718|  3.90M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  915|  3.90M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.90M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   789k|{
 9646|   789k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 23.3k, False: 766k]
  |  |  ------------------
  ------------------
 9647|  23.3k|        out = unexpected(in.error());
 9648|  23.3k|    }
 9649|   766k|    else {
 9650|   766k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   766k|    }
 9652|   789k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   789k|    {
 1740|   789k|        return has_value();
 1741|   789k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.57M|    {
  490|  1.57M|        return m_has_value;
  491|  1.57M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  23.3k|    {
 1746|  23.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.3k|        return this->get_unexpected().error();
 1748|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.3k|    {
  473|  23.3k|        return m_unexpected;
  474|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  23.3k|        : base(unexpect, std::move(e.error())),
 1616|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.3k|    {
 1618|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  23.3k|        : m_has_value(false)
  637|  23.3k|    {
  638|  23.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  23.3k|    {
  701|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.3k|                                  std::forward<Args>(args)...);
  703|  23.3k|        m_has_value = false;
  704|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  915|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.3k|    {
 1316|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  23.3k|    {
  903|  23.3k|        assign_common(std::move(other));
  904|  23.3k|        return *this;
  905|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  23.3k|    {
  950|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.3k, False: 0]
  ------------------
  951|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.97M|    {
  687|  3.97M|        return m_has_value;
  688|  3.97M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.32M|    {
  653|  2.32M|        return *value_ptr();
  654|  2.32M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  23.3k|    {
 1046|  23.3k|        this->destroy_value();
 1047|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   789k|    {
  708|   789k|        scn::detail::destroy_at(value_ptr());
  709|   789k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   789k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   789k|    else {
  408|   789k|        p->~T();
  409|   789k|    }
  410|   789k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6617|   789k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  23.3k|    {
  701|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.3k|                                  std::forward<Args>(args)...);
  703|  23.3k|        m_has_value = false;
  704|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.3k|    {
  678|  23.3k|        return std::move(*unexpected_ptr());
  679|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.7k|    {
  712|  46.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   766k|    {
 6485|   766k|        m_range = std::forward<Other>(r);
 6486|   766k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   766k|    {
 1795|   766k|        return value();
 1796|   766k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   766k|    {
 1769|   766k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   766k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   766k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   766k|        return this->get_value();
 1771|   766k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   766k|    {
  456|   766k|        return m_value;
  457|   766k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   317k|{
 9422|   317k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   317k|    auto result = vscan_impl(buffer, format, args);
 9425|   317k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 306k]
  |  |  ------------------
  ------------------
 9426|  10.7k|        return unexpected(result.error());
 9427|  10.7k|    }
 9428|   306k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   317k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   789k|{
 5381|   789k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   789k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   789k|                  "\n"
 5385|   789k|                  "Unsupported range type given as input to a scanning "
 5386|   789k|                  "function.\n"
 5387|   789k|                  "A range needs to have a character type (value type) "
 5388|   789k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   789k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   789k|                  "to be included.\n"
 5391|   789k|                  "See the scnlib documentation for more details.");
 5392|   789k|    static_assert(
 5393|   789k|        !std::is_same_v<T, custom_char_traits>,
 5394|   789k|        "\n"
 5395|   789k|        "Unsupported range type given as input to a scanning "
 5396|   789k|        "function.\n"
 5397|   789k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   789k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   789k|        "not supported.");
 5400|   789k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   789k|                  "\n"
 5402|   789k|                  "Unsupported range type given as input to a scanning "
 5403|   789k|                  "function.\n"
 5404|   789k|                  "file_marker_found cannot be used as an "
 5405|   789k|                  "source range type to scn::scan.\n"
 5406|   789k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   789k|                  "and do not provide an explicit source range, "
 5408|   789k|                  "or use scn::scan with a FILE* directly.");
 5409|   789k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   789k|                  "\n"
 5411|   789k|                  "Unsupported range type given as input to a scanning "
 5412|   789k|                  "function.\n"
 5413|   789k|                  "In order to be scannable, a range needs to satisfy "
 5414|   789k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   789k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   789k|                  "\n"
 5417|   789k|                  "Unsupported range type given as input to a scanning "
 5418|   789k|                  "function.\n"
 5419|   789k|                  "A range needs to model forward_range and have a valid "
 5420|   789k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   789k|                  "Examples of scannable ranges are std::string, "
 5422|   789k|                  "std::string_view, "
 5423|   789k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   789k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   789k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   789k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   789k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   789k|    else {
 5366|   789k|        return make_forward_scan_buffer(r);
 5367|   789k|    }
 5368|   789k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   789k|{
 5185|   789k|    return basic_scan_forward_buffer_impl(range);
 5186|   789k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   789k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  951|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   789k|          m_cursor(ranges::begin(*m_range))
 4766|   789k|    {
 4767|   789k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   789k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   789k|    {
 4738|   789k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   789k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   789k|    {
 4429|   789k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   789k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.55M|    {
 2869|  1.55M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.55M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.55M|    {
 2850|  1.55M|        return decay_copy(t.begin());
 2851|  1.55M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  2.32M|    {
 3480|  2.32M|        return m_iterator;
 3481|  2.32M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  23.3M|    {
 4771|  23.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 21.2k, False: 23.3M]
  ------------------
 4772|  21.2k|            return false;
 4773|  21.2k|        }
 4774|  23.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  23.3M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  945|  23.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  23.3M|        }
 4777|  23.3M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 22.5M, False: 777k]
  ------------------
 4778|  22.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  22.5M|                                          this->m_current_view.begin(),
 4780|  22.5M|                                          this->m_current_view.end());
 4781|  22.5M|        }
 4782|  23.3M|        m_latest = *m_cursor;
 4783|  23.3M|        ++m_cursor;
 4784|  23.3M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  23.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  23.3M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  945|  23.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  23.3M|        }
 4788|  23.3M|        return true;
 4789|  23.3M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  70.0M|    {
 2926|  70.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  70.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  70.0M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  70.0M|    {
 2908|  70.0M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  70.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  70.0M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  70.8M|    {
 3484|  70.8M|        return m_sentinel;
 3485|  70.8M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   789k|    {
 4346|   789k|        SCN_UNUSED(position);
  ------------------
  |  |  930|   789k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   789k|        return true;
 4348|   789k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  23.3k|        : base(unexpect, std::move(e.error())),
 1616|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.3k|    {
 1618|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.3k|          m_has_value(false)
  451|  23.3k|    {
  452|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   789k|    {
 1316|   789k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   766k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   766k|                      ranges::iterator_t<SourceRange>>) {
 6717|   766k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   766k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   766k|    {
 2869|   766k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   766k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   766k|    {
 2850|   766k|        return decay_copy(t.begin());
 2851|   766k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   766k|{
 6702|   766k|    return ranges::end(source);
 6703|   766k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   766k|    {
 2926|   766k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   766k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   766k|    {
 2908|   766k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   766k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   766k|        : base(std::in_place, std::forward<U>(val)),
 1570|   766k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   766k|    {
 1572|   766k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   766k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   766k|    {
  442|   766k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8782|   634k|    {
 8783|   634k|        return m_str;
 8784|   634k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.55M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.55M|    static_cast<    \
  |  |  950|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.55M|    static_cast<    \
  |  |  950|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.55M|    {
 3466|  1.55M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   634k|        : m_str(r.str)
 8778|   634k|    {
 8779|   634k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   789k|    {
 1740|   789k|        return has_value();
 1741|   789k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.32M|    {
 1815|  2.32M|        return &value();
 1816|  2.32M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  2.32M|    {
 1769|  2.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.32M|        return this->get_value();
 1771|  2.32M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   766k|    {
 6474|   766k|        return ranges::begin(m_range);
 6475|   766k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   813k|    {
  643|   813k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 766k, False: 46.7k]
  ------------------
  644|   766k|            destroy_value();
  645|   766k|        }
  646|  46.7k|        else {
  647|  46.7k|            destroy_unexpected();
  648|  46.7k|        }
  649|   813k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   317k|{
 9438|   317k|#if !SCN_DISABLE_LOCALE
 9439|   317k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   317k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   317k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   317k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   317k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 306k]
  |  |  ------------------
  ------------------
 9446|  10.7k|        return unexpected(result.error());
 9447|  10.7k|    }
 9448|   306k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   317k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   155k|{
 9462|   155k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   155k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 153k]
  |  |  ------------------
  ------------------
 9466|  1.79k|        return unexpected(result.error());
 9467|  1.79k|    }
 9468|   153k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   155k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   137k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   137k|    {
 3742|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  930|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   137k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   118k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   118k|    else {
 3981|   118k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   118k|    }
 3983|   118k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  4.96M|    {
 3480|  4.96M|        return m_iterator;
 3481|  4.96M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  76.8M|    {
 3480|  76.8M|        return m_iterator;
 3481|  76.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  8.50M|    {
  572|  8.50M|        return m_has_value;
  573|  8.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  97.0k|    {
  555|  97.0k|        return m_unexpected;
  556|  97.0k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  97.0k|    {
 1746|  97.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  97.0k|        return this->get_unexpected().error();
 1748|  97.0k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  1.12M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7037|  32.3k|    {
 7038|  32.3k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7038:13): [True: 0, False: 32.3k]
  |  Branch (7038:39): [True: 0, False: 0]
  ------------------
 7039|       |            // clang-format off
 7040|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7041|       |            // clang-format on
 7042|      0|        }
 7043|       |
 7044|  32.3k|        m_specs.width = width;
 7045|  32.3k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.09M|    {
 7059|  1.09M|        m_specs.type = type;
 7060|  1.09M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7075|  37.2k|    {
 7076|  37.2k|        const auto begin_value = static_cast<unsigned>(begin);
 7077|  37.2k|        const auto end_value = static_cast<unsigned>(end);
 7078|  37.2k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  945|  37.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  37.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7079|       |
 7080|  37.2k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  879|  37.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 37.2k, False: 0]
  |  |  ------------------
  ------------------
 7081|       |            // No need to bit-twiddle with a mask, because with the
 7082|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7083|  37.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  899|  37.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7084|  1.00M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7084:40): [True: 968k, False: 37.2k]
  ------------------
 7085|   968k|                m_specs.charset_literals[v / 8] |=
 7086|   968k|                    static_cast<unsigned char>(1ul << (v % 8));
 7087|   968k|            }
 7088|  37.2k|        }
 7089|      0|        else {
 7090|      0|            m_specs.charset_has_nonascii = true;
 7091|      0|        }
 7092|  37.2k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  32.3k|    {
 7121|  32.3k|        SCN_UNLIKELY_ATTR
 7122|  32.3k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  32.3k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  1.17M|    {
 7132|  1.17M|        return m_error;
 7133|  1.17M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   125k|{
 3918|   125k|    return unexpected(scan_error{c, m});
 3919|   125k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  71.7M|{
 4308|       |    // Pattern_White_Space property
 4309|  71.7M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 14.0M, False: 57.6M]
  |  Branch (4309:27): [True: 2.61M, False: 11.4M]
  ------------------
 4310|  71.7M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 2.31M, False: 66.7M]
  ------------------
 4311|  71.7M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 364k, False: 66.4M]
  ------------------
 4312|  71.7M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 150k, False: 66.2M]
  ------------------
 4313|  71.7M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 327k, False: 65.9M]
  ------------------
 4314|  71.7M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 195k, False: 65.7M]
  ------------------
 4315|  71.7M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 60, False: 65.7M]
  ------------------
 4316|  71.7M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|  16.1k|{
 7815|  16.1k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 16.1k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 16.1k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 16.1k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 16.1k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 16.1k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 16.1k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 16.1k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 16.1k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 16.1k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 16.1k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 16.1k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 16.1k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 16.1k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 16.1k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 16.1k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 16.1k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 16.1k]
  ------------------
 7843|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 16.1k]
  ------------------
 7844|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 16.1k]
  ------------------
 7845|      0|            return arg_type_category::floating;
 7846|       |
 7847|  1.79k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 1.79k, False: 14.3k]
  ------------------
 7848|  5.39k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 3.59k, False: 12.5k]
  ------------------
 7849|  8.99k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 3.59k, False: 12.5k]
  ------------------
 7850|  16.1k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 7.19k, False: 8.99k]
  ------------------
 7851|  16.1k|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 16.1k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 16.1k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|  16.1k|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|  16.1k|            SCN_CLANG_POP
 7862|  16.1k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|  16.1k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  8.41M|    {
 1740|  8.41M|        return has_value();
 1741|  8.41M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7956|  1.09M|{
 7957|  1.09M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 1.09M]
  ------------------
 7958|  1.09M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7958:9): [True: 1.05M, False: 34.8k]
  ------------------
 7959|  1.09M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7959:9): [True: 18.6k, False: 16.1k]
  ------------------
 7960|  1.09M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7960:9): [True: 0, False: 16.1k]
  ------------------
 7961|  1.09M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7961:9): [True: 0, False: 16.1k]
  ------------------
 7962|  1.07M|        return;
 7963|  1.07M|    }
 7964|  16.1k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7964:9): [True: 16.1k, False: 0]
  ------------------
 7965|  16.1k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  880|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 16.1k, False: 0]
  |  |  ------------------
  ------------------
 7966|       |            // clang-format off
 7967|  16.1k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7968|       |            // clang-format on
 7969|  16.1k|        }
 7970|      0|        return;
 7971|  16.1k|    }
 7972|      0|    SCN_UNLIKELY_ATTR
 7973|      0|    handler.on_error("Invalid type specifier for string");
 7974|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  26.9M|    {
 4473|  26.9M|        assert(m_begin);
 4474|  26.9M|        return m_end == nullptr;
 4475|  26.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   610k|    {
 4490|   610k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 610k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   610k|        return parent()->get_segment_starting_at(position());
 4496|   610k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  15.7M|    {
 4484|  15.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|  15.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  15.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  15.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  15.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   610k|    {
 4377|   610k|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 345k, False: 265k]
  |  |  ------------------
  ------------------
 4378|   610k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   345k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   345k|        }
 4381|   265k|        const auto start = pos - m_putback_buffer.size();
 4382|   265k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  945|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   265k|        return m_current_view.substr(start);
 4384|   265k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   687k|    {
 4468|   687k|        return m_position;
 4469|   687k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   392k|    {
 4399|   392k|        return m_is_contiguous;
 4400|   392k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   423M|    {
 4473|   423M|        assert(m_begin);
 4474|   423M|        return m_end == nullptr;
 4475|   423M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   769k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   769k|    else {
 3981|   769k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   769k|    }
 3983|   769k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  2.32M|    {
 4490|  2.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 2.32M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  2.32M|        return parent()->get_segment_starting_at(position());
 4496|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   246M|    {
 4484|   246M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|   246M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   246M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   246M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   246M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  2.32M|    {
 4377|  2.32M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.53M, False: 786k]
  |  |  ------------------
  ------------------
 4378|  2.32M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.53M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.53M|        }
 4381|   786k|        const auto start = pos - m_putback_buffer.size();
 4382|   786k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  945|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   786k|        return m_current_view.substr(start);
 4384|   786k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  2.79M|    {
 4468|  2.79M|        return m_position;
 4469|  2.79M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  2.36M|    {
 4399|  2.36M|        return m_is_contiguous;
 4400|  2.36M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   746k|    {
 3334|   746k|        return static_cast<D&>(*this);
 3335|   746k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   746k|    {
 3375|   746k|        return detail::to_address(ranges::begin(derived()));
 3376|   746k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.84M|    {
 3334|  2.84M|        return static_cast<D&>(*this);
 3335|  2.84M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.84M|    {
 3375|  2.84M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.84M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|  54.1k|    {
 8980|  54.1k|        return ranges::subrange{begin(), end()};
 8981|  54.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|  54.1k|    {
 8972|  54.1k|        return ranges::default_sentinel;
 8973|  54.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  1.82M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.82M|    static_cast<    \
  |  |  950|  1.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.82M|    static_cast<    \
  |  |  950|  1.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.82M|    {
 3466|  1.82M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  2.69M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   122k|    {
 1979|   122k|        return detail::transform_error_impl(std::move(*this),
 1980|   122k|                                            std::forward<F>(f));
 1981|   122k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   122k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   122k|    else {
 1472|   122k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   122k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 120k, False: 2.19k]
  |  |  ------------------
  ------------------
 1474|   122k|                   ? result(*std::forward<Exp>(exp))
 1475|   122k|                   : result(unexpect,
 1476|  2.19k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.19k|                                           std::forward<Exp>(exp).error()));
 1478|   122k|    }
 1479|   122k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   245k|    {
  490|   245k|        return m_has_value;
  491|   245k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   120k|    {
 1805|   120k|        return std::move(value());
 1806|   120k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   120k|    {
 1769|   120k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   120k|        return this->get_value();
 1771|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   120k|    {
  456|   120k|        return m_value;
  457|   120k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   288k|        : base(std::in_place, std::forward<U>(val)),
 1570|   288k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   288k|    {
 1572|   288k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   288k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   288k|    {
  442|   288k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   303k|    {
 1316|   303k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  12.5k|{
 1350|  12.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  12.5k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.19k|    {
 1756|  2.19k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.19k|        return std::move(this->get_unexpected().error());
 1758|  2.19k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.19k|    {
  473|  2.19k|        return m_unexpected;
  474|  2.19k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  25.0k|    {
  365|  25.0k|        return m_unexpected;
  366|  25.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.19k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.19k|    {
 1628|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.7k|          m_has_value(false)
  451|  14.7k|    {
  452|  14.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   317k|    {
 8980|   317k|        return ranges::subrange{begin(), end()};
 8981|   317k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   317k|    {
 8972|   317k|        return ranges::default_sentinel;
 8973|   317k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  27.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  27.0M|    static_cast<    \
  |  |  950|  27.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  27.0M|    static_cast<    \
  |  |  950|  27.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  27.0M|    {
 3466|  27.0M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   775k|    {
 1979|   775k|        return detail::transform_error_impl(std::move(*this),
 1980|   775k|                                            std::forward<F>(f));
 1981|   775k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   775k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   775k|    else {
 1472|   775k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   775k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   775k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 773k, False: 2.33k]
  |  |  ------------------
  ------------------
 1474|   775k|                   ? result(*std::forward<Exp>(exp))
 1475|   775k|                   : result(unexpect,
 1476|  2.33k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.33k|                                           std::forward<Exp>(exp).error()));
 1478|   775k|    }
 1479|   775k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.55M|    {
  490|  1.55M|        return m_has_value;
  491|  1.55M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   773k|    {
 1805|   773k|        return std::move(value());
 1806|   773k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   773k|    {
 1769|   773k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   773k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   773k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   773k|        return this->get_value();
 1771|   773k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   773k|    {
  456|   773k|        return m_value;
  457|   773k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.84M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.84M|    {
 1572|  1.84M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.84M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.84M|    {
  442|  1.84M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.87M|    {
 1316|  1.87M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.33k|    {
 1756|  2.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  2.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.33k|        return std::move(this->get_unexpected().error());
 1758|  2.33k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.33k|    {
  473|  2.33k|        return m_unexpected;
  474|  2.33k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.33k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.33k|    {
 1628|  2.33k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  28.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.3k|          m_has_value(false)
  451|  28.3k|    {
  452|  28.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   125k|        : m_unexpected(std::forward<Err>(e))
  350|   125k|    {
  351|   125k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   125k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   105k|        : base(unexpect, std::move(e.error())),
 1616|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   105k|    {
 1618|   105k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   105k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   105k|          m_has_value(false)
  451|   105k|    {
  452|   105k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.70M|    {
 1316|  2.70M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  25.6k|        : base(unexpect, std::move(e.error())),
 1616|  25.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.6k|    {
 1618|  25.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   472k|    {
 1316|   472k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   442k|        : base(std::in_place, std::forward<U>(val)),
 1570|   442k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   442k|    {
 1572|   442k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   442k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   442k|    {
  442|   442k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   472k|    {
 1740|   472k|        return has_value();
 1741|   472k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   945k|    {
  490|   945k|        return m_has_value;
  491|   945k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  28.9k|    {
 1746|  28.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  28.9k|        return this->get_unexpected().error();
 1748|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   368k|    {
 1805|   368k|        return std::move(value());
 1806|   368k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   443k|    {
 1769|   443k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   443k|        return this->get_value();
 1771|   443k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   443k|    {
  456|   443k|        return m_value;
  457|   443k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  52.0k|        : base(unexpect, std::move(e.error())),
 1616|  52.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  52.0k|    {
 1618|  52.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  56.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  56.7k|          m_has_value(false)
  451|  56.7k|    {
  452|  56.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.74M|    {
 1316|  3.74M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  3.69M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.69M|    {
 1572|  3.69M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.69M|    {
  442|  3.69M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  3.74M|    {
 1740|  3.74M|        return has_value();
 1741|  3.74M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.49M|    {
  490|  7.49M|        return m_has_value;
  491|  7.49M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  56.7k|    {
 1746|  56.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  56.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  56.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  56.7k|        return this->get_unexpected().error();
 1748|  56.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  56.7k|    {
  473|  56.7k|        return m_unexpected;
  474|  56.7k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.07M|    {
 1805|  3.07M|        return std::move(value());
 1806|  3.07M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.69M|    {
 1769|  3.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  3.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.69M|        return this->get_value();
 1771|  3.69M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.69M|    {
  456|  3.69M|        return m_value;
  457|  3.69M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   189k|    {
 1979|   189k|        return detail::transform_error_impl(std::move(*this),
 1980|   189k|                                            std::forward<F>(f));
 1981|   189k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   189k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   189k|    else {
 1472|   189k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   189k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   189k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 186k, False: 3.33k]
  |  |  ------------------
  ------------------
 1474|   189k|                   ? result(*std::forward<Exp>(exp))
 1475|   189k|                   : result(unexpect,
 1476|  3.33k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.33k|                                           std::forward<Exp>(exp).error()));
 1478|   189k|    }
 1479|   189k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   379k|    {
  490|   379k|        return m_has_value;
  491|   379k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   186k|    {
 1805|   186k|        return std::move(value());
 1806|   186k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   186k|    {
 1769|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   186k|        return this->get_value();
 1771|   186k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   186k|    {
  456|   186k|        return m_value;
  457|   186k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.33k|    {
 1756|  3.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  3.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.33k|        return std::move(this->get_unexpected().error());
 1758|  3.33k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.33k|    {
  473|  3.33k|        return m_unexpected;
  474|  3.33k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.33k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.33k|    {
 1628|  3.33k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   160k|    {
 8964|   160k|        return m_current;
 8965|   160k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   138k|    {
 8857|   138k|        return m_locale;
 8858|   138k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   149k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   149k|    static_cast<    \
  |  |  950|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   149k|    static_cast<    \
  |  |  950|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   149k|    {
 8864|   149k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   948k|    {
 8964|   948k|        return m_current;
 8965|   948k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   952k|    {
 8857|   952k|        return m_locale;
 8858|   952k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   973k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   973k|    static_cast<    \
  |  |  950|   973k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   973k|    static_cast<    \
  |  |  950|   973k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   973k|    {
 8864|   973k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   129k|        : base(unexpect, std::move(e.error())),
 1616|   129k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   129k|    {
 1618|   129k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   129k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   129k|          m_has_value(false)
  550|   129k|    {
  551|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   129k|    {
 1316|   129k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  7.26M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  7.26M|        : m_deferred_init(), m_has_value(true)
  529|  7.26M|    {
  530|  7.26M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.40M|    {
 4559|  1.40M|        return x.is_at_end();
 4560|  1.40M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  2.90M|    {
 4603|  2.90M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 2.90M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  2.90M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 2.90M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  2.90M|        return !read_at_position();
 4610|  2.90M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  7.99M|    {
 4583|  7.99M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  7.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  7.99M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 7.99M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  7.99M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  879|  7.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 6.49M, False: 1.50M]
  |  |  ------------------
  ------------------
 4590|  6.49M|            return true;
 4591|  6.49M|        }
 4592|       |
 4593|  2.98M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.50M, False: 1.48M]
  ------------------
 4594|  1.50M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 17.4k, False: 1.48M]
  ------------------
 4595|  17.4k|                return false;
 4596|  17.4k|            }
 4597|  1.50M|        }
 4598|  1.48M|        return true;
 4599|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  2.63M|    {
 4518|  2.63M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  2.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 2.63M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  2.63M|        auto res = read_at_position();
 4527|  2.63M|        SCN_EXPECT(res);
  ------------------
  |  |  945|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  2.63M|        return parent()->get_character_at(m_position);
 4529|  2.63M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  2.63M|    {
 4388|  2.63M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.43M, False: 1.19M]
  |  |  ------------------
  ------------------
 4389|  2.63M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.43M|            return m_putback_buffer[pos];
 4391|  1.43M|        }
 4392|  1.19M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.19M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  945|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.19M|        return m_current_view[start];
 4395|  1.19M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   120k|        : base(std::in_place, std::forward<U>(val)),
 1570|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   120k|    {
 1572|   120k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   120k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   120k|    {
  442|   120k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   122k|    {
 1316|   122k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.19k|        : base(unexpect, std::move(e.error())),
 1616|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.19k|    {
 1618|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.19k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.19k|          m_has_value(false)
  451|  2.19k|    {
  452|  2.19k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  12.5k|        : m_unexpected(std::forward<Args>(args)...)
  359|  12.5k|    {
  360|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  12.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  2.46M|    {
 4504|  2.46M|        ++m_position;
 4505|  2.46M|        (void)read_at_position();
 4506|  2.46M|        return *this;
 4507|  2.46M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  1.10M|    {
 4553|  1.10M|        return !(lhs == rhs);
 4554|  1.10M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  1.10M|    {
 4548|  1.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 1.10M, False: 0]
  |  Branch (4548:46): [True: 194k, False: 912k]
  ------------------
 4549|  1.10M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  12.5k|        : m_unexpected(std::forward<Err>(e))
  350|  12.5k|    {
  351|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.5k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    956|        : base(unexpect, std::move(e.error())),
 1616|    956|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    956|    {
 1618|    956|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    956|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    956|          m_has_value(false)
  451|    956|    {
  452|    956|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   100k|    {
 1316|   100k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  99.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  99.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  99.5k|    {
 1572|  99.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  99.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  99.5k|    {
  442|  99.5k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   100k|    {
 1740|   100k|        return has_value();
 1741|   100k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    956|    {
 1746|    956|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    956|        return this->get_unexpected().error();
 1748|    956|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    956|    {
  473|    956|        return m_unexpected;
  474|    956|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  99.5k|    {
 1805|  99.5k|        return std::move(value());
 1806|  99.5k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  99.5k|    {
 1769|  99.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  99.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  99.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  99.5k|        return this->get_value();
 1771|  99.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  99.5k|    {
  456|  99.5k|        return m_value;
  457|  99.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  4.42M|    {
 3484|  4.42M|        return m_sentinel;
 3485|  4.42M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   303k|    {
 1740|   303k|        return has_value();
 1741|   303k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   607k|    {
  490|   607k|        return m_has_value;
  491|   607k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  14.7k|    {
 1746|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.7k|        return this->get_unexpected().error();
 1748|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.7k|    {
  473|  14.7k|        return m_unexpected;
  474|  14.7k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   239k|    {
 1805|   239k|        return std::move(value());
 1806|   239k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   289k|    {
 1769|   289k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   289k|        return this->get_value();
 1771|   289k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   289k|    {
  456|   289k|        return m_value;
  457|   289k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   127k|    {
 3480|   127k|        return m_iterator;
 3481|   127k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   127k|    {
 3484|   127k|        return m_sentinel;
 3485|   127k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   121k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   121k|    static_cast<    \
  |  |  950|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   121k|    static_cast<    \
  |  |  950|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   121k|    {
 3466|   121k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.49M|    {
 4570|  1.49M|        return !x.is_at_end();
 4571|  1.49M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.33k|        : base(unexpect, std::move(e.error())),
 1616|  3.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.33k|    {
 1618|  3.33k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.33k|          m_has_value(false)
  451|  3.33k|    {
  452|  3.33k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   189k|    {
 1316|   189k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   186k|        : base(std::in_place, std::forward<U>(val)),
 1570|   186k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   186k|    {
 1572|   186k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   186k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   186k|    {
  442|   186k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.33k|        : base(unexpect, std::move(e.error())),
 1616|  1.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.33k|    {
 1618|  1.33k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.33k|          m_has_value(false)
  451|  1.33k|    {
  452|  1.33k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   153k|    {
 1316|   153k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   152k|        : base(std::in_place, std::forward<U>(val)),
 1570|   152k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   152k|    {
 1572|   152k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   152k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   152k|    {
  442|   152k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   153k|    {
 1740|   153k|        return has_value();
 1741|   153k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   307k|    {
  490|   307k|        return m_has_value;
  491|   307k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.33k|    {
 1746|  1.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.33k|        return this->get_unexpected().error();
 1748|  1.33k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.33k|    {
  473|  1.33k|        return m_unexpected;
  474|  1.33k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   152k|    {
 1805|   152k|        return std::move(value());
 1806|   152k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   152k|    {
 1769|   152k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   152k|        return this->get_value();
 1771|   152k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   152k|    {
  456|   152k|        return m_value;
  457|   152k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   746k|    {
 3000|   746k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|   746k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   746k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   746k|    {
 2981|   746k|        return t.data();
 2982|   746k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.60M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.60M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.60M|    {
 1572|  2.60M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.60M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.60M|    {
  442|  2.60M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  49.4k|    {
 1795|  49.4k|        return value();
 1796|  49.4k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  75.1k|    {
 1795|  75.1k|        return value();
 1796|  75.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    700|        : base(std::in_place, std::forward<U>(val)),
 1570|    700|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    700|    {
 1572|    700|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    700|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    700|    {
  442|    700|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.40k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.40k|    {
 1572|  1.40k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.40k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.40k|    {
  442|  1.40k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  24.5M|    {
 4559|  24.5M|        return x.is_at_end();
 4560|  24.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  48.2M|    {
 4603|  48.2M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 48.2M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  48.2M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 48.2M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  48.2M|        return !read_at_position();
 4610|  48.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   127M|    {
 4583|   127M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|   127M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   127M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   127M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 127M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   127M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  879|   127M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 103M, False: 23.3M]
  |  |  ------------------
  ------------------
 4590|   103M|            return true;
 4591|   103M|        }
 4592|       |
 4593|  46.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 23.3M, False: 23.3M]
  ------------------
 4594|  23.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 21.2k, False: 23.3M]
  ------------------
 4595|  21.2k|                return false;
 4596|  21.2k|            }
 4597|  23.3M|        }
 4598|  23.3M|        return true;
 4599|  23.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   174M|    {
 4357|   174M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   174M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  46.9M|    {
 4518|  46.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  46.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  46.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  46.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 46.9M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  46.9M|        auto res = read_at_position();
 4527|  46.9M|        SCN_EXPECT(res);
  ------------------
  |  |  945|  46.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  46.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  46.9M|        return parent()->get_character_at(m_position);
 4529|  46.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  46.9M|    {
 4388|  46.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  46.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 24.3M, False: 22.5M]
  |  |  ------------------
  ------------------
 4389|  46.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  24.3M|            return m_putback_buffer[pos];
 4391|  24.3M|        }
 4392|  22.5M|        const auto start = pos - m_putback_buffer.size();
 4393|  22.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  945|  22.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  22.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  22.5M|        return m_current_view[start];
 4395|  22.5M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   773k|        : base(std::in_place, std::forward<U>(val)),
 1570|   773k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   773k|    {
 1572|   773k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   773k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   773k|    {
  442|   773k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   775k|    {
 1316|   775k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.33k|        : base(unexpect, std::move(e.error())),
 1616|  2.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.33k|    {
 1618|  2.33k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.33k|          m_has_value(false)
  451|  2.33k|    {
  452|  2.33k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  32.1M|    {
 4504|  32.1M|        ++m_position;
 4505|  32.1M|        (void)read_at_position();
 4506|  32.1M|        return *this;
 4507|  32.1M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  9.13M|    {
 4553|  9.13M|        return !(lhs == rhs);
 4554|  9.13M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  9.14M|    {
 4548|  9.14M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 9.14M, False: 0]
  |  Branch (4548:46): [True: 313k, False: 8.82M]
  ------------------
 4549|  9.14M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   131M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   131M|    else {
 4075|       |        // utf-32
 4076|   131M|        static_assert(sizeof(U) == 4);
 4077|   131M|        SCN_UNUSED(ch);
  ------------------
  |  |  930|   131M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   131M|        return 1;
 4079|   131M|    }
 4080|   131M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   131M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   131M|    else {
 4281|   131M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  945|   131M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   131M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   131M|        auto cp = static_cast<char32_t>(input.front());
 4283|   131M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|   131M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 788k, False: 130M]
  |  |  ------------------
  ------------------
 4284|   788k|            return invalid_code_point;
 4285|   788k|        }
 4286|   130M|        return cp;
 4287|   131M|    }
 4288|   131M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    932|        : base(unexpect, std::move(e.error())),
 1616|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    932|    {
 1618|    932|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    932|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    932|          m_has_value(false)
  451|    932|    {
  452|    932|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   619k|    {
 1316|   619k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   618k|        : base(std::in_place, std::forward<U>(val)),
 1570|   618k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   618k|    {
 1572|   618k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   618k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   618k|    {
  442|   618k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   619k|    {
 1740|   619k|        return has_value();
 1741|   619k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    932|    {
 1746|    932|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    932|        return this->get_unexpected().error();
 1748|    932|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    932|    {
  473|    932|        return m_unexpected;
  474|    932|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   618k|    {
 1805|   618k|        return std::move(value());
 1806|   618k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   618k|    {
 1769|   618k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   618k|        return this->get_value();
 1771|   618k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   618k|    {
  456|   618k|        return m_value;
  457|   618k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  74.2M|    {
 3484|  74.2M|        return m_sentinel;
 3485|  74.2M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.87M|    {
 1740|  1.87M|        return has_value();
 1741|  1.87M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.74M|    {
  490|  3.74M|        return m_has_value;
  491|  3.74M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  28.3k|    {
 1746|  28.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  28.3k|        return this->get_unexpected().error();
 1748|  28.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.3k|    {
  473|  28.3k|        return m_unexpected;
  474|  28.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.53M|    {
 1805|  1.53M|        return std::move(value());
 1806|  1.53M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.84M|    {
 1769|  1.84M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.84M|        return this->get_value();
 1771|  1.84M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.84M|    {
  456|  1.84M|        return m_value;
  457|  1.84M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  61.4M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  61.4M|    else {
 3966|  61.4M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  61.4M|                                       to_address(first), to_address(last)))};
 3968|  61.4M|    }
 3969|  61.4M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   184M|{
  316|   184M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|   184M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   184M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   780k|    {
 3480|   780k|        return m_iterator;
 3481|   780k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   780k|    {
 3484|   780k|        return m_sentinel;
 3485|   780k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   773k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   773k|    static_cast<    \
  |  |  950|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   773k|    static_cast<    \
  |  |  950|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   773k|    {
 3466|   773k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  23.6M|    {
 4570|  23.6M|        return !x.is_at_end();
 4571|  23.6M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  4.66k|        : base(unexpect, std::move(e.error())),
 1616|  4.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.66k|    {
 1618|  4.66k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.66k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.66k|          m_has_value(false)
  451|  4.66k|    {
  452|  4.66k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.55M|    {
 1316|  1.55M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.54M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.54M|    {
 1572|  1.54M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.54M|    {
  442|  1.54M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.10M|    {
  490|  3.10M|        return m_has_value;
  491|  3.10M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.54M|    {
 1769|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.54M|        return this->get_value();
 1771|  1.54M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.54M|    {
  456|  1.54M|        return m_value;
  457|  1.54M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.86k|        : base(unexpect, std::move(e.error())),
 1616|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.86k|    {
 1618|  1.86k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.86k|          m_has_value(false)
  451|  1.86k|    {
  452|  1.86k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.23M|    {
 1316|  1.23M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.23M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.23M|    {
 1572|  1.23M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.23M|    {
  442|  1.23M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.55M|    {
 1979|  1.55M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.55M|                                            std::forward<F>(f));
 1981|  1.55M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.55M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.55M|    else {
 1472|  1.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.54M, False: 4.66k]
  |  |  ------------------
  ------------------
 1474|  1.55M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.55M|                   : result(unexpect,
 1476|  4.66k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.66k|                                           std::forward<Exp>(exp).error()));
 1478|  1.55M|    }
 1479|  1.55M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.54M|    {
 1805|  1.54M|        return std::move(value());
 1806|  1.54M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  4.66k|    {
 1756|  4.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  4.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  4.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.66k|        return std::move(this->get_unexpected().error());
 1758|  4.66k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.66k|    {
  473|  4.66k|        return m_unexpected;
  474|  4.66k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.66k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.66k|    {
 1628|  4.66k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.23M|    {
 1740|  1.23M|        return has_value();
 1741|  1.23M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.47M|    {
  490|  2.47M|        return m_has_value;
  491|  2.47M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.86k|    {
 1746|  1.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.86k|        return this->get_unexpected().error();
 1748|  1.86k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.86k|    {
  473|  1.86k|        return m_unexpected;
  474|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.23M|    {
 1805|  1.23M|        return std::move(value());
 1806|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.23M|    {
 1769|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.23M|        return this->get_value();
 1771|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.23M|    {
  456|  1.23M|        return m_value;
  457|  1.23M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.84M|    {
 3000|  2.84M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|  2.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.84M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.84M|    {
 2981|  2.84M|        return t.data();
 2982|  2.84M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   306k|    {
 1795|   306k|        return value();
 1796|   306k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   613k|    {
 1795|   613k|        return value();
 1796|   613k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    116|        : base(std::in_place, std::forward<U>(val)),
 1570|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    116|    {
 1572|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    116|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    116|    {
  442|    116|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    232|        : base(std::in_place, std::forward<U>(val)),
 1570|    232|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    232|    {
 1572|    232|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    232|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    232|    {
  442|    232|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  10.9M|    {
 4357|  10.9M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  10.9M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   274k|    {
 6182|   274k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 274k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   274k|        return static_cast<std::size_t>(m_desc &
 6187|   274k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   274k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   548k|    {
 6208|   548k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   548k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   274k|    {
 6150|   274k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 274k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   274k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  880|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 274k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   274k|        const auto t = type(id);
 6162|   274k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  880|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 274k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   274k|        basic_scan_arg<Context> arg;
 6167|   274k|        arg.m_type = t;
 6168|   274k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 274k, False: 0]
  ------------------
 6169|   274k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   274k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   274k|        return arg;
 6175|   274k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   274k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   274k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   274k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   274k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   274k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   274k|    {
 6212|   274k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   274k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   474k|    {
 5966|   474k|        return m_type != detail::arg_type::none_type;
 5967|   474k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   113k|{
 9324|   113k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   113k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   113k|{
 9225|   113k|#define SCN_VISIT(Type)                                                \
 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   113k|    }                                                                  \
 9229|   113k|    else {                                                             \
 9230|   113k|        return vis(monostate_val);                                     \
 9231|   113k|    }
 9232|       |
 9233|   113k|    monostate monostate_val{};
 9234|       |
 9235|   113k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 113k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 113k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 113k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 113k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 113k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 113k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 113k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 113k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 113k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 113k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 113k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 113k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 113k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 113k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 113k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 113k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 113k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 113k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  56.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 56.9k, False: 56.9k]
  ------------------
 9273|  56.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  56.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.9k|    }                                                                  \
  |  | 9229|  56.9k|    else {                                                             \
  |  | 9230|  56.9k|        return vis(monostate_val);                                     \
  |  | 9231|  56.9k|    }
  ------------------
 9274|   113k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 56.9k, False: 56.9k]
  ------------------
 9275|   113k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   113k|    }                                                                  \
  |  | 9229|   113k|    else {                                                             \
  |  | 9230|   113k|        return vis(monostate_val);                                     \
  |  | 9231|   113k|    }
  ------------------
 9276|   113k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 113k]
  ------------------
 9277|   113k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   113k|    }                                                                  \
  |  | 9229|   113k|    else {                                                             \
  |  | 9230|   113k|        return vis(monostate_val);                                     \
  |  | 9231|   113k|    }
  ------------------
 9278|   113k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 113k]
  ------------------
 9279|   113k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   113k|    }                                                                  \
  |  | 9229|   113k|    else {                                                             \
  |  | 9230|   113k|        return vis(monostate_val);                                     \
  |  | 9231|   113k|    }
  ------------------
 9280|   113k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 113k]
  ------------------
 9281|   113k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   113k|    }                                                                  \
  |  | 9229|   113k|    else {                                                             \
  |  | 9230|   113k|        return vis(monostate_val);                                     \
  |  | 9231|   113k|    }
  ------------------
 9282|   113k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 113k]
  ------------------
 9283|   113k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   113k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   113k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   113k|    }                                                                  \
  |  | 9229|   113k|    else {                                                             \
  |  | 9230|   113k|        return vis(monostate_val);                                     \
  |  | 9231|   113k|    }
  ------------------
 9284|       |
 9285|   113k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 113k]
  ------------------
 9286|   113k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   113k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   113k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 113k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 113k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   113k|            SCN_CLANG_POP
 9303|   113k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   624k|{
 6011|   624k|    return arg.m_type;
 6012|   624k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   325k|{
 6023|   325k|    return arg.m_value;
 6024|   325k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|  57.7k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  57.7k|    {
 8949|  57.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   130k|{
 4691|   130k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 130k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   130k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   130k|                            ranges::default_sentinel};
 4697|   130k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   130k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   130k|    {
 4455|   130k|        SCN_EXPECT(parent);
  ------------------
  |  |  945|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   130k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  945|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   130k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  73.0k|{
 9324|  73.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  73.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  73.0k|{
 9225|  73.0k|#define SCN_VISIT(Type)                                                \
 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  73.0k|    }                                                                  \
 9229|  73.0k|    else {                                                             \
 9230|  73.0k|        return vis(monostate_val);                                     \
 9231|  73.0k|    }
 9232|       |
 9233|  73.0k|    monostate monostate_val{};
 9234|       |
 9235|  73.0k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 73.0k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 73.0k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 73.0k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 73.0k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 73.0k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 73.0k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 73.0k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 73.0k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 73.0k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 73.0k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 73.0k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 73.0k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 73.0k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 73.0k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 73.0k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 73.0k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 73.0k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 73.0k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 73.0k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  73.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 73.0k, False: 0]
  ------------------
 9275|  73.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  73.0k|    }                                                                  \
  |  | 9229|  73.0k|    else {                                                             \
  |  | 9230|  73.0k|        return vis(monostate_val);                                     \
  |  | 9231|  73.0k|    }
  ------------------
 9276|  73.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 73.0k]
  ------------------
 9277|  73.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  73.0k|    }                                                                  \
  |  | 9229|  73.0k|    else {                                                             \
  |  | 9230|  73.0k|        return vis(monostate_val);                                     \
  |  | 9231|  73.0k|    }
  ------------------
 9278|  73.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 73.0k]
  ------------------
 9279|  73.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  73.0k|    }                                                                  \
  |  | 9229|  73.0k|    else {                                                             \
  |  | 9230|  73.0k|        return vis(monostate_val);                                     \
  |  | 9231|  73.0k|    }
  ------------------
 9280|  73.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 73.0k]
  ------------------
 9281|  73.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  73.0k|    }                                                                  \
  |  | 9229|  73.0k|    else {                                                             \
  |  | 9230|  73.0k|        return vis(monostate_val);                                     \
  |  | 9231|  73.0k|    }
  ------------------
 9282|  73.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 73.0k]
  ------------------
 9283|  73.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  73.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  73.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  73.0k|    }                                                                  \
  |  | 9229|  73.0k|    else {                                                             \
  |  | 9230|  73.0k|        return vis(monostate_val);                                     \
  |  | 9231|  73.0k|    }
  ------------------
 9284|       |
 9285|  73.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 73.0k]
  ------------------
 9286|  73.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  73.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  73.0k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 73.0k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 73.0k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  73.0k|            SCN_CLANG_POP
 9303|  73.0k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  91.7k|        : m_format{format},
 6280|  91.7k|          m_next_arg_id{next_arg_id},
 6281|  91.7k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  91.7k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  91.7k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  91.7k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  91.7k|    {
 6287|  91.7k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  91.7k|    {
 3075|  91.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  91.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  91.7k|    {
 3041|  91.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  91.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  91.7k|{
 7796|  91.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  91.7k|    handler.check_args_exhausted();
 7798|  91.7k|    return handler.get_error();
 7799|  91.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  91.7k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  91.7k|    auto begin = format.data();
 7764|  91.7k|    auto it = begin;
 7765|  91.7k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   165k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 91.7k, False: 73.7k]
  ------------------
 7768|  91.7k|        const auto ch = *it++;
 7769|  91.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 91.7k, False: 0]
  ------------------
 7770|  91.7k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  91.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  91.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 17.9k, False: 73.7k]
  ------------------
 7774|  17.9k|                return;
 7775|  17.9k|            }
 7776|  91.7k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  91.7k|    }
 7787|       |
 7788|  73.7k|    handler.on_literal_text(begin, end);
 7789|  73.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  91.7k|{
 7693|  91.7k|    struct id_adapter {
 7694|  91.7k|        constexpr void operator()()
 7695|  91.7k|        {
 7696|  91.7k|            arg_id = handler.on_arg_id();
 7697|  91.7k|        }
 7698|  91.7k|        constexpr void operator()(std::size_t id)
 7699|  91.7k|        {
 7700|  91.7k|            arg_id = handler.on_arg_id(id);
 7701|  91.7k|        }
 7702|       |
 7703|  91.7k|        constexpr void on_error(const char* msg)
 7704|  91.7k|        {
 7705|  91.7k|            SCN_UNLIKELY_ATTR
 7706|  91.7k|            handler.on_error(msg);
 7707|  91.7k|        }
 7708|       |
 7709|  91.7k|        Handler& handler;
 7710|  91.7k|        std::size_t arg_id;
 7711|  91.7k|    };
 7712|       |
 7713|  91.7k|    ++begin;
 7714|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  91.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 91.7k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  91.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 91.7k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  91.7k|    else {
 7726|  91.7k|        auto adapter = id_adapter{handler, 0};
 7727|  91.7k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  91.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  91.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 91.7k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  91.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 91.7k, False: 0]
  ------------------
 7738|  91.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  91.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  91.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.19k, False: 84.5k]
  |  |  |  Branch (880:45): [True: 0, False: 91.7k]
  |  |  |  Branch (880:45): [True: 7.19k, False: 84.5k]
  |  |  ------------------
  ------------------
 7744|  7.19k|                handler.on_error("Unknown format specifier");
 7745|  7.19k|                return begin;
 7746|  7.19k|            }
 7747|  91.7k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  91.7k|    }
 7754|  84.5k|    return begin + 1;
 7755|  91.7k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   149k|    {
 8847|   149k|        return m_args.get(id);
 8848|   149k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   149k|    {
 6315|   149k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  880|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   149k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   149k|        do_check_arg_id(id);
 6323|   149k|        return id;
 6324|   149k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   149k|{
 6809|   149k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   149k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   149k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  91.7k|{
 7194|  91.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  91.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 91.7k, False: 0]
  |  Branch (7195:26): [True: 0, False: 91.7k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  91.7k|    handler();
 7200|  91.7k|    return begin;
 7201|  91.7k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7142|  10.7k|{
 7143|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  10.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  945|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  10.7k|    unsigned long long value = 0;
 7147|  21.5k|    do {
 7148|  21.5k|        value *= 10;
 7149|  21.5k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  21.5k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 21.5k]
  ------------------
 7151|  21.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  21.5k|        ++begin;
 7155|  21.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 21.5k, False: 0]
  |  Branch (7155:30): [True: 21.5k, False: 0]
  |  Branch (7155:47): [True: 10.7k, False: 10.7k]
  ------------------
 7156|  10.7k|    return static_cast<int>(value);
 7157|  10.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  91.7k|        {
 7696|  91.7k|            arg_id = handler.on_arg_id();
 7697|  91.7k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   138k|    {
 6310|   138k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   138k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   288k|    {
 6299|   288k|        return m_format.data();
 6300|   288k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|  91.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  91.7k|    {
 7874|  91.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  91.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|  91.7k|{
 7609|  91.7k|    auto do_presentation = [&]() -> const CharT* {
 7610|  91.7k|        if (*begin == CharT{'['}) {
 7611|  91.7k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  91.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  91.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  91.7k|                return begin;
 7617|  91.7k|            }
 7618|  91.7k|            handler.on_character_set_string(set);
 7619|  91.7k|            return begin;
 7620|  91.7k|        }
 7621|  91.7k|        if (*begin == CharT{'/'}) {
 7622|  91.7k|            return parse_presentation_regex(begin, end, handler);
 7623|  91.7k|        }
 7624|  91.7k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  91.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  91.7k|            handler.on_error("Invalid type specifier in format string");
 7627|  91.7k|            return begin;
 7628|  91.7k|        }
 7629|  91.7k|        handler.on_type(type);
 7630|  91.7k|        return begin;
 7631|  91.7k|    };
 7632|       |
 7633|  91.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 91.7k, False: 0]
  |  Branch (7633:28): [True: 79.5k, False: 12.1k]
  ------------------
 7634|  91.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 79.5k, False: 0]
  |  Branch (7634:36): [True: 75.9k, False: 3.59k]
  ------------------
 7635|  75.9k|        return do_presentation();
 7636|  75.9k|    }
 7637|       |
 7638|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  15.7k|    begin = parse_align(begin, end, handler);
 7644|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  15.7k|    begin = parse_width(begin, end, handler);
 7650|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  15.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 15.7k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  15.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.59k, False: 12.1k]
  ------------------
 7669|  3.59k|        handler.on_localized();
 7670|  3.59k|        ++begin;
 7671|  3.59k|    }
 7672|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  15.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 15.7k, False: 0]
  |  Branch (7677:25): [True: 12.1k, False: 3.59k]
  ------------------
 7678|  12.1k|        do_presentation();
 7679|  12.1k|    }
 7680|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  15.7k|    return begin;
 7686|  15.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|   131k|{
 7258|   131k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 125k, False: 5.39k]
  |  Branch (7258:33): [True: 125k, False: 0]
  ------------------
 7259|   131k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 5.39k, False: 0]
  |  Branch (7259:33): [True: 5.39k, False: 0]
  ------------------
 7260|   131k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|  88.1k|    auto do_presentation = [&]() -> const CharT* {
 7610|  88.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 4.99k, False: 83.1k]
  ------------------
 7611|  4.99k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  4.99k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  4.99k|            handler.on_character_set_string(set);
 7619|  4.99k|            return begin;
 7620|  4.99k|        }
 7621|  83.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 83.1k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  83.1k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  83.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 79.5k]
  |  |  ------------------
  ------------------
 7626|  3.59k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.59k|            return begin;
 7628|  3.59k|        }
 7629|  79.5k|        handler.on_type(type);
 7630|  79.5k|        return begin;
 7631|  83.1k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  4.99k|{
 7448|  4.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  4.99k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  945|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  4.99k|    auto start = begin;
 7452|  4.99k|    ++begin;
 7453|       |
 7454|  4.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  4.99k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 4.99k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  4.99k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 4.99k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  14.9k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 14.9k, False: 0]
  ------------------
 7479|  14.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  14.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 4.99k, False: 9.99k]
  ------------------
 7484|  4.99k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  4.99k|        }
 7486|       |
 7487|  9.99k|        parse_presentation_set_literal(begin, end, handler);
 7488|  9.99k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  4.99k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7411|  9.99k|{
 7412|  9.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  9.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  9.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  9.99k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  9.99k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  880|  9.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 9.99k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  9.99k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 9.99k, False: 0]
  |  Branch (7419:25): [True: 9.99k, False: 0]
  |  Branch (7419:49): [True: 9.99k, False: 0]
  ------------------
 7420|  9.99k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 9.99k, False: 0]
  ------------------
 7421|  9.99k|        ++begin;
 7422|       |
 7423|  9.99k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  9.99k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  880|  9.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 9.99k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  9.99k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  880|  9.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 9.99k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  9.99k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  9.99k|        return;
 7437|  9.99k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7387|  19.9k|{
 7388|  19.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  19.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  19.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  880|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 19.9k]
  |  |  |  Branch (880:45): [True: 0, False: 19.9k]
  |  |  |  Branch (880:45): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  19.9k|    const auto cp =
 7397|  19.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  19.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  19.9k|    begin += len;
 7404|  19.9k|    return cp;
 7405|  19.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  7.49k|    {
 7102|  7.49k|        m_specs.charset_string_data = fmt.data();
 7103|  7.49k|        m_specs.charset_string_size = fmt.size();
 7104|  7.49k|        on_type(presentation_type::string_set);
 7105|  7.49k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|   136k|{
 7206|   136k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 136k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 136k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 136k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 136k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 136k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 136k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 136k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 136k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 136k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 136k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 136k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 136k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 136k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 136k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 136k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 136k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 136k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 136k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   125k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 125k, False: 10.7k]
  ------------------
 7237|   125k|            return presentation_type::string;
 7238|  5.39k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 5.39k, False: 131k]
  ------------------
 7239|  5.39k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 136k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 136k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 136k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 136k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  5.39k|        default:
  ------------------
  |  Branch (7250:9): [True: 5.39k, False: 131k]
  ------------------
 7251|  5.39k|            return presentation_type::none;
 7252|   136k|    }
 7253|   136k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  15.7k|{
 7283|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  15.7k|    auto check_align = [](wchar_t ch) {
 7286|  15.7k|        switch (ch) {
 7287|  15.7k|            case L'<':
 7288|  15.7k|                return align_type::left;
 7289|  15.7k|            case L'>':
 7290|  15.7k|                return align_type::right;
 7291|  15.7k|            case L'^':
 7292|  15.7k|                return align_type::center;
 7293|  15.7k|            default:
 7294|  15.7k|                return align_type::none;
 7295|  15.7k|        }
 7296|  15.7k|    };
 7297|       |
 7298|  15.7k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  15.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  |  Branch (880:45): [True: 0, False: 15.7k]
  |  |  |  Branch (880:45): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7300|  15.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  15.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  15.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  15.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  15.7k|    const auto begin_before_fill = begin;
 7310|  15.7k|    begin += potential_fill_len;
 7311|       |
 7312|  15.7k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 15.7k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  15.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  15.7k|    const auto begin_after_fill = begin;
 7318|  15.7k|    ++begin;
 7319|       |
 7320|  15.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 15.7k, False: 0]
  ------------------
 7321|  15.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  15.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 4.99k, False: 10.7k]
  ------------------
 7326|  4.99k|            return begin_before_fill;
 7327|  4.99k|        }
 7328|  15.7k|    }
 7329|       |
 7330|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 10.7k, False: 0]
  ------------------
 7331|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 10.7k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  10.7k|        return begin_before_fill;
 7336|  10.7k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  10.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|  23.6k|{
 7265|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|  23.6k|    else {
 7270|  23.6k|        const auto lengths =
 7271|  23.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|  23.6k|            "\3\4";
 7273|  23.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|  23.6k|        return len;
 7275|  23.6k|    }
 7276|  23.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  31.5k|    auto check_align = [](wchar_t ch) {
 7286|  31.5k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 31.5k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 31.5k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 31.5k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  31.5k|            default:
  ------------------
  |  Branch (7293:13): [True: 31.5k, False: 0]
  ------------------
 7294|  31.5k|                return align_type::none;
 7295|  31.5k|        }
 7296|  31.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  15.7k|{
 7348|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  15.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 15.7k, False: 0]
  |  Branch (7350:33): [True: 7.19k, False: 8.59k]
  ------------------
 7351|  7.19k|        int width = parse_simple_int(begin, end);
 7352|  7.19k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|  7.19k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 7.19k, False: 0]
  |  |  ------------------
  ------------------
 7353|  7.19k|            handler.on_width(width);
 7354|  7.19k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  7.19k|    }
 7360|  15.7k|    return begin;
 7361|  15.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|  3.59k|    {
 7879|  3.59k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.59k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.59k, False: 0]
  ------------------
 7881|  3.59k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.59k, False: 0]
  ------------------
 7882|  3.59k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.59k, False: 0]
  ------------------
 7883|  3.59k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.59k, False: 0]
  ------------------
 7884|  3.59k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.59k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.59k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  84.5k|{
 9324|  84.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  84.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  84.5k|{
 9225|  84.5k|#define SCN_VISIT(Type)                                                \
 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  84.5k|    }                                                                  \
 9229|  84.5k|    else {                                                             \
 9230|  84.5k|        return vis(monostate_val);                                     \
 9231|  84.5k|    }
 9232|       |
 9233|  84.5k|    monostate monostate_val{};
 9234|       |
 9235|  84.5k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 84.5k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 84.5k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 84.5k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 84.5k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 84.5k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 84.5k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 84.5k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 84.5k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 84.5k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 84.5k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 84.5k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 84.5k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 84.5k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 84.5k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 84.5k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 84.5k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 84.5k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 84.5k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  42.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 42.2k, False: 42.2k]
  ------------------
 9273|  42.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  42.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  42.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  42.2k|    }                                                                  \
  |  | 9229|  42.2k|    else {                                                             \
  |  | 9230|  42.2k|        return vis(monostate_val);                                     \
  |  | 9231|  42.2k|    }
  ------------------
 9274|  84.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 42.2k, False: 42.2k]
  ------------------
 9275|  84.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  84.5k|    }                                                                  \
  |  | 9229|  84.5k|    else {                                                             \
  |  | 9230|  84.5k|        return vis(monostate_val);                                     \
  |  | 9231|  84.5k|    }
  ------------------
 9276|  84.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 84.5k]
  ------------------
 9277|  84.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  84.5k|    }                                                                  \
  |  | 9229|  84.5k|    else {                                                             \
  |  | 9230|  84.5k|        return vis(monostate_val);                                     \
  |  | 9231|  84.5k|    }
  ------------------
 9278|  84.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 84.5k]
  ------------------
 9279|  84.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  84.5k|    }                                                                  \
  |  | 9229|  84.5k|    else {                                                             \
  |  | 9230|  84.5k|        return vis(monostate_val);                                     \
  |  | 9231|  84.5k|    }
  ------------------
 9280|  84.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 84.5k]
  ------------------
 9281|  84.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  84.5k|    }                                                                  \
  |  | 9229|  84.5k|    else {                                                             \
  |  | 9230|  84.5k|        return vis(monostate_val);                                     \
  |  | 9231|  84.5k|    }
  ------------------
 9282|  84.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 84.5k]
  ------------------
 9283|  84.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  84.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  84.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  84.5k|    }                                                                  \
  |  | 9229|  84.5k|    else {                                                             \
  |  | 9230|  84.5k|        return vis(monostate_val);                                     \
  |  | 9231|  84.5k|    }
  ------------------
 9284|       |
 9285|  84.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 84.5k]
  ------------------
 9286|  84.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  84.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  84.5k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 84.5k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 84.5k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  84.5k|            SCN_CLANG_POP
 9303|  84.5k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  57.7k|        : m_format{format},
 6280|  57.7k|          m_next_arg_id{next_arg_id},
 6281|  57.7k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  57.7k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  57.7k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  57.7k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  57.7k|    {
 6287|  57.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  57.7k|{
 7796|  57.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  57.7k|    handler.check_args_exhausted();
 7798|  57.7k|    return handler.get_error();
 7799|  57.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  57.7k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  57.7k|    auto begin = format.data();
 7764|  57.7k|    auto it = begin;
 7765|  57.7k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   106k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 57.7k, False: 48.7k]
  ------------------
 7768|  57.7k|        const auto ch = *it++;
 7769|  57.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 57.7k, False: 0]
  ------------------
 7770|  57.7k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  57.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  57.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 8.99k, False: 48.7k]
  ------------------
 7774|  8.99k|                return;
 7775|  8.99k|            }
 7776|  57.7k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  57.7k|    }
 7787|       |
 7788|  48.7k|    handler.on_literal_text(begin, end);
 7789|  48.7k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|  48.7k|    {
 8986|  48.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|  48.7k|    static_cast<    \
  |  |  950|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  48.7k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  57.7k|{
 7693|  57.7k|    struct id_adapter {
 7694|  57.7k|        constexpr void operator()()
 7695|  57.7k|        {
 7696|  57.7k|            arg_id = handler.on_arg_id();
 7697|  57.7k|        }
 7698|  57.7k|        constexpr void operator()(std::size_t id)
 7699|  57.7k|        {
 7700|  57.7k|            arg_id = handler.on_arg_id(id);
 7701|  57.7k|        }
 7702|       |
 7703|  57.7k|        constexpr void on_error(const char* msg)
 7704|  57.7k|        {
 7705|  57.7k|            SCN_UNLIKELY_ATTR
 7706|  57.7k|            handler.on_error(msg);
 7707|  57.7k|        }
 7708|       |
 7709|  57.7k|        Handler& handler;
 7710|  57.7k|        std::size_t arg_id;
 7711|  57.7k|    };
 7712|       |
 7713|  57.7k|    ++begin;
 7714|  57.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  57.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 57.7k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  57.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 57.7k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  57.7k|    else {
 7726|  57.7k|        auto adapter = id_adapter{handler, 0};
 7727|  57.7k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  57.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  57.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 57.7k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  57.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 57.7k, False: 0]
  ------------------
 7738|  57.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  57.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  57.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 54.1k]
  |  |  |  Branch (880:45): [True: 0, False: 57.7k]
  |  |  |  Branch (880:45): [True: 3.59k, False: 54.1k]
  |  |  ------------------
  ------------------
 7744|  3.59k|                handler.on_error("Unknown format specifier");
 7745|  3.59k|                return begin;
 7746|  3.59k|            }
 7747|  57.7k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  57.7k|    }
 7754|  54.1k|    return begin + 1;
 7755|  57.7k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  57.7k|{
 7194|  57.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  57.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 57.7k, False: 0]
  |  Branch (7195:26): [True: 0, False: 57.7k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  57.7k|    handler();
 7200|  57.7k|    return begin;
 7201|  57.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  57.7k|        {
 7696|  57.7k|            arg_id = handler.on_arg_id();
 7697|  57.7k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|  57.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  57.7k|    {
 7874|  57.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  57.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|  57.7k|{
 7609|  57.7k|    auto do_presentation = [&]() -> const CharT* {
 7610|  57.7k|        if (*begin == CharT{'['}) {
 7611|  57.7k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  57.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  57.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  57.7k|                return begin;
 7617|  57.7k|            }
 7618|  57.7k|            handler.on_character_set_string(set);
 7619|  57.7k|            return begin;
 7620|  57.7k|        }
 7621|  57.7k|        if (*begin == CharT{'/'}) {
 7622|  57.7k|            return parse_presentation_regex(begin, end, handler);
 7623|  57.7k|        }
 7624|  57.7k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  57.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  57.7k|            handler.on_error("Invalid type specifier in format string");
 7627|  57.7k|            return begin;
 7628|  57.7k|        }
 7629|  57.7k|        handler.on_type(type);
 7630|  57.7k|        return begin;
 7631|  57.7k|    };
 7632|       |
 7633|  57.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 57.7k, False: 0]
  |  Branch (7633:28): [True: 51.6k, False: 6.09k]
  ------------------
 7634|  57.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 51.6k, False: 0]
  |  Branch (7634:36): [True: 49.8k, False: 1.79k]
  ------------------
 7635|  49.8k|        return do_presentation();
 7636|  49.8k|    }
 7637|       |
 7638|  7.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  7.89k|    begin = parse_align(begin, end, handler);
 7644|  7.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  7.89k|    begin = parse_width(begin, end, handler);
 7650|  7.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  7.89k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 7.89k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  7.89k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 1.79k, False: 6.09k]
  ------------------
 7669|  1.79k|        handler.on_localized();
 7670|  1.79k|        ++begin;
 7671|  1.79k|    }
 7672|  7.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  7.89k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 7.89k, False: 0]
  |  Branch (7677:25): [True: 6.09k, False: 1.79k]
  ------------------
 7678|  6.09k|        do_presentation();
 7679|  6.09k|    }
 7680|  7.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  7.89k|    return begin;
 7686|  7.89k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|  55.9k|    auto do_presentation = [&]() -> const CharT* {
 7610|  55.9k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 2.49k, False: 53.4k]
  ------------------
 7611|  2.49k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  2.49k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  2.49k|            handler.on_character_set_string(set);
 7619|  2.49k|            return begin;
 7620|  2.49k|        }
 7621|  53.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 53.4k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  53.4k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  53.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|  53.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 51.6k]
  |  |  ------------------
  ------------------
 7626|  1.79k|            handler.on_error("Invalid type specifier in format string");
 7627|  1.79k|            return begin;
 7628|  1.79k|        }
 7629|  51.6k|        handler.on_type(type);
 7630|  51.6k|        return begin;
 7631|  53.4k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  2.49k|{
 7448|  2.49k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  2.49k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  945|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  2.49k|    auto start = begin;
 7452|  2.49k|    ++begin;
 7453|       |
 7454|  2.49k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  2.49k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 2.49k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  2.49k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 2.49k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  7.49k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 7.49k, False: 0]
  ------------------
 7479|  7.49k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  7.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.49k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  7.49k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 2.49k, False: 4.99k]
  ------------------
 7484|  2.49k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  2.49k|        }
 7486|       |
 7487|  4.99k|        parse_presentation_set_literal(begin, end, handler);
 7488|  4.99k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  2.49k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7411|  4.99k|{
 7412|  4.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  4.99k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  4.99k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  4.99k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 4.99k, False: 0]
  |  Branch (7419:25): [True: 4.99k, False: 0]
  |  Branch (7419:49): [True: 4.99k, False: 0]
  ------------------
 7420|  4.99k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 4.99k, False: 0]
  ------------------
 7421|  4.99k|        ++begin;
 7422|       |
 7423|  4.99k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  4.99k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  4.99k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  4.99k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  4.99k|        return;
 7437|  4.99k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7387|  9.99k|{
 7388|  9.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  9.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  9.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  9.99k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  9.99k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  880|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 9.99k]
  |  |  |  Branch (880:45): [True: 0, False: 9.99k]
  |  |  |  Branch (880:45): [True: 0, False: 9.99k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  9.99k|    const auto cp =
 7397|  9.99k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  9.99k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|  9.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 9.99k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  9.99k|    begin += len;
 7404|  9.99k|    return cp;
 7405|  9.99k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|  7.89k|{
 7283|  7.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  7.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  7.89k|    auto check_align = [](wchar_t ch) {
 7286|  7.89k|        switch (ch) {
 7287|  7.89k|            case L'<':
 7288|  7.89k|                return align_type::left;
 7289|  7.89k|            case L'>':
 7290|  7.89k|                return align_type::right;
 7291|  7.89k|            case L'^':
 7292|  7.89k|                return align_type::center;
 7293|  7.89k|            default:
 7294|  7.89k|                return align_type::none;
 7295|  7.89k|        }
 7296|  7.89k|    };
 7297|       |
 7298|  7.89k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  7.89k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  |  Branch (880:45): [True: 0, False: 7.89k]
  |  |  |  Branch (880:45): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7300|  7.89k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  7.89k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  7.89k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  7.89k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  7.89k|    const auto begin_before_fill = begin;
 7310|  7.89k|    begin += potential_fill_len;
 7311|       |
 7312|  7.89k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 7.89k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  7.89k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  7.89k|    const auto begin_after_fill = begin;
 7318|  7.89k|    ++begin;
 7319|       |
 7320|  7.89k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 7.89k, False: 0]
  ------------------
 7321|  7.89k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  7.89k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 2.49k, False: 5.39k]
  ------------------
 7326|  2.49k|            return begin_before_fill;
 7327|  2.49k|        }
 7328|  7.89k|    }
 7329|       |
 7330|  5.39k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 5.39k, False: 0]
  ------------------
 7331|  5.39k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 5.39k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  5.39k|        return begin_before_fill;
 7336|  5.39k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  5.39k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  15.7k|    auto check_align = [](wchar_t ch) {
 7286|  15.7k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 15.7k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 15.7k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 15.7k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  15.7k|            default:
  ------------------
  |  Branch (7293:13): [True: 15.7k, False: 0]
  ------------------
 7294|  15.7k|                return align_type::none;
 7295|  15.7k|        }
 7296|  15.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|  7.89k|{
 7348|  7.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  7.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  7.89k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 7.89k, False: 0]
  |  Branch (7350:33): [True: 3.59k, False: 4.29k]
  ------------------
 7351|  3.59k|        int width = parse_simple_int(begin, end);
 7352|  3.59k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|  3.59k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 3.59k, False: 0]
  |  |  ------------------
  ------------------
 7353|  3.59k|            handler.on_width(width);
 7354|  3.59k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  3.59k|    }
 7360|  7.89k|    return begin;
 7361|  7.89k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|  1.79k|    {
 7879|  1.79k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  1.79k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 1.79k, False: 0]
  ------------------
 7881|  1.79k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 1.79k, False: 0]
  ------------------
 7882|  1.79k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 1.79k, False: 0]
  ------------------
 7883|  1.79k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 1.79k, False: 0]
  ------------------
 7884|  1.79k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  1.79k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  1.79k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|  54.1k|{
 9324|  54.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  54.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  54.1k|{
 9225|  54.1k|#define SCN_VISIT(Type)                                                \
 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  54.1k|    }                                                                  \
 9229|  54.1k|    else {                                                             \
 9230|  54.1k|        return vis(monostate_val);                                     \
 9231|  54.1k|    }
 9232|       |
 9233|  54.1k|    monostate monostate_val{};
 9234|       |
 9235|  54.1k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 54.1k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 54.1k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 54.1k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 54.1k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 54.1k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 54.1k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 54.1k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 54.1k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 54.1k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 54.1k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 54.1k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 54.1k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 54.1k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 54.1k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 54.1k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 54.1k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 54.1k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 54.1k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 54.1k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  54.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 54.1k, False: 0]
  ------------------
 9275|  54.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  54.1k|    }                                                                  \
  |  | 9229|  54.1k|    else {                                                             \
  |  | 9230|  54.1k|        return vis(monostate_val);                                     \
  |  | 9231|  54.1k|    }
  ------------------
 9276|  54.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 54.1k]
  ------------------
 9277|  54.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  54.1k|    }                                                                  \
  |  | 9229|  54.1k|    else {                                                             \
  |  | 9230|  54.1k|        return vis(monostate_val);                                     \
  |  | 9231|  54.1k|    }
  ------------------
 9278|  54.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 54.1k]
  ------------------
 9279|  54.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  54.1k|    }                                                                  \
  |  | 9229|  54.1k|    else {                                                             \
  |  | 9230|  54.1k|        return vis(monostate_val);                                     \
  |  | 9231|  54.1k|    }
  ------------------
 9280|  54.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 54.1k]
  ------------------
 9281|  54.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  54.1k|    }                                                                  \
  |  | 9229|  54.1k|    else {                                                             \
  |  | 9230|  54.1k|        return vis(monostate_val);                                     \
  |  | 9231|  54.1k|    }
  ------------------
 9282|  54.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 54.1k]
  ------------------
 9283|  54.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  54.1k|    }                                                                  \
  |  | 9229|  54.1k|    else {                                                             \
  |  | 9230|  54.1k|        return vis(monostate_val);                                     \
  |  | 9231|  54.1k|    }
  ------------------
 9284|       |
 9285|  54.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 54.1k]
  ------------------
 9286|  54.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  54.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  54.1k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 54.1k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 54.1k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  54.1k|            SCN_CLANG_POP
 9303|  54.1k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  11.6k|    {
 4352|  11.6k|        return sync(0);
 4353|  11.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.90M|    {
 6182|  1.90M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.90M|        return static_cast<std::size_t>(m_desc &
 6187|  1.90M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.90M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  3.80M|    {
 6208|  3.80M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.80M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.90M|    {
 6150|  1.90M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.90M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  880|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.90M|        const auto t = type(id);
 6162|  1.90M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  880|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.90M|        basic_scan_arg<Context> arg;
 6167|  1.90M|        arg.m_type = t;
 6168|  1.90M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.90M, False: 0]
  ------------------
 6169|  1.90M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.90M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.90M|        return arg;
 6175|  1.90M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.90M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.90M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.90M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.90M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.90M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.90M|    {
 6212|  1.90M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.90M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  3.32M|    {
 5966|  3.32M|        return m_type != detail::arg_type::none_type;
 5967|  3.32M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   930k|{
 9324|   930k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   930k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   930k|{
 9225|   930k|#define SCN_VISIT(Type)                                                \
 9226|   930k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   930k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   930k|    }                                                                  \
 9229|   930k|    else {                                                             \
 9230|   930k|        return vis(monostate_val);                                     \
 9231|   930k|    }
 9232|       |
 9233|   930k|    monostate monostate_val{};
 9234|       |
 9235|   930k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 930k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 930k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 930k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 930k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 930k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 930k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 930k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 930k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 930k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 930k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 930k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 930k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 930k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 930k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 930k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 930k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 930k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 930k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 930k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 930k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   465k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 465k, False: 465k]
  ------------------
 9277|   465k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   465k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   465k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   465k|    }                                                                  \
  |  | 9229|   465k|    else {                                                             \
  |  | 9230|   465k|        return vis(monostate_val);                                     \
  |  | 9231|   465k|    }
  ------------------
 9278|   930k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 465k, False: 465k]
  ------------------
 9279|   930k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   930k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   930k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   930k|    }                                                                  \
  |  | 9229|   930k|    else {                                                             \
  |  | 9230|   930k|        return vis(monostate_val);                                     \
  |  | 9231|   930k|    }
  ------------------
 9280|   930k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 930k]
  ------------------
 9281|   930k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   930k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   930k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   930k|    }                                                                  \
  |  | 9229|   930k|    else {                                                             \
  |  | 9230|   930k|        return vis(monostate_val);                                     \
  |  | 9231|   930k|    }
  ------------------
 9282|   930k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 930k]
  ------------------
 9283|   930k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   930k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   930k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   930k|    }                                                                  \
  |  | 9229|   930k|    else {                                                             \
  |  | 9230|   930k|        return vis(monostate_val);                                     \
  |  | 9231|   930k|    }
  ------------------
 9284|       |
 9285|   930k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 930k]
  ------------------
 9286|   930k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   930k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   930k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 930k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 930k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   930k|            SCN_CLANG_POP
 9303|   930k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.29M|{
 6011|  4.29M|    return arg.m_type;
 6012|  4.29M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.34M|{
 6023|  2.34M|    return arg.m_value;
 6024|  2.34M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   324k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   324k|    {
 8949|   324k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   649k|        : m_format{format},
 6280|   649k|          m_next_arg_id{next_arg_id},
 6281|   649k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   649k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   649k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   649k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   649k|    {
 6287|   649k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   649k|    {
 3075|   649k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   649k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   649k|    {
 3041|   649k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   649k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   649k|{
 7796|   649k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   649k|    handler.check_args_exhausted();
 7798|   649k|    return handler.get_error();
 7799|   649k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   649k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   649k|    auto begin = format.data();
 7764|   649k|    auto it = begin;
 7765|   649k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.26M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 649k, False: 613k]
  ------------------
 7768|   649k|        const auto ch = *it++;
 7769|   649k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 649k, False: 0]
  ------------------
 7770|   649k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   649k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   649k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 35.9k, False: 613k]
  ------------------
 7774|  35.9k|                return;
 7775|  35.9k|            }
 7776|   649k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   649k|    }
 7787|       |
 7788|   613k|    handler.on_literal_text(begin, end);
 7789|   613k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   649k|{
 7693|   649k|    struct id_adapter {
 7694|   649k|        constexpr void operator()()
 7695|   649k|        {
 7696|   649k|            arg_id = handler.on_arg_id();
 7697|   649k|        }
 7698|   649k|        constexpr void operator()(std::size_t id)
 7699|   649k|        {
 7700|   649k|            arg_id = handler.on_arg_id(id);
 7701|   649k|        }
 7702|       |
 7703|   649k|        constexpr void on_error(const char* msg)
 7704|   649k|        {
 7705|   649k|            SCN_UNLIKELY_ATTR
 7706|   649k|            handler.on_error(msg);
 7707|   649k|        }
 7708|       |
 7709|   649k|        Handler& handler;
 7710|   649k|        std::size_t arg_id;
 7711|   649k|    };
 7712|       |
 7713|   649k|    ++begin;
 7714|   649k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   649k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 649k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   649k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 649k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   649k|    else {
 7726|   649k|        auto adapter = id_adapter{handler, 0};
 7727|   649k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   649k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   649k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 649k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   649k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 649k, False: 0]
  ------------------
 7738|   649k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   649k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   649k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 14.3k, False: 634k]
  |  |  |  Branch (880:45): [True: 0, False: 649k]
  |  |  |  Branch (880:45): [True: 14.3k, False: 634k]
  |  |  ------------------
  ------------------
 7744|  14.3k|                handler.on_error("Unknown format specifier");
 7745|  14.3k|                return begin;
 7746|  14.3k|            }
 7747|   649k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   649k|    }
 7754|   634k|    return begin + 1;
 7755|   649k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   973k|    {
 8847|   973k|        return m_args.get(id);
 8848|   973k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   973k|    {
 6315|   973k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  880|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 973k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   973k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   973k|        do_check_arg_id(id);
 6323|   973k|        return id;
 6324|   973k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   973k|{
 6809|   973k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   973k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   973k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   649k|{
 7194|   649k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   649k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 649k, False: 0]
  |  Branch (7195:26): [True: 0, False: 649k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   649k|    handler();
 7200|   649k|    return begin;
 7201|   649k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7142|  21.5k|{
 7143|  21.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  21.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  945|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  21.5k|    unsigned long long value = 0;
 7147|  43.1k|    do {
 7148|  43.1k|        value *= 10;
 7149|  43.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  43.1k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 43.1k]
  ------------------
 7151|  43.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  43.1k|        ++begin;
 7155|  43.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 43.1k, False: 0]
  |  Branch (7155:30): [True: 43.1k, False: 0]
  |  Branch (7155:47): [True: 21.5k, False: 21.5k]
  ------------------
 7156|  21.5k|    return static_cast<int>(value);
 7157|  21.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   649k|        {
 7696|   649k|            arg_id = handler.on_arg_id();
 7697|   649k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   952k|    {
 6310|   952k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   952k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   789k|{
 4691|   789k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 789k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   789k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   789k|                            ranges::default_sentinel};
 4697|   789k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   789k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   789k|    {
 4455|   789k|        SCN_EXPECT(parent);
  ------------------
  |  |  945|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   789k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  945|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   789k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.92M|    {
 6299|  1.92M|        return m_format.data();
 6300|  1.92M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   649k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   649k|    {
 7874|   649k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   649k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   649k|{
 7609|   649k|    auto do_presentation = [&]() -> const CharT* {
 7610|   649k|        if (*begin == CharT{'['}) {
 7611|   649k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   649k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   649k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   649k|                return begin;
 7617|   649k|            }
 7618|   649k|            handler.on_character_set_string(set);
 7619|   649k|            return begin;
 7620|   649k|        }
 7621|   649k|        if (*begin == CharT{'/'}) {
 7622|   649k|            return parse_presentation_regex(begin, end, handler);
 7623|   649k|        }
 7624|   649k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   649k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   649k|            handler.on_error("Invalid type specifier in format string");
 7627|   649k|            return begin;
 7628|   649k|        }
 7629|   649k|        handler.on_type(type);
 7630|   649k|        return begin;
 7631|   649k|    };
 7632|       |
 7633|   649k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 649k, False: 0]
  |  Branch (7633:28): [True: 627k, False: 21.8k]
  ------------------
 7634|   649k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 627k, False: 0]
  |  Branch (7634:36): [True: 620k, False: 7.19k]
  ------------------
 7635|   620k|        return do_presentation();
 7636|   620k|    }
 7637|       |
 7638|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  29.0k|    begin = parse_align(begin, end, handler);
 7644|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  29.0k|    begin = parse_width(begin, end, handler);
 7650|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  29.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 29.0k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  29.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 7.19k, False: 21.8k]
  ------------------
 7669|  7.19k|        handler.on_localized();
 7670|  7.19k|        ++begin;
 7671|  7.19k|    }
 7672|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  29.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 29.0k, False: 0]
  |  Branch (7677:25): [True: 21.8k, False: 7.19k]
  ------------------
 7678|  21.8k|        do_presentation();
 7679|  21.8k|    }
 7680|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  29.0k|    return begin;
 7686|  29.0k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   941k|{
 7258|   941k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 930k, False: 10.7k]
  |  Branch (7258:33): [True: 930k, False: 0]
  ------------------
 7259|   941k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 10.7k, False: 0]
  |  Branch (7259:33): [True: 10.7k, False: 0]
  ------------------
 7260|   941k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   642k|    auto do_presentation = [&]() -> const CharT* {
 7610|   642k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 7.42k, False: 634k]
  ------------------
 7611|  7.42k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  7.42k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  7.42k|            handler.on_character_set_string(set);
 7619|  7.42k|            return begin;
 7620|  7.42k|        }
 7621|   634k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 634k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   634k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   634k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.19k, False: 627k]
  |  |  ------------------
  ------------------
 7626|  7.19k|            handler.on_error("Invalid type specifier in format string");
 7627|  7.19k|            return begin;
 7628|  7.19k|        }
 7629|   627k|        handler.on_type(type);
 7630|   627k|        return begin;
 7631|   634k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  7.42k|{
 7448|  7.42k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  7.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  7.42k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  945|  7.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  7.42k|    auto start = begin;
 7452|  7.42k|    ++begin;
 7453|       |
 7454|  7.42k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  7.42k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 7.42k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  7.42k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 7.42k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  22.2k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 22.2k, False: 0]
  ------------------
 7479|  22.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  22.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 7.42k, False: 14.8k]
  ------------------
 7484|  7.42k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  7.42k|        }
 7486|       |
 7487|  14.8k|        parse_presentation_set_literal(begin, end, handler);
 7488|  14.8k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  7.42k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7411|  14.8k|{
 7412|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  14.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  14.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  880|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  14.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 14.8k, False: 0]
  |  Branch (7419:25): [True: 14.8k, False: 0]
  |  Branch (7419:49): [True: 14.8k, False: 0]
  ------------------
 7420|  14.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 14.8k, False: 0]
  ------------------
 7421|  14.8k|        ++begin;
 7422|       |
 7423|  14.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  14.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  880|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  14.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  880|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  14.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  14.8k|        return;
 7437|  14.8k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7387|  29.6k|{
 7388|  29.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  29.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  29.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  880|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.6k]
  |  |  |  Branch (880:45): [True: 0, False: 29.6k]
  |  |  |  Branch (880:45): [True: 0, False: 29.6k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  29.6k|    const auto cp =
 7397|  29.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  29.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.6k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  29.6k|    begin += len;
 7404|  29.6k|    return cp;
 7405|  29.6k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  11.1k|    {
 7102|  11.1k|        m_specs.charset_string_data = fmt.data();
 7103|  11.1k|        m_specs.charset_string_size = fmt.size();
 7104|  11.1k|        on_type(presentation_type::string_set);
 7105|  11.1k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   952k|{
 7206|   952k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 952k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 952k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 952k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 952k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 952k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 952k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 952k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 952k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 952k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 952k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 952k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 952k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 952k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 952k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 952k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 952k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 952k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 952k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   930k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 930k, False: 21.5k]
  ------------------
 7237|   930k|            return presentation_type::string;
 7238|  10.7k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 10.7k, False: 941k]
  ------------------
 7239|  10.7k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 952k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 952k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 952k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 952k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  10.7k|        default:
  ------------------
  |  Branch (7250:9): [True: 10.7k, False: 941k]
  ------------------
 7251|  10.7k|            return presentation_type::none;
 7252|   952k|    }
 7253|   952k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  29.0k|{
 7283|  29.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  29.0k|    auto check_align = [](wchar_t ch) {
 7286|  29.0k|        switch (ch) {
 7287|  29.0k|            case L'<':
 7288|  29.0k|                return align_type::left;
 7289|  29.0k|            case L'>':
 7290|  29.0k|                return align_type::right;
 7291|  29.0k|            case L'^':
 7292|  29.0k|                return align_type::center;
 7293|  29.0k|            default:
 7294|  29.0k|                return align_type::none;
 7295|  29.0k|        }
 7296|  29.0k|    };
 7297|       |
 7298|  29.0k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  29.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  |  Branch (880:45): [True: 0, False: 29.0k]
  |  |  |  Branch (880:45): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7300|  29.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  29.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  29.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  29.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  29.0k|    const auto begin_before_fill = begin;
 7310|  29.0k|    begin += potential_fill_len;
 7311|       |
 7312|  29.0k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 29.0k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  29.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  29.0k|    const auto begin_after_fill = begin;
 7318|  29.0k|    ++begin;
 7319|       |
 7320|  29.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 29.0k, False: 0]
  ------------------
 7321|  29.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  29.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 7.42k, False: 21.5k]
  ------------------
 7326|  7.42k|            return begin_before_fill;
 7327|  7.42k|        }
 7328|  29.0k|    }
 7329|       |
 7330|  21.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 21.5k, False: 0]
  ------------------
 7331|  21.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 21.5k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  21.5k|        return begin_before_fill;
 7336|  21.5k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  21.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|  43.5k|{
 7265|  43.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|  43.5k|    if constexpr (sizeof(CharT) != 1) {
 7267|  43.5k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|  43.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  58.0k|    auto check_align = [](wchar_t ch) {
 7286|  58.0k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 58.0k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 58.0k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 58.0k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  58.0k|            default:
  ------------------
  |  Branch (7293:13): [True: 58.0k, False: 0]
  ------------------
 7294|  58.0k|                return align_type::none;
 7295|  58.0k|        }
 7296|  58.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  29.0k|{
 7348|  29.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  29.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 29.0k, False: 0]
  |  Branch (7350:33): [True: 14.3k, False: 14.6k]
  ------------------
 7351|  14.3k|        int width = parse_simple_int(begin, end);
 7352|  14.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|  14.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 14.3k, False: 0]
  |  |  ------------------
  ------------------
 7353|  14.3k|            handler.on_width(width);
 7354|  14.3k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  14.3k|    }
 7360|  29.0k|    return begin;
 7361|  29.0k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|  7.19k|    {
 7879|  7.19k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  7.19k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 7.19k, False: 0]
  ------------------
 7881|  7.19k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 7.19k, False: 0]
  ------------------
 7882|  7.19k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 7.19k, False: 0]
  ------------------
 7883|  7.19k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 7.19k, False: 0]
  ------------------
 7884|  7.19k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  7.19k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  7.19k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   634k|{
 9324|   634k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   634k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   634k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   634k|{
 9225|   634k|#define SCN_VISIT(Type)                                                \
 9226|   634k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   634k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   634k|    }                                                                  \
 9229|   634k|    else {                                                             \
 9230|   634k|        return vis(monostate_val);                                     \
 9231|   634k|    }
 9232|       |
 9233|   634k|    monostate monostate_val{};
 9234|       |
 9235|   634k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 634k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 634k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 634k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 634k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 634k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 634k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 634k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 634k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 634k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 634k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 634k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 634k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 634k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 634k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 634k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 634k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 634k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 634k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 634k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 634k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   317k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 317k, False: 317k]
  ------------------
 9277|   317k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   317k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   317k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   317k|    }                                                                  \
  |  | 9229|   317k|    else {                                                             \
  |  | 9230|   317k|        return vis(monostate_val);                                     \
  |  | 9231|   317k|    }
  ------------------
 9278|   634k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 317k, False: 317k]
  ------------------
 9279|   634k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   634k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   634k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   634k|    }                                                                  \
  |  | 9229|   634k|    else {                                                             \
  |  | 9230|   634k|        return vis(monostate_val);                                     \
  |  | 9231|   634k|    }
  ------------------
 9280|   634k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 634k]
  ------------------
 9281|   634k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   634k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   634k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   634k|    }                                                                  \
  |  | 9229|   634k|    else {                                                             \
  |  | 9230|   634k|        return vis(monostate_val);                                     \
  |  | 9231|   634k|    }
  ------------------
 9282|   634k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 634k]
  ------------------
 9283|   634k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   634k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   634k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   634k|    }                                                                  \
  |  | 9229|   634k|    else {                                                             \
  |  | 9230|   634k|        return vis(monostate_val);                                     \
  |  | 9231|   634k|    }
  ------------------
 9284|       |
 9285|   634k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 634k]
  ------------------
 9286|   634k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   634k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   634k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 634k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 634k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   634k|            SCN_CLANG_POP
 9303|   634k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   465k|{
 9324|   465k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   465k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   465k|{
 9225|   465k|#define SCN_VISIT(Type)                                                \
 9226|   465k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   465k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   465k|    }                                                                  \
 9229|   465k|    else {                                                             \
 9230|   465k|        return vis(monostate_val);                                     \
 9231|   465k|    }
 9232|       |
 9233|   465k|    monostate monostate_val{};
 9234|       |
 9235|   465k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 465k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 465k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 465k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 465k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 465k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 465k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 465k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 465k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 465k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 465k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 465k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 465k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 465k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 465k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 465k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 465k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 465k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 465k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 465k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 465k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 465k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   465k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 465k, False: 0]
  ------------------
 9279|   465k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   465k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   465k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   465k|    }                                                                  \
  |  | 9229|   465k|    else {                                                             \
  |  | 9230|   465k|        return vis(monostate_val);                                     \
  |  | 9231|   465k|    }
  ------------------
 9280|   465k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 465k]
  ------------------
 9281|   465k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   465k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   465k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   465k|    }                                                                  \
  |  | 9229|   465k|    else {                                                             \
  |  | 9230|   465k|        return vis(monostate_val);                                     \
  |  | 9231|   465k|    }
  ------------------
 9282|   465k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 465k]
  ------------------
 9283|   465k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   465k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   465k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   465k|    }                                                                  \
  |  | 9229|   465k|    else {                                                             \
  |  | 9230|   465k|        return vis(monostate_val);                                     \
  |  | 9231|   465k|    }
  ------------------
 9284|       |
 9285|   465k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 465k]
  ------------------
 9286|   465k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   465k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   465k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 465k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 465k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   465k|            SCN_CLANG_POP
 9303|   465k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   324k|        : m_format{format},
 6280|   324k|          m_next_arg_id{next_arg_id},
 6281|   324k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   324k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   324k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   324k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   324k|    {
 6287|   324k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   324k|{
 7796|   324k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   324k|    handler.check_args_exhausted();
 7798|   324k|    return handler.get_error();
 7799|   324k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   324k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   324k|    auto begin = format.data();
 7764|   324k|    auto it = begin;
 7765|   324k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   631k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 324k, False: 306k]
  ------------------
 7768|   324k|        const auto ch = *it++;
 7769|   324k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 324k, False: 0]
  ------------------
 7770|   324k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   324k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   324k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 17.9k, False: 306k]
  ------------------
 7774|  17.9k|                return;
 7775|  17.9k|            }
 7776|   324k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   324k|    }
 7787|       |
 7788|   306k|    handler.on_literal_text(begin, end);
 7789|   306k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   306k|    {
 8986|   306k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   306k|    static_cast<    \
  |  |  950|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   306k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   324k|{
 7693|   324k|    struct id_adapter {
 7694|   324k|        constexpr void operator()()
 7695|   324k|        {
 7696|   324k|            arg_id = handler.on_arg_id();
 7697|   324k|        }
 7698|   324k|        constexpr void operator()(std::size_t id)
 7699|   324k|        {
 7700|   324k|            arg_id = handler.on_arg_id(id);
 7701|   324k|        }
 7702|       |
 7703|   324k|        constexpr void on_error(const char* msg)
 7704|   324k|        {
 7705|   324k|            SCN_UNLIKELY_ATTR
 7706|   324k|            handler.on_error(msg);
 7707|   324k|        }
 7708|       |
 7709|   324k|        Handler& handler;
 7710|   324k|        std::size_t arg_id;
 7711|   324k|    };
 7712|       |
 7713|   324k|    ++begin;
 7714|   324k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   324k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 324k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   324k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 324k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   324k|    else {
 7726|   324k|        auto adapter = id_adapter{handler, 0};
 7727|   324k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   324k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   324k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 324k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   324k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 324k, False: 0]
  ------------------
 7738|   324k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   324k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   324k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.19k, False: 317k]
  |  |  |  Branch (880:45): [True: 0, False: 324k]
  |  |  |  Branch (880:45): [True: 7.19k, False: 317k]
  |  |  ------------------
  ------------------
 7744|  7.19k|                handler.on_error("Unknown format specifier");
 7745|  7.19k|                return begin;
 7746|  7.19k|            }
 7747|   324k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   324k|    }
 7754|   317k|    return begin + 1;
 7755|   324k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   324k|{
 7194|   324k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   324k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 324k, False: 0]
  |  Branch (7195:26): [True: 0, False: 324k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   324k|    handler();
 7200|   324k|    return begin;
 7201|   324k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   324k|        {
 7696|   324k|            arg_id = handler.on_arg_id();
 7697|   324k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   324k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   324k|    {
 7874|   324k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   324k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   324k|{
 7609|   324k|    auto do_presentation = [&]() -> const CharT* {
 7610|   324k|        if (*begin == CharT{'['}) {
 7611|   324k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   324k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   324k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   324k|                return begin;
 7617|   324k|            }
 7618|   324k|            handler.on_character_set_string(set);
 7619|   324k|            return begin;
 7620|   324k|        }
 7621|   324k|        if (*begin == CharT{'/'}) {
 7622|   324k|            return parse_presentation_regex(begin, end, handler);
 7623|   324k|        }
 7624|   324k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   324k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   324k|            handler.on_error("Invalid type specifier in format string");
 7627|   324k|            return begin;
 7628|   324k|        }
 7629|   324k|        handler.on_type(type);
 7630|   324k|        return begin;
 7631|   324k|    };
 7632|       |
 7633|   324k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 324k, False: 0]
  |  Branch (7633:28): [True: 313k, False: 10.9k]
  ------------------
 7634|   324k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 313k, False: 0]
  |  Branch (7634:36): [True: 310k, False: 3.59k]
  ------------------
 7635|   310k|        return do_presentation();
 7636|   310k|    }
 7637|       |
 7638|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  14.5k|    begin = parse_align(begin, end, handler);
 7644|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  14.5k|    begin = parse_width(begin, end, handler);
 7650|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  14.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 14.5k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  14.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.59k, False: 10.9k]
  ------------------
 7669|  3.59k|        handler.on_localized();
 7670|  3.59k|        ++begin;
 7671|  3.59k|    }
 7672|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  14.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 14.5k, False: 0]
  |  Branch (7677:25): [True: 10.9k, False: 3.59k]
  ------------------
 7678|  10.9k|        do_presentation();
 7679|  10.9k|    }
 7680|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  14.5k|    return begin;
 7686|  14.5k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   321k|    auto do_presentation = [&]() -> const CharT* {
 7610|   321k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 3.71k, False: 317k]
  ------------------
 7611|  3.71k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  3.71k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  3.71k|            handler.on_character_set_string(set);
 7619|  3.71k|            return begin;
 7620|  3.71k|        }
 7621|   317k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 317k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   317k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   317k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 313k]
  |  |  ------------------
  ------------------
 7626|  3.59k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.59k|            return begin;
 7628|  3.59k|        }
 7629|   313k|        handler.on_type(type);
 7630|   313k|        return begin;
 7631|   317k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  3.71k|{
 7448|  3.71k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  3.71k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  945|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  3.71k|    auto start = begin;
 7452|  3.71k|    ++begin;
 7453|       |
 7454|  3.71k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  3.71k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 3.71k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  3.71k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 3.71k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  11.1k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 11.1k, False: 0]
  ------------------
 7479|  11.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  11.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 3.71k, False: 7.42k]
  ------------------
 7484|  3.71k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  3.71k|        }
 7486|       |
 7487|  7.42k|        parse_presentation_set_literal(begin, end, handler);
 7488|  7.42k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  3.71k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7411|  7.42k|{
 7412|  7.42k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  7.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  7.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  7.42k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  7.42k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  7.42k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 7.42k, False: 0]
  |  Branch (7419:25): [True: 7.42k, False: 0]
  |  Branch (7419:49): [True: 7.42k, False: 0]
  ------------------
 7420|  7.42k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 7.42k, False: 0]
  ------------------
 7421|  7.42k|        ++begin;
 7422|       |
 7423|  7.42k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  7.42k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  7.42k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  7.42k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  7.42k|        return;
 7437|  7.42k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7387|  14.8k|{
 7388|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  14.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  14.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  880|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.8k]
  |  |  |  Branch (880:45): [True: 0, False: 14.8k]
  |  |  |  Branch (880:45): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  14.8k|    const auto cp =
 7397|  14.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  14.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  14.8k|    begin += len;
 7404|  14.8k|    return cp;
 7405|  14.8k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|  14.5k|{
 7283|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  14.5k|    auto check_align = [](wchar_t ch) {
 7286|  14.5k|        switch (ch) {
 7287|  14.5k|            case L'<':
 7288|  14.5k|                return align_type::left;
 7289|  14.5k|            case L'>':
 7290|  14.5k|                return align_type::right;
 7291|  14.5k|            case L'^':
 7292|  14.5k|                return align_type::center;
 7293|  14.5k|            default:
 7294|  14.5k|                return align_type::none;
 7295|  14.5k|        }
 7296|  14.5k|    };
 7297|       |
 7298|  14.5k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  14.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  |  Branch (880:45): [True: 0, False: 14.5k]
  |  |  |  Branch (880:45): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7300|  14.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  14.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  14.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  14.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  14.5k|    const auto begin_before_fill = begin;
 7310|  14.5k|    begin += potential_fill_len;
 7311|       |
 7312|  14.5k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 14.5k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  14.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  14.5k|    const auto begin_after_fill = begin;
 7318|  14.5k|    ++begin;
 7319|       |
 7320|  14.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 14.5k, False: 0]
  ------------------
 7321|  14.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  14.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 3.71k, False: 10.7k]
  ------------------
 7326|  3.71k|            return begin_before_fill;
 7327|  3.71k|        }
 7328|  14.5k|    }
 7329|       |
 7330|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 10.7k, False: 0]
  ------------------
 7331|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 10.7k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  10.7k|        return begin_before_fill;
 7336|  10.7k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  10.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  29.0k|    auto check_align = [](wchar_t ch) {
 7286|  29.0k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 29.0k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 29.0k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 29.0k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  29.0k|            default:
  ------------------
  |  Branch (7293:13): [True: 29.0k, False: 0]
  ------------------
 7294|  29.0k|                return align_type::none;
 7295|  29.0k|        }
 7296|  29.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|  14.5k|{
 7348|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  14.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 14.5k, False: 0]
  |  Branch (7350:33): [True: 7.19k, False: 7.30k]
  ------------------
 7351|  7.19k|        int width = parse_simple_int(begin, end);
 7352|  7.19k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|  7.19k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 7.19k, False: 0]
  |  |  ------------------
  ------------------
 7353|  7.19k|            handler.on_width(width);
 7354|  7.19k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  7.19k|    }
 7360|  14.5k|    return begin;
 7361|  14.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|  3.59k|    {
 7879|  3.59k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.59k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.59k, False: 0]
  ------------------
 7881|  3.59k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.59k, False: 0]
  ------------------
 7882|  3.59k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.59k, False: 0]
  ------------------
 7883|  3.59k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.59k, False: 0]
  ------------------
 7884|  3.59k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.59k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.59k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   317k|{
 9324|   317k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   317k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   317k|{
 9225|   317k|#define SCN_VISIT(Type)                                                \
 9226|   317k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   317k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   317k|    }                                                                  \
 9229|   317k|    else {                                                             \
 9230|   317k|        return vis(monostate_val);                                     \
 9231|   317k|    }
 9232|       |
 9233|   317k|    monostate monostate_val{};
 9234|       |
 9235|   317k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 317k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 317k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 317k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 317k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 317k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 317k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 317k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 317k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 317k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 317k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 317k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 317k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 317k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 317k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 317k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 317k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 317k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 317k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 317k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 317k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 317k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   317k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 317k, False: 0]
  ------------------
 9279|   317k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   317k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   317k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   317k|    }                                                                  \
  |  | 9229|   317k|    else {                                                             \
  |  | 9230|   317k|        return vis(monostate_val);                                     \
  |  | 9231|   317k|    }
  ------------------
 9280|   317k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 317k]
  ------------------
 9281|   317k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   317k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   317k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   317k|    }                                                                  \
  |  | 9229|   317k|    else {                                                             \
  |  | 9230|   317k|        return vis(monostate_val);                                     \
  |  | 9231|   317k|    }
  ------------------
 9282|   317k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 317k]
  ------------------
 9283|   317k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   317k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   317k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   317k|    }                                                                  \
  |  | 9229|   317k|    else {                                                             \
  |  | 9230|   317k|        return vis(monostate_val);                                     \
  |  | 9231|   317k|    }
  ------------------
 9284|       |
 9285|   317k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 317k]
  ------------------
 9286|   317k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   317k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   317k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 317k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 317k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   317k|            SCN_CLANG_POP
 9303|   317k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  23.3k|    {
 4352|  23.3k|        return sync(0);
 4353|  23.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  62.3k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   465k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   317k|{
   89|   317k|    auto result = make_scan_result<Source, Args...>();
   90|   317k|    fill_scan_result(result,
   91|   317k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   317k|                           make_scan_args<wscan_context>(result->values())));
   93|   317k|    return result;
   94|   317k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   634k|{
   44|   634k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  951|   634k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   634k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   317k|{
  131|   317k|    auto result = make_scan_result<Source, Args...>();
  132|   317k|    fill_scan_result(result,
  133|   317k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   317k|                           make_scan_args<wscan_context>(result->values())));
  135|   317k|    return result;
  136|   317k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   634k|{
   60|   634k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  951|   634k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   634k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   155k|{
  171|   155k|    auto result = make_scan_result<Source, T>();
  172|   155k|    fill_scan_result(
  173|   155k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   155k|                            detail::make_arg<wscan_context>(result->value())));
  175|   155k|    return result;
  176|   155k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   310k|{
   72|   310k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  951|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   310k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   317k|{
   89|   317k|    auto result = make_scan_result<Source, Args...>();
   90|   317k|    fill_scan_result(result,
   91|   317k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   317k|                           make_scan_args<wscan_context>(result->values())));
   93|   317k|    return result;
   94|   317k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   317k|{
  131|   317k|    auto result = make_scan_result<Source, Args...>();
  132|   317k|    fill_scan_result(result,
  133|   317k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   317k|                           make_scan_args<wscan_context>(result->values())));
  135|   317k|    return result;
  136|   317k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   155k|{
  171|   155k|    auto result = make_scan_result<Source, T>();
  172|   155k|    fill_scan_result(
  173|   155k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   155k|                            detail::make_arg<wscan_context>(result->value())));
  175|   155k|    return result;
  176|   155k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   317k|{
   89|   317k|    auto result = make_scan_result<Source, Args...>();
   90|   317k|    fill_scan_result(result,
   91|   317k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   317k|                           make_scan_args<wscan_context>(result->values())));
   93|   317k|    return result;
   94|   317k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   317k|{
   44|   317k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   317k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   317k|{
  131|   317k|    auto result = make_scan_result<Source, Args...>();
  132|   317k|    fill_scan_result(result,
  133|   317k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   317k|                           make_scan_args<wscan_context>(result->values())));
  135|   317k|    return result;
  136|   317k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   317k|{
   60|   317k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   317k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   155k|{
  171|   155k|    auto result = make_scan_result<Source, T>();
  172|   155k|    fill_scan_result(
  173|   155k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   155k|                            detail::make_arg<wscan_context>(result->value())));
  175|   155k|    return result;
  176|   155k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   155k|{
   72|   155k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   155k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.08M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.08M|{
  309|  1.08M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.08M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2103|  83.8k|{
 2104|  83.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2105|  83.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2111|  53.1k|{
 2112|  53.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2113|  53.1k|    return sync_after_vscan(source, n);
 2114|  53.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2121|   634k|{
 2122|   634k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2123|   634k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2129|   317k|{
 2130|   317k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2131|   317k|    return sync_after_vscan(source, n);
 2132|   317k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   307k|{
  207|   307k|    return find_classic_impl(
  208|   307k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   307k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   307k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   310k|{
  215|   310k|    return find_classic_impl(
  216|   310k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   310k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   310k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2072|  83.8k|{
 2073|  83.8k|    return vscan_internal(source, format, args);
 2074|  83.8k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2078|  53.1k|{
 2079|  53.1k|    auto n = vscan_internal(source, format, args);
 2080|  53.1k|    return sync_after_vscan(source, n);
 2081|  53.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2086|   634k|{
 2087|   634k|    return vscan_internal(source, format, args);
 2088|   634k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2092|   317k|{
 2093|   317k|    auto n = vscan_internal(source, format, args);
 2094|   317k|    return sync_after_vscan(source, n);
 2095|   317k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2158|  37.9k|{
 2159|  37.9k|    return vscan_value_internal(source, arg);
 2160|  37.9k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2163|  24.3k|{
 2164|  24.3k|    auto n = vscan_value_internal(source, arg);
 2165|  24.3k|    return sync_after_vscan(source, n);
 2166|  24.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2171|   310k|{
 2172|   310k|    return vscan_value_internal(source, arg);
 2173|   310k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2177|   155k|{
 2178|   155k|    auto n = vscan_value_internal(source, arg);
 2179|   155k|    return sync_after_vscan(source, n);
 2180|   155k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   307k|{
  131|   307k|    auto it = source.begin();
  132|       |
  133|   552k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 427k, False: 125k]
  ------------------
  134|   427k|        auto sv =
  135|   427k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   427k|                .substr(0, 8);
  137|       |
  138|   427k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 288k, False: 139k]
  ------------------
  139|   288k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   288k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   288k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 117k, False: 170k]
  ------------------
  142|   117k|                break;
  143|   117k|            }
  144|   170k|            continue;
  145|   288k|        }
  146|       |
  147|   410k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 335k, False: 74.8k]
  ------------------
  148|   335k|            auto tmp =
  149|   335k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   335k|            auto res = get_next_code_point(tmp);
  151|   335k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 64.3k, False: 271k]
  ------------------
  152|  64.3k|                return it;
  153|  64.3k|            }
  154|   271k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   271k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   271k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  946|   271k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   271k|        }
  158|   139k|    }
  159|       |
  160|   242k|    return detail::make_string_view_iterator(source, it);
  161|   307k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   706k|{
  118|   706k|    static_assert(sizeof(*source.data()) == 1);
  119|   706k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  945|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   706k|    uint64_t word{};
  121|   706k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   706k|    return has_byte_greater(word, 127) != 0;
  124|   706k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.05M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   335k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   310k|{
  131|   310k|    auto it = source.begin();
  132|       |
  133|   390k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 279k, False: 111k]
  ------------------
  134|   279k|        auto sv =
  135|   279k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   279k|                .substr(0, 8);
  137|       |
  138|   279k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 197k, False: 81.7k]
  ------------------
  139|   197k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   197k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   197k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 121k, False: 76.4k]
  ------------------
  142|   121k|                break;
  143|   121k|            }
  144|  76.4k|            continue;
  145|   197k|        }
  146|       |
  147|   159k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 155k, False: 3.40k]
  ------------------
  148|   155k|            auto tmp =
  149|   155k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   155k|            auto res = get_next_code_point(tmp);
  151|   155k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 78.3k, False: 77.4k]
  ------------------
  152|  78.3k|                return it;
  153|  78.3k|            }
  154|  77.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  77.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  77.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  946|  77.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  77.4k|        }
  158|  81.7k|    }
  159|       |
  160|   232k|    return detail::make_string_view_iterator(source, it);
  161|   310k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   460k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   155k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1969|   106k|{
 1970|   106k|    const auto argcount = args.size();
 1971|   106k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1971:9): [True: 48.6k, False: 57.7k]
  |  Branch (1971:60): [True: 48.6k, False: 0]
  ------------------
 1972|  48.6k|        auto arg = args.get(0);
 1973|  48.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  949|  48.6k|    static_cast<    \
  |  |  950|  48.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1974|  48.6k|    }
 1975|       |
 1976|  57.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1976:9): [True: 0, False: 57.7k]
  ------------------
 1977|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1978|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1979|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1980|      0|        return vscan_parse_format_string(format, handler);
 1981|      0|    }
 1982|       |
 1983|  57.7k|    SCN_UNLIKELY_ATTR
 1984|  57.7k|    {
 1985|  57.7k|        auto handler = format_handler<false, CharT>{
 1986|  57.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1987|  57.7k|        return vscan_parse_format_string(format, handler);
 1988|  57.7k|    }
 1989|  57.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1517|   274k|{
 1518|   274k|    if (format.size() != 2) {
  ------------------
  |  Branch (1518:9): [True: 149k, False: 124k]
  ------------------
 1519|   149k|        return false;
 1520|   149k|    }
 1521|   124k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1521:12): [True: 124k, False: 0]
  |  Branch (1521:39): [True: 124k, False: 0]
  ------------------
 1522|   274k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1550|  73.0k|{
 1551|  73.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 73.0k]
  |  |  ------------------
  ------------------
 1552|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1553|      0|                                             "Argument #0 not found");
 1554|      0|    }
 1555|       |
 1556|  73.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  879|  73.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 73.0k]
  |  |  ------------------
  ------------------
 1557|      0|        auto reader = impl::default_arg_reader<
 1558|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1559|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1560|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1561|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1562|      0|    }
 1563|       |
 1564|  73.0k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1565|  73.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  949|  73.0k|    static_cast<    \
  |  |  950|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1566|  73.0k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  73.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 2.69k, False: 70.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.69k|    }                                                  \
  |  |  |  | 3939|  73.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1567|  70.3k|    return it.position();
 1568|  73.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1793|  91.7k|        : format_handler_base{argcount},
 1794|  91.7k|          parse_ctx{source_tag<Source&&>, format},
 1795|  91.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|  91.7k|    static_cast<    \
  |  |  950|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|  91.7k|    static_cast<    \
  |  |  950|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|  91.7k|    {
 1797|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1611|  1.12M|    format_handler_base(size_t argcount) : args_count(argcount)
 1612|  1.12M|    {
 1613|  1.12M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1614|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1615|      0|        }
 1616|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1744|  91.7k|        : contiguous_ctx(source, args, loc)
 1745|  91.7k|    {
 1746|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|  91.7k|{
 1935|  91.7k|    const auto beg = handler.get_ctx().begin();
 1936|  91.7k|    detail::parse_format_string<false>(format, handler);
 1937|  91.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 17.9k, False: 73.7k]
  |  |  ------------------
  ------------------
 1938|  17.9k|        return unexpected(err.error());
 1939|  17.9k|    }
 1940|  73.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1918|   591k|    {
 1919|   591k|        return ctx.get();
 1920|   591k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1749|   591k|    {
 1750|   591k|        return contiguous_ctx;
 1751|   591k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1800|   165k|    {
 1801|   165k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 165k]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|   165k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1660|  48.5k|    {
 1661|  48.5k|        error = unexpected(err);
 1662|  48.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1572|  91.7k|{
 1573|  91.7k|    auto arg = ctx.arg(id);
 1574|  91.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|  91.7k|    return arg;
 1578|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1686|  1.12M|    {
 1687|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1688|      0|            on_error({scan_error::invalid_format_string,
 1689|      0|                      "Argument ID out-of-range"});
 1690|      0|            return;
 1691|      0|        }
 1692|       |
 1693|  1.12M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1694|      0|            on_error({scan_error::invalid_format_string,
 1695|      0|                      "Argument with this ID has already been scanned"});
 1696|      0|        }
 1697|       |
 1698|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  879|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1699|  1.12M|            visited_args_lower64 |= (1ull << id);
 1700|  1.12M|            return;
 1701|  1.12M|        }
 1702|       |
 1703|      0|        id -= 64;
 1704|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1705|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1670|  1.12M|    {
 1671|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1672|      0|            on_error({scan_error::invalid_format_string,
 1673|      0|                      "Argument ID out-of-range"});
 1674|      0|            return false;
 1675|      0|        }
 1676|       |
 1677|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  879|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1678|  1.12M|            return (visited_args_lower64 >> id) & 1ull;
 1679|  1.12M|        }
 1680|       |
 1681|      0|        id -= 64;
 1682|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1683|  1.12M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1840|  91.7k|    {
 1841|  91.7k|        return parse_ctx.next_arg_id();
 1842|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1880|  91.7k|    {
 1881|  91.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|  91.7k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|  91.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 91.7k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|  91.7k|        auto specs = detail::format_specs{};
 1894|  91.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|  91.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|  91.7k|            detail::get_arg_type(arg)};
 1897|       |
 1898|  91.7k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|  91.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 91.7k]
  |  Branch (1899:29): [True: 0, False: 91.7k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|  91.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.19k, False: 84.5k]
  |  |  ------------------
  ------------------
 1906|  7.19k|            return parse_ctx.begin();
 1907|  7.19k|        }
 1908|  84.5k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|  84.5k|        on_visit_scan_arg(
 1911|  84.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|  84.5k|                                           get_ctx().locale()},
 1913|  84.5k|            arg);
 1914|  84.5k|        return parse_ctx.begin();
 1915|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1590|  91.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|  91.7k|    {
 1592|  91.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1851|  84.5k|    {
 1852|  84.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 84.5k]
  |  Branch (1852:13): [True: 0, False: 84.5k]
  |  Branch (1852:29): [True: 0, False: 84.5k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|  84.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|  84.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 73.7k]
  |  |  ------------------
  ------------------
 1859|  10.7k|            on_error(r.error());
 1860|  10.7k|        }
 1861|  73.7k|        else {
 1862|  73.7k|            get_ctx().advance_to(*r);
 1863|  73.7k|        }
 1864|  84.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1654|  32.3k|    {
 1655|  32.3k|        SCN_UNLIKELY_ATTR
 1656|  32.3k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1657|  32.3k|                                              msg);
 1658|  32.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1619|  1.12M|    {
 1620|  1.12M|        {
 1621|  1.12M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1621:45): [True: 0, False: 1.12M]
  ------------------
 1622|  1.12M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1622:35): [True: 0, False: 1.12M]
  ------------------
 1623|  1.12M|                                      ? std::numeric_limits<uint64_t>::max()
 1624|  1.12M|                                      : (1ull << args_count_lower64) - 1;
 1625|       |
 1626|  1.12M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1626:17): [True: 0, False: 1.12M]
  ------------------
 1627|      0|                return on_error({scan_error::invalid_format_string,
 1628|      0|                                 "Argument list not exhausted"});
 1629|      0|            }
 1630|  1.12M|        }
 1631|       |
 1632|  1.12M|        if (args_count < 64) {
  ------------------
  |  Branch (1632:13): [True: 1.12M, False: 0]
  ------------------
 1633|  1.12M|            return;
 1634|  1.12M|        }
 1635|       |
 1636|      0|        auto last_args_count = args_count - 64;
 1637|      0|        for (auto it = visited_args_upper.begin();
 1638|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1638:14): [True: 0, False: 0]
  ------------------
 1639|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1639:17): [True: 0, False: 0]
  ------------------
 1640|      0|                return on_error({scan_error::invalid_format_string,
 1641|      0|                                 "Argument list not exhausted"});
 1642|      0|            }
 1643|      0|            last_args_count -= 8;
 1644|      0|        }
 1645|       |
 1646|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1647|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1647:13): [True: 0, False: 0]
  ------------------
 1648|      0|            return on_error({scan_error::invalid_format_string,
 1649|      0|                             "Argument list not exhausted"});
 1650|      0|        }
 1651|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1665|  4.46M|    {
 1666|  4.46M|        return error;
 1667|  4.46M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1793|  57.7k|        : format_handler_base{argcount},
 1794|  57.7k|          parse_ctx{source_tag<Source&&>, format},
 1795|  57.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|  57.7k|    {
 1797|  57.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1720|  57.7k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  949|  57.7k|    static_cast<    \
  |  |  950|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|  57.7k|    {
 1722|  57.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|  57.7k|{
 1935|  57.7k|    const auto beg = handler.get_ctx().begin();
 1936|  57.7k|    detail::parse_format_string<false>(format, handler);
 1937|  57.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.99k, False: 48.7k]
  |  |  ------------------
  ------------------
 1938|  8.99k|        return unexpected(err.error());
 1939|  8.99k|    }
 1940|  48.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|  57.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1918|   378k|    {
 1919|   378k|        return ctx.get();
 1920|   378k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1725|   378k|    {
 1726|   378k|        return ctx;
 1727|   378k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1800|   106k|    {
 1801|   106k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 106k]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|   106k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1572|  57.7k|{
 1573|  57.7k|    auto arg = ctx.arg(id);
 1574|  57.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|  57.7k|    return arg;
 1578|  57.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1840|  57.7k|    {
 1841|  57.7k|        return parse_ctx.next_arg_id();
 1842|  57.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1880|  57.7k|    {
 1881|  57.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|  57.7k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|  57.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 57.7k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|  57.7k|        auto specs = detail::format_specs{};
 1894|  57.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|  57.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|  57.7k|            detail::get_arg_type(arg)};
 1897|       |
 1898|  57.7k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|  57.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 57.7k]
  |  Branch (1899:29): [True: 0, False: 57.7k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|  57.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 54.1k]
  |  |  ------------------
  ------------------
 1906|  3.59k|            return parse_ctx.begin();
 1907|  3.59k|        }
 1908|  54.1k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|  54.1k|        on_visit_scan_arg(
 1911|  54.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|  54.1k|                                           get_ctx().locale()},
 1913|  54.1k|            arg);
 1914|  54.1k|        return parse_ctx.begin();
 1915|  57.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1590|  57.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|  57.7k|    {
 1592|  57.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1851|  54.1k|    {
 1852|  54.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 54.1k]
  |  Branch (1852:13): [True: 0, False: 54.1k]
  |  Branch (1852:29): [True: 0, False: 54.1k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|  54.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|  54.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 5.39k, False: 48.7k]
  |  |  ------------------
  ------------------
 1859|  5.39k|            on_error(r.error());
 1860|  5.39k|        }
 1861|  48.7k|        else {
 1862|  48.7k|            get_ctx().advance_to(*r);
 1863|  48.7k|        }
 1864|  54.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1949|   167k|{
 1950|   167k|    const auto argcount = args.size();
 1951|   167k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1951:9): [True: 75.9k, False: 91.7k]
  |  Branch (1951:60): [True: 75.9k, False: 0]
  ------------------
 1952|  75.9k|        auto arg = args.get(0);
 1953|  75.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  949|  75.9k|    static_cast<    \
  |  |  950|  75.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1954|  75.9k|    }
 1955|       |
 1956|  91.7k|    auto handler = format_handler<true, CharT>{
 1957|  91.7k|        ranges::subrange<const CharT*>{source.data(),
 1958|  91.7k|                                       source.data() + source.size()},
 1959|  91.7k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|  91.7k|    static_cast<    \
  |  |  950|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|  91.7k|    static_cast<    \
  |  |  950|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1960|  91.7k|    return vscan_parse_format_string(format, handler);
 1961|   167k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1530|   113k|{
 1531|   113k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
 1532|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1533|      0|                                             "Argument #0 not found");
 1534|      0|    }
 1535|       |
 1536|   113k|    auto reader =
 1537|   113k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1538|   113k|            ranges::subrange<const CharT*>{source.data(),
 1539|   113k|                                           source.data() + source.size()},
 1540|   113k|            SCN_MOVE(args), loc};
  ------------------
  |  |  949|   113k|    static_cast<    \
  |  |  950|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1541|   113k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 5.39k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.39k|    }                                                  \
  |  |  |  | 3939|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1542|   108k|    return ranges::distance(source.data(), it);
 1543|   113k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2049|   130k|{
 2050|   130k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  879|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 119k, False: 11.6k]
  |  |  ------------------
  ------------------
 2051|   119k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  880|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 119k]
  |  |  ------------------
  ------------------
 2052|      0|            return detail::unexpected_scan_error(
 2053|      0|                scan_error::invalid_source_state,
 2054|      0|                "Failed to sync with underlying source");
 2055|      0|        }
 2056|   119k|    }
 2057|  11.6k|    else {
 2058|  11.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  880|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 2059|      0|            return detail::unexpected_scan_error(
 2060|      0|                scan_error::invalid_source_state,
 2061|      0|                "Failed to sync with underlying source");
 2062|      0|        }
 2063|  11.6k|    }
 2064|   130k|    return result;
 2065|   130k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1949|  1.26M|{
 1950|  1.26M|    const auto argcount = args.size();
 1951|  1.26M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1951:9): [True: 620k, False: 649k]
  |  Branch (1951:60): [True: 620k, False: 0]
  ------------------
 1952|   620k|        auto arg = args.get(0);
 1953|   620k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   620k|    static_cast<    \
  |  |  950|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1954|   620k|    }
 1955|       |
 1956|   649k|    auto handler = format_handler<true, CharT>{
 1957|   649k|        ranges::subrange<const CharT*>{source.data(),
 1958|   649k|                                       source.data() + source.size()},
 1959|   649k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   649k|    static_cast<    \
  |  |  950|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   649k|    static_cast<    \
  |  |  950|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1960|   649k|    return vscan_parse_format_string(format, handler);
 1961|  1.26M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1517|  1.90M|{
 1518|  1.90M|    if (format.size() != 2) {
  ------------------
  |  Branch (1518:9): [True: 973k, False: 930k]
  ------------------
 1519|   973k|        return false;
 1520|   973k|    }
 1521|   930k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1521:12): [True: 930k, False: 0]
  |  Branch (1521:39): [True: 930k, False: 0]
  ------------------
 1522|  1.90M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1530|   930k|{
 1531|   930k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 930k]
  |  |  ------------------
  ------------------
 1532|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1533|      0|                                             "Argument #0 not found");
 1534|      0|    }
 1535|       |
 1536|   930k|    auto reader =
 1537|   930k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1538|   930k|            ranges::subrange<const CharT*>{source.data(),
 1539|   930k|                                           source.data() + source.size()},
 1540|   930k|            SCN_MOVE(args), loc};
  ------------------
  |  |  949|   930k|    static_cast<    \
  |  |  950|   930k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1541|   930k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   930k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   930k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   930k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 10.7k, False: 919k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.7k|    }                                                  \
  |  |  |  | 3939|   930k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1542|   919k|    return ranges::distance(source.data(), it);
 1543|   930k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1793|   649k|        : format_handler_base{argcount},
 1794|   649k|          parse_ctx{source_tag<Source&&>, format},
 1795|   649k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   649k|    static_cast<    \
  |  |  950|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   649k|    static_cast<    \
  |  |  950|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   649k|    {
 1797|   649k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1744|   649k|        : contiguous_ctx(source, args, loc)
 1745|   649k|    {
 1746|   649k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   649k|{
 1935|   649k|    const auto beg = handler.get_ctx().begin();
 1936|   649k|    detail::parse_format_string<false>(format, handler);
 1937|   649k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 35.9k, False: 613k]
  |  |  ------------------
  ------------------
 1938|  35.9k|        return unexpected(err.error());
 1939|  35.9k|    }
 1940|   613k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   649k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1918|  4.44M|    {
 1919|  4.44M|        return ctx.get();
 1920|  4.44M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1749|  4.44M|    {
 1750|  4.44M|        return contiguous_ctx;
 1751|  4.44M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1800|  1.26M|    {
 1801|  1.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 1.26M]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|  1.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1572|   649k|{
 1573|   649k|    auto arg = ctx.arg(id);
 1574|   649k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   649k|    return arg;
 1578|   649k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1840|   649k|    {
 1841|   649k|        return parse_ctx.next_arg_id();
 1842|   649k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1880|   649k|    {
 1881|   649k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   649k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   649k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 649k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   649k|        auto specs = detail::format_specs{};
 1894|   649k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   649k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   649k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   649k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   649k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 649k]
  |  Branch (1899:29): [True: 0, False: 649k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   649k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 14.3k, False: 634k]
  |  |  ------------------
  ------------------
 1906|  14.3k|            return parse_ctx.begin();
 1907|  14.3k|        }
 1908|   634k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   634k|        on_visit_scan_arg(
 1911|   634k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   634k|                                           get_ctx().locale()},
 1913|   634k|            arg);
 1914|   634k|        return parse_ctx.begin();
 1915|   649k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1590|   649k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   649k|    {
 1592|   649k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1851|   634k|    {
 1852|   634k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 634k]
  |  Branch (1852:13): [True: 0, False: 634k]
  |  Branch (1852:29): [True: 0, False: 634k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   634k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   634k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   634k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 21.5k, False: 613k]
  |  |  ------------------
  ------------------
 1859|  21.5k|            on_error(r.error());
 1860|  21.5k|        }
 1861|   613k|        else {
 1862|   613k|            get_ctx().advance_to(*r);
 1863|   613k|        }
 1864|   634k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1969|   634k|{
 1970|   634k|    const auto argcount = args.size();
 1971|   634k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1971:9): [True: 310k, False: 324k]
  |  Branch (1971:60): [True: 310k, False: 0]
  ------------------
 1972|   310k|        auto arg = args.get(0);
 1973|   310k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   310k|    static_cast<    \
  |  |  950|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1974|   310k|    }
 1975|       |
 1976|   324k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1976:9): [True: 0, False: 324k]
  ------------------
 1977|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1978|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1979|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1980|      0|        return vscan_parse_format_string(format, handler);
 1981|      0|    }
 1982|       |
 1983|   324k|    SCN_UNLIKELY_ATTR
 1984|   324k|    {
 1985|   324k|        auto handler = format_handler<false, CharT>{
 1986|   324k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1987|   324k|        return vscan_parse_format_string(format, handler);
 1988|   324k|    }
 1989|   324k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1550|   465k|{
 1551|   465k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 1552|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1553|      0|                                             "Argument #0 not found");
 1554|      0|    }
 1555|       |
 1556|   465k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  879|   465k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 1557|      0|        auto reader = impl::default_arg_reader<
 1558|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1559|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1560|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1561|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1562|      0|    }
 1563|       |
 1564|   465k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1565|   465k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  949|   465k|    static_cast<    \
  |  |  950|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1566|   465k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 5.39k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.39k|    }                                                  \
  |  |  |  | 3939|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1567|   459k|    return it.position();
 1568|   465k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1793|   324k|        : format_handler_base{argcount},
 1794|   324k|          parse_ctx{source_tag<Source&&>, format},
 1795|   324k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   324k|    {
 1797|   324k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1720|   324k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  949|   324k|    static_cast<    \
  |  |  950|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   324k|    {
 1722|   324k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   324k|{
 1935|   324k|    const auto beg = handler.get_ctx().begin();
 1936|   324k|    detail::parse_format_string<false>(format, handler);
 1937|   324k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 17.9k, False: 306k]
  |  |  ------------------
  ------------------
 1938|  17.9k|        return unexpected(err.error());
 1939|  17.9k|    }
 1940|   306k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   324k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1918|  2.22M|    {
 1919|  2.22M|        return ctx.get();
 1920|  2.22M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1725|  2.22M|    {
 1726|  2.22M|        return ctx;
 1727|  2.22M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1800|   631k|    {
 1801|   631k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 631k]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|   631k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1572|   324k|{
 1573|   324k|    auto arg = ctx.arg(id);
 1574|   324k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   324k|    return arg;
 1578|   324k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1840|   324k|    {
 1841|   324k|        return parse_ctx.next_arg_id();
 1842|   324k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1880|   324k|    {
 1881|   324k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   324k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   324k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 324k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   324k|        auto specs = detail::format_specs{};
 1894|   324k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   324k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   324k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   324k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   324k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 324k]
  |  Branch (1899:29): [True: 0, False: 324k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   324k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.19k, False: 317k]
  |  |  ------------------
  ------------------
 1906|  7.19k|            return parse_ctx.begin();
 1907|  7.19k|        }
 1908|   317k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   317k|        on_visit_scan_arg(
 1911|   317k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   317k|                                           get_ctx().locale()},
 1913|   317k|            arg);
 1914|   317k|        return parse_ctx.begin();
 1915|   324k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1590|   324k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   324k|    {
 1592|   324k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1851|   317k|    {
 1852|   317k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 317k]
  |  Branch (1852:13): [True: 0, False: 317k]
  |  Branch (1852:29): [True: 0, False: 317k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   317k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   317k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 306k]
  |  |  ------------------
  ------------------
 1859|  10.7k|            on_error(r.error());
 1860|  10.7k|        }
 1861|   306k|        else {
 1862|   306k|            get_ctx().advance_to(*r);
 1863|   306k|        }
 1864|   317k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2049|   789k|{
 2050|   789k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  879|   789k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 766k, False: 23.3k]
  |  |  ------------------
  ------------------
 2051|   766k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  880|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 766k]
  |  |  ------------------
  ------------------
 2052|      0|            return detail::unexpected_scan_error(
 2053|      0|                scan_error::invalid_source_state,
 2054|      0|                "Failed to sync with underlying source");
 2055|      0|        }
 2056|   766k|    }
 2057|  23.3k|    else {
 2058|  23.3k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  880|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 2059|      0|            return detail::unexpected_scan_error(
 2060|      0|                scan_error::invalid_source_state,
 2061|      0|                "Failed to sync with underlying source");
 2062|      0|        }
 2063|  23.3k|    }
 2064|   789k|    return result;
 2065|   789k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1995|  37.9k|{
 1996|  37.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|  37.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1995|  24.3k|{
 1996|  24.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|  24.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1995|   310k|{
 1996|   310k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|   310k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1995|   155k|{
 1996|   155k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|   155k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    899|{
 1462|    899|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    899|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    899|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    899|            return transcode_to_string_impl_to32(src, dest);
 1473|    899|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    899|    SCN_EXPECT(false);
  ------------------
  |  |  945|    899|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|    899|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    899|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    899|{
 1355|    899|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    899|    auto it = src.begin();
 1358|   292k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 291k, False: 899]
  ------------------
 1359|   291k|        auto res = get_next_code_point(
 1360|   291k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   291k|                                                                 src.end()));
 1362|   291k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  880|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.93k, False: 288k]
  |  |  ------------------
  ------------------
 1363|  2.93k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.93k|        }
 1365|   288k|        else {
 1366|   288k|            dest.push_back(res.value);
 1367|   288k|        }
 1368|   291k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   291k|    }
 1370|    899|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   783k|{
 1279|   783k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  945|   783k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   783k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   783k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   783k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 14.2k, False: 769k]
  |  |  ------------------
  ------------------
 1283|  14.2k|        return {get_start_for_next_code_point(input),
 1284|  14.2k|                detail::invalid_code_point};
 1285|  14.2k|    }
 1286|   769k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  880|   769k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 23.8k, False: 745k]
  |  |  ------------------
  ------------------
 1287|  23.8k|        return {input.end(), detail::invalid_code_point};
 1288|  23.8k|    }
 1289|       |
 1290|   745k|    return {input.begin() + len,
 1291|   745k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   769k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  14.2k|{
 1265|  14.2k|    auto it = input.begin();
 1266|  65.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 63.5k, False: 2.07k]
  ------------------
 1267|  63.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 12.1k, False: 51.3k]
  ------------------
 1268|  12.1k|            break;
 1269|  12.1k|        }
 1270|  63.5k|    }
 1271|  14.2k|    return it;
 1272|  14.2k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  16.1k|    {
 3046|  16.1k|        SCN_UNLIKELY_ATTR
 3047|  16.1k|        m_msg = msg;
 3048|  16.1k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  1.09M|    {
 3051|  1.09M|        return m_msg == nullptr;
 3052|  1.09M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.51M|{
  458|  1.51M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.51M|        static_cast<unsigned char>(ch))];
  460|  1.51M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  39.5k|{
  469|  39.5k|    return static_cast<unsigned char>(ch) <= 127;
  470|  39.5k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.1k|{
  474|  14.1k|#if WCHAR_MIN < 0
  475|  14.1k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.8k, False: 1.27k]
  |  Branch (475:23): [True: 8.87k, False: 3.99k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.1k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   706k|{
  539|   706k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   706k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.21M|{
  784|  4.21M|    return e != eof_error::good;
  785|  4.21M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  12.5k|{
  798|  12.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  945|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  12.5k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  12.5k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.04M|{
 6047|  1.04M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.04M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.04M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.04M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.04M|    return {};
 6061|  1.04M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   375k|    {
  304|   375k|        ranges::advance(x, n);
  305|   375k|        return x;
  306|   375k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   375k|    {
  268|   375k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   375k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   375k|    {
  151|   375k|        i += n;
  152|   375k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   919k|    {
  108|   919k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   919k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   919k|    {
   87|   919k|        return s - i;
   88|   919k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.53M|    {
  108|  1.53M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.53M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.53M|    {
   87|  1.53M|        return s - i;
   88|  1.53M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   249k|    {
 2993|   249k|        return m_current;
 2994|   249k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.89M|    {
 2993|  1.89M|        return m_current;
 2994|  1.89M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   125k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   125k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   125k|        auto beg = r.begin();
  991|   125k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 125k, False: 0]
  ------------------
  992|   125k|            return false;
  993|   125k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   125k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  32.4k|    {
  763|  32.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  32.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.49k|        : m_fptr([](storage fn,
  743|  7.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.49k|              cvref<T> obj = *get<T>(fn);
  745|  7.49k|              if constexpr (std::is_void_v<R>) {
  746|  7.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.49k|              }
  748|  7.49k|              else {
  749|  7.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.49k|              }
  751|  7.49k|          }),
  752|  7.49k|          m_storage(std::addressof(f))
  753|  7.49k|    {
  754|  7.49k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  16.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.2k|              else {
  749|  16.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.2k|              }
  751|  16.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  16.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.2k|        else if constexpr (std::is_object_v<T>) {
  688|  16.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.2k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.49k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.49k|        {
  662|  7.49k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  77.0M|    {
  763|  77.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  77.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  77.0M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.43M|        : m_fptr([](storage fn,
  743|  2.43M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.43M|              cvref<T> obj = *get<T>(fn);
  745|  2.43M|              if constexpr (std::is_void_v<R>) {
  746|  2.43M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.43M|              }
  748|  2.43M|              else {
  749|  2.43M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.43M|              }
  751|  2.43M|          }),
  752|  2.43M|          m_storage(std::addressof(f))
  753|  2.43M|    {
  754|  2.43M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.82M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.82M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.82M|              else {
  749|  5.82M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.82M|              }
  751|  5.82M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.82M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.82M|        else if constexpr (std::is_object_v<T>) {
  688|  5.82M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.82M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.43M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.43M|        {
  662|  2.43M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|  52.3k|    {
 6075|  52.3k|        const bool need_skipped_width =
 6076|  52.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 52.3k]
  |  Branch (6076:33): [True: 0, False: 52.3k]
  ------------------
 6077|  52.3k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  52.3k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 52.3k]
  ------------------
 6081|  52.3k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 52.3k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  52.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 52.3k, False: 0]
  |  Branch (6085:56): [True: 49.8k, False: 2.49k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  49.8k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 49.8k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  98.6k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  49.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 956, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    956|    }                                                  \
  |  |  |  | 3939|  49.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  98.6k|                            make_eof_scan_error));
 6096|       |
 6097|  98.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 48.8k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  48.8k|            return result_type{it, 0};
 6105|  98.6k|        }
 6106|       |
 6107|  2.49k|        return result_type{rng.begin(), 0};
 6108|  52.3k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.49k|{
 2075|  2.49k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.49k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.49k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.49k|    else {
 2060|  2.49k|        auto first = range.begin();
 2061|  5.48k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.40k, False: 76]
  ------------------
 2062|  5.40k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.42k, False: 2.98k]
  ------------------
 2063|  2.42k|                return first;
 2064|  2.42k|            }
 2065|  5.40k|        }
 2066|     76|        return first;
 2067|  2.49k|    }
 2068|  2.49k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  48.7k|    {
  108|  48.7k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  48.7k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  48.7k|    {
   94|  48.7k|        iter_difference_t<I> counter{0};
   95|   520k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 471k, False: 48.7k]
  ------------------
   96|   471k|            ++i;
   97|   471k|            ++counter;
   98|   471k|        }
   99|  48.7k|        return counter;
  100|  48.7k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   195k|{
  951|   195k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.19k, False: 192k]
  |  |  ------------------
  ------------------
  952|  2.19k|        return eof_error::eof;
  953|  2.19k|    }
  954|   192k|    return eof_error::good;
  955|   195k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.40M|{
  945|  1.40M|    return is_range_eof(r.begin(), r.end());
  946|  1.40M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.40M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.40M|    {
  938|  1.40M|        return begin == end;
  939|  1.40M|    }
  940|  1.40M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   121k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   121k|    else {
 1788|   121k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  951|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   121k|    }
 1790|   121k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   121k|    {
 1636|   121k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   121k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   121k|    {
 1720|   121k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   121k|                           ranges::common_range<Range>) {
 1737|   121k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   121k|            auto end_seg = range.end().contiguous_segment();
 1739|   121k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  880|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.10k, False: 118k]
  |  |  ------------------
  ------------------
 1740|   121k|                             detail::to_address(end_seg.end()))) {
 1741|  3.10k|                auto& str = m_storage.emplace();
 1742|  3.10k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.10k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.10k|                m_view = string_view_type{str};
 1745|  3.10k|                return;
 1746|  3.10k|            }
 1747|       |
 1748|   118k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   118k|                                                            end_seg.data());
 1750|   118k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   121k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   238k|    {
 1681|   238k|        return m_view;
 1682|   238k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   121k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  48.1k|    {
 6117|  48.1k|        const bool need_skipped_width =
 6118|  48.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 48.1k]
  |  Branch (6118:33): [True: 0, False: 48.1k]
  ------------------
 6119|  48.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  48.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 48.1k]
  ------------------
 6122|  48.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 48.1k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  48.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 48.1k, False: 0]
  ------------------
 6131|  48.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 662, False: 47.5k]
  ------------------
 6132|  48.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 662]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    662|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 662]
  ------------------
 6134|    662|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  48.1k|        return result_type{rng.begin(), 0};
 6156|  48.1k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   302k|{
  951|   302k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.33k, False: 299k]
  |  |  ------------------
  ------------------
  952|  3.33k|        return eof_error::eof;
  953|  3.33k|    }
  954|   299k|    return eof_error::good;
  955|   302k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   302k|{
  945|   302k|    return is_range_eof(r.begin(), r.end());
  946|   302k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   302k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   302k|    {
  938|   302k|        return begin == end;
  939|   302k|    }
  940|   302k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   187k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   187k|                  ranges::sized_range<Range>) {
 1785|   187k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   187k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   187k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   187k|    {
 1589|   187k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.02M|    {
 1602|  1.02M|        return sv;
 1603|  1.02M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.99k|{
 2075|  4.99k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.99k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  4.99k|{
 2056|  4.99k|    if constexpr (ranges::common_range<Range>) {
 2057|  4.99k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  4.99k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   188k|{
 3066|   188k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 188k, False: 0]
  ------------------
 3067|   188k|        auto it = read_while_classic_space(range);
 3068|   188k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   188k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.17k, False: 186k]
  |  |  ------------------
  ------------------
 3070|  2.17k|            return unexpected(e);
 3071|  2.17k|        }
 3072|       |
 3073|   186k|        return it;
 3074|   188k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   188k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   188k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   188k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   188k|        auto buf = make_contiguous_buffer(range);
 2220|   188k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   188k|        return ranges::next(range.begin(),
 2222|   188k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   188k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   375k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   375k|                  ranges::sized_range<Range>) {
 1785|   375k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   375k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   375k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   375k|    {
 1589|   375k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  13.0k|    {
  304|  13.0k|        ranges::advance(x, n);
  305|  13.0k|        return x;
  306|  13.0k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   242k|    {
  268|   242k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   242k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   242k|    {
  181|   442k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 200k, False: 242k]
  ------------------
  182|   200k|            ++i;
  183|   200k|        }
  184|   242k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   120k|    {
 1686|   120k|        return m_storage.has_value();
 1687|   120k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.91k|    {
 1691|  1.91k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  945|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.91k|        return *m_storage;
 1693|  1.91k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  54.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  54.1k|            auto rd = make_reader<T, char_type>();
 6237|  54.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  54.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 1.79k, False: 52.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.79k|    }
  ------------------
 6238|       |
 6239|  52.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 52.3k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  52.3k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  52.3k|                return impl(rd, range, value);
 6242|  52.3k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  54.1k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   226k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   226k|                       std::is_same_v<T, std::wstring>) {
 5867|   226k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   226k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   325k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   138k|    {
 3156|   138k|        reader_error_handler eh{};
 3157|   138k|        get_derived().check_specs_impl(specs, eh);
 3158|   138k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  880|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 5.39k, False: 133k]
  |  |  ------------------
  ------------------
 3159|  5.39k|            return detail::unexpected_scan_error(
 3160|  5.39k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  5.39k|        }
 3162|   133k|        return {};
 3163|   138k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   138k|    {
 3168|   138k|        return static_cast<Derived&>(*this);
 3169|   138k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   138k|    {
 5247|   138k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   138k|        SCN_GCC_PUSH
 5250|   138k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   138k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   138k|        SCN_CLANG_PUSH
 5254|   138k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   138k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   138k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 138k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 138k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   125k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 125k, False: 12.8k]
  ------------------
 5263|   125k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 125k]
  ------------------
 5264|   125k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 125k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   125k|                else {
 5268|   125k|                    m_type = reader_type::word;
 5269|   125k|                }
 5270|   125k|                break;
 5271|      0|            }
 5272|       |
 5273|  5.39k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 5.39k, False: 133k]
  ------------------
 5274|  5.39k|                m_type = reader_type::character;
 5275|  5.39k|                break;
 5276|       |
 5277|  7.49k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 7.49k, False: 131k]
  ------------------
 5278|  7.49k|                m_type = reader_type::character_set;
 5279|  7.49k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 138k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 138k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   138k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   138k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|  52.3k|    {
 6162|  52.3k|        const bool need_skipped_width =
 6163|  52.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 52.3k]
  |  Branch (6163:33): [True: 0, False: 52.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  52.3k|        auto it = rng.begin();
 6167|  52.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  52.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 52.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  52.3k|        else {
 6176|  52.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 956, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    956|    }                                                  \
  |  |  |  | 3939|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.3k|        }
 6179|  51.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.3k|        std::ptrdiff_t value_width = 0;
 6183|  51.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.3k|        else {
 6199|  51.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 2.64k, False: 48.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.64k|    }                                                  \
  |  | 3939|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  48.7k|                                             specs, value, loc));
 6201|       |
 6202|  48.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 48.7k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  48.7k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  48.7k|        std::ptrdiff_t postfix_width = 0;
 6211|  48.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 48.1k, False: 524]
  ------------------
 6212|  48.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  48.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  48.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  48.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 48.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  48.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  48.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  48.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  48.1k|                                 value_width));
 6216|  48.1k|            std::tie(it, postfix_width) = postfix_result;
 6217|  48.1k|        }
 6218|       |
 6219|  48.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  48.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 48.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  48.7k|            specs, prefix_width, value_width, postfix_width));
 6221|  48.7k|        return it;
 6222|  48.7k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   441k|    {
 5296|   441k|        return m_type == reader_type::word;
 5297|   441k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   309k|{
 1242|   309k|    auto it = src.begin();
 1243|  2.02M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.72M, False: 301k]
  ------------------
 1244|  1.72M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.72M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.72k, False: 1.71M]
  ------------------
 1246|  4.72k|            return false;
 1247|  4.72k|        }
 1248|  1.71M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 724, False: 1.71M]
  ------------------
 1249|    724|            return false;
 1250|    724|        }
 1251|  1.71M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.71M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.71M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.50k, False: 1.71M]
  ------------------
 1254|  2.50k|            return false;
 1255|  2.50k|        }
 1256|  1.71M|        it += len;
 1257|  1.71M|    }
 1258|   301k|    return true;
 1259|   309k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   119k|{
 3108|   119k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   119k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.91k, False: 117k]
  ------------------
 3110|  1.91k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  949|  1.91k|    static_cast<    \
  |  |  950|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.91k|        }
 3112|   117k|        else {
 3113|   117k|            dest.assign(source.view());
 3114|   117k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   119k|    return {};
 3121|   119k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  7.49k|        {
 5144|  7.49k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 7.49k, False: 0]
  ------------------
 5145|  7.49k|                return {};
 5146|  7.49k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  14.4k|        {
 5117|  14.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  945|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  14.4k|            const auto val =
 5119|  14.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  14.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  14.4k|                    (val % 8)) &
 5122|  14.4k|                   1u;
 5123|  14.4k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  16.2k|        {
 5168|  16.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.75k, False: 14.4k]
  ------------------
 5169|  1.75k|                return false;
 5170|  1.75k|            }
 5171|       |
 5172|  14.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  16.2k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  7.49k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  51.3k|    {
 5314|  51.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  51.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  51.3k|        return read_impl(range, specs, value);
 5316|  51.3k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  51.3k|    {
 5332|  51.3k|        SCN_CLANG_PUSH
 5333|  51.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  51.3k|        switch (m_type) {
 5336|  48.8k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 48.8k, False: 2.49k]
  ------------------
 5337|  48.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 51.3k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 51.3k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.49k, False: 48.8k]
  ------------------
 5347|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.49k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 51.3k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 51.3k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 51.3k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  51.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  51.3k|        }
 5368|       |
 5369|  51.3k|        SCN_CLANG_POP
 5370|  51.3k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   120k|    {
 4861|   120k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   120k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   120k|{
 4795|   120k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   120k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   120k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.29k, False: 118k]
  ------------------
 4799|  2.29k|        return detail::unexpected_scan_error(
 4800|  2.29k|            scan_error::invalid_scanned_value,
 4801|  2.29k|            "Invalid encoding in scanned string");
 4802|  2.29k|    }
 4803|       |
 4804|   118k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   118k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   118k|    return SCN_MOVE(result);
  ------------------
  |  |  949|   118k|    static_cast<    \
  |  |  950|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   118k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   120k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   120k|    else {
 2196|   120k|        auto it = range.begin();
 2197|       |
 2198|   120k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   120k|            auto seg = get_contiguous_beginning(range);
 2200|   120k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   120k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 120k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   120k|            ranges::advance(it, seg.size());
 2205|   120k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   120k|            ranges::subrange{it, range.end()},
 2209|   120k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   120k|    }
 2211|   120k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   242k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   242k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   242k|        else {
 1055|   242k|            return r.begin().contiguous_segment();
 1056|   242k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   242k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   229k|{
 2160|   229k|    auto it = range.begin();
 2161|  1.21M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.21M, False: 3.91k]
  ------------------
 2162|  1.21M|        const auto val =
 2163|  1.21M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.21M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.19M, False: 16.0k]
  |  |  ------------------
  ------------------
 2165|  1.19M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.19M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.19M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 225k, False: 971k]
  ------------------
 2168|   225k|                return it;
 2169|   225k|            }
 2170|  1.19M|        }
 2171|   987k|        it = val.iterator;
 2172|   987k|    }
 2173|       |
 2174|  3.91k|    return it;
 2175|   229k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.21M|{
 1998|  1.21M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.21M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.21M|    auto it = range.begin();
 2002|  1.21M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.21M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 16.0k, False: 1.19M]
  |  |  ------------------
  ------------------
 2005|  16.0k|        ++it;
 2006|  16.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  16.0k|        return {it, {}};
 2008|  16.0k|    }
 2009|       |
 2010|  1.19M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.12M, False: 70.3k]
  ------------------
 2011|  1.12M|        ++it;
 2012|  1.12M|        return {it, string_type(1, *range.begin())};
 2013|  1.12M|    }
 2014|       |
 2015|  70.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  70.3k|    return {it, string_type{range.begin(), it}};
 2017|  1.19M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  16.0k|{
 1265|  16.0k|    auto it = input.begin();
 1266|  34.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 33.5k, False: 528]
  ------------------
 1267|  33.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 15.4k, False: 18.0k]
  ------------------
 1268|  15.4k|            break;
 1269|  15.4k|        }
 1270|  33.5k|    }
 1271|  16.0k|    return it;
 1272|  16.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  70.3k|    {
  283|  70.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  70.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  70.3k|    {
  252|  70.3k|        constexpr iter_difference_t<I> zero{0};
  253|  70.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|   259k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 189k, False: 69.7k]
  |  Branch (255:30): [True: 188k, False: 527]
  ------------------
  256|   188k|            ++i;
  257|   188k|            ++counter;
  258|   188k|        }
  259|       |
  260|  70.3k|        return counter;
  261|  70.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.21M|    {
 1989|  1.21M|        return !codepoint.empty();
 1990|  1.21M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   120k|        : m_fptr([](storage fn,
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|   120k|              if constexpr (std::is_void_v<R>) {
  746|   120k|                  obj(static_cast<decltype(args)>(args)...);
  747|   120k|              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
  752|   120k|          m_storage(std::addressof(f))
  753|   120k|    {
  754|   120k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   713k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   713k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   713k|              else {
  749|   713k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   713k|              }
  751|   713k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   713k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   713k|        else if constexpr (std::is_object_v<T>) {
  688|   713k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   713k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   713k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   120k|        {
  662|   120k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.49k|    {
 5089|  2.49k|        auto it = read_source_impl(range, {specs});
 5090|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5091|  1.79k|            return unexpected(it.error());
 5092|  1.79k|        }
 5093|       |
 5094|    700|        return read_string_impl(range, *it, value);
 5095|  2.49k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.49k|    {
 5192|  2.49k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.49k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.49k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 2.49k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.49k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.49k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.49k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.49k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.49k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.49k|        };
 5215|       |
 5216|  2.49k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.49k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.49k|        auto it = read_while_code_unit(range, cb);
 5221|  2.49k|        return check_nonempty(it, range);
 5222|  2.49k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.49k|    {
 5228|  2.49k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.79k, False: 700]
  ------------------
 5229|  1.79k|            return detail::unexpected_scan_error(
 5230|  1.79k|                scan_error::invalid_scanned_value,
 5231|  1.79k|                "No characters matched in [character set]");
 5232|  1.79k|        }
 5233|       |
 5234|    700|        return it;
 5235|  2.49k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   109k|{
 2181|   109k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   109k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.49k|        : m_fptr([](storage fn,
  743|  2.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.49k|              cvref<T> obj = *get<T>(fn);
  745|  2.49k|              if constexpr (std::is_void_v<R>) {
  746|  2.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.49k|              }
  748|  2.49k|              else {
  749|  2.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.49k|              }
  751|  2.49k|          }),
  752|  2.49k|          m_storage(std::addressof(f))
  753|  2.49k|    {
  754|  2.49k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.40k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.40k|              else {
  749|  5.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.40k|              }
  751|  5.40k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.40k|    {
  684|  5.40k|        if constexpr (std::is_const_v<T>) {
  685|  5.40k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.40k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.40k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.40k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.40k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.49k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.49k|        {
  667|  2.49k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    700|{
 4795|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    700|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    700|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 700]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    700|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    700|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 700]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    700|    return SCN_MOVE(result);
  ------------------
  |  |  949|    700|    static_cast<    \
  |  |  950|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    700|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  39.7k|    {
 5314|  39.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  39.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  39.7k|        return read_impl(range, specs, value);
 5316|  39.7k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  39.7k|    {
 5332|  39.7k|        SCN_CLANG_PUSH
 5333|  39.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  39.7k|        switch (m_type) {
 5336|  37.2k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 37.2k, False: 2.49k]
  ------------------
 5337|  37.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 39.7k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 39.7k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.49k, False: 37.2k]
  ------------------
 5347|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.49k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 39.7k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 39.7k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 39.7k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  39.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  39.7k|        }
 5368|       |
 5369|  39.7k|        SCN_CLANG_POP
 5370|  39.7k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  93.2k|    {
 4861|  93.2k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  93.2k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  93.2k|{
 4795|  93.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  93.2k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  93.2k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.83k, False: 90.4k]
  ------------------
 4799|  2.83k|        return detail::unexpected_scan_error(
 4800|  2.83k|            scan_error::invalid_scanned_value,
 4801|  2.83k|            "Invalid encoding in scanned string");
 4802|  2.83k|    }
 4803|       |
 4804|  90.4k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  90.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 90.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  90.4k|    return SCN_MOVE(result);
  ------------------
  |  |  949|  90.4k|    static_cast<    \
  |  |  950|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  90.4k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  91.1k|{
 3128|  91.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  91.1k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  91.1k|    return {};
 3136|  91.1k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   186k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   186k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   186k|        auto buf = make_contiguous_buffer(range);
 2191|   186k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   186k|        return ranges::next(range.begin(),
 2193|   186k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   186k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.49k|    {
 5089|  2.49k|        auto it = read_source_impl(range, {specs});
 5090|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5091|  1.79k|            return unexpected(it.error());
 5092|  1.79k|        }
 5093|       |
 5094|    700|        return read_string_impl(range, *it, value);
 5095|  2.49k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  4.99k|    {
 5192|  4.99k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  4.99k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  4.99k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  4.99k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 4.99k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  4.99k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  4.99k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 4.99k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  4.99k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.99k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.99k|        };
 5215|       |
 5216|  4.99k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.99k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  4.99k|        auto it = read_while_code_unit(range, cb);
 5221|  4.99k|        return check_nonempty(it, range);
 5222|  4.99k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  4.99k|    {
 5228|  4.99k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.59k, False: 1.40k]
  ------------------
 5229|  3.59k|            return detail::unexpected_scan_error(
 5230|  3.59k|                scan_error::invalid_scanned_value,
 5231|  3.59k|                "No characters matched in [character set]");
 5232|  3.59k|        }
 5233|       |
 5234|  1.40k|        return it;
 5235|  4.99k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.99k|        : m_fptr([](storage fn,
  743|  4.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.99k|              cvref<T> obj = *get<T>(fn);
  745|  4.99k|              if constexpr (std::is_void_v<R>) {
  746|  4.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.99k|              }
  748|  4.99k|              else {
  749|  4.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.99k|              }
  751|  4.99k|          }),
  752|  4.99k|          m_storage(std::addressof(f))
  753|  4.99k|    {
  754|  4.99k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  10.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.8k|              else {
  749|  10.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.8k|              }
  751|  10.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.8k|    {
  684|  10.8k|        if constexpr (std::is_const_v<T>) {
  685|  10.8k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.8k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  10.8k|        const auto cb = [&](SourceCharT ch) {
 5213|  10.8k|            return cb_wrapper.on_ascii_only(ch);
 5214|  10.8k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.99k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.99k|        {
  667|  4.99k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    700|{
 4795|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    700|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    700|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 700]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    700|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    700|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 700]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    700|    return SCN_MOVE(result);
  ------------------
  |  |  949|    700|    static_cast<    \
  |  |  950|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    700|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  99.2k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  99.2k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  99.2k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  99.2k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  39.7k|    {
 5314|  39.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  39.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  39.7k|        return read_impl(range, specs, value);
 5316|  39.7k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  39.7k|    {
 5332|  39.7k|        SCN_CLANG_PUSH
 5333|  39.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  39.7k|        switch (m_type) {
 5336|  37.2k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 37.2k, False: 2.49k]
  ------------------
 5337|  37.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 39.7k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 39.7k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.49k, False: 37.2k]
  ------------------
 5347|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.49k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 39.7k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 39.7k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 39.7k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  39.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  39.7k|        }
 5368|       |
 5369|  39.7k|        SCN_CLANG_POP
 5370|  39.7k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|  93.2k|    {
 4868|  93.2k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|  93.2k|                                     value);
 4870|  93.2k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  93.2k|{
 4814|  93.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  93.2k|    auto src = [&]() {
 4817|  93.2k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  93.2k|            return make_contiguous_buffer(
 4819|  93.2k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  93.2k|        }
 4821|  93.2k|        else {
 4822|  93.2k|            return make_contiguous_buffer(
 4823|  93.2k|                ranges::subrange{range.begin(), result});
 4824|  93.2k|        }
 4825|  93.2k|    }();
 4826|  93.2k|    using src_type = decltype(src);
 4827|       |
 4828|  93.2k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  93.2k|    else {
 4841|  93.2k|        const auto view = src.view();
 4842|  93.2k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  93.2k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 2.83k, False: 90.4k]
  ------------------
 4845|  2.83k|            return detail::unexpected_scan_error(
 4846|  2.83k|                scan_error::invalid_scanned_value,
 4847|  2.83k|                "Invalid encoding in scanned string_view");
 4848|  2.83k|        }
 4849|       |
 4850|  90.4k|        return SCN_MOVE(result);
  ------------------
  |  |  949|  90.4k|    static_cast<    \
  |  |  950|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  93.2k|    }
 4852|  93.2k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  93.2k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  93.2k|        else {
 4822|  93.2k|            return make_contiguous_buffer(
 4823|  93.2k|                ranges::subrange{range.begin(), result});
 4824|  93.2k|        }
 4825|  93.2k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.49k|    {
 5103|  2.49k|        auto it = read_source_impl(range, {specs});
 5104|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5105|  1.79k|            return unexpected(it.error());
 5106|  1.79k|        }
 5107|       |
 5108|    700|        return read_string_view_impl(range, *it, value);
 5109|  2.49k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    700|{
 4814|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    700|    auto src = [&]() {
 4817|    700|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    700|            return make_contiguous_buffer(
 4819|    700|                ranges::subrange{range.begin().base(), result.base()});
 4820|    700|        }
 4821|    700|        else {
 4822|    700|            return make_contiguous_buffer(
 4823|    700|                ranges::subrange{range.begin(), result});
 4824|    700|        }
 4825|    700|    }();
 4826|    700|    using src_type = decltype(src);
 4827|       |
 4828|    700|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    700|    else {
 4841|    700|        const auto view = src.view();
 4842|    700|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    700|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 700]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    700|        return SCN_MOVE(result);
  ------------------
  |  |  949|    700|    static_cast<    \
  |  |  950|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    700|    }
 4852|    700|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    700|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    700|        else {
 4822|    700|            return make_contiguous_buffer(
 4823|    700|                ranges::subrange{range.begin(), result});
 4824|    700|        }
 4825|    700|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   122k|{
 3066|   122k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 122k, False: 0]
  ------------------
 3067|   122k|        auto it = read_while_classic_space(range);
 3068|   122k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   122k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.46k, False: 120k]
  |  |  ------------------
  ------------------
 3070|  1.46k|            return unexpected(e);
 3071|  1.46k|        }
 3072|       |
 3073|   120k|        return it;
 3074|   122k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   122k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   122k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   122k|    else {
 2225|   122k|        auto it = range.begin();
 2226|       |
 2227|   122k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   122k|            auto seg = get_contiguous_beginning(range);
 2229|   122k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   122k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 13.0k, False: 109k]
  ------------------
 2231|  13.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  13.0k|            }
 2233|   109k|            ranges::advance(it, seg.size());
 2234|   109k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   122k|            return detail::is_cp_space(cp);
 2238|   122k|        });
 2239|   122k|    }
 2240|   122k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   483k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   483k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   483k|              else {
  749|   483k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   483k|              }
  751|   483k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   483k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   483k|        else if constexpr (std::is_object_v<T>) {
  688|   483k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   483k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   483k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   483k|            return detail::is_cp_space(cp);
 2238|   483k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   779k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   779k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   779k|        auto beg = r.begin();
  991|   779k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 779k, False: 0]
  ------------------
  992|   779k|            return false;
  993|   779k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   779k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  28.2k|    {
  763|  28.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.2k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  11.1k|        : m_fptr([](storage fn,
  743|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.1k|              cvref<T> obj = *get<T>(fn);
  745|  11.1k|              if constexpr (std::is_void_v<R>) {
  746|  11.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.1k|              }
  748|  11.1k|              else {
  749|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.1k|              }
  751|  11.1k|          }),
  752|  11.1k|          m_storage(std::addressof(f))
  753|  11.1k|    {
  754|  11.1k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  14.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  11.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.1k|        {
  662|  11.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   313k|    {
 6075|   313k|        const bool need_skipped_width =
 6076|   313k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 313k]
  |  Branch (6076:33): [True: 0, False: 313k]
  ------------------
 6077|   313k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   313k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 313k]
  ------------------
 6081|   313k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 313k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   313k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 313k, False: 0]
  |  Branch (6085:56): [True: 310k, False: 3.71k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   310k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 310k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   619k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 932, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    932|    }                                                  \
  |  |  |  | 3939|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   619k|                            make_eof_scan_error));
 6096|       |
 6097|   619k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 309k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   309k|            return result_type{it, 0};
 6105|   619k|        }
 6106|       |
 6107|  3.71k|        return result_type{rng.begin(), 0};
 6108|   313k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.71k|{
 2075|  3.71k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  3.71k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  3.71k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  3.71k|    else {
 2060|  3.71k|        auto first = range.begin();
 2061|  4.75k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.71k, False: 44]
  ------------------
 2062|  4.71k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 3.66k, False: 1.04k]
  ------------------
 2063|  3.66k|                return first;
 2064|  3.66k|            }
 2065|  4.71k|        }
 2066|     44|        return first;
 2067|  3.71k|    }
 2068|  3.71k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   306k|    {
  108|   306k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   306k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   306k|    {
   94|   306k|        iter_difference_t<I> counter{0};
   95|  8.89M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.58M, False: 306k]
  ------------------
   96|  8.58M|            ++i;
   97|  8.58M|            ++counter;
   98|  8.58M|        }
   99|   306k|        return counter;
  100|   306k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.23M|{
  951|  1.23M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.33k, False: 1.23M]
  |  |  ------------------
  ------------------
  952|  2.33k|        return eof_error::eof;
  953|  2.33k|    }
  954|  1.23M|    return eof_error::good;
  955|  1.23M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  24.5M|{
  945|  24.5M|    return is_range_eof(r.begin(), r.end());
  946|  24.5M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  24.5M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  24.5M|    {
  938|  24.5M|        return begin == end;
  939|  24.5M|    }
  940|  24.5M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   773k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   773k|    else {
 1788|   773k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  951|   773k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   773k|    }
 1790|   773k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   773k|    {
 1636|   773k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   773k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   773k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   773k|    {
 1720|   773k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   773k|                           ranges::common_range<Range>) {
 1737|   773k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   773k|            auto end_seg = range.end().contiguous_segment();
 1739|   773k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  880|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.54k, False: 769k]
  |  |  ------------------
  ------------------
 1740|   773k|                             detail::to_address(end_seg.end()))) {
 1741|  3.54k|                auto& str = m_storage.emplace();
 1742|  3.54k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.54k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.54k|                m_view = string_view_type{str};
 1745|  3.54k|                return;
 1746|  3.54k|            }
 1747|       |
 1748|   769k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   769k|                                                            end_seg.data());
 1750|   769k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   773k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.53M|    {
 1681|  1.53M|        return m_view;
 1682|  1.53M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   773k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   305k|    {
 6117|   305k|        const bool need_skipped_width =
 6118|   305k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 305k]
  |  Branch (6118:33): [True: 0, False: 305k]
  ------------------
 6119|   305k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   305k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 305k]
  ------------------
 6122|   305k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 305k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   305k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 305k, False: 0]
  ------------------
 6131|   305k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 94, False: 305k]
  ------------------
 6132|   305k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 94]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|     94|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 94]
  ------------------
 6134|     94|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   305k|        return result_type{rng.begin(), 0};
 6156|   305k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  46.6M|{
 1998|  46.6M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  46.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  46.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  46.6M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  46.6M|    auto it = range.begin();
 2002|  46.6M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  46.6M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  46.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 46.6M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  46.6M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 46.6M, False: 0]
  ------------------
 2011|  46.6M|        ++it;
 2012|  46.6M|        return {it, string_type(1, *range.begin())};
 2013|  46.6M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  46.6M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  49.1M|{
  945|  49.1M|    return is_range_eof(r.begin(), r.end());
  946|  49.1M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  49.1M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  49.1M|    {
  938|  49.1M|        return begin == end;
  939|  49.1M|    }
  940|  49.1M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  46.6M|    {
 1989|  46.6M|        return !codepoint.empty();
 1990|  46.6M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.47M|{
  951|  2.47M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 4.66k, False: 2.47M]
  |  |  ------------------
  ------------------
  952|  4.66k|        return eof_error::eof;
  953|  4.66k|    }
  954|  2.47M|    return eof_error::good;
  955|  2.47M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.54M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.54M|                  ranges::sized_range<Range>) {
 1785|  1.54M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.54M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.54M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.54M|    {
 1589|  1.54M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.31M|    {
 1602|  2.31M|        return sv;
 1603|  2.31M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.42k|{
 2075|  7.42k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  7.42k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  7.42k|{
 2056|  7.42k|    if constexpr (ranges::common_range<Range>) {
 2057|  7.42k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  7.42k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.54M|{
 3066|  1.54M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.54M, False: 0]
  ------------------
 3067|  1.54M|        auto it = read_while_classic_space(range);
 3068|  1.54M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.54M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.40k, False: 1.54M]
  |  |  ------------------
  ------------------
 3070|  2.40k|            return unexpected(e);
 3071|  2.40k|        }
 3072|       |
 3073|  1.54M|        return it;
 3074|  1.54M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.54M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.54M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.54M|    else {
 2225|  1.54M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.54M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.54M|            return detail::is_cp_space(cp);
 2238|  1.54M|        });
 2239|  1.54M|    }
 2240|  1.54M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.54M|{
 2181|  1.54M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.54M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.09M|{
 2160|  3.09M|    auto it = range.begin();
 2161|  46.6M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 46.6M, False: 12.6k]
  ------------------
 2162|  46.6M|        const auto val =
 2163|  46.6M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  46.6M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  46.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 46.6M, False: 0]
  |  |  ------------------
  ------------------
 2165|  46.6M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  46.6M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  46.6M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.08M, False: 43.5M]
  ------------------
 2168|  3.08M|                return it;
 2169|  3.08M|            }
 2170|  46.6M|        }
 2171|  43.5M|        it = val.iterator;
 2172|  43.5M|    }
 2173|       |
 2174|  12.6k|    return it;
 2175|  3.09M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.56M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.56M|              else {
  749|  3.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.56M|              }
  751|  3.56M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.56M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.56M|        else if constexpr (std::is_object_v<T>) {
  688|  3.56M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.56M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.56M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.56M|            return detail::is_cp_space(cp);
 2238|  3.56M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   767k|    {
 1686|   767k|        return m_storage.has_value();
 1687|   767k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.12k|    {
 1691|  1.12k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  945|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.12k|        return *m_storage;
 1693|  1.12k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  2.34M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   952k|    {
 3156|   952k|        reader_error_handler eh{};
 3157|   952k|        get_derived().check_specs_impl(specs, eh);
 3158|   952k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  880|   952k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 10.7k, False: 941k]
  |  |  ------------------
  ------------------
 3159|  10.7k|            return detail::unexpected_scan_error(
 3160|  10.7k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  10.7k|        }
 3162|   941k|        return {};
 3163|   952k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|   952k|    {
 3168|   952k|        return static_cast<Derived&>(*this);
 3169|   952k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   952k|    {
 5247|   952k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   952k|        SCN_GCC_PUSH
 5250|   952k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   952k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   952k|        SCN_CLANG_PUSH
 5254|   952k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   952k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   952k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 952k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 952k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   930k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 930k, False: 21.9k]
  ------------------
 5263|   930k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 930k]
  ------------------
 5264|   930k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 930k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   930k|                else {
 5268|   930k|                    m_type = reader_type::word;
 5269|   930k|                }
 5270|   930k|                break;
 5271|      0|            }
 5272|       |
 5273|  10.7k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 10.7k, False: 941k]
  ------------------
 5274|  10.7k|                m_type = reader_type::character;
 5275|  10.7k|                break;
 5276|       |
 5277|  11.1k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 11.1k, False: 941k]
  ------------------
 5278|  11.1k|                m_type = reader_type::character_set;
 5279|  11.1k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 952k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 952k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   952k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   952k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  3.25M|    {
 5296|  3.25M|        return m_type == reader_type::word;
 5297|  3.25M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.31M|{
 1242|  2.31M|    auto it = src.begin();
 1243|  63.7M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 61.4M, False: 2.29M]
  ------------------
 1244|  61.4M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  61.4M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 61.4M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  61.4M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 61.4M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  61.4M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  61.4M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  61.4M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 19.9k, False: 61.4M]
  ------------------
 1254|  19.9k|            return false;
 1255|  19.9k|        }
 1256|  61.4M|        it += len;
 1257|  61.4M|    }
 1258|  2.29M|    return true;
 1259|  2.31M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  11.1k|        {
 5144|  11.1k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 11.1k, False: 0]
  ------------------
 5145|  11.1k|                return {};
 5146|  11.1k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  8.87k|        {
 5117|  8.87k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  945|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  8.87k|            const auto val =
 5119|  8.87k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  8.87k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  8.87k|                    (val % 8)) &
 5122|  8.87k|                   1u;
 5123|  8.87k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  14.1k|        {
 5168|  14.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 5.26k, False: 8.87k]
  ------------------
 5169|  5.26k|                return false;
 5170|  5.26k|            }
 5171|       |
 5172|  8.87k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  14.1k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  11.1k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   773k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   773k|    else {
 2196|   773k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   773k|        return read_until_code_point(
 2208|   773k|            ranges::subrange{it, range.end()},
 2209|   773k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   773k|    }
 2211|   773k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.54M|{
 2160|  1.54M|    auto it = range.begin();
 2161|  23.3M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 23.3M, False: 6.33k]
  ------------------
 2162|  23.3M|        const auto val =
 2163|  23.3M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  23.3M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  23.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 23.3M, False: 0]
  |  |  ------------------
  ------------------
 2165|  23.3M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  23.3M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  23.3M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.54M, False: 21.7M]
  ------------------
 2168|  1.54M|                return it;
 2169|  1.54M|            }
 2170|  23.3M|        }
 2171|  21.7M|        it = val.iterator;
 2172|  21.7M|    }
 2173|       |
 2174|  6.33k|    return it;
 2175|  1.54M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  23.3M|{
 1998|  23.3M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  23.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  23.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  23.3M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  23.3M|    auto it = range.begin();
 2002|  23.3M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  23.3M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  23.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 23.3M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  23.3M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 23.3M, False: 0]
  ------------------
 2011|  23.3M|        ++it;
 2012|  23.3M|        return {it, string_type(1, *range.begin())};
 2013|  23.3M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  23.3M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  23.3M|    {
 1989|  23.3M|        return !codepoint.empty();
 1990|  23.3M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   773k|        : m_fptr([](storage fn,
  743|   773k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   773k|              cvref<T> obj = *get<T>(fn);
  745|   773k|              if constexpr (std::is_void_v<R>) {
  746|   773k|                  obj(static_cast<decltype(args)>(args)...);
  747|   773k|              }
  748|   773k|              else {
  749|   773k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   773k|              }
  751|   773k|          }),
  752|   773k|          m_storage(std::addressof(f))
  753|   773k|    {
  754|   773k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.5M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.5M|              else {
  749|  21.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.5M|              }
  751|  21.5M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.5M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.5M|        else if constexpr (std::is_object_v<T>) {
  688|  21.5M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.5M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  21.5M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   773k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   773k|        {
  662|   773k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  3.71k|    {
 5192|  3.71k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.71k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.71k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  3.71k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 3.71k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  3.71k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.71k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 3.71k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  3.71k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.71k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.71k|        };
 5215|       |
 5216|  3.71k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 3.71k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  3.71k|        auto it = read_while_code_unit(range, cb);
 5221|  3.71k|        return check_nonempty(it, range);
 5222|  3.71k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  3.71k|    {
 5228|  3.71k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.59k, False: 116]
  ------------------
 5229|  3.59k|            return detail::unexpected_scan_error(
 5230|  3.59k|                scan_error::invalid_scanned_value,
 5231|  3.59k|                "No characters matched in [character set]");
 5232|  3.59k|        }
 5233|       |
 5234|    116|        return it;
 5235|  3.71k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   774k|{
 2181|   774k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   774k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.71k|        : m_fptr([](storage fn,
  743|  3.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.71k|              cvref<T> obj = *get<T>(fn);
  745|  3.71k|              if constexpr (std::is_void_v<R>) {
  746|  3.71k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.71k|              }
  748|  3.71k|              else {
  749|  3.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.71k|              }
  751|  3.71k|          }),
  752|  3.71k|          m_storage(std::addressof(f))
  753|  3.71k|    {
  754|  3.71k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.71k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.71k|              else {
  749|  4.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.71k|              }
  751|  4.71k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.71k|    {
  684|  4.71k|        if constexpr (std::is_const_v<T>) {
  685|  4.71k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.71k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  4.71k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.71k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.71k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.71k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.71k|        {
  667|  3.71k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.54M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.54M|    else {
 2196|  1.54M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.54M|        return read_until_code_point(
 2208|  1.54M|            ranges::subrange{it, range.end()},
 2209|  1.54M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.54M|    }
 2211|  1.54M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  43.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.1M|              else {
  749|  43.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1M|              }
  751|  43.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  43.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.1M|        else if constexpr (std::is_object_v<T>) {
  688|  43.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.1M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  43.1M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  7.42k|    {
 5192|  7.42k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  7.42k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  7.42k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  7.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  7.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 7.42k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  7.42k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  7.42k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 7.42k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  7.42k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.42k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.42k|        };
 5215|       |
 5216|  7.42k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 7.42k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  7.42k|        auto it = read_while_code_unit(range, cb);
 5221|  7.42k|        return check_nonempty(it, range);
 5222|  7.42k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  7.42k|    {
 5228|  7.42k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 7.19k, False: 232]
  ------------------
 5229|  7.19k|            return detail::unexpected_scan_error(
 5230|  7.19k|                scan_error::invalid_scanned_value,
 5231|  7.19k|                "No characters matched in [character set]");
 5232|  7.19k|        }
 5233|       |
 5234|    232|        return it;
 5235|  7.42k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.42k|        : m_fptr([](storage fn,
  743|  7.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.42k|              cvref<T> obj = *get<T>(fn);
  745|  7.42k|              if constexpr (std::is_void_v<R>) {
  746|  7.42k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.42k|              }
  748|  7.42k|              else {
  749|  7.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.42k|              }
  751|  7.42k|          }),
  752|  7.42k|          m_storage(std::addressof(f))
  753|  7.42k|    {
  754|  7.42k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.42k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.42k|              else {
  749|  9.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.42k|              }
  751|  9.42k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.42k|    {
  684|  9.42k|        if constexpr (std::is_const_v<T>) {
  685|  9.42k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.42k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  9.42k|        const auto cb = [&](SourceCharT ch) {
 5213|  9.42k|            return cb_wrapper.on_ascii_only(ch);
 5214|  9.42k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.42k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.42k|        {
  667|  7.42k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   317k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   317k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   317k|            auto rd = make_reader<T, char_type>();
 6237|   317k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   317k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 3.59k, False: 313k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.59k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.59k|    }
  ------------------
 6238|       |
 6239|   313k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 313k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   313k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   313k|                return impl(rd, range, value);
 6242|   313k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   317k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.56M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.56M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.56M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.56M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|   313k|    {
 6162|   313k|        const bool need_skipped_width =
 6163|   313k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 313k]
  |  Branch (6163:33): [True: 0, False: 313k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   313k|        auto it = rng.begin();
 6167|   313k|        std::ptrdiff_t prefix_width = 0;
 6168|   313k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 313k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   313k|        else {
 6176|   313k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 932, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    932|    }                                                  \
  |  |  |  | 3939|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   312k|            std::tie(it, prefix_width) = prefix_result;
 6178|   312k|        }
 6179|   312k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   312k|        std::ptrdiff_t value_width = 0;
 6183|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 312k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   312k|        else {
 6199|   312k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 6.26k, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.26k|    }                                                  \
  |  | 3939|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   306k|                                             specs, value, loc));
 6201|       |
 6202|   306k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 306k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   306k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   306k|        std::ptrdiff_t postfix_width = 0;
 6211|   306k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 305k, False: 774]
  ------------------
 6212|   305k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   305k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   305k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   305k|                                 value_width));
 6216|   305k|            std::tie(it, postfix_width) = postfix_result;
 6217|   305k|        }
 6218|       |
 6219|   306k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   306k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   306k|            specs, prefix_width, value_width, postfix_width));
 6221|   306k|        return it;
 6222|   306k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   766k|{
 3108|   766k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   766k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.12k, False: 765k]
  ------------------
 3110|  1.12k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  949|  1.12k|    static_cast<    \
  |  |  950|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.12k|        }
 3112|   765k|        else {
 3113|   765k|            dest.assign(source.view());
 3114|   765k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   766k|    return {};
 3121|   766k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   312k|    {
 5314|   312k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   312k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   312k|        return read_impl(range, specs, value);
 5316|   312k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   312k|    {
 5332|   312k|        SCN_CLANG_PUSH
 5333|   312k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   312k|        switch (m_type) {
 5336|   309k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 309k, False: 3.71k]
  ------------------
 5337|   309k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 312k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 312k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.71k, False: 309k]
  ------------------
 5347|  3.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.71k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 312k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 312k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 312k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   312k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   312k|        }
 5368|       |
 5369|   312k|        SCN_CLANG_POP
 5370|   312k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   773k|    {
 4861|   773k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   773k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   773k|{
 4795|   773k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   773k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   773k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.66k, False: 766k]
  ------------------
 4799|  6.66k|        return detail::unexpected_scan_error(
 4800|  6.66k|            scan_error::invalid_scanned_value,
 4801|  6.66k|            "Invalid encoding in scanned string");
 4802|  6.66k|    }
 4803|       |
 4804|   766k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   766k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 766k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   766k|    return SCN_MOVE(result);
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   766k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  3.71k|    {
 5089|  3.71k|        auto it = read_source_impl(range, {specs});
 5090|  3.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 116]
  |  |  ------------------
  ------------------
 5091|  3.59k|            return unexpected(it.error());
 5092|  3.59k|        }
 5093|       |
 5094|    116|        return read_string_impl(range, *it, value);
 5095|  3.71k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    116|{
 4795|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 116]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    116|    return SCN_MOVE(result);
  ------------------
  |  |  949|    116|    static_cast<    \
  |  |  950|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    116|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   312k|    {
 5314|   312k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   312k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   312k|        return read_impl(range, specs, value);
 5316|   312k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   312k|    {
 5332|   312k|        SCN_CLANG_PUSH
 5333|   312k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   312k|        switch (m_type) {
 5336|   309k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 309k, False: 3.71k]
  ------------------
 5337|   309k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 312k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 312k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.71k, False: 309k]
  ------------------
 5347|  3.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.71k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 312k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 312k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 312k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   312k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   312k|        }
 5368|       |
 5369|   312k|        SCN_CLANG_POP
 5370|   312k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   773k|    {
 4861|   773k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   773k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   773k|{
 4795|   773k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   773k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   773k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.66k, False: 766k]
  ------------------
 4799|  6.66k|        return detail::unexpected_scan_error(
 4800|  6.66k|            scan_error::invalid_scanned_value,
 4801|  6.66k|            "Invalid encoding in scanned string");
 4802|  6.66k|    }
 4803|       |
 4804|   766k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   766k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 766k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   766k|    return SCN_MOVE(result);
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   766k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   766k|{
 3128|   766k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   766k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   766k|    return {};
 3136|   766k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  3.71k|    {
 5089|  3.71k|        auto it = read_source_impl(range, {specs});
 5090|  3.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 116]
  |  |  ------------------
  ------------------
 5091|  3.59k|            return unexpected(it.error());
 5092|  3.59k|        }
 5093|       |
 5094|    116|        return read_string_impl(range, *it, value);
 5095|  3.71k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    116|{
 4795|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 116]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    116|    return SCN_MOVE(result);
  ------------------
  |  |  949|    116|    static_cast<    \
  |  |  950|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    116|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   782k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   782k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   782k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   782k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   312k|    {
 5314|   312k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   312k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   312k|        return read_impl(range, specs, value);
 5316|   312k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   312k|    {
 5332|   312k|        SCN_CLANG_PUSH
 5333|   312k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   312k|        switch (m_type) {
 5336|   309k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 309k, False: 3.71k]
  ------------------
 5337|   309k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 312k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 312k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.71k, False: 309k]
  ------------------
 5347|  3.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.71k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 312k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 312k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 312k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   312k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   312k|        }
 5368|       |
 5369|   312k|        SCN_CLANG_POP
 5370|   312k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   773k|    {
 4868|   773k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   773k|                                     value);
 4870|   773k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   773k|{
 4814|   773k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   773k|    auto src = [&]() {
 4817|   773k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   773k|            return make_contiguous_buffer(
 4819|   773k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   773k|        }
 4821|   773k|        else {
 4822|   773k|            return make_contiguous_buffer(
 4823|   773k|                ranges::subrange{range.begin(), result});
 4824|   773k|        }
 4825|   773k|    }();
 4826|   773k|    using src_type = decltype(src);
 4827|       |
 4828|   773k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   773k|    else {
 4841|   773k|        const auto view = src.view();
 4842|   773k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   773k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6.66k, False: 766k]
  ------------------
 4845|  6.66k|            return detail::unexpected_scan_error(
 4846|  6.66k|                scan_error::invalid_scanned_value,
 4847|  6.66k|                "Invalid encoding in scanned string_view");
 4848|  6.66k|        }
 4849|       |
 4850|   766k|        return SCN_MOVE(result);
  ------------------
  |  |  949|   766k|    static_cast<    \
  |  |  950|   766k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   773k|    }
 4852|   773k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   773k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   773k|        else {
 4822|   773k|            return make_contiguous_buffer(
 4823|   773k|                ranges::subrange{range.begin(), result});
 4824|   773k|        }
 4825|   773k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  3.71k|    {
 5103|  3.71k|        auto it = read_source_impl(range, {specs});
 5104|  3.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.59k, False: 116]
  |  |  ------------------
  ------------------
 5105|  3.59k|            return unexpected(it.error());
 5106|  3.59k|        }
 5107|       |
 5108|    116|        return read_string_view_impl(range, *it, value);
 5109|  3.71k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    116|{
 4814|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    116|    auto src = [&]() {
 4817|    116|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    116|            return make_contiguous_buffer(
 4819|    116|                ranges::subrange{range.begin().base(), result.base()});
 4820|    116|        }
 4821|    116|        else {
 4822|    116|            return make_contiguous_buffer(
 4823|    116|                ranges::subrange{range.begin(), result});
 4824|    116|        }
 4825|    116|    }();
 4826|    116|    using src_type = decltype(src);
 4827|       |
 4828|    116|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    116|    else {
 4841|    116|        const auto view = src.view();
 4842|    116|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    116|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 116]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    116|        return SCN_MOVE(result);
  ------------------
  |  |  949|    116|    static_cast<    \
  |  |  950|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    116|    }
 4852|    116|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    116|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    116|        else {
 4822|    116|            return make_contiguous_buffer(
 4823|    116|                ranges::subrange{range.begin(), result});
 4824|    116|        }
 4825|    116|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   774k|{
 3066|   774k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 774k, False: 0]
  ------------------
 3067|   774k|        auto it = read_while_classic_space(range);
 3068|   774k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   774k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.20k, False: 773k]
  |  |  ------------------
  ------------------
 3070|  1.20k|            return unexpected(e);
 3071|  1.20k|        }
 3072|       |
 3073|   773k|        return it;
 3074|   774k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   774k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   774k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   774k|    else {
 2225|   774k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   774k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   774k|            return detail::is_cp_space(cp);
 2238|   774k|        });
 2239|   774k|    }
 2240|   774k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   774k|        : m_fptr([](storage fn,
  743|   774k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   774k|              cvref<T> obj = *get<T>(fn);
  745|   774k|              if constexpr (std::is_void_v<R>) {
  746|   774k|                  obj(static_cast<decltype(args)>(args)...);
  747|   774k|              }
  748|   774k|              else {
  749|   774k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   774k|              }
  751|   774k|          }),
  752|   774k|          m_storage(std::addressof(f))
  753|   774k|    {
  754|   774k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78M|              else {
  749|  1.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78M|              }
  751|  1.78M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78M|        else if constexpr (std::is_object_v<T>) {
  688|  1.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.78M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.78M|            return detail::is_cp_space(cp);
 2238|  1.78M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   774k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   774k|        {
  662|   774k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   113k|{
 5835|   113k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.15k, False: 112k]
  |  |  ------------------
  ------------------
 5836|  1.15k|        return unexpected(e);
 5837|  1.15k|    }
 5838|       |
 5839|   112k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 112k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   112k|    return skip_classic_whitespace(range);
 5844|   112k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  56.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  56.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  56.9k|            auto rd = make_reader<T, char_type>();
 5916|  56.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  56.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  56.9k|    {
 5903|  56.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  56.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 999, False: 55.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    999|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    999|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    999|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    999|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    999|    }                                                  \
  |  |  |  | 3939|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  55.9k|                        .transform_error(make_eof_scan_error));
 5905|  55.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  56.9k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  55.9k|    {
 5303|  55.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  55.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  55.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  55.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  56.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  56.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  56.9k|            auto rd = make_reader<T, char_type>();
 5916|  56.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  56.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  56.9k|    {
 5903|  56.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  56.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 999, False: 55.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    999|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    999|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    999|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    999|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    999|    }                                                  \
  |  |  |  | 3939|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  55.9k|                        .transform_error(make_eof_scan_error));
 5905|  55.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  56.9k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  55.9k|    {
 5303|  55.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  55.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  55.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  55.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  73.0k|{
 5835|  73.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 738, False: 72.2k]
  |  |  ------------------
  ------------------
 5836|    738|        return unexpected(e);
 5837|    738|    }
 5838|       |
 5839|  72.2k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 72.2k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  72.2k|    return skip_classic_whitespace(range);
 5844|  72.2k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  73.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  73.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  73.0k|            auto rd = make_reader<T, char_type>();
 5920|  73.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 73.0k, False: 0]
  ------------------
 5921|  73.0k|                return impl(rd, range, value);
 5922|  73.0k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  73.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  73.0k|    {
 5903|  73.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  73.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.24k, False: 71.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.24k|    }                                                  \
  |  |  |  | 3939|  73.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  71.7k|                        .transform_error(make_eof_scan_error));
 5905|  71.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  73.0k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  71.7k|    {
 5303|  71.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  71.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  71.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  71.7k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  91.7k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  949|  91.7k|    static_cast<    \
  |  |  950|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  91.7k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  91.7k|          m_current(m_range.begin())
 2988|  91.7k|    {
 2989|  91.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   158k|    {
 2998|   158k|        return m_range.end();
 2999|   158k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  73.7k|    {
 3013|  73.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  945|  73.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  73.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  73.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  73.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 73.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  73.7k|        }
 3019|  73.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|  73.7k|    static_cast<    \
  |  |  950|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  73.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  84.5k|    {
 3003|  84.5k|        return ranges::subrange{begin(), end()};
 3004|  84.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  80.9k|    {
 6075|  80.9k|        const bool need_skipped_width =
 6076|  80.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 80.9k]
  |  Branch (6076:33): [True: 0, False: 80.9k]
  ------------------
 6077|  80.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  80.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 80.9k]
  ------------------
 6081|  80.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 80.9k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  80.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 80.9k, False: 0]
  |  Branch (6085:56): [True: 75.9k, False: 4.99k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  75.9k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 75.9k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   150k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.33k, False: 74.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.33k|    }                                                  \
  |  |  |  | 3939|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   150k|                            make_eof_scan_error));
 6096|       |
 6097|   150k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 74.5k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  74.5k|            return result_type{it, 0};
 6105|   150k|        }
 6106|       |
 6107|  4.99k|        return result_type{rng.begin(), 0};
 6108|  80.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  72.8k|    {
 6117|  72.8k|        const bool need_skipped_width =
 6118|  72.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 72.8k]
  |  Branch (6118:33): [True: 0, False: 72.8k]
  ------------------
 6119|  72.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  72.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.8k]
  ------------------
 6122|  72.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 72.8k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  72.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 72.8k, False: 0]
  ------------------
 6131|  72.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.32k, False: 71.5k]
  ------------------
 6132|  72.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.32k]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|  1.32k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 1.32k]
  ------------------
 6134|  1.32k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  72.8k|        return result_type{rng.begin(), 0};
 6156|  72.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  42.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  42.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  42.2k|            auto rd = make_reader<T, char_type>();
 6232|  42.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  42.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 1.79k, False: 40.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.79k|    }
  ------------------
 6233|  40.4k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  42.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  40.4k|    {
 6162|  40.4k|        const bool need_skipped_width =
 6163|  40.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 40.4k]
  |  Branch (6163:33): [True: 0, False: 40.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  40.4k|        auto it = rng.begin();
 6167|  40.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  40.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 40.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  40.4k|        else {
 6176|  40.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  40.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  40.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  40.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 666, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    666|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    666|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    666|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    666|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    666|    }                                                  \
  |  |  |  | 3939|  40.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  39.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  39.7k|        }
 6179|  39.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  39.7k|        std::ptrdiff_t value_width = 0;
 6183|  39.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 39.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  39.7k|        else {
 6199|  39.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 2.93k, False: 36.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.93k|    }                                                  \
  |  | 3939|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  36.8k|                                             specs, value, loc));
 6201|       |
 6202|  36.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 36.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  36.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  36.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  36.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 36.4k, False: 424]
  ------------------
 6212|  36.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 36.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  36.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  36.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  36.4k|                                 value_width));
 6216|  36.4k|            std::tie(it, postfix_width) = postfix_result;
 6217|  36.4k|        }
 6218|       |
 6219|  36.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  36.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 36.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  36.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  36.8k|        return it;
 6222|  36.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  42.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  42.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  42.2k|            auto rd = make_reader<T, char_type>();
 6232|  42.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  42.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 1.79k, False: 40.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.79k|    }
  ------------------
 6233|  40.4k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  42.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  40.4k|    {
 6162|  40.4k|        const bool need_skipped_width =
 6163|  40.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 40.4k]
  |  Branch (6163:33): [True: 0, False: 40.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  40.4k|        auto it = rng.begin();
 6167|  40.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  40.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 40.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  40.4k|        else {
 6176|  40.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  40.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  40.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  40.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 666, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    666|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    666|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    666|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    666|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    666|    }                                                  \
  |  |  |  | 3939|  40.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  39.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  39.7k|        }
 6179|  39.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  39.7k|        std::ptrdiff_t value_width = 0;
 6183|  39.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 39.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  39.7k|        else {
 6199|  39.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 2.93k, False: 36.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.93k|    }                                                  \
  |  | 3939|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  36.8k|                                             specs, value, loc));
 6201|       |
 6202|  36.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 36.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  36.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  36.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  36.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 36.4k, False: 424]
  ------------------
 6212|  36.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 36.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  36.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  36.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  36.4k|                                 value_width));
 6216|  36.4k|            std::tie(it, postfix_width) = postfix_result;
 6217|  36.4k|        }
 6218|       |
 6219|  36.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  36.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 36.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  36.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  36.8k|        return it;
 6222|  36.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   930k|{
 5835|   930k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.25k, False: 928k]
  |  |  ------------------
  ------------------
 5836|  2.25k|        return unexpected(e);
 5837|  2.25k|    }
 5838|       |
 5839|   928k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 928k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   928k|    return skip_classic_whitespace(range);
 5844|   928k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   465k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   465k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   465k|            auto rd = make_reader<T, char_type>();
 5916|   465k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   465k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   465k|    {
 5903|   465k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.39k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   463k|                        .transform_error(make_eof_scan_error));
 5905|   463k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   465k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   463k|    {
 5303|   463k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   463k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   463k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   463k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   465k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   465k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   465k|            auto rd = make_reader<T, char_type>();
 5916|   465k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   465k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   465k|    {
 5903|   465k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.39k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   463k|                        .transform_error(make_eof_scan_error));
 5905|   463k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   465k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   463k|    {
 5303|   463k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   463k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   463k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   463k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   649k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  949|   649k|    static_cast<    \
  |  |  950|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   649k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   649k|          m_current(m_range.begin())
 2988|   649k|    {
 2989|   649k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  1.24M|    {
 2998|  1.24M|        return m_range.end();
 2999|  1.24M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   613k|    {
 3013|   613k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  945|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   613k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   613k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 613k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   613k|        }
 3019|   613k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   613k|    static_cast<    \
  |  |  950|   613k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   613k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   634k|    {
 3003|   634k|        return ranges::subrange{begin(), end()};
 3004|   634k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   627k|    {
 6075|   627k|        const bool need_skipped_width =
 6076|   627k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 627k]
  |  Branch (6076:33): [True: 0, False: 627k]
  ------------------
 6077|   627k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   627k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 627k]
  ------------------
 6081|   627k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 627k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   627k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 627k, False: 0]
  |  Branch (6085:56): [True: 620k, False: 7.42k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   620k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 620k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.23M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   620k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.86k, False: 618k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.86k|    }                                                  \
  |  |  |  | 3939|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.23M|                            make_eof_scan_error));
 6096|       |
 6097|  1.23M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 618k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   618k|            return result_type{it, 0};
 6105|  1.23M|        }
 6106|       |
 6107|  7.42k|        return result_type{rng.begin(), 0};
 6108|   627k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   611k|    {
 6117|   611k|        const bool need_skipped_width =
 6118|   611k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 611k]
  |  Branch (6118:33): [True: 0, False: 611k]
  ------------------
 6119|   611k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   611k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 611k]
  ------------------
 6122|   611k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 611k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   611k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 611k, False: 0]
  ------------------
 6131|   611k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 188, False: 611k]
  ------------------
 6132|   611k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 188]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    188|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 188]
  ------------------
 6134|    188|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   611k|        return result_type{rng.begin(), 0};
 6156|   611k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   317k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   317k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   317k|            auto rd = make_reader<T, char_type>();
 6232|   317k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   317k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 3.59k, False: 313k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.59k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.59k|    }
  ------------------
 6233|   313k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   317k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|   313k|    {
 6162|   313k|        const bool need_skipped_width =
 6163|   313k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 313k]
  |  Branch (6163:33): [True: 0, False: 313k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   313k|        auto it = rng.begin();
 6167|   313k|        std::ptrdiff_t prefix_width = 0;
 6168|   313k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 313k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   313k|        else {
 6176|   313k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 932, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    932|    }                                                  \
  |  |  |  | 3939|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   312k|            std::tie(it, prefix_width) = prefix_result;
 6178|   312k|        }
 6179|   312k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   312k|        std::ptrdiff_t value_width = 0;
 6183|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 312k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   312k|        else {
 6199|   312k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 6.26k, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.26k|    }                                                  \
  |  | 3939|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   306k|                                             specs, value, loc));
 6201|       |
 6202|   306k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 306k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   306k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   306k|        std::ptrdiff_t postfix_width = 0;
 6211|   306k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 305k, False: 774]
  ------------------
 6212|   305k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   305k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   305k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   305k|                                 value_width));
 6216|   305k|            std::tie(it, postfix_width) = postfix_result;
 6217|   305k|        }
 6218|       |
 6219|   306k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   306k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   306k|            specs, prefix_width, value_width, postfix_width));
 6221|   306k|        return it;
 6222|   306k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   317k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   317k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   317k|            auto rd = make_reader<T, char_type>();
 6232|   317k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   317k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 3.59k, False: 313k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.59k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.59k|    }
  ------------------
 6233|   313k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   317k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|   313k|    {
 6162|   313k|        const bool need_skipped_width =
 6163|   313k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 313k]
  |  Branch (6163:33): [True: 0, False: 313k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   313k|        auto it = rng.begin();
 6167|   313k|        std::ptrdiff_t prefix_width = 0;
 6168|   313k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 313k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   313k|        else {
 6176|   313k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 932, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    932|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    932|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    932|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    932|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    932|    }                                                  \
  |  |  |  | 3939|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   312k|            std::tie(it, prefix_width) = prefix_result;
 6178|   312k|        }
 6179|   312k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   312k|        std::ptrdiff_t value_width = 0;
 6183|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 312k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   312k|        else {
 6199|   312k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 6.26k, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.26k|    }                                                  \
  |  | 3939|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   306k|                                             specs, value, loc));
 6201|       |
 6202|   306k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 306k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   306k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   306k|        std::ptrdiff_t postfix_width = 0;
 6211|   306k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 305k, False: 774]
  ------------------
 6212|   305k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   305k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   305k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   305k|                                 value_width));
 6216|   305k|            std::tie(it, postfix_width) = postfix_result;
 6217|   305k|        }
 6218|       |
 6219|   306k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   306k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   306k|            specs, prefix_width, value_width, postfix_width));
 6221|   306k|        return it;
 6222|   306k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   465k|{
 5835|   465k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.12k, False: 464k]
  |  |  ------------------
  ------------------
 5836|  1.12k|        return unexpected(e);
 5837|  1.12k|    }
 5838|       |
 5839|   464k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 464k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   464k|    return skip_classic_whitespace(range);
 5844|   464k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   465k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   465k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   465k|            auto rd = make_reader<T, char_type>();
 5920|   465k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 465k, False: 0]
  ------------------
 5921|   465k|                return impl(rd, range, value);
 5922|   465k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   465k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   465k|    {
 5903|   465k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.39k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   463k|                        .transform_error(make_eof_scan_error));
 5905|   463k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   465k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   463k|    {
 5303|   463k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   463k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   463k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   463k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    899|{
   53|    899|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  945|    899|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|    899|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    899|    string_buffer.resize(size);
   57|    899|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    899|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    899|    const auto wsv_reinterpret_size =
   62|    899|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 153, False: 746]
  ------------------
   63|    899|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    899|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    899|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    899|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    899|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    899|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    899|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    899|{
  123|    899|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    899|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    899|    buf.resize(sizeof...(Args));
  126|    899|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    899|    return buf;
  128|    899|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    899|{
  109|    899|    if constexpr (std::is_same_v<CharT, char>) {
  110|    899|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    899|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    899|{
  186|    899|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    899|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    899|                                   format_strings);
  189|    899|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    899|{
  134|       |    // Regular scan
  135|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.39k, False: 899]
  ------------------
  136|  5.39k|        auto it = scn::ranges::begin(source);
  137|  41.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  41.9k|            auto result = scn::scan<T>(
  140|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  41.9k|                scn::runtime_format(f));
  142|  41.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.39k, False: 36.5k]
  ------------------
  143|  5.39k|                break;
  144|  5.39k|            }
  145|  36.5k|            it = result->begin();
  146|  36.5k|        }
  147|  5.39k|    }
  148|       |
  149|       |    // scan localized
  150|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.39k, False: 899]
  ------------------
  151|  5.39k|        auto it = scn::ranges::begin(source);
  152|  41.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  41.9k|            auto result = scn::scan<T>(
  155|  41.9k|                global_locale,
  156|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  41.9k|                scn::runtime_format(f));
  158|  41.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.39k, False: 36.5k]
  ------------------
  159|  5.39k|                break;
  160|  5.39k|            }
  161|  36.5k|            it = result->begin();
  162|  36.5k|        }
  163|  5.39k|    }
  164|       |
  165|       |    // scan_value
  166|    899|    {
  167|    899|        auto it = scn::ranges::begin(source);
  168|  18.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.9k|            auto result = scn::scan_value<T>(
  171|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 899, False: 18.0k]
  ------------------
  173|    899|                break;
  174|    899|            }
  175|  18.0k|            it = result->begin();
  176|  18.0k|        }
  177|    899|    }
  178|    899|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    899|{
  134|       |    // Regular scan
  135|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.39k, False: 899]
  ------------------
  136|  5.39k|        auto it = scn::ranges::begin(source);
  137|  41.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  41.9k|            auto result = scn::scan<T>(
  140|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  41.9k|                scn::runtime_format(f));
  142|  41.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.39k, False: 36.5k]
  ------------------
  143|  5.39k|                break;
  144|  5.39k|            }
  145|  36.5k|            it = result->begin();
  146|  36.5k|        }
  147|  5.39k|    }
  148|       |
  149|       |    // scan localized
  150|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.39k, False: 899]
  ------------------
  151|  5.39k|        auto it = scn::ranges::begin(source);
  152|  41.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  41.9k|            auto result = scn::scan<T>(
  155|  41.9k|                global_locale,
  156|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  41.9k|                scn::runtime_format(f));
  158|  41.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.39k, False: 36.5k]
  ------------------
  159|  5.39k|                break;
  160|  5.39k|            }
  161|  36.5k|            it = result->begin();
  162|  36.5k|        }
  163|  5.39k|    }
  164|       |
  165|       |    // scan_value
  166|    899|    {
  167|    899|        auto it = scn::ranges::begin(source);
  168|  18.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.9k|            auto result = scn::scan_value<T>(
  171|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 899, False: 18.0k]
  ------------------
  173|    899|                break;
  174|    899|            }
  175|  18.0k|            it = result->begin();
  176|  18.0k|        }
  177|    899|    }
  178|    899|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    899|{
  134|       |    // Regular scan
  135|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.39k, False: 899]
  ------------------
  136|  5.39k|        auto it = scn::ranges::begin(source);
  137|  53.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  53.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  53.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  53.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  53.1k|            auto result = scn::scan<T>(
  140|  53.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  53.1k|                scn::runtime_format(f));
  142|  53.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.39k, False: 47.8k]
  ------------------
  143|  5.39k|                break;
  144|  5.39k|            }
  145|  47.8k|            it = result->begin();
  146|  47.8k|        }
  147|  5.39k|    }
  148|       |
  149|       |    // scan localized
  150|  5.39k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.39k, False: 899]
  ------------------
  151|  5.39k|        auto it = scn::ranges::begin(source);
  152|  53.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  53.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  53.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  53.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  53.1k|            auto result = scn::scan<T>(
  155|  53.1k|                global_locale,
  156|  53.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  53.1k|                scn::runtime_format(f));
  158|  53.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.39k, False: 47.8k]
  ------------------
  159|  5.39k|                break;
  160|  5.39k|            }
  161|  47.8k|            it = result->begin();
  162|  47.8k|        }
  163|  5.39k|    }
  164|       |
  165|       |    // scan_value
  166|    899|    {
  167|    899|        auto it = scn::ranges::begin(source);
  168|  24.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  24.3k|            auto result = scn::scan_value<T>(
  171|  24.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  24.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 899, False: 23.4k]
  ------------------
  173|    899|                break;
  174|    899|            }
  175|  23.4k|            it = result->begin();
  176|  23.4k|        }
  177|    899|    }
  178|    899|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    899|{
   91|    899|    using char_type = ranges::range_value_t<Source>;
   92|    899|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    899|    deque.clear();
   94|    899|    std::copy(ranges::begin(source), ranges::end(source),
   95|    899|              std::back_inserter(deque));
   96|    899|    return deque;
   97|    899|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    899|{
   80|    899|    if constexpr (std::is_same_v<CharT, char>) {
   81|    899|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    899|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    899|{
  123|    899|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    899|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    899|    buf.resize(sizeof...(Args));
  126|    899|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    899|    return buf;
  128|    899|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    899|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    899|    else {
  113|    899|        return wformat_string_view_buffer;
  114|    899|    }
  115|    899|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.79k|{
  186|  1.79k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.79k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.79k|                                   format_strings);
  189|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   317k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   317k|            auto result = scn::scan<T>(
  140|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   317k|                scn::runtime_format(f));
  142|   317k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 306k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   306k|            it = result->begin();
  146|   306k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   317k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   317k|            auto result = scn::scan<T>(
  155|   317k|                global_locale,
  156|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   317k|                scn::runtime_format(f));
  158|   317k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 306k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   306k|            it = result->begin();
  162|   306k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   155k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   155k|            auto result = scn::scan_value<T>(
  171|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   155k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 153k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   153k|            it = result->begin();
  176|   153k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   317k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   317k|            auto result = scn::scan<T>(
  140|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   317k|                scn::runtime_format(f));
  142|   317k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 306k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   306k|            it = result->begin();
  146|   306k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   317k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   317k|            auto result = scn::scan<T>(
  155|   317k|                global_locale,
  156|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   317k|                scn::runtime_format(f));
  158|   317k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 306k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   306k|            it = result->begin();
  162|   306k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   155k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   155k|            auto result = scn::scan_value<T>(
  171|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   155k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 153k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   153k|            it = result->begin();
  176|   153k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   317k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   317k|            auto result = scn::scan<T>(
  140|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   317k|                scn::runtime_format(f));
  142|   317k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 306k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   306k|            it = result->begin();
  146|   306k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   317k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   317k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   317k|            auto result = scn::scan<T>(
  155|   317k|                global_locale,
  156|   317k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   317k|                scn::runtime_format(f));
  158|   317k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 306k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   306k|            it = result->begin();
  162|   306k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   155k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   155k|            auto result = scn::scan_value<T>(
  171|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   155k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 153k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   153k|            it = result->begin();
  176|   153k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.79k|{
   91|  1.79k|    using char_type = ranges::range_value_t<Source>;
   92|  1.79k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.79k|    deque.clear();
   94|  1.79k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.79k|              std::back_inserter(deque));
   96|  1.79k|    return deque;
   97|  1.79k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.79k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.79k|    else {
   84|  1.79k|        return wnoncontiguous_buffer;
   85|  1.79k|    }
   86|  1.79k|}

LLVMFuzzerTestOneInput:
   57|    900|{
   58|    900|    scn::fuzz::run(data, size);
   59|    900|    return 0;
   60|    900|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    900|{
   36|    900|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 899]
  |  Branch (36:35): [True: 0, False: 899]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    899|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    899|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    899|                                             "{:64U}", "{:[A-Za-z]}");
   44|    899|    do_basic_run(sv, f);
   45|       |
   46|    899|    const auto& wf = get_format_strings<wchar_t>(
   47|    899|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    899|    do_basic_run(wsv_reinterpret, wf);
   49|    899|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 899, False: 0]
  ------------------
   50|    899|        do_basic_run(wsv_transcode, wf);
   51|    899|    }
   52|    899|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    899|{
   25|    899|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    899|                                                           format_strings);
   27|    899|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    899|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    899|            source, format_strings);
   30|    899|    }
   31|    899|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    899|{
   25|    899|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    899|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    899|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.79k|{
   25|  1.79k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.79k|                                                           format_strings);
   27|  1.79k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.79k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.79k|            source, format_strings);
   30|  1.79k|    }
   31|  1.79k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.79k|{
   25|  1.79k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.79k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.79k|}

