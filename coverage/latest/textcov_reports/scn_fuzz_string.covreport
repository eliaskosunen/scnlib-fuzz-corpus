_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  5.45M|{
 3807|  5.45M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  5.45M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  5.45M|    }
 3810|  5.45M|    else if constexpr (sizeof(U) == 2) {
 3811|  5.45M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  5.45M|    }
 3813|  5.45M|    else {
 3814|       |        // utf-32
 3815|  5.45M|        static_assert(sizeof(U) == 4);
 3816|  5.45M|        SCN_UNUSED(ch);
 3817|  5.45M|        return 1;
 3818|  5.45M|    }
 3819|  5.45M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  5.45M|{
 3771|  5.45M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  5.45M|    SCN_GCC_COMPAT_PUSH
 3774|  5.45M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  5.45M|    constexpr char lengths[] =
 3776|  5.45M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  5.45M|        "\1\1\1\1\1\1\1\1"
 3778|  5.45M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  5.45M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  5.45M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  5.45M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  5.45M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  5.45M|    SCN_GCC_COMPAT_POP
 3785|  5.45M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  5.27M|{
 4013|  5.27M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  5.27M|        return decode_utf8_code_point_exhaustive(input);
 4015|  5.27M|    }
 4016|  5.27M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  5.27M|        return decode_utf16_code_point_exhaustive(input);
 4018|  5.27M|    }
 4019|  5.27M|    else {
 4020|  5.27M|        SCN_EXPECT(input.size() == 1);
 4021|  5.27M|        auto cp = static_cast<char32_t>(input.front());
 4022|  5.27M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  5.27M|            return invalid_code_point;
 4024|  5.27M|        }
 4025|  5.27M|        return cp;
 4026|  5.27M|    }
 4027|  5.27M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  5.27M|{
 3826|  5.27M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  5.27M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  5.27M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  5.27M|    };
 3831|       |
 3832|  5.27M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.71M, False: 565k]
  ------------------
 3833|  4.71M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 424, False: 4.71M]
  ------------------
 3834|    424|            SCN_UNLIKELY_ATTR
 3835|    424|            return invalid_code_point;
 3836|    424|        }
 3837|  4.71M|        return static_cast<char32_t>(input[0]);
 3838|  4.71M|    }
 3839|       |
 3840|   565k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 217k, False: 347k]
  ------------------
 3841|   217k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 165, False: 216k]
  ------------------
 3842|    165|            SCN_UNLIKELY_ATTR
 3843|    165|            return invalid_code_point;
 3844|    165|        }
 3845|   216k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 14.0k, False: 202k]
  ------------------
 3846|  14.0k|            SCN_UNLIKELY_ATTR
 3847|  14.0k|            return invalid_code_point;
 3848|  14.0k|        }
 3849|       |
 3850|   202k|        char32_t cp{};
 3851|   202k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   202k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   202k|        return cp;
 3854|   216k|    }
 3855|       |
 3856|   347k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 332k, False: 15.9k]
  ------------------
 3857|   332k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 15, False: 332k]
  ------------------
 3858|     15|            SCN_UNLIKELY_ATTR
 3859|     15|            return invalid_code_point;
 3860|     15|        }
 3861|   332k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 3.86k, False: 328k]
  ------------------
 3862|   332k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.34k, False: 326k]
  ------------------
 3863|  5.21k|            SCN_UNLIKELY_ATTR
 3864|  5.21k|            return invalid_code_point;
 3865|  5.21k|        }
 3866|       |
 3867|   326k|        char32_t cp{};
 3868|   326k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   326k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   326k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   326k|        return cp;
 3872|   332k|    }
 3873|       |
 3874|  15.9k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 15.9k, False: 0]
  ------------------
 3875|  15.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 15.9k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  15.9k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 7.82k, False: 8.12k]
  ------------------
 3880|  7.82k|            SCN_UNLIKELY_ATTR
 3881|  7.82k|            return invalid_code_point;
 3882|  7.82k|        }
 3883|  8.12k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.29k, False: 5.82k]
  ------------------
 3884|  8.12k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 136, False: 5.69k]
  ------------------
 3885|  8.12k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 135, False: 5.55k]
  ------------------
 3886|  2.56k|            SCN_UNLIKELY_ATTR
 3887|  2.56k|            return invalid_code_point;
 3888|  2.56k|        }
 3889|       |
 3890|  5.55k|        char32_t cp{};
 3891|  5.55k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  5.55k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  5.55k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  5.55k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  5.55k|        return cp;
 3896|  8.12k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   896k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   896k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   896k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.64M|{
 3699|  4.64M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.64M|                                          decltype(first), decltype(last)> &&
 3701|  4.64M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.64M|        return {first, last};
 3703|  4.64M|    }
 3704|  4.64M|    else {
 3705|  4.64M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.64M|                                       to_address(first), to_address(last)))};
 3707|  4.64M|    }
 3708|  4.64M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.3M|{
  326|  14.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  14.6M|{
  304|  14.6M|    return p;
  305|  14.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  2.26M|{
 3730|  2.26M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  2.26M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  2.26M|                      decltype(it)> &&
 3733|  2.26M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  2.26M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.26M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  2.26M|        return it;
 3736|  2.26M|    }
 3737|  2.26M|    else {
 3738|  2.26M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  2.26M|    }
 3740|  2.26M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  27.9k|    {
 2724|  27.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  27.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  27.9k|    {
 2705|  27.9k|        return decay_copy(t.begin());
 2706|  27.9k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  2.46M|{
 1949|  2.46M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.46M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   573k|    {
 2781|   573k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   573k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   573k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   573k|    {
 2763|   573k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   573k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   573k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  58.1k|{
 8867|  58.1k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  58.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  58.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   243k|{
 5396|   243k|    detail::check_scan_arg_types<Args...>();
 5397|   243k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   243k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   300k|{
 5135|   300k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   300k|                  "Scan argument types must be default constructible");
 5137|   300k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   300k|                  "Scan argument types must be Destructible");
 5139|   300k|    static_assert(
 5140|   300k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   300k|        "Scan argument types must not be references");
 5142|   300k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   243k|    {
 5349|   243k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   243k|    {
 5360|   243k|        return {detail::make_arg<
 5361|   243k|            kind, Context,
 5362|   243k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   243k|                                 typename Context::char_type>::value>(args)...};
 5364|   243k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   243k|{
 5170|   243k|    return make_value<Context>(value).ref_value;
 5171|   243k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   300k|{
 5120|   300k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   300k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   300k|                                  needs_context_tag>) {
 5124|   300k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   300k|    }
 5126|   300k|    else {
 5127|   300k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   300k|            value, context_tag<Context>{}));
 5129|   300k|    }
 5130|   300k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   300k|    {                                                                        \
 4959|   300k|        return val;                                                          \
 4960|   300k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   300k|{
 5089|   300k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   300k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   300k|    constexpr bool scannable_char =
 5093|   300k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   300k|    static_assert(scannable_char,
 5095|   300k|                  "Cannot scan an argument of an unsupported character "
 5096|   300k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   300k|    constexpr bool scannable_const =
 5099|   300k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   300k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   300k|    constexpr bool scannable_disabled =
 5103|   300k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   300k|    static_assert(scannable_disabled,
 5105|   300k|                  "Cannot scan an argument that has been disabled by "
 5106|   300k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   300k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   300k|    static_assert(
 5110|   300k|        scannable,
 5111|   300k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   300k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   300k|    return arg_value{arg};
 5115|   300k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   300k|    {
 4902|   300k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   116k|{
 8654|   116k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   116k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   116k|{
 8591|   116k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   116k|    auto result = vscan_impl(buffer, format, args);
 8594|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 103k]
  |  |  ------------------
  ------------------
 8595|  12.4k|        return unexpected(result.error());
 8596|  12.4k|    }
 8597|   103k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   116k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   286k|{
 4720|   286k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   286k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   286k|                  "\n"
 4724|   286k|                  "Unsupported range type given as input to a scanning "
 4725|   286k|                  "function.\n"
 4726|   286k|                  "A range needs to have a character type (value type) "
 4727|   286k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   286k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   286k|                  "to be included.\n"
 4730|   286k|                  "See the scnlib documentation for more details.");
 4731|   286k|    static_assert(
 4732|   286k|        !std::is_same_v<T, custom_char_traits>,
 4733|   286k|        "\n"
 4734|   286k|        "Unsupported range type given as input to a scanning "
 4735|   286k|        "function.\n"
 4736|   286k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   286k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   286k|        "not supported.");
 4739|   286k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   286k|                  "\n"
 4741|   286k|                  "Unsupported range type given as input to a scanning "
 4742|   286k|                  "function.\n"
 4743|   286k|                  "file_marker_found cannot be used as an "
 4744|   286k|                  "source range type to scn::scan.\n"
 4745|   286k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   286k|                  "and do not provide an explicit source range, "
 4747|   286k|                  "or use scn::scan with a FILE* directly.");
 4748|   286k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   286k|                  "\n"
 4750|   286k|                  "Unsupported range type given as input to a scanning "
 4751|   286k|                  "function.\n"
 4752|   286k|                  "In order to be scannable, a range needs to satisfy "
 4753|   286k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   286k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   286k|                  "\n"
 4756|   286k|                  "Unsupported range type given as input to a scanning "
 4757|   286k|                  "function.\n"
 4758|   286k|                  "A range needs to model forward_range and have a valid "
 4759|   286k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   286k|                  "Examples of scannable ranges are std::string, "
 4761|   286k|                  "std::string_view, "
 4762|   286k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   286k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   286k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   286k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   286k|{
 4659|   286k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   286k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   286k|    }
 4662|   286k|    else {
 4663|   286k|        return invalid_char_type{};
 4664|   286k|    }
 4665|   286k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   286k|    {
 2855|   286k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   286k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   286k|    {
 2836|   286k|        return t.data();
 2837|   286k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   286k|    {
 3231|   286k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.88k, False: 284k]
  ------------------
 3232|   286k|                   ? nullptr
 3233|   286k|                   : std::addressof(*ranges::begin(derived()));
 3234|   286k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   286k|    {
 3005|   286k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   286k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   286k|    {
 2978|   286k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   286k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  1.08M|    {
 3339|  1.08M|        return m_iterator == m_sentinel;
 3340|  1.08M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   570k|    {
 3185|   570k|        return static_cast<const D&>(*this);
 3186|   570k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   543k|    {
 2724|   543k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   543k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   543k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   543k|    {
 2705|   543k|        return decay_copy(t.begin());
 2706|   543k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  3.18M|    {
 3330|  3.18M|        return m_iterator;
 3331|  3.18M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   286k|    {
 2930|   286k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   286k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   286k|    {
 2896|   286k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   286k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  1.93M|{
 1949|  1.93M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.93M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.08M|    {
 3346|  1.08M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.08M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  3.89M|    {
 1598|  3.89M|        return has_value();
 1599|  3.89M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.74M|    {
  485|  7.74M|        return m_has_value;
  486|  7.74M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   121k|    {
 1604|   121k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   121k|        return this->get_unexpected().error();
 1606|   121k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   121k|    {
  468|   121k|        return m_unexpected;
  469|   121k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   899k|    {
  361|   899k|        return m_unexpected;
  362|   899k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   451k|    {
  347|   451k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   451k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   451k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  26.9k|    {
 1476|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  26.9k|    {
  447|  26.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   517k|    {
  356|   517k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   517k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   517k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   286k|    {
 1177|   286k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   259k|{
 5923|   259k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   259k|                      ranges::iterator_t<SourceRange>>) {
 5925|   259k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   259k|    }
 5927|   259k|    else {
 5928|   259k|        auto it = ranges::begin(source);
 5929|   259k|        while (n > 0) {
 5930|   259k|            --n;
 5931|   259k|            ++it;
 5932|   259k|        }
 5933|   259k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   259k|    }
 5935|   259k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.05M|    {
 2724|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.05M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.05M|    {
 2705|  1.05M|        return decay_copy(t.begin());
 2706|  1.05M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   259k|{
 5910|   259k|    return ranges::end(source);
 5911|   259k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   259k|    {
 2781|   259k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   259k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   259k|    {
 2763|   259k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   259k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.66M|    {
 3334|  1.66M|        return m_sentinel;
 3335|  1.66M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.73M|    {
 1653|  3.73M|        return value();
 1654|  3.73M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  3.73M|    {
 1627|  3.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.73M|        return this->get_value();
 1629|  3.73M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.73M|    {
  451|  3.73M|        return m_value;
  452|  3.73M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   259k|    {
 1430|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   259k|    {
  437|   259k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|   116k|    {
 7975|   116k|        return m_str;
 7976|   116k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   243k|    {
 5426|   243k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   243k|    {
 5379|   243k|        return m_argptrs;
 5380|   243k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   360k|    {
 5478|   360k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   116k|{
 8820|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 103k]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   116k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   286k|    {
 1598|   286k|        return has_value();
 1599|   286k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   572k|    {
  485|   572k|        return m_has_value;
  486|   572k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  26.9k|    {
 1604|  26.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.9k|        return this->get_unexpected().error();
 1606|  26.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.9k|    {
  468|  26.9k|        return m_unexpected;
  469|  26.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  13.4k|    {
 1476|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  13.4k|    {
  626|  13.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  13.4k|    {
  689|  13.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.4k|                                  std::forward<Args>(args)...);
  691|  13.4k|        m_has_value = false;
  692|  13.4k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  80.7k|{
  392|  80.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  80.7k|        T(std::forward<Args>(args)...);
  394|  80.7k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.9k|    {
  718|  26.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   207k|    {
 1653|   207k|        return value();
 1654|   207k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   259k|    {
 1627|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   259k|        return this->get_value();
 1629|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   259k|    {
  451|   259k|        return m_value;
  452|   259k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   129k|    {
 5830|   129k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   259k|    {
 5681|   259k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   273k|    {
 5616|   273k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   129k|    {
 1430|   129k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   129k|    {
  616|   129k|        construct(std::forward<Args>(args)...);
  617|   129k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   129k|    {
  682|   129k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   129k|        m_has_value = true;
  684|   129k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   129k|{
  392|   129k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   129k|        T(std::forward<Args>(args)...);
  394|   129k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|   129k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   389k|    {
  706|   389k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   389k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   389k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   259k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   243k|    {
 5374|   243k|        return m_args;
 5375|   243k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   243k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.85M|    {
 3316|  1.85M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   360k|{
 7691|   360k|    return s;
 7692|   360k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   360k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   116k|    {
 7971|   116k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   415k|    {
  675|   415k|        return m_has_value;
  676|   415k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   129k|    {
 1673|   129k|        return &value();
 1674|   129k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   129k|    {
 1627|   129k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   129k|        return this->get_value();
 1629|   129k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   129k|    {
  641|   129k|        return *value_ptr();
  642|   129k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   259k|    {
 5698|   259k|        return ranges::begin(m_range);
 5699|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   143k|    {
  631|   143k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 129k, False: 13.4k]
  ------------------
  632|   129k|            destroy_value();
  633|   129k|        }
  634|  13.4k|        else {
  635|  13.4k|            destroy_unexpected();
  636|  13.4k|        }
  637|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   129k|    {
  696|   129k|        scn::detail::destroy_at(value_ptr());
  697|   129k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   129k|{
  398|   129k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   129k|        for (auto& elem : *p) {
  400|   129k|            scn::detail::destroy_at(&elem);
  401|   129k|        }
  402|   129k|    }
  403|   129k|    else {
  404|   129k|        p->~T();
  405|   129k|    }
  406|   129k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.4k|    {
  700|  13.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.4k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  80.7k|{
  398|  80.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  80.7k|        for (auto& elem : *p) {
  400|  80.7k|            scn::detail::destroy_at(&elem);
  401|  80.7k|        }
  402|  80.7k|    }
  403|  80.7k|    else {
  404|  80.7k|        p->~T();
  405|  80.7k|    }
  406|  80.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  58.1k|{
 8934|  58.1k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  58.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  58.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   116k|{
 8672|   116k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   116k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   116k|{
 8607|   116k|#if !SCN_DISABLE_LOCALE
 8608|   116k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   116k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   116k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   116k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 103k]
  |  |  ------------------
  ------------------
 8615|  12.4k|        return unexpected(result.error());
 8616|  12.4k|    }
 8617|   103k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   116k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  26.7k|{
 8973|  26.7k|    T value;
 8974|  26.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 25.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  25.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  25.7k|    static_cast<    \
  |  |  929|  25.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  25.7k|    static_cast<    \
  |  |  929|  25.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  56.3k|{
 5155|  56.3k|    check_scan_arg_types<T>();
 5156|       |
 5157|  56.3k|    basic_scan_arg<Context> arg;
 5158|  56.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  56.3k|    arg.m_value = make_value<Context>(value);
 5160|  56.3k|    return arg;
 5161|  56.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   443k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  2.91M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  53.5k|{
 8685|  53.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  53.5k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  53.5k|{
 8631|  53.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  53.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  53.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 51.5k]
  |  |  ------------------
  ------------------
 8635|  2.07k|        return unexpected(result.error());
 8636|  2.07k|    }
 8637|  51.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  53.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  51.5k|    {
 1663|  51.5k|        return std::move(value());
 1664|  51.5k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  58.1k|{
 8867|  58.1k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  58.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  58.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|   116k|{
 5396|   116k|    detail::check_scan_arg_types<Args...>();
 5397|   116k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   116k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|   143k|{
 5135|   143k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   143k|                  "Scan argument types must be default constructible");
 5137|   143k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   143k|                  "Scan argument types must be Destructible");
 5139|   143k|    static_assert(
 5140|   143k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   143k|        "Scan argument types must not be references");
 5142|   143k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|   116k|    {
 5349|   116k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   116k|    {
 5360|   116k|        return {detail::make_arg<
 5361|   116k|            kind, Context,
 5362|   116k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   116k|                                 typename Context::char_type>::value>(args)...};
 5364|   116k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|   116k|{
 5170|   116k|    return make_value<Context>(value).ref_value;
 5171|   116k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|   143k|{
 5120|   143k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   143k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   143k|                                  needs_context_tag>) {
 5124|   143k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   143k|    }
 5126|   143k|    else {
 5127|   143k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   143k|            value, context_tag<Context>{}));
 5129|   143k|    }
 5130|   143k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|   143k|    {                                                                        \
 4959|   143k|        return val;                                                          \
 4960|   143k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|   143k|{
 5089|   143k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   143k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   143k|    constexpr bool scannable_char =
 5093|   143k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   143k|    static_assert(scannable_char,
 5095|   143k|                  "Cannot scan an argument of an unsupported character "
 5096|   143k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   143k|    constexpr bool scannable_const =
 5099|   143k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   143k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   143k|    constexpr bool scannable_disabled =
 5103|   143k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   143k|    static_assert(scannable_disabled,
 5105|   143k|                  "Cannot scan an argument that has been disabled by "
 5106|   143k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   143k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   143k|    static_assert(
 5110|   143k|        scannable,
 5111|   143k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   143k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   143k|    return arg_value{arg};
 5115|   143k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|   143k|    {
 4902|   143k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|   116k|    {
 7975|   116k|        return m_str;
 7976|   116k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   116k|    {
 5426|   116k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|   116k|    {
 5379|   116k|        return m_argptrs;
 5380|   116k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   116k|{
 8820|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 103k]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   116k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  13.4k|    {
 1476|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  13.4k|    {
  447|  13.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   129k|    {
 5830|   129k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   129k|    {
 5616|   129k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   129k|    {
 1430|   129k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   129k|    {
  437|   129k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|   116k|    {
 5374|   116k|        return m_args;
 5375|   116k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   116k|    {
 7971|   116k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   272k|    {
  485|   272k|        return m_has_value;
  486|   272k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   129k|    {
 1673|   129k|        return &value();
 1674|   129k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   129k|    {
 1627|   129k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   129k|        return this->get_value();
 1629|   129k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   129k|    {
  451|   129k|        return m_value;
  452|   129k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  58.1k|{
 8934|  58.1k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  58.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.1k|    static_cast<    \
  |  |  929|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  58.1k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  26.7k|{
 8973|  26.7k|    T value;
 8974|  26.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 25.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  25.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  25.7k|    static_cast<    \
  |  |  929|  25.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  25.7k|    static_cast<    \
  |  |  929|  25.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  26.7k|{
 5155|  26.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  26.7k|    basic_scan_arg<Context> arg;
 5158|  26.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  26.7k|    arg.m_value = make_value<Context>(value);
 5160|  26.7k|    return arg;
 5161|  26.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  13.4k|    {
 2724|  13.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  13.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  13.4k|    {
 2705|  13.4k|        return decay_copy(t.begin());
 2706|  13.4k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  6.95M|{
 1949|  6.95M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.95M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   314k|    {
 2781|   314k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   314k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   314k|    {
 2763|   314k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   314k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  63.7k|{
 8867|  63.7k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  63.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  63.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.7k|    static_cast<    \
  |  |  929|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.7k|    static_cast<    \
  |  |  929|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  63.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  63.7k|{
 8654|  63.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  63.7k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  63.7k|{
 8591|  63.7k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  63.7k|    auto result = vscan_impl(buffer, format, args);
 8594|  63.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 57.5k]
  |  |  ------------------
  ------------------
 8595|  6.21k|        return unexpected(result.error());
 8596|  6.21k|    }
 8597|  57.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  63.7k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|   157k|{
 4720|   157k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   157k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   157k|                  "\n"
 4724|   157k|                  "Unsupported range type given as input to a scanning "
 4725|   157k|                  "function.\n"
 4726|   157k|                  "A range needs to have a character type (value type) "
 4727|   157k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   157k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   157k|                  "to be included.\n"
 4730|   157k|                  "See the scnlib documentation for more details.");
 4731|   157k|    static_assert(
 4732|   157k|        !std::is_same_v<T, custom_char_traits>,
 4733|   157k|        "\n"
 4734|   157k|        "Unsupported range type given as input to a scanning "
 4735|   157k|        "function.\n"
 4736|   157k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   157k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   157k|        "not supported.");
 4739|   157k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   157k|                  "\n"
 4741|   157k|                  "Unsupported range type given as input to a scanning "
 4742|   157k|                  "function.\n"
 4743|   157k|                  "file_marker_found cannot be used as an "
 4744|   157k|                  "source range type to scn::scan.\n"
 4745|   157k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   157k|                  "and do not provide an explicit source range, "
 4747|   157k|                  "or use scn::scan with a FILE* directly.");
 4748|   157k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   157k|                  "\n"
 4750|   157k|                  "Unsupported range type given as input to a scanning "
 4751|   157k|                  "function.\n"
 4752|   157k|                  "In order to be scannable, a range needs to satisfy "
 4753|   157k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   157k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   157k|                  "\n"
 4756|   157k|                  "Unsupported range type given as input to a scanning "
 4757|   157k|                  "function.\n"
 4758|   157k|                  "A range needs to model forward_range and have a valid "
 4759|   157k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   157k|                  "Examples of scannable ranges are std::string, "
 4761|   157k|                  "std::string_view, "
 4762|   157k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   157k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   157k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   157k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   157k|{
 4690|   157k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   157k|        return file_marker_found{};
 4692|   157k|    }
 4693|   157k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   157k|        if constexpr (ranges::range<Range>) {
 4695|   157k|            return insufficient_range{};
 4696|   157k|        }
 4697|   157k|        else {
 4698|   157k|            return invalid_input_range{};
 4699|   157k|        }
 4700|   157k|    }
 4701|   157k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   157k|        return invalid_char_type{};
 4703|   157k|    }
 4704|   157k|    else {
 4705|   157k|        return make_forward_scan_buffer(r);
 4706|   157k|    }
 4707|   157k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|   157k|{
 4524|   157k|    return basic_scan_forward_buffer_impl(range);
 4525|   157k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   157k|    {
 4411|   157k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|   157k|    {
 4382|   157k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|   157k|    {
 4151|   157k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|   157k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   300k|    {
 2724|   300k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   300k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   300k|    {
 2705|   300k|        return decay_copy(t.begin());
 2706|   300k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   444k|    {
 3330|   444k|        return m_iterator;
 3331|   444k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  2.02M|    {
 4415|  2.02M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 18.0k, False: 2.00M]
  ------------------
 4416|  18.0k|            return false;
 4417|  18.0k|        }
 4418|  2.00M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.00M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.00M|        }
 4421|  2.00M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.85M, False: 149k]
  ------------------
 4422|  1.85M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.85M|                                          this->m_current_view.begin(),
 4424|  1.85M|                                          this->m_current_view.end());
 4425|  1.85M|        }
 4426|  2.00M|        m_latest = *m_cursor;
 4427|  2.00M|        ++m_cursor;
 4428|  2.00M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.00M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.00M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.00M|        }
 4432|  2.00M|        return true;
 4433|  2.00M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.04M|    {
 2781|  6.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.04M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.04M|    {
 2763|  6.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.04M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  6.18M|    {
 3334|  6.18M|        return m_sentinel;
 3335|  6.18M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|   157k|    {
 4071|   157k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   157k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  13.4k|    {
 1476|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  13.4k|    {
  447|  13.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   143k|{
 5923|   143k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   143k|                      ranges::iterator_t<SourceRange>>) {
 5925|   143k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   143k|    }
 5927|   143k|    else {
 5928|   143k|        auto it = ranges::begin(source);
 5929|   143k|        while (n > 0) {
 5930|   143k|            --n;
 5931|   143k|            ++it;
 5932|   143k|        }
 5933|   143k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   143k|    }
 5935|   143k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   143k|    {
 2724|   143k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   143k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   143k|    {
 2705|   143k|        return decay_copy(t.begin());
 2706|   143k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|   143k|{
 5910|   143k|    return ranges::end(source);
 5911|   143k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   143k|    {
 2781|   143k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   143k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   143k|    {
 2763|   143k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   143k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   143k|    {
  437|   143k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|   127k|    {
 7975|   127k|        return m_str;
 7976|   127k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   127k|{
 8820|   127k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 115k]
  |  |  ------------------
  ------------------
 8821|  12.4k|        return unexpected(result.error());
 8822|  12.4k|    }
 8823|   115k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   127k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   314k|    {
  485|   314k|        return m_has_value;
  486|   314k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  13.4k|    {
 1604|  13.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.4k|        return this->get_unexpected().error();
 1606|  13.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.4k|    {
  468|  13.4k|        return m_unexpected;
  469|  13.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  13.4k|    {
 1476|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  13.4k|    {
  626|  13.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  13.4k|    {
  689|  13.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.4k|                                  std::forward<Args>(args)...);
  691|  13.4k|        m_has_value = false;
  692|  13.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.9k|    {
  718|  26.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   115k|    {
 1653|   115k|        return value();
 1654|   115k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   143k|    {
 5830|   143k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|   143k|    {
 5681|   143k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   143k|    {
  616|   143k|        construct(std::forward<Args>(args)...);
  617|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   143k|    {
  682|   143k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   143k|        m_has_value = true;
  684|   143k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   143k|{
  392|   143k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   143k|        T(std::forward<Args>(args)...);
  394|   143k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|   143k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   430k|    {
  706|   430k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   430k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   430k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   287k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   300k|    {
 3316|   300k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   127k|    {
 7971|   127k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   457k|    {
  675|   457k|        return m_has_value;
  676|   457k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   143k|    {
 1673|   143k|        return &value();
 1674|   143k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   143k|    {
  641|   143k|        return *value_ptr();
  642|   143k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|   143k|    {
 5698|   143k|        return ranges::begin(m_range);
 5699|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   157k|    {
  631|   157k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 143k, False: 13.4k]
  ------------------
  632|   143k|            destroy_value();
  633|   143k|        }
  634|  13.4k|        else {
  635|  13.4k|            destroy_unexpected();
  636|  13.4k|        }
  637|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   143k|    {
  696|   143k|        scn::detail::destroy_at(value_ptr());
  697|   143k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   143k|{
  398|   143k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   143k|        for (auto& elem : *p) {
  400|   143k|            scn::detail::destroy_at(&elem);
  401|   143k|        }
  402|   143k|    }
  403|   143k|    else {
  404|   143k|        p->~T();
  405|   143k|    }
  406|   143k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.4k|    {
  700|  13.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.4k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  63.7k|{
 8934|  63.7k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  63.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  63.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.7k|    static_cast<    \
  |  |  929|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.7k|    static_cast<    \
  |  |  929|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  63.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  63.7k|{
 8672|  63.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  63.7k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  63.7k|{
 8607|  63.7k|#if !SCN_DISABLE_LOCALE
 8608|  63.7k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  63.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  63.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  63.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  63.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 57.5k]
  |  |  ------------------
  ------------------
 8615|  6.21k|        return unexpected(result.error());
 8616|  6.21k|    }
 8617|  57.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  63.7k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  29.5k|{
 8973|  29.5k|    T value;
 8974|  29.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  29.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  28.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  29.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  29.5k|{
 8685|  29.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  29.5k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  29.5k|{
 8631|  29.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  29.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  29.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03k, False: 28.5k]
  |  |  ------------------
  ------------------
 8635|  1.03k|        return unexpected(result.error());
 8636|  1.03k|    }
 8637|  28.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  29.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  28.5k|    {
 1663|  28.5k|        return std::move(value());
 1664|  28.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  55.8k|    {
 2724|  55.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  55.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  55.8k|    {
 2705|  55.8k|        return decay_copy(t.begin());
 2706|  55.8k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  11.3M|{
 1949|  11.3M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.3M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.29M|    {
 2781|  3.29M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.29M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.29M|    {
 2763|  3.29M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.29M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  1.32M|{
 5396|  1.32M|    detail::check_scan_arg_types<Args...>();
 5397|  1.32M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.32M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  1.64M|{
 5135|  1.64M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.64M|                  "Scan argument types must be default constructible");
 5137|  1.64M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.64M|                  "Scan argument types must be Destructible");
 5139|  1.64M|    static_assert(
 5140|  1.64M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.64M|        "Scan argument types must not be references");
 5142|  1.64M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  1.32M|    {
 5349|  1.32M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  1.32M|    {
 5360|  1.32M|        return {detail::make_arg<
 5361|  1.32M|            kind, Context,
 5362|  1.32M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.32M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.32M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  1.32M|{
 5170|  1.32M|    return make_value<Context>(value).ref_value;
 5171|  1.32M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  1.64M|{
 5120|  1.64M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.64M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.64M|                                  needs_context_tag>) {
 5124|  1.64M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.64M|    }
 5126|  1.64M|    else {
 5127|  1.64M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.64M|            value, context_tag<Context>{}));
 5129|  1.64M|    }
 5130|  1.64M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  1.64M|    {                                                                        \
 4959|  1.64M|        return val;                                                          \
 4960|  1.64M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  1.64M|{
 5089|  1.64M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.64M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.64M|    constexpr bool scannable_char =
 5093|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.64M|    static_assert(scannable_char,
 5095|  1.64M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.64M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.64M|    constexpr bool scannable_const =
 5099|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.64M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.64M|    constexpr bool scannable_disabled =
 5103|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.64M|    static_assert(scannable_disabled,
 5105|  1.64M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.64M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.64M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.64M|    static_assert(
 5110|  1.64M|        scannable,
 5111|  1.64M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.64M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.64M|    return arg_value{arg};
 5115|  1.64M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  1.64M|    {
 4902|  1.64M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   662k|{
 8591|   662k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   662k|    auto result = vscan_impl(buffer, format, args);
 8594|   662k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 8595|  24.8k|        return unexpected(result.error());
 8596|  24.8k|    }
 8597|   637k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   637k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   662k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  1.64M|{
 4720|  1.64M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.64M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.64M|                  "\n"
 4724|  1.64M|                  "Unsupported range type given as input to a scanning "
 4725|  1.64M|                  "function.\n"
 4726|  1.64M|                  "A range needs to have a character type (value type) "
 4727|  1.64M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.64M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.64M|                  "to be included.\n"
 4730|  1.64M|                  "See the scnlib documentation for more details.");
 4731|  1.64M|    static_assert(
 4732|  1.64M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.64M|        "\n"
 4734|  1.64M|        "Unsupported range type given as input to a scanning "
 4735|  1.64M|        "function.\n"
 4736|  1.64M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.64M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.64M|        "not supported.");
 4739|  1.64M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.64M|                  "\n"
 4741|  1.64M|                  "Unsupported range type given as input to a scanning "
 4742|  1.64M|                  "function.\n"
 4743|  1.64M|                  "file_marker_found cannot be used as an "
 4744|  1.64M|                  "source range type to scn::scan.\n"
 4745|  1.64M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.64M|                  "and do not provide an explicit source range, "
 4747|  1.64M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.64M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.64M|                  "\n"
 4750|  1.64M|                  "Unsupported range type given as input to a scanning "
 4751|  1.64M|                  "function.\n"
 4752|  1.64M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.64M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.64M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.64M|                  "\n"
 4756|  1.64M|                  "Unsupported range type given as input to a scanning "
 4757|  1.64M|                  "function.\n"
 4758|  1.64M|                  "A range needs to model forward_range and have a valid "
 4759|  1.64M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.64M|                  "Examples of scannable ranges are std::string, "
 4761|  1.64M|                  "std::string_view, "
 4762|  1.64M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.64M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.64M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.64M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.64M|{
 4659|  1.64M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.64M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.64M|    }
 4662|  1.64M|    else {
 4663|  1.64M|        return invalid_char_type{};
 4664|  1.64M|    }
 4665|  1.64M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.64M|    {
 2855|  1.64M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.64M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.64M|    {
 2836|  1.64M|        return t.data();
 2837|  1.64M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  1.64M|    {
 3231|  1.64M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 4.56k, False: 1.64M]
  ------------------
 3232|  1.64M|                   ? nullptr
 3233|  1.64M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.64M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.64M|    {
 3005|  1.64M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.64M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.64M|    {
 2978|  1.64M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.64M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  3.25M|    {
 3339|  3.25M|        return m_iterator == m_sentinel;
 3340|  3.25M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  3.29M|    {
 3185|  3.29M|        return static_cast<const D&>(*this);
 3186|  3.29M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.23M|    {
 2724|  3.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.23M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.23M|    {
 2705|  3.23M|        return decay_copy(t.begin());
 2706|  3.23M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   180M|    {
 3330|   180M|        return m_iterator;
 3331|   180M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.64M|    {
 2930|  1.64M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.64M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.64M|    {
 2896|  1.64M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.64M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  3.25M|    {
 3346|  3.25M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  3.25M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  53.8k|    {
 1476|  53.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  53.8k|    {
  447|  53.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.64M|    {
 1177|  1.64M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.59M|{
 5923|  1.59M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.59M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.59M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.59M|    }
 5927|  1.59M|    else {
 5928|  1.59M|        auto it = ranges::begin(source);
 5929|  1.59M|        while (n > 0) {
 5930|  1.59M|            --n;
 5931|  1.59M|            ++it;
 5932|  1.59M|        }
 5933|  1.59M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.59M|    }
 5935|  1.59M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.20M|    {
 2724|  3.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.20M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.20M|    {
 2705|  3.20M|        return decay_copy(t.begin());
 2706|  3.20M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  1.59M|{
 5910|  1.59M|    return ranges::end(source);
 5911|  1.59M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.59M|    {
 2781|  1.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.59M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.59M|    {
 2763|  1.59M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   173M|    {
 3334|   173M|        return m_sentinel;
 3335|   173M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.59M|    {
 1430|  1.59M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.59M|    {
  437|  1.59M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|   662k|    {
 7975|   662k|        return m_str;
 7976|   662k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.32M|    {
 5426|  1.32M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  1.32M|    {
 5379|  1.32M|        return m_argptrs;
 5380|  1.32M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  1.98M|    {
 5478|  1.98M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   662k|{
 8820|   662k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   662k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.64M|    {
 1598|  1.64M|        return has_value();
 1599|  1.64M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.29M|    {
  485|  3.29M|        return m_has_value;
  486|  3.29M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  53.8k|    {
 1604|  53.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  53.8k|        return this->get_unexpected().error();
 1606|  53.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  53.8k|    {
  468|  53.8k|        return m_unexpected;
  469|  53.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.9k|    {
 1476|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.9k|    {
  626|  26.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.9k|    {
  689|  26.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.9k|                                  std::forward<Args>(args)...);
  691|  26.9k|        m_has_value = false;
  692|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.8k|    {
  718|  53.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   823k|    {
 1177|   823k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.27M|    {
 1653|  1.27M|        return value();
 1654|  1.27M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.59M|    {
 1627|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.59M|        return this->get_value();
 1629|  1.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.59M|    {
  451|  1.59M|        return m_value;
  452|  1.59M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   796k|    {
 5830|   796k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.59M|    {
 5681|  1.59M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.59M|    {
 5616|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   796k|    {
  616|   796k|        construct(std::forward<Args>(args)...);
  617|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   796k|    {
  682|   796k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   796k|        m_has_value = true;
  684|   796k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   796k|{
  392|   796k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   796k|        T(std::forward<Args>(args)...);
  394|   796k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|   796k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.39M|    {
  706|  2.39M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.39M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.39M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.59M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  1.32M|    {
 5374|  1.32M|        return m_args;
 5375|  1.32M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  1.32M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  66.5M|    {
 3316|  66.5M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.98M|{
 7696|  1.98M|    return s;
 7697|  1.98M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.98M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   662k|    {
 7971|   662k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   823k|    {
 1598|   823k|        return has_value();
 1599|   823k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.44M|    {
  675|  2.44M|        return m_has_value;
  676|  2.44M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   796k|    {
 1673|   796k|        return &value();
 1674|   796k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   796k|    {
 1627|   796k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   796k|        return this->get_value();
 1629|   796k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   796k|    {
  641|   796k|        return *value_ptr();
  642|   796k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  1.59M|    {
 5698|  1.59M|        return ranges::begin(m_range);
 5699|  1.59M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   823k|    {
  631|   823k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 796k, False: 26.9k]
  ------------------
  632|   796k|            destroy_value();
  633|   796k|        }
  634|  26.9k|        else {
  635|  26.9k|            destroy_unexpected();
  636|  26.9k|        }
  637|   823k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   796k|    {
  696|   796k|        scn::detail::destroy_at(value_ptr());
  697|   796k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   796k|{
  398|   796k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   796k|        for (auto& elem : *p) {
  400|   796k|            scn::detail::destroy_at(&elem);
  401|   796k|        }
  402|   796k|    }
  403|   796k|    else {
  404|   796k|        p->~T();
  405|   796k|    }
  406|   796k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.9k|    {
  700|  26.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   662k|{
 8607|   662k|#if !SCN_DISABLE_LOCALE
 8608|   662k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   662k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   662k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   662k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   662k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 8615|  24.8k|        return unexpected(result.error());
 8616|  24.8k|    }
 8617|   637k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   637k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   662k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   322k|{
 5155|   322k|    check_scan_arg_types<T>();
 5156|       |
 5157|   322k|    basic_scan_arg<Context> arg;
 5158|   322k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   322k|    arg.m_value = make_value<Context>(value);
 5160|   322k|    return arg;
 5161|   322k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  2.47M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   322k|{
 8631|   322k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   322k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   322k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 318k]
  |  |  ------------------
  ------------------
 8635|  4.14k|        return unexpected(result.error());
 8636|  4.14k|    }
 8637|   318k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   322k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   318k|    {
 1663|   318k|        return std::move(value());
 1664|   318k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|   662k|{
 5396|   662k|    detail::check_scan_arg_types<Args...>();
 5397|   662k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   662k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|   823k|{
 5135|   823k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   823k|                  "Scan argument types must be default constructible");
 5137|   823k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   823k|                  "Scan argument types must be Destructible");
 5139|   823k|    static_assert(
 5140|   823k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   823k|        "Scan argument types must not be references");
 5142|   823k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|   662k|    {
 5349|   662k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   662k|    {
 5360|   662k|        return {detail::make_arg<
 5361|   662k|            kind, Context,
 5362|   662k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   662k|                                 typename Context::char_type>::value>(args)...};
 5364|   662k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|   662k|{
 5170|   662k|    return make_value<Context>(value).ref_value;
 5171|   662k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|   823k|{
 5120|   823k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   823k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   823k|                                  needs_context_tag>) {
 5124|   823k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   823k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   823k|    }
 5126|   823k|    else {
 5127|   823k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   823k|            value, context_tag<Context>{}));
 5129|   823k|    }
 5130|   823k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|   823k|    {                                                                        \
 4959|   823k|        return val;                                                          \
 4960|   823k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|   823k|{
 5089|   823k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   823k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   823k|    constexpr bool scannable_char =
 5093|   823k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   823k|    static_assert(scannable_char,
 5095|   823k|                  "Cannot scan an argument of an unsupported character "
 5096|   823k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   823k|    constexpr bool scannable_const =
 5099|   823k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   823k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   823k|    constexpr bool scannable_disabled =
 5103|   823k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   823k|    static_assert(scannable_disabled,
 5105|   823k|                  "Cannot scan an argument that has been disabled by "
 5106|   823k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   823k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   823k|    static_assert(
 5110|   823k|        scannable,
 5111|   823k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   823k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   823k|    return arg_value{arg};
 5115|   823k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|   823k|    {
 4902|   823k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|   662k|    {
 7975|   662k|        return m_str;
 7976|   662k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   662k|    {
 5426|   662k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|   662k|    {
 5379|   662k|        return m_argptrs;
 5380|   662k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   662k|{
 8820|   662k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   662k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.9k|    {
 1476|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  26.9k|    {
  447|  26.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   823k|    {
 1177|   823k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   796k|    {
 5830|   796k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   796k|    {
 5616|   796k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   796k|    {
  437|   796k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|   662k|    {
 5374|   662k|        return m_args;
 5375|   662k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   662k|    {
 7971|   662k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   823k|    {
 1598|   823k|        return has_value();
 1599|   823k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.62M|    {
  485|  1.62M|        return m_has_value;
  486|  1.62M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   796k|    {
 1673|   796k|        return &value();
 1674|   796k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   796k|    {
 1627|   796k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   796k|        return this->get_value();
 1629|   796k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   796k|    {
  451|   796k|        return m_value;
  452|   796k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   161k|{
 5155|   161k|    check_scan_arg_types<T>();
 5156|       |
 5157|   161k|    basic_scan_arg<Context> arg;
 5158|   161k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   161k|    arg.m_value = make_value<Context>(value);
 5160|   161k|    return arg;
 5161|   161k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  26.9k|    {
 2724|  26.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  26.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  26.9k|    {
 2705|  26.9k|        return decay_copy(t.begin());
 2706|  26.9k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  85.7M|{
 1949|  85.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  85.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  85.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.64M|    {
 2781|  1.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.64M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.64M|    {
 2763|  1.64M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.64M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   331k|{
 8591|   331k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   331k|    auto result = vscan_impl(buffer, format, args);
 8594|   331k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 318k]
  |  |  ------------------
  ------------------
 8595|  12.4k|        return unexpected(result.error());
 8596|  12.4k|    }
 8597|   318k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   331k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   823k|{
 4720|   823k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   823k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   823k|                  "\n"
 4724|   823k|                  "Unsupported range type given as input to a scanning "
 4725|   823k|                  "function.\n"
 4726|   823k|                  "A range needs to have a character type (value type) "
 4727|   823k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   823k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   823k|                  "to be included.\n"
 4730|   823k|                  "See the scnlib documentation for more details.");
 4731|   823k|    static_assert(
 4732|   823k|        !std::is_same_v<T, custom_char_traits>,
 4733|   823k|        "\n"
 4734|   823k|        "Unsupported range type given as input to a scanning "
 4735|   823k|        "function.\n"
 4736|   823k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   823k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   823k|        "not supported.");
 4739|   823k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   823k|                  "\n"
 4741|   823k|                  "Unsupported range type given as input to a scanning "
 4742|   823k|                  "function.\n"
 4743|   823k|                  "file_marker_found cannot be used as an "
 4744|   823k|                  "source range type to scn::scan.\n"
 4745|   823k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   823k|                  "and do not provide an explicit source range, "
 4747|   823k|                  "or use scn::scan with a FILE* directly.");
 4748|   823k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   823k|                  "\n"
 4750|   823k|                  "Unsupported range type given as input to a scanning "
 4751|   823k|                  "function.\n"
 4752|   823k|                  "In order to be scannable, a range needs to satisfy "
 4753|   823k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   823k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   823k|                  "\n"
 4756|   823k|                  "Unsupported range type given as input to a scanning "
 4757|   823k|                  "function.\n"
 4758|   823k|                  "A range needs to model forward_range and have a valid "
 4759|   823k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   823k|                  "Examples of scannable ranges are std::string, "
 4761|   823k|                  "std::string_view, "
 4762|   823k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   823k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   823k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   823k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   823k|{
 4690|   823k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   823k|        return file_marker_found{};
 4692|   823k|    }
 4693|   823k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   823k|        if constexpr (ranges::range<Range>) {
 4695|   823k|            return insufficient_range{};
 4696|   823k|        }
 4697|   823k|        else {
 4698|   823k|            return invalid_input_range{};
 4699|   823k|        }
 4700|   823k|    }
 4701|   823k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   823k|        return invalid_char_type{};
 4703|   823k|    }
 4704|   823k|    else {
 4705|   823k|        return make_forward_scan_buffer(r);
 4706|   823k|    }
 4707|   823k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   823k|{
 4524|   823k|    return basic_scan_forward_buffer_impl(range);
 4525|   823k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   823k|    {
 4411|   823k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   823k|    {
 4382|   823k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   823k|    {
 4151|   823k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   823k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.62M|    {
 2724|  1.62M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.62M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.62M|    {
 2705|  1.62M|        return decay_copy(t.begin());
 2706|  1.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  2.41M|    {
 3330|  2.41M|        return m_iterator;
 3331|  2.41M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  26.9M|    {
 4415|  26.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 24.4k, False: 26.9M]
  ------------------
 4416|  24.4k|            return false;
 4417|  24.4k|        }
 4418|  26.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  26.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  26.9M|        }
 4421|  26.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 26.1M, False: 808k]
  ------------------
 4422|  26.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  26.1M|                                          this->m_current_view.begin(),
 4424|  26.1M|                                          this->m_current_view.end());
 4425|  26.1M|        }
 4426|  26.9M|        m_latest = *m_cursor;
 4427|  26.9M|        ++m_cursor;
 4428|  26.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  26.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  26.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  26.9M|        }
 4432|  26.9M|        return true;
 4433|  26.9M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  80.8M|    {
 2781|  80.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  80.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  80.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  80.8M|    {
 2763|  80.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  80.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  80.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  81.6M|    {
 3334|  81.6M|        return m_sentinel;
 3335|  81.6M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   823k|    {
 4071|   823k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   823k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   823k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  26.9k|    {
 1476|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  26.9k|    {
  447|  26.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   823k|    {
 1177|   823k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   796k|{
 5923|   796k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   796k|                      ranges::iterator_t<SourceRange>>) {
 5925|   796k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   796k|    }
 5927|   796k|    else {
 5928|   796k|        auto it = ranges::begin(source);
 5929|   796k|        while (n > 0) {
 5930|   796k|            --n;
 5931|   796k|            ++it;
 5932|   796k|        }
 5933|   796k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   796k|    }
 5935|   796k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   796k|    {
 2724|   796k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   796k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   796k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   796k|    {
 2705|   796k|        return decay_copy(t.begin());
 2706|   796k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   796k|{
 5910|   796k|    return ranges::end(source);
 5911|   796k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   796k|    {
 2781|   796k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   796k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   796k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   796k|    {
 2763|   796k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   796k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   796k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   796k|    {
  437|   796k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|   662k|    {
 7975|   662k|        return m_str;
 7976|   662k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   662k|{
 8820|   662k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   662k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   823k|    {
 1598|   823k|        return has_value();
 1599|   823k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.64M|    {
  485|  1.64M|        return m_has_value;
  486|  1.64M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  26.9k|    {
 1604|  26.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.9k|        return this->get_unexpected().error();
 1606|  26.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.9k|    {
  468|  26.9k|        return m_unexpected;
  469|  26.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.9k|    {
 1476|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  26.9k|    {
  626|  26.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  26.9k|    {
  689|  26.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.9k|                                  std::forward<Args>(args)...);
  691|  26.9k|        m_has_value = false;
  692|  26.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.8k|    {
  718|  53.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   823k|    {
 1177|   823k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   637k|    {
 1653|   637k|        return value();
 1654|   637k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   796k|    {
 1627|   796k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   796k|        return this->get_value();
 1629|   796k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   796k|    {
  451|   796k|        return m_value;
  452|   796k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   796k|    {
 5830|   796k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   796k|    {
 5681|   796k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   796k|    {
  616|   796k|        construct(std::forward<Args>(args)...);
  617|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   796k|    {
  682|   796k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   796k|        m_has_value = true;
  684|   796k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   796k|{
  392|   796k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   796k|        T(std::forward<Args>(args)...);
  394|   796k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|   796k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.39M|    {
  706|  2.39M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.39M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.39M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  1.59M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  1.62M|    {
 3316|  1.62M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   662k|    {
 7971|   662k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   823k|    {
 1598|   823k|        return has_value();
 1599|   823k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.44M|    {
  675|  2.44M|        return m_has_value;
  676|  2.44M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   796k|    {
 1673|   796k|        return &value();
 1674|   796k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   796k|    {
 1627|   796k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   796k|        return this->get_value();
 1629|   796k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   796k|    {
  641|   796k|        return *value_ptr();
  642|   796k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   796k|    {
 5698|   796k|        return ranges::begin(m_range);
 5699|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   823k|    {
  631|   823k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 796k, False: 26.9k]
  ------------------
  632|   796k|            destroy_value();
  633|   796k|        }
  634|  26.9k|        else {
  635|  26.9k|            destroy_unexpected();
  636|  26.9k|        }
  637|   823k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   796k|    {
  696|   796k|        scn::detail::destroy_at(value_ptr());
  697|   796k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   796k|{
  398|   796k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   796k|        for (auto& elem : *p) {
  400|   796k|            scn::detail::destroy_at(&elem);
  401|   796k|        }
  402|   796k|    }
  403|   796k|    else {
  404|   796k|        p->~T();
  405|   796k|    }
  406|   796k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.9k|    {
  700|  26.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   331k|{
 8607|   331k|#if !SCN_DISABLE_LOCALE
 8608|   331k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   331k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   331k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   331k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   331k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 318k]
  |  |  ------------------
  ------------------
 8615|  12.4k|        return unexpected(result.error());
 8616|  12.4k|    }
 8617|   318k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   331k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   161k|{
 8631|   161k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   161k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   161k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 159k]
  |  |  ------------------
  ------------------
 8635|  2.07k|        return unexpected(result.error());
 8636|  2.07k|    }
 8637|   159k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   161k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   159k|    {
 1663|   159k|        return std::move(value());
 1664|   159k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   158k|    {
 3568|   158k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   158k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   158k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  9.05M|    {
 3574|  9.05M|        return m_code == good;
 3575|  9.05M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  55.8k|    {
 3585|  55.8k|        return m_code;
 3586|  55.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  6.63M|    {
 3330|  6.63M|        return m_iterator;
 3331|  6.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  87.9M|    {
 3330|  87.9M|        return m_iterator;
 3331|  87.9M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  1.21M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  37.2k|    {
 6282|  37.2k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 37.2k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  37.2k|        m_specs.width = width;
 6289|  37.2k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.17M|    {
 6303|  1.17M|        m_specs.type = type;
 6304|  1.17M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  42.8k|    {
 6320|  42.8k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  42.8k|        const auto end_value = static_cast<unsigned>(end);
 6322|  42.8k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  42.8k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  42.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.8k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  42.8k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  42.8k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.15M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.11M, False: 42.8k]
  ------------------
 6329|  1.11M|                m_specs.charset_literals[v / 8] |=
 6330|  1.11M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.11M|            }
 6332|  42.8k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  42.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  37.2k|    {
 6365|  37.2k|        SCN_UNLIKELY_ATTR
 6366|  37.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  37.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.27M|    {
 6376|  1.27M|        return static_cast<bool>(m_error);
 6377|  1.27M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  55.8k|{
 3609|  55.8k|    return a.code() == b;
 3610|  55.8k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  55.8k|{
 3613|  55.8k|    return !(a == b);
 3614|  55.8k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  18.6k|{
 7063|  18.6k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 18.6k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 18.6k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 18.6k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 18.6k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 18.6k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 18.6k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 18.6k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 18.6k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 18.6k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 18.6k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 18.6k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 18.6k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 18.6k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 18.6k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 18.6k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 18.6k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 18.6k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 18.6k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 18.6k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  2.07k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 2.07k, False: 16.5k]
  ------------------
 7096|  6.21k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 4.14k, False: 14.4k]
  ------------------
 7097|  10.3k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 4.14k, False: 14.4k]
  ------------------
 7098|  18.6k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 8.28k, False: 10.3k]
  ------------------
 7099|  18.6k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 18.6k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 18.6k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  18.6k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  18.6k|            SCN_CLANG_POP
 7110|  18.6k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  18.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  18.6k|{
 3654|  18.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  18.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  21.5k|{
 3654|  21.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  21.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  10.9k|{
 3654|  10.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.9k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  1.17M|{
 7205|  1.17M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 1.17M]
  ------------------
 7206|  1.17M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 1.13M, False: 40.0k]
  ------------------
 7207|  1.17M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 21.4k, False: 18.6k]
  ------------------
 7208|  1.17M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 18.6k]
  ------------------
 7209|  1.17M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 18.6k]
  ------------------
 7210|  1.15M|        return;
 7211|  1.15M|    }
 7212|  18.6k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 18.6k, False: 0]
  ------------------
 7213|  18.6k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.6k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  18.6k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  18.6k|        }
 7218|      0|        return;
 7219|  18.6k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  36.4M|    {
 4195|  36.4M|        return m_end == nullptr;
 4196|  36.4M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   142k|{
 3715|   142k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   142k|                                          const CharT*, const CharT*>) {
 3717|   142k|        return {first, last};
 3718|   142k|    }
 3719|   142k|    else {
 3720|   142k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   142k|    }
 3722|   142k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|   737k|    {
 4211|   737k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 737k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   737k|        return parent()->get_segment_starting_at(position());
 4217|   737k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  21.2M|    {
 4205|  21.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  21.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  21.2M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  21.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|   737k|    {
 4101|   737k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 423k, False: 313k]
  |  |  ------------------
  ------------------
 4102|   737k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   423k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   423k|        }
 4105|   313k|        const auto start = pos - m_putback_buffer.size();
 4106|   313k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   313k|        return m_current_view.substr(start);
 4108|   313k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|   830k|    {
 4190|   830k|        return m_position;
 4191|   830k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   471k|    {
 4123|   471k|        return m_is_contiguous;
 4124|   471k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   489M|    {
 4195|   489M|        return m_end == nullptr;
 4196|   489M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   800k|{
 3715|   800k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   800k|                                          const CharT*, const CharT*>) {
 3717|   800k|        return {first, last};
 3718|   800k|    }
 3719|   800k|    else {
 3720|   800k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   800k|    }
 3722|   800k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  2.41M|    {
 4211|  2.41M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 2.41M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  2.41M|        return parent()->get_segment_starting_at(position());
 4217|  2.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|   285M|    {
 4205|   285M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   285M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   285M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   285M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  2.41M|    {
 4101|  2.41M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60M, False: 819k]
  |  |  ------------------
  ------------------
 4102|  2.41M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.60M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.60M|        }
 4105|   819k|        const auto start = pos - m_putback_buffer.size();
 4106|   819k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   819k|        return m_current_view.substr(start);
 4108|   819k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.90M|    {
 4190|  2.90M|        return m_position;
 4191|  2.90M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  2.47M|    {
 4123|  2.47M|        return m_is_contiguous;
 4124|  2.47M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.59M|    {
 3180|  1.59M|        return static_cast<D&>(*this);
 3181|  1.59M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   797k|    {
 2978|   797k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   797k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   797k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   797k|    {
 3005|   797k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   797k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   797k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   797k|    {
 3221|   797k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 728, False: 796k]
  ------------------
 3222|   797k|                   ? nullptr
 3223|   797k|                   : std::addressof(*ranges::begin(derived()));
 3224|   797k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  3.21M|    {
 3180|  3.21M|        return static_cast<D&>(*this);
 3181|  3.21M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.60M|    {
 2978|  1.60M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.60M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.60M|    {
 3005|  1.60M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.60M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.60M|    {
 3221|  1.60M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 1.60M]
  ------------------
 3222|  1.60M|                   ? nullptr
 3223|  1.60M|                   : std::addressof(*ranges::begin(derived()));
 3224|  1.60M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  64.2k|    {
 8169|  64.2k|        return ranges::subrange{begin(), end()};
 8170|  64.2k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   190k|    {
 8153|   190k|        return m_current;
 8154|   190k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  64.2k|    {
 8161|  64.2k|        return ranges::default_sentinel;
 8162|  64.2k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  2.41M|    {
 3316|  2.41M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  2.89M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   147k|    {
 1837|   147k|        return detail::transform_error_impl(std::move(*this),
 1838|   147k|                                            std::forward<F>(f));
 1839|   147k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   147k|{
 1323|   147k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   147k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   147k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   147k|            return result(*std::forward<Exp>(exp));
 1327|   147k|        }
 1328|       |
 1329|   147k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   147k|        return result(unexpect, monostate{});
 1331|   147k|    }
 1332|   147k|    else {
 1333|   147k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   147k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145k, False: 2.22k]
  |  |  ------------------
  ------------------
 1335|   147k|                   ? result(*std::forward<Exp>(exp))
 1336|   147k|                   : result(unexpect,
 1337|  2.22k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.22k|                                           std::forward<Exp>(exp).error()));
 1339|   147k|    }
 1340|   147k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   295k|    {
  485|   295k|        return m_has_value;
  486|   295k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   145k|    {
 1663|   145k|        return std::move(value());
 1664|   145k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   145k|    {
 1627|   145k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   145k|        return this->get_value();
 1629|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   145k|    {
  451|   145k|        return m_value;
  452|   145k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   347k|    {
 1430|   347k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   347k|    {
  437|   347k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   364k|    {
 1177|   364k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  14.1k|{
 1211|  14.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  14.1k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.22k|    {
 1614|  2.22k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.22k|        return std::move(this->get_unexpected().error());
 1616|  2.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.22k|    {
  468|  2.22k|        return m_unexpected;
  469|  2.22k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  28.2k|    {
  361|  28.2k|        return m_unexpected;
  362|  28.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.22k|    {
 1486|  2.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  16.7k|    {
  447|  16.7k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   331k|    {
 8169|   331k|        return ranges::subrange{begin(), end()};
 8170|   331k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   989k|    {
 8153|   989k|        return m_current;
 8154|   989k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   331k|    {
 8161|   331k|        return ranges::default_sentinel;
 8162|   331k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  30.8M|    {
 3316|  30.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   807k|    {
 1837|   807k|        return detail::transform_error_impl(std::move(*this),
 1838|   807k|                                            std::forward<F>(f));
 1839|   807k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   807k|{
 1323|   807k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   807k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   807k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   807k|            return result(*std::forward<Exp>(exp));
 1327|   807k|        }
 1328|       |
 1329|   807k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   807k|        return result(unexpect, monostate{});
 1331|   807k|    }
 1332|   807k|    else {
 1333|   807k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   807k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   807k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 804k, False: 2.73k]
  |  |  ------------------
  ------------------
 1335|   807k|                   ? result(*std::forward<Exp>(exp))
 1336|   807k|                   : result(unexpect,
 1337|  2.73k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.73k|                                           std::forward<Exp>(exp).error()));
 1339|   807k|    }
 1340|   807k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.61M|    {
  485|  1.61M|        return m_has_value;
  486|  1.61M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   804k|    {
 1663|   804k|        return std::move(value());
 1664|   804k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   804k|    {
 1627|   804k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   804k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   804k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   804k|        return this->get_value();
 1629|   804k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   804k|    {
  451|   804k|        return m_value;
  452|   804k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.91M|    {
 1430|  1.91M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.91M|    {
  437|  1.91M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.95M|    {
 1177|  1.95M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.73k|    {
 1614|  2.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.73k|        return std::move(this->get_unexpected().error());
 1616|  2.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.73k|    {
  468|  2.73k|        return m_unexpected;
  469|  2.73k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.73k|    {
 1486|  2.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  32.6k|    {
  447|  32.6k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  51.0k|    {
  347|  51.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  29.5k|    {
 1476|  29.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  33.2k|    {
  447|  33.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   663k|    {
 1177|   663k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   628k|    {
 1430|   628k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   628k|    {
  437|   628k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   663k|    {
 1598|   663k|        return has_value();
 1599|   663k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.32M|    {
  485|  1.32M|        return m_has_value;
  486|  1.32M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  33.2k|    {
 1604|  33.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.2k|        return this->get_unexpected().error();
 1606|  33.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.2k|    {
  468|  33.2k|        return m_unexpected;
  469|  33.2k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   523k|    {
 1663|   523k|        return std::move(value());
 1664|   523k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   630k|    {
 1627|   630k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   630k|        return this->get_value();
 1629|   630k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   630k|    {
  451|   630k|        return m_value;
  452|   630k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  59.9k|    {
 1476|  59.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  65.3k|    {
  447|  65.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.90M|    {
 1177|  3.90M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  3.83M|    {
 1430|  3.83M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.83M|    {
  437|  3.83M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.90M|    {
 1598|  3.90M|        return has_value();
 1599|  3.90M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.81M|    {
  485|  7.81M|        return m_has_value;
  486|  7.81M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  65.3k|    {
 1604|  65.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  65.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  65.3k|        return this->get_unexpected().error();
 1606|  65.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  65.3k|    {
  468|  65.3k|        return m_unexpected;
  469|  65.3k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.20M|    {
 1663|  3.20M|        return std::move(value());
 1664|  3.20M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.83M|    {
 1627|  3.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.83M|        return this->get_value();
 1629|  3.83M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.83M|    {
  451|  3.83M|        return m_value;
  452|  3.83M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   267k|    {
 1837|   267k|        return detail::transform_error_impl(std::move(*this),
 1838|   267k|                                            std::forward<F>(f));
 1839|   267k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   267k|{
 1323|   267k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   267k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   267k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   267k|            return result(*std::forward<Exp>(exp));
 1327|   267k|        }
 1328|       |
 1329|   267k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   267k|        return result(unexpect, monostate{});
 1331|   267k|    }
 1332|   267k|    else {
 1333|   267k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   267k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   267k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 264k, False: 3.69k]
  |  |  ------------------
  ------------------
 1335|   267k|                   ? result(*std::forward<Exp>(exp))
 1336|   267k|                   : result(unexpect,
 1337|  3.69k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.69k|                                           std::forward<Exp>(exp).error()));
 1339|   267k|    }
 1340|   267k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   535k|    {
  485|   535k|        return m_has_value;
  486|   535k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   264k|    {
 1663|   264k|        return std::move(value());
 1664|   264k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   264k|    {
 1627|   264k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   264k|        return this->get_value();
 1629|   264k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   264k|    {
  451|   264k|        return m_value;
  452|   264k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.69k|    {
 1614|  3.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.69k|        return std::move(this->get_unexpected().error());
 1616|  3.69k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.69k|    {
  468|  3.69k|        return m_unexpected;
  469|  3.69k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.69k|    {
 1486|  3.69k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  6.60M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  14.5k|    {
 1476|  14.5k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  1.91M|    {
 4280|  1.91M|        return x.is_at_end();
 4281|  1.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  3.93M|    {
 4324|  3.93M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 3.93M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  3.93M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 3.93M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  3.93M|        return !read_at_position();
 4331|  3.93M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  10.8M|    {
 4304|  10.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  10.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 10.8M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  10.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  10.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.82M, False: 2.02M]
  |  |  ------------------
  ------------------
 4311|  8.82M|            return true;
 4312|  8.82M|        }
 4313|       |
 4314|  4.03M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.02M, False: 2.00M]
  ------------------
 4315|  2.02M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 18.0k, False: 2.00M]
  ------------------
 4316|  18.0k|                return false;
 4317|  18.0k|            }
 4318|  2.02M|        }
 4319|  2.00M|        return true;
 4320|  2.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  14.8M|    {
 4081|  14.8M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  14.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  3.60M|    {
 4239|  3.60M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  3.60M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 3.60M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  3.60M|        auto res = read_at_position();
 4248|  3.60M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  3.60M|        return parent()->get_character_at(m_position);
 4250|  3.60M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  3.60M|    {
 4112|  3.60M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95M, False: 1.64M]
  |  |  ------------------
  ------------------
 4113|  3.60M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  1.95M|            return m_putback_buffer[pos];
 4115|  1.95M|        }
 4116|  1.64M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.64M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.64M|        return m_current_view[start];
 4119|  1.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   145k|    {
 1430|   145k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   145k|    {
  437|   145k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   147k|    {
 1177|   147k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.22k|    {
 1476|  2.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.22k|    {
  447|  2.22k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  14.1k|    {
  356|  14.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.1k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  1.44M|    {
 4274|  1.44M|        return !(lhs == rhs);
 4275|  1.44M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  1.44M|    {
 4269|  1.44M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 1.44M, False: 0]
  |  Branch (4269:46): [True: 247k, False: 1.20M]
  ------------------
 4270|  1.44M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  3.31M|    {
 4225|  3.31M|        ++m_position;
 4226|  3.31M|        (void)read_at_position();
 4227|  3.31M|        return *this;
 4228|  3.31M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  14.1k|    {
  347|  14.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.1k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    966|    {
 1476|    966|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    966|    {
  447|    966|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   119k|    {
 1177|   119k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   118k|    {
 1430|   118k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   118k|    {
  437|   118k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   119k|    {
 1598|   119k|        return has_value();
 1599|   119k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   239k|    {
  485|   239k|        return m_has_value;
  486|   239k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|    966|    {
 1604|    966|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    966|        return this->get_unexpected().error();
 1606|    966|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    966|    {
  468|    966|        return m_unexpected;
  469|    966|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   118k|    {
 1663|   118k|        return std::move(value());
 1664|   118k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   118k|    {
 1627|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   118k|        return this->get_value();
 1629|   118k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   118k|    {
  451|   118k|        return m_value;
  452|   118k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  5.97M|    {
 3334|  5.97M|        return m_sentinel;
 3335|  5.97M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|   154k|    {
 3330|   154k|        return m_iterator;
 3331|   154k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|   154k|    {
 3334|   154k|        return m_sentinel;
 3335|   154k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   364k|    {
 1598|   364k|        return has_value();
 1599|   364k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   729k|    {
  485|   729k|        return m_has_value;
  486|   729k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  16.7k|    {
 1604|  16.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.7k|        return this->get_unexpected().error();
 1606|  16.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  16.7k|    {
  468|  16.7k|        return m_unexpected;
  469|  16.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   289k|    {
 1663|   289k|        return std::move(value());
 1664|   289k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   348k|    {
 1627|   348k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   348k|        return this->get_value();
 1629|   348k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   348k|    {
  451|   348k|        return m_value;
  452|   348k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   293k|{
  326|   293k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   293k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   146k|    {
 3316|   146k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.02M|    {
 4291|  2.02M|        return !x.is_at_end();
 4292|  2.02M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.69k|    {
 1476|  3.69k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.69k|    {
  447|  3.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   267k|    {
 1177|   267k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   264k|    {
 1430|   264k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   264k|    {
  437|   264k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.47k|    {
 1476|  1.47k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.47k|    {
  447|  1.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   217k|    {
 1177|   217k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   215k|    {
 1430|   215k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   215k|    {
  437|   215k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   217k|    {
 1598|   217k|        return has_value();
 1599|   217k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   434k|    {
  485|   434k|        return m_has_value;
  486|   434k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.47k|    {
 1604|  1.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.47k|        return this->get_unexpected().error();
 1606|  1.47k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.47k|    {
  468|  1.47k|        return m_unexpected;
  469|  1.47k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   215k|    {
 1663|   215k|        return std::move(value());
 1664|   215k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   215k|    {
 1627|   215k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   215k|        return this->get_value();
 1629|   215k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   215k|    {
  451|   215k|        return m_value;
  452|   215k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   797k|    {
 2855|   797k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   797k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   797k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   797k|    {
 2836|   797k|        return t.data();
 2837|   797k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   121k|    {
 1476|   121k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   121k|    {
  447|   121k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.91M|    {
 1177|  2.91M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  2.79M|    {
 1430|  2.79M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  2.79M|    {
  437|  2.79M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  58.8k|    {
 1653|  58.8k|        return value();
 1654|  58.8k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   106k|    {
 1653|   106k|        return value();
 1654|   106k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    878|    {
 1430|    878|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    878|    {
  437|    878|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.75k|    {
 1430|  1.75k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.75k|    {
  437|  1.75k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  29.9k|    {
 1476|  29.9k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  28.2M|    {
 4280|  28.2M|        return x.is_at_end();
 4281|  28.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  55.5M|    {
 4324|  55.5M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 55.5M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  55.5M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 55.5M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  55.5M|        return !read_at_position();
 4331|  55.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   147M|    {
 4304|   147M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   147M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   147M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 147M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   147M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   147M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 120M, False: 26.9M]
  |  |  ------------------
  ------------------
 4311|   120M|            return true;
 4312|   120M|        }
 4313|       |
 4314|  53.9M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 26.9M, False: 26.9M]
  ------------------
 4315|  26.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 24.4k, False: 26.9M]
  ------------------
 4316|  24.4k|                return false;
 4317|  24.4k|            }
 4318|  26.9M|        }
 4319|  26.9M|        return true;
 4320|  26.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   201M|    {
 4081|   201M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   201M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  54.4M|    {
 4239|  54.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  54.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  54.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 54.4M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  54.4M|        auto res = read_at_position();
 4248|  54.4M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  54.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  54.4M|        return parent()->get_character_at(m_position);
 4250|  54.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  54.4M|    {
 4112|  54.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  54.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2M, False: 26.1M]
  |  |  ------------------
  ------------------
 4113|  54.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  28.2M|            return m_putback_buffer[pos];
 4115|  28.2M|        }
 4116|  26.1M|        const auto start = pos - m_putback_buffer.size();
 4117|  26.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  26.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  26.1M|        return m_current_view[start];
 4119|  26.1M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   152M|{
 3807|   152M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   152M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   152M|    }
 3810|   152M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   152M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   152M|    }
 3813|   152M|    else {
 3814|       |        // utf-32
 3815|   152M|        static_assert(sizeof(U) == 4);
 3816|   152M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   152M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   152M|        return 1;
 3818|   152M|    }
 3819|   152M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   804k|    {
 1430|   804k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   804k|    {
  437|   804k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   807k|    {
 1177|   807k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.73k|    {
 1476|  2.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.73k|    {
  447|  2.73k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  10.7M|    {
 4274|  10.7M|        return !(lhs == rhs);
 4275|  10.7M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  10.8M|    {
 4269|  10.8M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 10.8M, False: 0]
  |  Branch (4269:46): [True: 326k, False: 10.4M]
  ------------------
 4270|  10.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  37.4M|    {
 4225|  37.4M|        ++m_position;
 4226|  37.4M|        (void)read_at_position();
 4227|  37.4M|        return *this;
 4228|  37.4M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   152M|{
 4013|   152M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   152M|        return decode_utf8_code_point_exhaustive(input);
 4015|   152M|    }
 4016|   152M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   152M|        return decode_utf16_code_point_exhaustive(input);
 4018|   152M|    }
 4019|   152M|    else {
 4020|   152M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   152M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   152M|        auto cp = static_cast<char32_t>(input.front());
 4022|   152M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   152M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10M, False: 151M]
  |  |  ------------------
  ------------------
 4023|  1.10M|            return invalid_code_point;
 4024|  1.10M|        }
 4025|   151M|        return cp;
 4026|   152M|    }
 4027|   152M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.09k|    {
 1476|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.09k|    {
  447|  1.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   644k|    {
 1177|   644k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   643k|    {
 1430|   643k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   643k|    {
  437|   643k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   644k|    {
 1598|   644k|        return has_value();
 1599|   644k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.28M|    {
  485|  1.28M|        return m_has_value;
  486|  1.28M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.09k|    {
 1604|  1.09k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.09k|        return this->get_unexpected().error();
 1606|  1.09k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.09k|    {
  468|  1.09k|        return m_unexpected;
  469|  1.09k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   643k|    {
 1663|   643k|        return std::move(value());
 1664|   643k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   643k|    {
 1627|   643k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   643k|        return this->get_value();
 1629|   643k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   643k|    {
  451|   643k|        return m_value;
  452|   643k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  85.2M|    {
 3334|  85.2M|        return m_sentinel;
 3335|  85.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   812k|    {
 3330|   812k|        return m_iterator;
 3331|   812k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   812k|    {
 3334|   812k|        return m_sentinel;
 3335|   812k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.95M|    {
 1598|  1.95M|        return has_value();
 1599|  1.95M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.90M|    {
  485|  3.90M|        return m_has_value;
  486|  3.90M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  32.6k|    {
 1604|  32.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  32.6k|        return this->get_unexpected().error();
 1606|  32.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  32.6k|    {
  468|  32.6k|        return m_unexpected;
  469|  32.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.60M|    {
 1663|  1.60M|        return std::move(value());
 1664|  1.60M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.91M|    {
 1627|  1.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.91M|        return this->get_value();
 1629|  1.91M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.91M|    {
  451|  1.91M|        return m_value;
  452|  1.91M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  71.8M|{
 3699|  71.8M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  71.8M|                                          decltype(first), decltype(last)> &&
 3701|  71.8M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  71.8M|        return {first, last};
 3703|  71.8M|    }
 3704|  71.8M|    else {
 3705|  71.8M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  71.8M|                                       to_address(first), to_address(last)))};
 3707|  71.8M|    }
 3708|  71.8M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   215M|{
  326|   215M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   215M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   215M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   217M|{
  304|   217M|    return p;
  305|   217M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.60M|{
  326|  1.60M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.60M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   804k|    {
 3316|   804k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  27.2M|    {
 4291|  27.2M|        return !x.is_at_end();
 4292|  27.2M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  5.46k|    {
 1476|  5.46k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  5.46k|    {
  447|  5.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.61M|    {
 1177|  1.61M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.60M|    {
 1430|  1.60M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.60M|    {
  437|  1.60M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.22M|    {
  485|  3.22M|        return m_has_value;
  486|  3.22M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.60M|    {
 1627|  1.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.60M|        return this->get_value();
 1629|  1.60M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.60M|    {
  451|  1.60M|        return m_value;
  452|  1.60M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.18k|    {
 1476|  2.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.18k|    {
  447|  2.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.28M|    {
 1177|  1.28M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.28M|    {
 1430|  1.28M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.28M|    {
  437|  1.28M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.61M|    {
 1837|  1.61M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.61M|                                            std::forward<F>(f));
 1839|  1.61M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.61M|{
 1323|  1.61M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.61M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.61M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.61M|            return result(*std::forward<Exp>(exp));
 1327|  1.61M|        }
 1328|       |
 1329|  1.61M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.61M|        return result(unexpect, monostate{});
 1331|  1.61M|    }
 1332|  1.61M|    else {
 1333|  1.61M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.61M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.60M, False: 5.46k]
  |  |  ------------------
  ------------------
 1335|  1.61M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.61M|                   : result(unexpect,
 1337|  5.46k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.46k|                                           std::forward<Exp>(exp).error()));
 1339|  1.61M|    }
 1340|  1.61M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.60M|    {
 1663|  1.60M|        return std::move(value());
 1664|  1.60M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.46k|    {
 1614|  5.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.46k|        return std::move(this->get_unexpected().error());
 1616|  5.46k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.46k|    {
  468|  5.46k|        return m_unexpected;
  469|  5.46k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  5.46k|    {
 1486|  5.46k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.28M|    {
 1598|  1.28M|        return has_value();
 1599|  1.28M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.57M|    {
  485|  2.57M|        return m_has_value;
  486|  2.57M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.18k|    {
 1604|  2.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.18k|        return this->get_unexpected().error();
 1606|  2.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.18k|    {
  468|  2.18k|        return m_unexpected;
  469|  2.18k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.28M|    {
 1663|  1.28M|        return std::move(value());
 1664|  1.28M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.28M|    {
 1627|  1.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.28M|        return this->get_value();
 1629|  1.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.28M|    {
  451|  1.28M|        return m_value;
  452|  1.28M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.60M|    {
 2855|  1.60M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.60M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.60M|    {
 2836|  1.60M|        return t.data();
 2837|  1.60M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   318k|    {
 1653|   318k|        return value();
 1654|   318k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   637k|    {
 1653|   637k|        return value();
 1654|   637k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|     60|    {
 1430|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|     60|    {
  437|     60|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    120|    {
 1430|    120|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    120|    {
  437|    120|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   360k|    {
 5466|   360k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   360k|        return static_cast<std::size_t>(m_desc &
 5471|   360k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   360k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   720k|    {
 5491|   720k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   720k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   360k|    {
 5434|   360k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   360k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   360k|        const auto t = type(id);
 5446|   360k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   360k|        basic_scan_arg<Context> arg;
 5451|   360k|        arg.m_type = t;
 5452|   360k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 360k, False: 0]
  ------------------
 5453|   360k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   360k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   360k|        return arg;
 5459|   360k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   360k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   360k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   360k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   360k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   360k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   360k|    {
 5495|   360k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   360k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   624k|    {
 5247|   624k|        return m_type != detail::arg_type::none_type;
 5248|   624k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   160k|{
 8417|   160k|#define SCN_VISIT(Type)                                         \
 8418|   160k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   160k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   160k|    }                                                           \
 8421|   160k|    else {                                                      \
 8422|   160k|        return vis(monostate_val);                              \
 8423|   160k|    }
 8424|       |
 8425|   160k|    monostate monostate_val{};
 8426|       |
 8427|   160k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 160k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 160k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 160k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 160k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 160k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 160k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 160k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 160k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 160k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 160k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 160k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 160k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 160k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 160k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 160k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 160k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 160k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 160k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  80.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 80.3k, False: 80.3k]
  ------------------
 8465|  80.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  80.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  80.3k|    }                                                           \
  |  | 8421|  80.3k|    else {                                                      \
  |  | 8422|  80.3k|        return vis(monostate_val);                              \
  |  | 8423|  80.3k|    }
  ------------------
 8466|  80.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 80.3k, False: 80.3k]
  ------------------
 8467|  80.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  80.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  80.3k|    }                                                           \
  |  | 8421|  80.3k|    else {                                                      \
  |  | 8422|  80.3k|        return vis(monostate_val);                              \
  |  | 8423|  80.3k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 160k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 160k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 160k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 160k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 160k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 160k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 160k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   160k|            SCN_CLANG_POP
 8495|   160k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   193k|    {
 5545|   193k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  68.3k|    {
 8138|  68.3k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   193k|    {
 8056|   193k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|   157k|{
 4344|   157k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 157k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   157k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   157k|                            ranges::default_sentinel};
 4350|   157k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|   157k|    {
 4177|   157k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   157k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   157k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  88.7k|{
 8417|  88.7k|#define SCN_VISIT(Type)                                         \
 8418|  88.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  88.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  88.7k|    }                                                           \
 8421|  88.7k|    else {                                                      \
 8422|  88.7k|        return vis(monostate_val);                              \
 8423|  88.7k|    }
 8424|       |
 8425|  88.7k|    monostate monostate_val{};
 8426|       |
 8427|  88.7k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 88.7k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 88.7k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 88.7k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 88.7k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 88.7k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 88.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 88.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 88.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 88.7k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 88.7k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 88.7k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 88.7k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 88.7k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 88.7k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 88.7k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 88.7k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 88.7k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 88.7k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 88.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  88.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 88.7k, False: 0]
  ------------------
 8467|  88.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  88.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  88.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  88.7k|    }                                                           \
  |  | 8421|  88.7k|    else {                                                      \
  |  | 8422|  88.7k|        return vis(monostate_val);                              \
  |  | 8423|  88.7k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 88.7k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 88.7k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 88.7k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 88.7k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 88.7k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 88.7k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 88.7k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  88.7k|            SCN_CLANG_POP
 8495|  88.7k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   125k|{
 7044|   125k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   125k|    handler.check_args_exhausted();
 7046|   125k|    return handler.get_error();
 7047|   125k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   125k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   125k|    auto begin = format.data();
 7013|   125k|    auto it = begin;
 7014|   125k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   230k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 125k, False: 104k]
  ------------------
 7017|   125k|        const auto ch = *it++;
 7018|   125k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 125k, False: 0]
  ------------------
 7019|   125k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   125k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   125k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 20.7k, False: 104k]
  ------------------
 7023|  20.7k|                return;
 7024|  20.7k|            }
 7025|   125k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   125k|    }
 7036|       |
 7037|   104k|    handler.on_literal_text(begin, end);
 7038|   104k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   125k|{
 6942|   125k|    struct id_adapter {
 6943|   125k|        constexpr void operator()()
 6944|   125k|        {
 6945|   125k|            arg_id = handler.on_arg_id();
 6946|   125k|        }
 6947|   125k|        constexpr void operator()(std::size_t id)
 6948|   125k|        {
 6949|   125k|            arg_id = handler.on_arg_id(id);
 6950|   125k|        }
 6951|       |
 6952|   125k|        constexpr void on_error(const char* msg)
 6953|   125k|        {
 6954|   125k|            SCN_UNLIKELY_ATTR
 6955|   125k|            handler.on_error(msg);
 6956|   125k|        }
 6957|       |
 6958|   125k|        Handler& handler;
 6959|   125k|        std::size_t arg_id;
 6960|   125k|    };
 6961|       |
 6962|   125k|    ++begin;
 6963|   125k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   125k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 125k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   125k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 125k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   125k|    else {
 6975|   125k|        auto adapter = id_adapter{handler, 0};
 6976|   125k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   125k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   125k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 125k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   125k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 125k, False: 0]
  ------------------
 6987|   125k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   125k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   125k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 117k]
  |  |  |  Branch (859:45): [True: 0, False: 125k]
  |  |  |  Branch (859:45): [True: 8.28k, False: 117k]
  |  |  ------------------
  ------------------
 6993|  8.28k|                handler.on_error("Unknown format specifier");
 6994|  8.28k|                return begin;
 6995|  8.28k|            }
 6996|   125k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   125k|    }
 7003|   117k|    return begin + 1;
 7004|   125k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   193k|    {
 8039|   193k|        return m_args.get(id);
 8040|   193k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   181k|    {
 8049|   181k|        return m_locale;
 8050|   181k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   193k|    {
 5566|   193k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   193k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   193k|        do_check_arg_id(id);
 5574|   193k|        return id;
 5575|   193k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   193k|{
 6054|   193k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   193k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   193k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   125k|{
 6443|   125k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   125k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 125k, False: 0]
  |  Branch (6444:26): [True: 0, False: 125k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   125k|    handler();
 6449|   125k|    return begin;
 6450|   125k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  12.4k|{
 6392|  12.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  12.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  12.4k|    unsigned long long value = 0;
 6396|  24.8k|    do {
 6397|  24.8k|        value *= 10;
 6398|  24.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  24.8k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 24.8k]
  ------------------
 6400|  24.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  24.8k|        ++begin;
 6404|  24.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 24.8k, False: 0]
  |  Branch (6404:30): [True: 24.8k, False: 0]
  |  Branch (6404:47): [True: 12.4k, False: 12.4k]
  ------------------
 6405|  12.4k|    return static_cast<int>(value);
 6406|  12.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   125k|        {
 6945|   125k|            arg_id = handler.on_arg_id();
 6946|   125k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   387k|    {
 5252|   387k|        return m_type;
 5253|   387k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   181k|    {
 5561|   181k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   181k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   375k|    {
 5550|   375k|        return m_format.data();
 5551|   375k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   125k|    {
 7122|   125k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   125k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   125k|{
 6858|   125k|    auto do_presentation = [&]() -> const CharT* {
 6859|   125k|        if (*begin == CharT{'['}) {
 6860|   125k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   125k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   125k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   125k|                return begin;
 6866|   125k|            }
 6867|   125k|            handler.on_character_set_string(set);
 6868|   125k|            return begin;
 6869|   125k|        }
 6870|   125k|        if (*begin == CharT{'/'}) {
 6871|   125k|            return parse_presentation_regex(begin, end, handler);
 6872|   125k|        }
 6873|   125k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   125k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   125k|            handler.on_error("Invalid type specifier in format string");
 6876|   125k|            return begin;
 6877|   125k|        }
 6878|   125k|        handler.on_type(type);
 6879|   125k|        return begin;
 6880|   125k|    };
 6881|       |
 6882|   125k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 125k, False: 0]
  |  Branch (6882:28): [True: 111k, False: 14.1k]
  ------------------
 6883|   125k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 111k, False: 0]
  |  Branch (6883:36): [True: 107k, False: 4.14k]
  ------------------
 6884|   107k|        return do_presentation();
 6885|   107k|    }
 6886|       |
 6887|  18.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  18.3k|    begin = parse_align(begin, end, handler);
 6893|  18.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  18.3k|    begin = parse_width(begin, end, handler);
 6899|  18.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  18.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 18.3k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  18.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 4.14k, False: 14.1k]
  ------------------
 6918|  4.14k|        handler.on_localized();
 6919|  4.14k|        ++begin;
 6920|  4.14k|    }
 6921|  18.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  18.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 18.3k, False: 0]
  |  Branch (6926:25): [True: 14.1k, False: 4.14k]
  ------------------
 6927|  14.1k|        do_presentation();
 6928|  14.1k|    }
 6929|  18.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  18.3k|    return begin;
 6935|  18.3k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   172k|{
 6507|   172k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 166k, False: 6.21k]
  |  Branch (6507:33): [True: 166k, False: 0]
  ------------------
 6508|   172k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 6.21k, False: 0]
  |  Branch (6508:33): [True: 6.21k, False: 0]
  ------------------
 6509|   172k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   121k|    auto do_presentation = [&]() -> const CharT* {
 6859|   121k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 5.89k, False: 115k]
  ------------------
 6860|  5.89k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  5.89k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  5.89k|            handler.on_character_set_string(set);
 6868|  5.89k|            return begin;
 6869|  5.89k|        }
 6870|   115k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 115k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   115k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   115k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 111k]
  |  |  ------------------
  ------------------
 6875|  4.14k|            handler.on_error("Invalid type specifier in format string");
 6876|  4.14k|            return begin;
 6877|  4.14k|        }
 6878|   111k|        handler.on_type(type);
 6879|   111k|        return begin;
 6880|   115k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  5.89k|{
 6697|  5.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.89k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.89k|    auto start = begin;
 6701|  5.89k|    ++begin;
 6702|       |
 6703|  5.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  5.89k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 5.89k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  5.89k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 5.89k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  17.6k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 17.6k, False: 0]
  ------------------
 6728|  17.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  17.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.89k, False: 11.7k]
  ------------------
 6733|  5.89k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.89k|        }
 6735|       |
 6736|  11.7k|        parse_presentation_set_literal(begin, end, handler);
 6737|  11.7k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  5.89k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  11.7k|{
 6661|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  11.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  11.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  11.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 11.7k, False: 0]
  |  Branch (6668:25): [True: 11.7k, False: 0]
  |  Branch (6668:49): [True: 11.7k, False: 0]
  ------------------
 6669|  11.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 11.7k, False: 0]
  ------------------
 6670|  11.7k|        ++begin;
 6671|       |
 6672|  11.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  11.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  11.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  11.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  11.7k|        return;
 6686|  11.7k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  23.5k|{
 6637|  23.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  23.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  23.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.5k]
  |  |  |  Branch (859:45): [True: 0, False: 23.5k]
  |  |  |  Branch (859:45): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  23.5k|    const auto cp =
 6646|  23.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  23.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  23.5k|    begin += len;
 6653|  23.5k|    return cp;
 6654|  23.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  8.84k|    {
 6346|  8.84k|        m_specs.charset_string_data = fmt.data();
 6347|  8.84k|        m_specs.charset_string_size = fmt.size();
 6348|  8.84k|        on_type(presentation_type::string_set);
 6349|  8.84k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   178k|{
 6455|   178k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 178k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 178k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 178k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 178k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 178k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 178k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 178k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 178k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 178k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 178k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 178k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 178k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 178k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 178k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 178k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 178k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 178k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 178k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   166k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 166k, False: 12.4k]
  ------------------
 6486|   166k|            return presentation_type::string;
 6487|  6.21k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 6.21k, False: 172k]
  ------------------
 6488|  6.21k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 178k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 178k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 178k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 178k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  6.21k|        default:
  ------------------
  |  Branch (6499:9): [True: 6.21k, False: 172k]
  ------------------
 6500|  6.21k|            return presentation_type::none;
 6501|   178k|    }
 6502|   178k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  18.3k|{
 6532|  18.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  18.3k|    auto check_align = [](wchar_t ch) {
 6535|  18.3k|        switch (ch) {
 6536|  18.3k|            case L'<':
 6537|  18.3k|                return align_type::left;
 6538|  18.3k|            case L'>':
 6539|  18.3k|                return align_type::right;
 6540|  18.3k|            case L'^':
 6541|  18.3k|                return align_type::center;
 6542|  18.3k|            default:
 6543|  18.3k|                return align_type::none;
 6544|  18.3k|        }
 6545|  18.3k|    };
 6546|       |
 6547|  18.3k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  18.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  |  Branch (859:45): [True: 0, False: 18.3k]
  |  |  |  Branch (859:45): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6549|  18.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  18.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  18.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  18.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  18.3k|    const auto begin_before_fill = begin;
 6559|  18.3k|    begin += potential_fill_len;
 6560|       |
 6561|  18.3k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 18.3k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  18.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  18.3k|    const auto begin_after_fill = begin;
 6567|  18.3k|    ++begin;
 6568|       |
 6569|  18.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 18.3k, False: 0]
  ------------------
 6570|  18.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  18.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 5.89k, False: 12.4k]
  ------------------
 6575|  5.89k|            return begin_before_fill;
 6576|  5.89k|        }
 6577|  18.3k|    }
 6578|       |
 6579|  12.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 12.4k, False: 0]
  ------------------
 6580|  12.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 12.4k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  12.4k|        return begin_before_fill;
 6585|  12.4k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  12.4k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  27.4k|{
 6514|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  27.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  27.4k|        return 1;
 6517|  27.4k|    }
 6518|  27.4k|    else {
 6519|  27.4k|        const auto lengths =
 6520|  27.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  27.4k|            "\3\4";
 6522|  27.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  27.4k|        return len;
 6524|  27.4k|    }
 6525|  27.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  36.6k|    auto check_align = [](wchar_t ch) {
 6535|  36.6k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 36.6k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 36.6k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 36.6k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  36.6k|            default:
  ------------------
  |  Branch (6542:13): [True: 36.6k, False: 0]
  ------------------
 6543|  36.6k|                return align_type::none;
 6544|  36.6k|        }
 6545|  36.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  18.3k|{
 6597|  18.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  18.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 18.3k, False: 0]
  |  Branch (6599:33): [True: 8.28k, False: 10.0k]
  ------------------
 6600|  8.28k|        int width = parse_simple_int(begin, end);
 6601|  8.28k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.28k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.28k, False: 0]
  |  |  ------------------
  ------------------
 6602|  8.28k|            handler.on_width(width);
 6603|  8.28k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  8.28k|    }
 6609|  18.3k|    return begin;
 6610|  18.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  4.14k|    {
 7127|  4.14k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  4.14k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 4.14k, False: 0]
  ------------------
 7129|  4.14k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 4.14k, False: 0]
  ------------------
 7130|  4.14k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 4.14k, False: 0]
  ------------------
 7131|  4.14k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 4.14k, False: 0]
  ------------------
 7132|  4.14k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  4.14k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  4.14k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   117k|{
 8417|   117k|#define SCN_VISIT(Type)                                         \
 8418|   117k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   117k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   117k|    }                                                           \
 8421|   117k|    else {                                                      \
 8422|   117k|        return vis(monostate_val);                              \
 8423|   117k|    }
 8424|       |
 8425|   117k|    monostate monostate_val{};
 8426|       |
 8427|   117k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 117k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 117k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 117k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 117k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 117k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 117k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 117k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 117k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 117k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 117k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 117k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 117k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 117k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 117k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 117k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 117k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 117k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 117k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  58.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 58.6k, False: 58.6k]
  ------------------
 8465|  58.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  58.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  58.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  58.6k|    }                                                           \
  |  | 8421|  58.6k|    else {                                                      \
  |  | 8422|  58.6k|        return vis(monostate_val);                              \
  |  | 8423|  58.6k|    }
  ------------------
 8466|  58.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 58.6k, False: 58.6k]
  ------------------
 8467|  58.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  58.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  58.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  58.6k|    }                                                           \
  |  | 8421|  58.6k|    else {                                                      \
  |  | 8422|  58.6k|        return vis(monostate_val);                              \
  |  | 8423|  58.6k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 117k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 117k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 117k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 117k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 117k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 117k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 117k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   117k|            SCN_CLANG_POP
 8495|   117k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  68.3k|{
 7044|  68.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  68.3k|    handler.check_args_exhausted();
 7046|  68.3k|    return handler.get_error();
 7047|  68.3k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  68.3k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  68.3k|    auto begin = format.data();
 7013|  68.3k|    auto it = begin;
 7014|  68.3k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   126k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 68.3k, False: 58.0k]
  ------------------
 7017|  68.3k|        const auto ch = *it++;
 7018|  68.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 68.3k, False: 0]
  ------------------
 7019|  68.3k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  68.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  68.3k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 10.3k, False: 58.0k]
  ------------------
 7023|  10.3k|                return;
 7024|  10.3k|            }
 7025|  68.3k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  68.3k|    }
 7036|       |
 7037|  58.0k|    handler.on_literal_text(begin, end);
 7038|  58.0k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  58.0k|    {
 8175|  58.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  58.0k|    static_cast<    \
  |  |  929|  58.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  58.0k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  68.3k|{
 6942|  68.3k|    struct id_adapter {
 6943|  68.3k|        constexpr void operator()()
 6944|  68.3k|        {
 6945|  68.3k|            arg_id = handler.on_arg_id();
 6946|  68.3k|        }
 6947|  68.3k|        constexpr void operator()(std::size_t id)
 6948|  68.3k|        {
 6949|  68.3k|            arg_id = handler.on_arg_id(id);
 6950|  68.3k|        }
 6951|       |
 6952|  68.3k|        constexpr void on_error(const char* msg)
 6953|  68.3k|        {
 6954|  68.3k|            SCN_UNLIKELY_ATTR
 6955|  68.3k|            handler.on_error(msg);
 6956|  68.3k|        }
 6957|       |
 6958|  68.3k|        Handler& handler;
 6959|  68.3k|        std::size_t arg_id;
 6960|  68.3k|    };
 6961|       |
 6962|  68.3k|    ++begin;
 6963|  68.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  68.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 68.3k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  68.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 68.3k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  68.3k|    else {
 6975|  68.3k|        auto adapter = id_adapter{handler, 0};
 6976|  68.3k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  68.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  68.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 68.3k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  68.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 68.3k, False: 0]
  ------------------
 6987|  68.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  68.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  68.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 64.2k]
  |  |  |  Branch (859:45): [True: 0, False: 68.3k]
  |  |  |  Branch (859:45): [True: 4.14k, False: 64.2k]
  |  |  ------------------
  ------------------
 6993|  4.14k|                handler.on_error("Unknown format specifier");
 6994|  4.14k|                return begin;
 6995|  4.14k|            }
 6996|  68.3k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  68.3k|    }
 7003|  64.2k|    return begin + 1;
 7004|  68.3k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  68.3k|{
 6443|  68.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  68.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 68.3k, False: 0]
  |  Branch (6444:26): [True: 0, False: 68.3k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  68.3k|    handler();
 6449|  68.3k|    return begin;
 6450|  68.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  68.3k|        {
 6945|  68.3k|            arg_id = handler.on_arg_id();
 6946|  68.3k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  68.3k|    {
 7122|  68.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  68.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  68.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  68.3k|{
 6858|  68.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  68.3k|        if (*begin == CharT{'['}) {
 6860|  68.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  68.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  68.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  68.3k|                return begin;
 6866|  68.3k|            }
 6867|  68.3k|            handler.on_character_set_string(set);
 6868|  68.3k|            return begin;
 6869|  68.3k|        }
 6870|  68.3k|        if (*begin == CharT{'/'}) {
 6871|  68.3k|            return parse_presentation_regex(begin, end, handler);
 6872|  68.3k|        }
 6873|  68.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  68.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  68.3k|            handler.on_error("Invalid type specifier in format string");
 6876|  68.3k|            return begin;
 6877|  68.3k|        }
 6878|  68.3k|        handler.on_type(type);
 6879|  68.3k|        return begin;
 6880|  68.3k|    };
 6881|       |
 6882|  68.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 68.3k, False: 0]
  |  Branch (6882:28): [True: 61.2k, False: 7.08k]
  ------------------
 6883|  68.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 61.2k, False: 0]
  |  Branch (6883:36): [True: 59.1k, False: 2.07k]
  ------------------
 6884|  59.1k|        return do_presentation();
 6885|  59.1k|    }
 6886|       |
 6887|  9.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  9.15k|    begin = parse_align(begin, end, handler);
 6893|  9.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  9.15k|    begin = parse_width(begin, end, handler);
 6899|  9.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  9.15k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 9.15k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  9.15k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 2.07k, False: 7.08k]
  ------------------
 6918|  2.07k|        handler.on_localized();
 6919|  2.07k|        ++begin;
 6920|  2.07k|    }
 6921|  9.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  9.15k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 9.15k, False: 0]
  |  Branch (6926:25): [True: 7.08k, False: 2.07k]
  ------------------
 6927|  7.08k|        do_presentation();
 6928|  7.08k|    }
 6929|  9.15k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  9.15k|    return begin;
 6935|  9.15k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  66.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  66.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.94k, False: 63.3k]
  ------------------
 6860|  2.94k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.94k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  2.94k|            handler.on_character_set_string(set);
 6868|  2.94k|            return begin;
 6869|  2.94k|        }
 6870|  63.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 63.3k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  63.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  63.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 61.2k]
  |  |  ------------------
  ------------------
 6875|  2.07k|            handler.on_error("Invalid type specifier in format string");
 6876|  2.07k|            return begin;
 6877|  2.07k|        }
 6878|  61.2k|        handler.on_type(type);
 6879|  61.2k|        return begin;
 6880|  63.3k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  2.94k|{
 6697|  2.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.94k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.94k|    auto start = begin;
 6701|  2.94k|    ++begin;
 6702|       |
 6703|  2.94k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.94k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 2.94k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  2.94k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.94k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  8.84k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 8.84k, False: 0]
  ------------------
 6728|  8.84k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.84k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  8.84k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.94k, False: 5.89k]
  ------------------
 6733|  2.94k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.94k|        }
 6735|       |
 6736|  5.89k|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.89k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.94k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  5.89k|{
 6661|  5.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.89k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.89k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  5.89k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.89k, False: 0]
  |  Branch (6668:25): [True: 5.89k, False: 0]
  |  Branch (6668:49): [True: 5.89k, False: 0]
  ------------------
 6669|  5.89k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 5.89k, False: 0]
  ------------------
 6670|  5.89k|        ++begin;
 6671|       |
 6672|  5.89k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  5.89k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  5.89k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  5.89k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  5.89k|        return;
 6686|  5.89k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  11.7k|{
 6637|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  11.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  11.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  Branch (859:45): [True: 0, False: 11.7k]
  |  |  |  Branch (859:45): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  11.7k|    const auto cp =
 6646|  11.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  11.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  11.7k|    begin += len;
 6653|  11.7k|    return cp;
 6654|  11.7k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  9.15k|{
 6532|  9.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  9.15k|    auto check_align = [](wchar_t ch) {
 6535|  9.15k|        switch (ch) {
 6536|  9.15k|            case L'<':
 6537|  9.15k|                return align_type::left;
 6538|  9.15k|            case L'>':
 6539|  9.15k|                return align_type::right;
 6540|  9.15k|            case L'^':
 6541|  9.15k|                return align_type::center;
 6542|  9.15k|            default:
 6543|  9.15k|                return align_type::none;
 6544|  9.15k|        }
 6545|  9.15k|    };
 6546|       |
 6547|  9.15k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  9.15k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  |  Branch (859:45): [True: 0, False: 9.15k]
  |  |  |  Branch (859:45): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6549|  9.15k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  9.15k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  9.15k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  9.15k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  9.15k|    const auto begin_before_fill = begin;
 6559|  9.15k|    begin += potential_fill_len;
 6560|       |
 6561|  9.15k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 9.15k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  9.15k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  9.15k|    const auto begin_after_fill = begin;
 6567|  9.15k|    ++begin;
 6568|       |
 6569|  9.15k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 9.15k, False: 0]
  ------------------
 6570|  9.15k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  9.15k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 2.94k, False: 6.21k]
  ------------------
 6575|  2.94k|            return begin_before_fill;
 6576|  2.94k|        }
 6577|  9.15k|    }
 6578|       |
 6579|  6.21k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 6.21k, False: 0]
  ------------------
 6580|  6.21k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 6.21k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  6.21k|        return begin_before_fill;
 6585|  6.21k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  6.21k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  18.3k|    auto check_align = [](wchar_t ch) {
 6535|  18.3k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 18.3k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 18.3k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 18.3k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  18.3k|            default:
  ------------------
  |  Branch (6542:13): [True: 18.3k, False: 0]
  ------------------
 6543|  18.3k|                return align_type::none;
 6544|  18.3k|        }
 6545|  18.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  9.15k|{
 6597|  9.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  9.15k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 9.15k, False: 0]
  |  Branch (6599:33): [True: 4.14k, False: 5.01k]
  ------------------
 6600|  4.14k|        int width = parse_simple_int(begin, end);
 6601|  4.14k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.14k, False: 0]
  |  |  ------------------
  ------------------
 6602|  4.14k|            handler.on_width(width);
 6603|  4.14k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  4.14k|    }
 6609|  9.15k|    return begin;
 6610|  9.15k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  2.07k|    {
 7127|  2.07k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  2.07k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 2.07k, False: 0]
  ------------------
 7129|  2.07k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 2.07k, False: 0]
  ------------------
 7130|  2.07k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 2.07k, False: 0]
  ------------------
 7131|  2.07k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 2.07k, False: 0]
  ------------------
 7132|  2.07k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  2.07k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  2.07k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  64.2k|{
 8417|  64.2k|#define SCN_VISIT(Type)                                         \
 8418|  64.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  64.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  64.2k|    }                                                           \
 8421|  64.2k|    else {                                                      \
 8422|  64.2k|        return vis(monostate_val);                              \
 8423|  64.2k|    }
 8424|       |
 8425|  64.2k|    monostate monostate_val{};
 8426|       |
 8427|  64.2k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 64.2k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 64.2k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 64.2k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 64.2k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 64.2k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 64.2k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 64.2k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 64.2k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 64.2k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 64.2k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 64.2k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 64.2k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 64.2k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 64.2k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 64.2k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 64.2k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 64.2k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 64.2k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 64.2k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  64.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 64.2k, False: 0]
  ------------------
 8467|  64.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  64.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  64.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  64.2k|    }                                                           \
  |  | 8421|  64.2k|    else {                                                      \
  |  | 8422|  64.2k|        return vis(monostate_val);                              \
  |  | 8423|  64.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 64.2k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 64.2k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 64.2k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 64.2k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 64.2k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 64.2k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 64.2k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  64.2k|            SCN_CLANG_POP
 8495|  64.2k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  13.4k|    {
 4076|  13.4k|        sync(0);
 4077|  13.4k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.98M|    {
 5466|  1.98M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.98M|        return static_cast<std::size_t>(m_desc &
 5471|  1.98M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.98M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  3.97M|    {
 5491|  3.97M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  3.97M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.98M|    {
 5434|  1.98M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.98M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.98M|        const auto t = type(id);
 5446|  1.98M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.98M|        basic_scan_arg<Context> arg;
 5451|  1.98M|        arg.m_type = t;
 5452|  1.98M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.98M, False: 0]
  ------------------
 5453|  1.98M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.98M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.98M|        return arg;
 5459|  1.98M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.98M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.98M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.98M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.98M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.98M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.98M|    {
 5495|  1.98M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.98M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  3.46M|    {
 5247|  3.46M|        return m_type != detail::arg_type::none_type;
 5248|  3.46M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   968k|{
 8417|   968k|#define SCN_VISIT(Type)                                         \
 8418|   968k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   968k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   968k|    }                                                           \
 8421|   968k|    else {                                                      \
 8422|   968k|        return vis(monostate_val);                              \
 8423|   968k|    }
 8424|       |
 8425|   968k|    monostate monostate_val{};
 8426|       |
 8427|   968k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 968k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 968k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 968k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 968k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 968k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 968k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 968k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 968k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 968k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 968k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 968k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 968k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 968k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 968k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 968k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 968k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 968k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 968k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 968k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 968k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   484k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 484k, False: 484k]
  ------------------
 8469|   484k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   484k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   484k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   484k|    }                                                           \
  |  | 8421|   484k|    else {                                                      \
  |  | 8422|   484k|        return vis(monostate_val);                              \
  |  | 8423|   484k|    }
  ------------------
 8470|   484k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 484k, False: 484k]
  ------------------
 8471|   484k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   484k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   484k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   484k|    }                                                           \
  |  | 8421|   484k|    else {                                                      \
  |  | 8422|   484k|        return vis(monostate_val);                              \
  |  | 8423|   484k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 968k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 968k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 968k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 968k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 968k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   968k|            SCN_CLANG_POP
 8495|   968k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|  1.01M|    {
 5545|  1.01M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   339k|    {
 8138|   339k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.01M|    {
 8056|  1.01M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   678k|{
 7044|   678k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   678k|    handler.check_args_exhausted();
 7046|   678k|    return handler.get_error();
 7047|   678k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   678k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   678k|    auto begin = format.data();
 7013|   678k|    auto it = begin;
 7014|   678k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.31M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 678k, False: 637k]
  ------------------
 7017|   678k|        const auto ch = *it++;
 7018|   678k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 678k, False: 0]
  ------------------
 7019|   678k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   678k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   678k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 41.4k, False: 637k]
  ------------------
 7023|  41.4k|                return;
 7024|  41.4k|            }
 7025|   678k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   678k|    }
 7036|       |
 7037|   637k|    handler.on_literal_text(begin, end);
 7038|   637k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   678k|{
 6942|   678k|    struct id_adapter {
 6943|   678k|        constexpr void operator()()
 6944|   678k|        {
 6945|   678k|            arg_id = handler.on_arg_id();
 6946|   678k|        }
 6947|   678k|        constexpr void operator()(std::size_t id)
 6948|   678k|        {
 6949|   678k|            arg_id = handler.on_arg_id(id);
 6950|   678k|        }
 6951|       |
 6952|   678k|        constexpr void on_error(const char* msg)
 6953|   678k|        {
 6954|   678k|            SCN_UNLIKELY_ATTR
 6955|   678k|            handler.on_error(msg);
 6956|   678k|        }
 6957|       |
 6958|   678k|        Handler& handler;
 6959|   678k|        std::size_t arg_id;
 6960|   678k|    };
 6961|       |
 6962|   678k|    ++begin;
 6963|   678k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   678k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 678k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   678k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 678k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   678k|    else {
 6975|   678k|        auto adapter = id_adapter{handler, 0};
 6976|   678k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   678k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   678k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 678k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   678k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 678k, False: 0]
  ------------------
 6987|   678k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   678k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   678k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 662k]
  |  |  |  Branch (859:45): [True: 0, False: 678k]
  |  |  |  Branch (859:45): [True: 16.5k, False: 662k]
  |  |  ------------------
  ------------------
 6993|  16.5k|                handler.on_error("Unknown format specifier");
 6994|  16.5k|                return begin;
 6995|  16.5k|            }
 6996|   678k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   678k|    }
 7003|   662k|    return begin + 1;
 7004|   678k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  1.01M|    {
 8039|  1.01M|        return m_args.get(id);
 8040|  1.01M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   993k|    {
 8049|   993k|        return m_locale;
 8050|   993k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  1.01M|    {
 5566|  1.01M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.01M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.01M|        do_check_arg_id(id);
 5574|  1.01M|        return id;
 5575|  1.01M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  1.01M|{
 6054|  1.01M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.01M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.01M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   678k|{
 6443|   678k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   678k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 678k, False: 0]
  |  Branch (6444:26): [True: 0, False: 678k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   678k|    handler();
 6449|   678k|    return begin;
 6450|   678k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  24.8k|{
 6392|  24.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  24.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  24.8k|    unsigned long long value = 0;
 6396|  49.6k|    do {
 6397|  49.6k|        value *= 10;
 6398|  49.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  49.6k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 49.6k]
  ------------------
 6400|  49.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  49.6k|        ++begin;
 6404|  49.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 49.6k, False: 0]
  |  Branch (6404:30): [True: 49.6k, False: 0]
  |  Branch (6404:47): [True: 24.8k, False: 24.8k]
  ------------------
 6405|  24.8k|    return static_cast<int>(value);
 6406|  24.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   678k|        {
 6945|   678k|            arg_id = handler.on_arg_id();
 6946|   678k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  2.03M|    {
 5252|  2.03M|        return m_type;
 5253|  2.03M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   993k|    {
 5561|   993k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   993k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   823k|{
 4344|   823k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 823k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   823k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   823k|                            ranges::default_sentinel};
 4350|   823k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   823k|    {
 4177|   823k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   823k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   823k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   823k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   823k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   823k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   823k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  2.01M|    {
 5550|  2.01M|        return m_format.data();
 5551|  2.01M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   678k|    {
 7122|   678k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   678k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   678k|{
 6858|   678k|    auto do_presentation = [&]() -> const CharT* {
 6859|   678k|        if (*begin == CharT{'['}) {
 6860|   678k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   678k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   678k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   678k|                return begin;
 6866|   678k|            }
 6867|   678k|            handler.on_character_set_string(set);
 6868|   678k|            return begin;
 6869|   678k|        }
 6870|   678k|        if (*begin == CharT{'/'}) {
 6871|   678k|            return parse_presentation_regex(begin, end, handler);
 6872|   678k|        }
 6873|   678k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   678k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   678k|            handler.on_error("Invalid type specifier in format string");
 6876|   678k|            return begin;
 6877|   678k|        }
 6878|   678k|        handler.on_type(type);
 6879|   678k|        return begin;
 6880|   678k|    };
 6881|       |
 6882|   678k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 678k, False: 0]
  |  Branch (6882:28): [True: 653k, False: 24.9k]
  ------------------
 6883|   678k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 653k, False: 0]
  |  Branch (6883:36): [True: 645k, False: 8.28k]
  ------------------
 6884|   645k|        return do_presentation();
 6885|   645k|    }
 6886|       |
 6887|  33.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  33.2k|    begin = parse_align(begin, end, handler);
 6893|  33.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  33.2k|    begin = parse_width(begin, end, handler);
 6899|  33.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  33.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 33.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  33.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 8.28k, False: 24.9k]
  ------------------
 6918|  8.28k|        handler.on_localized();
 6919|  8.28k|        ++begin;
 6920|  8.28k|    }
 6921|  33.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  33.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 33.2k, False: 0]
  |  Branch (6926:25): [True: 24.9k, False: 8.28k]
  ------------------
 6927|  24.9k|        do_presentation();
 6928|  24.9k|    }
 6929|  33.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  33.2k|    return begin;
 6935|  33.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   980k|{
 6507|   980k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 968k, False: 12.4k]
  |  Branch (6507:33): [True: 968k, False: 0]
  ------------------
 6508|   980k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 12.4k, False: 0]
  |  Branch (6508:33): [True: 12.4k, False: 0]
  ------------------
 6509|   980k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   670k|    auto do_presentation = [&]() -> const CharT* {
 6859|   670k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 8.40k, False: 662k]
  ------------------
 6860|  8.40k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  8.40k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  8.40k|            handler.on_character_set_string(set);
 6868|  8.40k|            return begin;
 6869|  8.40k|        }
 6870|   662k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 662k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   662k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   662k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 653k]
  |  |  ------------------
  ------------------
 6875|  8.28k|            handler.on_error("Invalid type specifier in format string");
 6876|  8.28k|            return begin;
 6877|  8.28k|        }
 6878|   653k|        handler.on_type(type);
 6879|   653k|        return begin;
 6880|   662k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  8.40k|{
 6697|  8.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  8.40k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  8.40k|    auto start = begin;
 6701|  8.40k|    ++begin;
 6702|       |
 6703|  8.40k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  8.40k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 8.40k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  8.40k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 8.40k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  25.2k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 25.2k, False: 0]
  ------------------
 6728|  25.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  25.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 8.40k, False: 16.8k]
  ------------------
 6733|  8.40k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  8.40k|        }
 6735|       |
 6736|  16.8k|        parse_presentation_set_literal(begin, end, handler);
 6737|  16.8k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  8.40k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  16.8k|{
 6661|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  16.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  16.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  16.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 16.8k, False: 0]
  |  Branch (6668:25): [True: 16.8k, False: 0]
  |  Branch (6668:49): [True: 16.8k, False: 0]
  ------------------
 6669|  16.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 16.8k, False: 0]
  ------------------
 6670|  16.8k|        ++begin;
 6671|       |
 6672|  16.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  16.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  16.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  16.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  16.8k|        return;
 6686|  16.8k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  33.6k|{
 6637|  33.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  33.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  33.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  |  Branch (859:45): [True: 0, False: 33.6k]
  |  |  |  Branch (859:45): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  33.6k|    const auto cp =
 6646|  33.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  33.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  33.6k|    begin += len;
 6653|  33.6k|    return cp;
 6654|  33.6k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  12.6k|    {
 6346|  12.6k|        m_specs.charset_string_data = fmt.data();
 6347|  12.6k|        m_specs.charset_string_size = fmt.size();
 6348|  12.6k|        on_type(presentation_type::string_set);
 6349|  12.6k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   993k|{
 6455|   993k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 993k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 993k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 993k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 993k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 993k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 993k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 993k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 993k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 993k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 993k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 993k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 993k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 993k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 993k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 993k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 993k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 993k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 993k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   968k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 968k, False: 24.8k]
  ------------------
 6486|   968k|            return presentation_type::string;
 6487|  12.4k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 12.4k, False: 980k]
  ------------------
 6488|  12.4k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 993k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 993k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 993k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 993k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  12.4k|        default:
  ------------------
  |  Branch (6499:9): [True: 12.4k, False: 980k]
  ------------------
 6500|  12.4k|            return presentation_type::none;
 6501|   993k|    }
 6502|   993k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  33.2k|{
 6532|  33.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  33.2k|    auto check_align = [](wchar_t ch) {
 6535|  33.2k|        switch (ch) {
 6536|  33.2k|            case L'<':
 6537|  33.2k|                return align_type::left;
 6538|  33.2k|            case L'>':
 6539|  33.2k|                return align_type::right;
 6540|  33.2k|            case L'^':
 6541|  33.2k|                return align_type::center;
 6542|  33.2k|            default:
 6543|  33.2k|                return align_type::none;
 6544|  33.2k|        }
 6545|  33.2k|    };
 6546|       |
 6547|  33.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  33.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  |  Branch (859:45): [True: 0, False: 33.2k]
  |  |  |  Branch (859:45): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6549|  33.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  33.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  33.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  33.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  33.2k|    const auto begin_before_fill = begin;
 6559|  33.2k|    begin += potential_fill_len;
 6560|       |
 6561|  33.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 33.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  33.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  33.2k|    const auto begin_after_fill = begin;
 6567|  33.2k|    ++begin;
 6568|       |
 6569|  33.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 33.2k, False: 0]
  ------------------
 6570|  33.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  33.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 8.40k, False: 24.8k]
  ------------------
 6575|  8.40k|            return begin_before_fill;
 6576|  8.40k|        }
 6577|  33.2k|    }
 6578|       |
 6579|  24.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 24.8k, False: 0]
  ------------------
 6580|  24.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 24.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  24.8k|        return begin_before_fill;
 6585|  24.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  24.8k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  49.8k|{
 6514|  49.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  49.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  49.8k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  49.8k|        return 1;
 6517|  49.8k|    }
 6518|  49.8k|    else {
 6519|  49.8k|        const auto lengths =
 6520|  49.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  49.8k|            "\3\4";
 6522|  49.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  49.8k|        return len;
 6524|  49.8k|    }
 6525|  49.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  66.4k|    auto check_align = [](wchar_t ch) {
 6535|  66.4k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 66.4k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 66.4k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 66.4k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  66.4k|            default:
  ------------------
  |  Branch (6542:13): [True: 66.4k, False: 0]
  ------------------
 6543|  66.4k|                return align_type::none;
 6544|  66.4k|        }
 6545|  66.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  33.2k|{
 6597|  33.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  33.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 33.2k, False: 0]
  |  Branch (6599:33): [True: 16.5k, False: 16.6k]
  ------------------
 6600|  16.5k|        int width = parse_simple_int(begin, end);
 6601|  16.5k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.5k, False: 0]
  |  |  ------------------
  ------------------
 6602|  16.5k|            handler.on_width(width);
 6603|  16.5k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  16.5k|    }
 6609|  33.2k|    return begin;
 6610|  33.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  8.28k|    {
 7127|  8.28k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  8.28k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 8.28k, False: 0]
  ------------------
 7129|  8.28k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 8.28k, False: 0]
  ------------------
 7130|  8.28k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 8.28k, False: 0]
  ------------------
 7131|  8.28k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 8.28k, False: 0]
  ------------------
 7132|  8.28k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  8.28k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  8.28k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   662k|{
 8417|   662k|#define SCN_VISIT(Type)                                         \
 8418|   662k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   662k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   662k|    }                                                           \
 8421|   662k|    else {                                                      \
 8422|   662k|        return vis(monostate_val);                              \
 8423|   662k|    }
 8424|       |
 8425|   662k|    monostate monostate_val{};
 8426|       |
 8427|   662k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 662k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 662k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 662k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 662k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 662k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 662k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 662k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 662k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 662k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 662k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 662k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 662k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 662k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 662k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 662k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 662k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 662k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 662k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 662k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 662k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   331k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 331k, False: 331k]
  ------------------
 8469|   331k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   331k|    }                                                           \
  |  | 8421|   331k|    else {                                                      \
  |  | 8422|   331k|        return vis(monostate_val);                              \
  |  | 8423|   331k|    }
  ------------------
 8470|   331k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 331k, False: 331k]
  ------------------
 8471|   331k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   331k|    }                                                           \
  |  | 8421|   331k|    else {                                                      \
  |  | 8422|   331k|        return vis(monostate_val);                              \
  |  | 8423|   331k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 662k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 662k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 662k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 662k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 662k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   662k|            SCN_CLANG_POP
 8495|   662k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   484k|{
 8417|   484k|#define SCN_VISIT(Type)                                         \
 8418|   484k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   484k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   484k|    }                                                           \
 8421|   484k|    else {                                                      \
 8422|   484k|        return vis(monostate_val);                              \
 8423|   484k|    }
 8424|       |
 8425|   484k|    monostate monostate_val{};
 8426|       |
 8427|   484k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 484k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 484k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 484k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 484k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 484k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 484k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 484k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 484k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 484k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 484k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 484k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 484k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 484k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 484k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 484k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 484k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 484k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 484k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 484k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 484k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 484k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   484k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 484k, False: 0]
  ------------------
 8471|   484k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   484k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   484k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   484k|    }                                                           \
  |  | 8421|   484k|    else {                                                      \
  |  | 8422|   484k|        return vis(monostate_val);                              \
  |  | 8423|   484k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 484k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 484k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 484k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 484k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 484k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   484k|            SCN_CLANG_POP
 8495|   484k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   339k|{
 7044|   339k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   339k|    handler.check_args_exhausted();
 7046|   339k|    return handler.get_error();
 7047|   339k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   339k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   339k|    auto begin = format.data();
 7013|   339k|    auto it = begin;
 7014|   339k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   658k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 339k, False: 318k]
  ------------------
 7017|   339k|        const auto ch = *it++;
 7018|   339k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 339k, False: 0]
  ------------------
 7019|   339k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   339k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   339k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 20.7k, False: 318k]
  ------------------
 7023|  20.7k|                return;
 7024|  20.7k|            }
 7025|   339k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   339k|    }
 7036|       |
 7037|   318k|    handler.on_literal_text(begin, end);
 7038|   318k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   318k|    {
 8175|   318k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   318k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   339k|{
 6942|   339k|    struct id_adapter {
 6943|   339k|        constexpr void operator()()
 6944|   339k|        {
 6945|   339k|            arg_id = handler.on_arg_id();
 6946|   339k|        }
 6947|   339k|        constexpr void operator()(std::size_t id)
 6948|   339k|        {
 6949|   339k|            arg_id = handler.on_arg_id(id);
 6950|   339k|        }
 6951|       |
 6952|   339k|        constexpr void on_error(const char* msg)
 6953|   339k|        {
 6954|   339k|            SCN_UNLIKELY_ATTR
 6955|   339k|            handler.on_error(msg);
 6956|   339k|        }
 6957|       |
 6958|   339k|        Handler& handler;
 6959|   339k|        std::size_t arg_id;
 6960|   339k|    };
 6961|       |
 6962|   339k|    ++begin;
 6963|   339k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   339k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 339k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   339k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 339k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   339k|    else {
 6975|   339k|        auto adapter = id_adapter{handler, 0};
 6976|   339k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   339k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   339k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 339k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   339k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 339k, False: 0]
  ------------------
 6987|   339k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   339k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   339k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 331k]
  |  |  |  Branch (859:45): [True: 0, False: 339k]
  |  |  |  Branch (859:45): [True: 8.28k, False: 331k]
  |  |  ------------------
  ------------------
 6993|  8.28k|                handler.on_error("Unknown format specifier");
 6994|  8.28k|                return begin;
 6995|  8.28k|            }
 6996|   339k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   339k|    }
 7003|   331k|    return begin + 1;
 7004|   339k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   339k|{
 6443|   339k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   339k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 339k, False: 0]
  |  Branch (6444:26): [True: 0, False: 339k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   339k|    handler();
 6449|   339k|    return begin;
 6450|   339k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   339k|        {
 6945|   339k|            arg_id = handler.on_arg_id();
 6946|   339k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   339k|    {
 7122|   339k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   339k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   339k|{
 6858|   339k|    auto do_presentation = [&]() -> const CharT* {
 6859|   339k|        if (*begin == CharT{'['}) {
 6860|   339k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   339k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   339k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   339k|                return begin;
 6866|   339k|            }
 6867|   339k|            handler.on_character_set_string(set);
 6868|   339k|            return begin;
 6869|   339k|        }
 6870|   339k|        if (*begin == CharT{'/'}) {
 6871|   339k|            return parse_presentation_regex(begin, end, handler);
 6872|   339k|        }
 6873|   339k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   339k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   339k|            handler.on_error("Invalid type specifier in format string");
 6876|   339k|            return begin;
 6877|   339k|        }
 6878|   339k|        handler.on_type(type);
 6879|   339k|        return begin;
 6880|   339k|    };
 6881|       |
 6882|   339k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 339k, False: 0]
  |  Branch (6882:28): [True: 326k, False: 12.4k]
  ------------------
 6883|   339k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 326k, False: 0]
  |  Branch (6883:36): [True: 322k, False: 4.14k]
  ------------------
 6884|   322k|        return do_presentation();
 6885|   322k|    }
 6886|       |
 6887|  16.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  16.6k|    begin = parse_align(begin, end, handler);
 6893|  16.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  16.6k|    begin = parse_width(begin, end, handler);
 6899|  16.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  16.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 16.6k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  16.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 4.14k, False: 12.4k]
  ------------------
 6918|  4.14k|        handler.on_localized();
 6919|  4.14k|        ++begin;
 6920|  4.14k|    }
 6921|  16.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  16.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 16.6k, False: 0]
  |  Branch (6926:25): [True: 12.4k, False: 4.14k]
  ------------------
 6927|  12.4k|        do_presentation();
 6928|  12.4k|    }
 6929|  16.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  16.6k|    return begin;
 6935|  16.6k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   335k|    auto do_presentation = [&]() -> const CharT* {
 6859|   335k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.20k, False: 331k]
  ------------------
 6860|  4.20k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.20k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.20k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  4.20k|            handler.on_character_set_string(set);
 6868|  4.20k|            return begin;
 6869|  4.20k|        }
 6870|   331k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 331k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   331k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   331k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 326k]
  |  |  ------------------
  ------------------
 6875|  4.14k|            handler.on_error("Invalid type specifier in format string");
 6876|  4.14k|            return begin;
 6877|  4.14k|        }
 6878|   326k|        handler.on_type(type);
 6879|   326k|        return begin;
 6880|   331k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  4.20k|{
 6697|  4.20k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.20k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.20k|    auto start = begin;
 6701|  4.20k|    ++begin;
 6702|       |
 6703|  4.20k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.20k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.20k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 4.20k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  4.20k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.20k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.6k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.6k, False: 0]
  ------------------
 6728|  12.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.20k, False: 8.40k]
  ------------------
 6733|  4.20k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.20k|        }
 6735|       |
 6736|  8.40k|        parse_presentation_set_literal(begin, end, handler);
 6737|  8.40k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.20k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  8.40k|{
 6661|  8.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  8.40k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  8.40k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  8.40k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 8.40k, False: 0]
  |  Branch (6668:25): [True: 8.40k, False: 0]
  |  Branch (6668:49): [True: 8.40k, False: 0]
  ------------------
 6669|  8.40k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.40k, False: 0]
  ------------------
 6670|  8.40k|        ++begin;
 6671|       |
 6672|  8.40k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.40k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.40k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.40k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.40k|        return;
 6686|  8.40k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  16.8k|{
 6637|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  16.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  16.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  16.8k|    const auto cp =
 6646|  16.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  16.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  16.8k|    begin += len;
 6653|  16.8k|    return cp;
 6654|  16.8k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  16.6k|{
 6532|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  16.6k|    auto check_align = [](wchar_t ch) {
 6535|  16.6k|        switch (ch) {
 6536|  16.6k|            case L'<':
 6537|  16.6k|                return align_type::left;
 6538|  16.6k|            case L'>':
 6539|  16.6k|                return align_type::right;
 6540|  16.6k|            case L'^':
 6541|  16.6k|                return align_type::center;
 6542|  16.6k|            default:
 6543|  16.6k|                return align_type::none;
 6544|  16.6k|        }
 6545|  16.6k|    };
 6546|       |
 6547|  16.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  16.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  |  Branch (859:45): [True: 0, False: 16.6k]
  |  |  |  Branch (859:45): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6549|  16.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  16.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  16.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  16.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  16.6k|    const auto begin_before_fill = begin;
 6559|  16.6k|    begin += potential_fill_len;
 6560|       |
 6561|  16.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 16.6k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  16.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  16.6k|    const auto begin_after_fill = begin;
 6567|  16.6k|    ++begin;
 6568|       |
 6569|  16.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 16.6k, False: 0]
  ------------------
 6570|  16.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  16.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.20k, False: 12.4k]
  ------------------
 6575|  4.20k|            return begin_before_fill;
 6576|  4.20k|        }
 6577|  16.6k|    }
 6578|       |
 6579|  12.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 12.4k, False: 0]
  ------------------
 6580|  12.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 12.4k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  12.4k|        return begin_before_fill;
 6585|  12.4k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  12.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  33.2k|    auto check_align = [](wchar_t ch) {
 6535|  33.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 33.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 33.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 33.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  33.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 33.2k, False: 0]
  ------------------
 6543|  33.2k|                return align_type::none;
 6544|  33.2k|        }
 6545|  33.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  16.6k|{
 6597|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  16.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 16.6k, False: 0]
  |  Branch (6599:33): [True: 8.28k, False: 8.34k]
  ------------------
 6600|  8.28k|        int width = parse_simple_int(begin, end);
 6601|  8.28k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.28k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.28k, False: 0]
  |  |  ------------------
  ------------------
 6602|  8.28k|            handler.on_width(width);
 6603|  8.28k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  8.28k|    }
 6609|  16.6k|    return begin;
 6610|  16.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  4.14k|    {
 7127|  4.14k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  4.14k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 4.14k, False: 0]
  ------------------
 7129|  4.14k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 4.14k, False: 0]
  ------------------
 7130|  4.14k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 4.14k, False: 0]
  ------------------
 7131|  4.14k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 4.14k, False: 0]
  ------------------
 7132|  4.14k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  4.14k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  4.14k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   331k|{
 8417|   331k|#define SCN_VISIT(Type)                                         \
 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   331k|    }                                                           \
 8421|   331k|    else {                                                      \
 8422|   331k|        return vis(monostate_val);                              \
 8423|   331k|    }
 8424|       |
 8425|   331k|    monostate monostate_val{};
 8426|       |
 8427|   331k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 331k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 331k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 331k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 331k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 331k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 331k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 331k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 331k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 331k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 331k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 331k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 331k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 331k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 331k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 331k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 331k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 331k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 331k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 331k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 331k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 331k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   331k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 331k, False: 0]
  ------------------
 8471|   331k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   331k|    }                                                           \
  |  | 8421|   331k|    else {                                                      \
  |  | 8422|   331k|        return vis(monostate_val);                              \
  |  | 8423|   331k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 331k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 331k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 331k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 331k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 331k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   331k|            SCN_CLANG_POP
 8495|   331k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  26.9k|    {
 4076|  26.9k|        sync(0);
 4077|  26.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|  83.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   484k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|   331k|{
   89|   331k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   331k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   331k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   662k|{
   44|   662k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   662k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|   331k|{
  127|   331k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   331k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   331k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   662k|{
   60|   662k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   662k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|   161k|{
  163|   161k|    T value;
  164|   161k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   161k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.07k|    }                                                  \
  |  |  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   159k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   161k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   322k|{
   72|   322k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   322k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   331k|{
   89|   331k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   331k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   331k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|   331k|{
  127|   331k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   331k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   331k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|   161k|{
  163|   161k|    T value;
  164|   161k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   161k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.07k|    }                                                  \
  |  |  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   159k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   161k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|   331k|{
   89|   331k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   331k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   331k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   331k|{
   44|   331k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   331k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   331k|{
  127|   331k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   331k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   331k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   331k|{
   60|   331k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   331k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|   161k|{
  163|   161k|    T value;
  164|   161k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   161k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.07k|    }                                                  \
  |  |  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   159k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   161k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   161k|{
   72|   161k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   161k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.17M|{
  653|  1.17M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.17M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   116k|{
 2184|   116k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   116k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  63.7k|{
 2192|  63.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  63.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  63.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.5k, False: 6.21k]
  |  |  ------------------
  ------------------
 2194|  57.5k|        source.sync(*n);
 2195|  57.5k|    }
 2196|  6.21k|    else {
 2197|  6.21k|        source.sync_all();
 2198|  6.21k|    }
 2199|  63.7k|    return n;
 2200|  63.7k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   662k|{
 2208|   662k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   662k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   331k|{
 2216|   331k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   331k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   331k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 318k, False: 12.4k]
  |  |  ------------------
  ------------------
 2218|   318k|        source.sync(*n);
 2219|   318k|    }
 2220|  12.4k|    else {
 2221|  12.4k|        source.sync_all();
 2222|  12.4k|    }
 2223|   331k|    return n;
 2224|   331k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   409k|{
  194|   409k|    return find_classic_impl(
  195|   409k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   409k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   409k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   414k|{
  202|   414k|    return find_classic_impl(
  203|   414k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   414k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   414k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   116k|{
 2141|   116k|    return vscan_internal(source, format, args);
 2142|   116k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  63.7k|{
 2147|  63.7k|    auto n = vscan_internal(source, format, args);
 2148|  63.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  63.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.5k, False: 6.21k]
  |  |  ------------------
  ------------------
 2149|  57.5k|        source.sync(*n);
 2150|  57.5k|    }
 2151|  6.21k|    else {
 2152|  6.21k|        source.sync_all();
 2153|  6.21k|    }
 2154|  63.7k|    return n;
 2155|  63.7k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   662k|{
 2161|   662k|    return vscan_internal(source, format, args);
 2162|   662k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   331k|{
 2167|   331k|    auto n = vscan_internal(source, format, args);
 2168|   331k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   331k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 318k, False: 12.4k]
  |  |  ------------------
  ------------------
 2169|   318k|        source.sync(*n);
 2170|   318k|    }
 2171|  12.4k|    else {
 2172|  12.4k|        source.sync_all();
 2173|  12.4k|    }
 2174|   331k|    return n;
 2175|   331k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  53.5k|{
 2251|  53.5k|    return vscan_value_internal(source, arg);
 2252|  53.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  29.5k|{
 2256|  29.5k|    auto n = vscan_value_internal(source, arg);
 2257|  29.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  29.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.5k, False: 1.03k]
  |  |  ------------------
  ------------------
 2258|  28.5k|        source.sync(*n);
 2259|  28.5k|    }
 2260|  1.03k|    else {
 2261|  1.03k|        source.sync_all();
 2262|  1.03k|    }
 2263|  29.5k|    return n;
 2264|  29.5k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|   322k|{
 2270|   322k|    return vscan_value_internal(source, arg);
 2271|   322k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   161k|{
 2276|   161k|    auto n = vscan_value_internal(source, arg);
 2277|   161k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   161k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 159k, False: 2.07k]
  |  |  ------------------
  ------------------
 2278|   159k|        source.sync(*n);
 2279|   159k|    }
 2280|  2.07k|    else {
 2281|  2.07k|        source.sync_all();
 2282|  2.07k|    }
 2283|   161k|    return n;
 2284|   161k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   409k|{
  118|   409k|    auto it = source.begin();
  119|       |
  120|   743k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 593k, False: 150k]
  ------------------
  121|   593k|        auto sv =
  122|   593k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   593k|                .substr(0, 8);
  124|       |
  125|   593k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 412k, False: 180k]
  ------------------
  126|   412k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   412k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   412k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 185k, False: 226k]
  ------------------
  129|   185k|                break;
  130|   185k|            }
  131|   226k|            continue;
  132|   412k|        }
  133|       |
  134|   534k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 428k, False: 106k]
  ------------------
  135|   428k|            auto tmp =
  136|   428k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   428k|            auto res = get_next_code_point(tmp);
  138|   428k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 73.8k, False: 354k]
  ------------------
  139|  73.8k|                return it;
  140|  73.8k|            }
  141|   354k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   354k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   354k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   354k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   354k|        }
  145|   180k|    }
  146|       |
  147|   336k|    return detail::make_string_view_iterator(source, it);
  148|   409k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.02M|{
  105|  1.02M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.02M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.02M|    uint64_t word{};
  108|  1.02M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.02M|    return has_byte_greater(word, 127) != 0;
  111|  1.02M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  1.75M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   428k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   414k|{
  118|   414k|    auto it = source.begin();
  119|       |
  120|   574k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 435k, False: 139k]
  ------------------
  121|   435k|        auto sv =
  122|   435k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   435k|                .substr(0, 8);
  124|       |
  125|   435k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 346k, False: 88.8k]
  ------------------
  126|   346k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   346k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   346k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 188k, False: 158k]
  ------------------
  129|   188k|                break;
  130|   188k|            }
  131|   158k|            continue;
  132|   346k|        }
  133|       |
  134|   175k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 172k, False: 2.71k]
  ------------------
  135|   172k|            auto tmp =
  136|   172k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   172k|            auto res = get_next_code_point(tmp);
  138|   172k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 86.1k, False: 86.7k]
  ------------------
  139|  86.1k|                return it;
  140|  86.1k|            }
  141|  86.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  86.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  86.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  86.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  86.7k|        }
  145|  88.8k|    }
  146|       |
  147|   328k|    return detail::make_string_view_iterator(source, it);
  148|   414k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.21M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   172k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   127k|{
 2073|   127k|    const auto argcount = args.size();
 2074|   127k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 59.1k, False: 68.3k]
  |  Branch (2074:60): [True: 59.1k, False: 0]
  ------------------
 2075|  59.1k|        auto arg = args.get(0);
 2076|  59.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  59.1k|    }
 2078|       |
 2079|  68.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 68.3k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  68.3k|    SCN_UNLIKELY_ATTR
 2087|  68.3k|    {
 2088|  68.3k|        auto handler = format_handler<false, CharT>{
 2089|  68.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.3k|    static_cast<    \
  |  |  929|  68.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.3k|    static_cast<    \
  |  |  929|  68.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  68.3k|        return vscan_parse_format_string(format, handler);
 2091|  68.3k|    }
 2092|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   360k|{
 1625|   360k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 193k, False: 166k]
  ------------------
 1626|   193k|        return false;
 1627|   193k|    }
 1628|   166k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 166k, False: 0]
  |  Branch (1628:39): [True: 166k, False: 0]
  ------------------
 1629|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  88.7k|{
 1658|  88.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88.7k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  88.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  88.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 88.7k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  88.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  88.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  88.7k|    static_cast<    \
  |  |  929|  88.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  88.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  88.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.10k, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.10k|    }                                                  \
  |  |  |  | 3671|  88.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  85.6k|    return it.position();
 1675|  88.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   125k|    {
 1903|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.21M|    {
 1722|  1.21M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.21M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   125k|    {
 1853|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   125k|{
 2038|   125k|    const auto beg = handler.get_ctx().begin();
 2039|   125k|    detail::parse_format_string<false>(format, handler);
 2040|   125k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 104k]
  |  |  ------------------
  ------------------
 2041|  20.7k|        return unexpected(handler.error);
 2042|  20.7k|    }
 2043|   104k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   125k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   820k|    {
 2022|   820k|        return ctx.get();
 2023|   820k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   820k|    {
 1857|   820k|        return contiguous_ctx;
 1858|   820k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   230k|    {
 1907|   230k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 230k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   230k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   125k|{
 1681|   125k|    auto arg = ctx.arg(id);
 1682|   125k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   125k|    return arg;
 1686|   125k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.21M|    {
 1797|  1.21M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.21M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.21M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.21M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.21M|            visited_args_lower64 |= (1ull << id);
 1808|  1.21M|            return;
 1809|  1.21M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.21M|    {
 1782|  1.21M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.21M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.21M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.21M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.21M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.21M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  55.8k|    {
 1766|  55.8k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 0]
  |  |  ------------------
  ------------------
 1767|  55.8k|            error = err;
 1768|  55.8k|        }
 1769|  55.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   125k|    {
 1944|   125k|        return parse_ctx.next_arg_id();
 1945|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   125k|    {
 1985|   125k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   125k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   125k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 125k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   125k|        auto specs = detail::format_specs{};
 1998|   125k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   125k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   125k|            arg.type()};
 2001|       |
 2002|   125k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   125k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 125k]
  |  Branch (2003:29): [True: 0, False: 125k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   125k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 117k]
  |  |  ------------------
  ------------------
 2009|  8.28k|            return parse_ctx.begin();
 2010|  8.28k|        }
 2011|   117k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   117k|        on_visit_scan_arg(
 2014|   117k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   117k|                                           get_ctx().locale()},
 2016|   117k|            arg);
 2017|   117k|        return parse_ctx.begin();
 2018|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   125k|    {
 1701|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   117k|    {
 1956|   117k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 117k]
  |  Branch (1956:23): [True: 0, False: 117k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   117k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   117k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 104k]
  |  |  ------------------
  ------------------
 1963|  12.4k|            on_error(r.error());
 1964|  12.4k|        }
 1965|   104k|        else {
 1966|   104k|            get_ctx().advance_to(*r);
 1967|   104k|        }
 1968|   117k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  37.2k|    {
 1761|  37.2k|        SCN_UNLIKELY_ATTR
 1762|  37.2k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  37.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.21M|    {
 1729|  1.21M|        {
 1730|  1.21M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.21M]
  ------------------
 1731|  1.21M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.21M]
  ------------------
 1732|  1.21M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.21M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.21M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.21M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.21M|        }
 1739|       |
 1740|  1.21M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.21M, False: 0]
  ------------------
 1741|  1.21M|            return;
 1742|  1.21M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.21M|    {
 1777|  1.21M|        return error;
 1778|  1.21M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  3.59M|    {
 1773|  3.59M|        return static_cast<bool>(error);
 1774|  3.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  68.3k|    {
 1903|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  68.3k|    {
 1830|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  68.3k|{
 2038|  68.3k|    const auto beg = handler.get_ctx().begin();
 2039|  68.3k|    detail::parse_format_string<false>(format, handler);
 2040|  68.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 58.0k]
  |  |  ------------------
  ------------------
 2041|  10.3k|        return unexpected(handler.error);
 2042|  10.3k|    }
 2043|  58.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   449k|    {
 2022|   449k|        return ctx.get();
 2023|   449k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   449k|    {
 1834|   449k|        return ctx;
 1835|   449k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   126k|    {
 1907|   126k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 126k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   126k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  68.3k|{
 1681|  68.3k|    auto arg = ctx.arg(id);
 1682|  68.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  68.3k|    return arg;
 1686|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  68.3k|    {
 1944|  68.3k|        return parse_ctx.next_arg_id();
 1945|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  68.3k|    {
 1985|  68.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  68.3k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  68.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 68.3k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  68.3k|        auto specs = detail::format_specs{};
 1998|  68.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  68.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  68.3k|            arg.type()};
 2001|       |
 2002|  68.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  68.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 68.3k]
  |  Branch (2003:29): [True: 0, False: 68.3k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  68.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 64.2k]
  |  |  ------------------
  ------------------
 2009|  4.14k|            return parse_ctx.begin();
 2010|  4.14k|        }
 2011|  64.2k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  64.2k|        on_visit_scan_arg(
 2014|  64.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  64.2k|                                           get_ctx().locale()},
 2016|  64.2k|            arg);
 2017|  64.2k|        return parse_ctx.begin();
 2018|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  68.3k|    {
 1701|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  64.2k|    {
 1956|  64.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 64.2k]
  |  Branch (1956:23): [True: 0, False: 64.2k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  64.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  64.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 58.0k]
  |  |  ------------------
  ------------------
 1963|  6.21k|            on_error(r.error());
 1964|  6.21k|        }
 1965|  58.0k|        else {
 1966|  58.0k|            get_ctx().advance_to(*r);
 1967|  58.0k|        }
 1968|  64.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   232k|{
 2053|   232k|    const auto argcount = args.size();
 2054|   232k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 107k, False: 125k]
  |  Branch (2054:60): [True: 107k, False: 0]
  ------------------
 2055|   107k|        auto arg = args.get(0);
 2056|   107k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   107k|    }
 2058|       |
 2059|   125k|    auto handler = format_handler<true, CharT>{
 2060|   125k|        ranges::subrange<const CharT*>{source.data(),
 2061|   125k|                                       source.data() + source.size()},
 2062|   125k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   125k|    return vscan_parse_format_string(format, handler);
 2064|   232k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   160k|{
 1638|   160k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   160k|    auto reader =
 1644|   160k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   160k|            ranges::subrange<const CharT*>{source.data(),
 1646|   160k|                                           source.data() + source.size()},
 1647|   160k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   160k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.21k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.21k|    }                                                  \
  |  |  |  | 3671|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   154k|    return ranges::distance(source.data(), it);
 1650|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.32M|{
 2053|  1.32M|    const auto argcount = args.size();
 2054|  1.32M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 645k, False: 678k]
  |  Branch (2054:60): [True: 645k, False: 0]
  ------------------
 2055|   645k|        auto arg = args.get(0);
 2056|   645k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   645k|    }
 2058|       |
 2059|   678k|    auto handler = format_handler<true, CharT>{
 2060|   678k|        ranges::subrange<const CharT*>{source.data(),
 2061|   678k|                                       source.data() + source.size()},
 2062|   678k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   678k|    static_cast<    \
  |  |  929|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   678k|    static_cast<    \
  |  |  929|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   678k|    return vscan_parse_format_string(format, handler);
 2064|  1.32M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.98M|{
 1625|  1.98M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.01M, False: 968k]
  ------------------
 1626|  1.01M|        return false;
 1627|  1.01M|    }
 1628|   968k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 968k, False: 0]
  |  Branch (1628:39): [True: 968k, False: 0]
  ------------------
 1629|  1.98M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   968k|{
 1638|   968k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   968k|    auto reader =
 1644|   968k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   968k|            ranges::subrange<const CharT*>{source.data(),
 1646|   968k|                                           source.data() + source.size()},
 1647|   968k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   968k|    static_cast<    \
  |  |  929|   968k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   968k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   968k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   968k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   968k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 956k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|   968k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   956k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   956k|    return ranges::distance(source.data(), it);
 1650|   968k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   678k|    {
 1903|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   678k|    {
 1853|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   678k|{
 2038|   678k|    const auto beg = handler.get_ctx().begin();
 2039|   678k|    detail::parse_format_string<false>(format, handler);
 2040|   678k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.4k, False: 637k]
  |  |  ------------------
  ------------------
 2041|  41.4k|        return unexpected(handler.error);
 2042|  41.4k|    }
 2043|   637k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   678k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.63M|    {
 2022|  4.63M|        return ctx.get();
 2023|  4.63M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.63M|    {
 1857|  4.63M|        return contiguous_ctx;
 1858|  4.63M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.31M|    {
 1907|  1.31M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.31M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   678k|{
 1681|   678k|    auto arg = ctx.arg(id);
 1682|   678k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   678k|    return arg;
 1686|   678k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   678k|    {
 1944|   678k|        return parse_ctx.next_arg_id();
 1945|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   678k|    {
 1985|   678k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   678k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   678k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 678k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   678k|        auto specs = detail::format_specs{};
 1998|   678k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   678k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   678k|            arg.type()};
 2001|       |
 2002|   678k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   678k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 678k]
  |  Branch (2003:29): [True: 0, False: 678k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   678k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 662k]
  |  |  ------------------
  ------------------
 2009|  16.5k|            return parse_ctx.begin();
 2010|  16.5k|        }
 2011|   662k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   662k|        on_visit_scan_arg(
 2014|   662k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   662k|                                           get_ctx().locale()},
 2016|   662k|            arg);
 2017|   662k|        return parse_ctx.begin();
 2018|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   678k|    {
 1701|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   662k|    {
 1956|   662k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 662k]
  |  Branch (1956:23): [True: 0, False: 662k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   662k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   662k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 637k]
  |  |  ------------------
  ------------------
 1963|  24.8k|            on_error(r.error());
 1964|  24.8k|        }
 1965|   637k|        else {
 1966|   637k|            get_ctx().advance_to(*r);
 1967|   637k|        }
 1968|   662k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   662k|{
 2073|   662k|    const auto argcount = args.size();
 2074|   662k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 322k, False: 339k]
  |  Branch (2074:60): [True: 322k, False: 0]
  ------------------
 2075|   322k|        auto arg = args.get(0);
 2076|   322k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   322k|    static_cast<    \
  |  |  929|   322k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   322k|    }
 2078|       |
 2079|   339k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 339k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   339k|    SCN_UNLIKELY_ATTR
 2087|   339k|    {
 2088|   339k|        auto handler = format_handler<false, CharT>{
 2089|   339k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   339k|        return vscan_parse_format_string(format, handler);
 2091|   339k|    }
 2092|   339k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   484k|{
 1658|   484k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 484k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   484k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   484k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 484k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   484k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   484k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   484k|    static_cast<    \
  |  |  929|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   484k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   484k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   484k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   484k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.21k, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.21k|    }                                                  \
  |  |  |  | 3671|   484k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   478k|    return it.position();
 1675|   484k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   339k|    {
 1903|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   339k|    {
 1830|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   339k|{
 2038|   339k|    const auto beg = handler.get_ctx().begin();
 2039|   339k|    detail::parse_format_string<false>(format, handler);
 2040|   339k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 318k]
  |  |  ------------------
  ------------------
 2041|  20.7k|        return unexpected(handler.error);
 2042|  20.7k|    }
 2043|   318k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   339k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.31M|    {
 2022|  2.31M|        return ctx.get();
 2023|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.31M|    {
 1834|  2.31M|        return ctx;
 1835|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   658k|    {
 1907|   658k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 658k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   658k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   339k|{
 1681|   339k|    auto arg = ctx.arg(id);
 1682|   339k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   339k|    return arg;
 1686|   339k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   339k|    {
 1944|   339k|        return parse_ctx.next_arg_id();
 1945|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   339k|    {
 1985|   339k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   339k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   339k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 339k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   339k|        auto specs = detail::format_specs{};
 1998|   339k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   339k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   339k|            arg.type()};
 2001|       |
 2002|   339k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   339k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 339k]
  |  Branch (2003:29): [True: 0, False: 339k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   339k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 331k]
  |  |  ------------------
  ------------------
 2009|  8.28k|            return parse_ctx.begin();
 2010|  8.28k|        }
 2011|   331k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   331k|        on_visit_scan_arg(
 2014|   331k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   331k|                                           get_ctx().locale()},
 2016|   331k|            arg);
 2017|   331k|        return parse_ctx.begin();
 2018|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   339k|    {
 1701|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   331k|    {
 1956|   331k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 331k]
  |  Branch (1956:23): [True: 0, False: 331k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   331k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   331k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 318k]
  |  |  ------------------
  ------------------
 1963|  12.4k|            on_error(r.error());
 1964|  12.4k|        }
 1965|   318k|        else {
 1966|   318k|            get_ctx().advance_to(*r);
 1967|   318k|        }
 1968|   331k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  53.5k|{
 2099|  53.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  53.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  29.5k|{
 2099|  29.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  29.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   322k|{
 2099|   322k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   322k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   161k|{
 2099|   161k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   161k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  1.03k|{
 1363|  1.03k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  1.03k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  1.03k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  1.03k|            std::u32string tmp;
 1368|  1.03k|            transcode_to_string_impl_to32(src, tmp);
 1369|  1.03k|            return transcode_to_string_impl_32to16<false>(
 1370|  1.03k|                std::u32string_view{tmp}, dest);
 1371|  1.03k|        }
 1372|  1.03k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  1.03k|            return transcode_to_string_impl_to32(src, dest);
 1374|  1.03k|        }
 1375|  1.03k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  1.03k|{
 1256|  1.03k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  1.03k|    auto it = src.begin();
 1259|   398k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 397k, False: 1.03k]
  ------------------
 1260|   397k|        auto res = get_next_code_point(
 1261|   397k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   397k|                                                                 src.end()));
 1263|   397k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.06k, False: 393k]
  |  |  ------------------
  ------------------
 1264|  4.06k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.06k|        }
 1266|   393k|        else {
 1267|   393k|            dest.push_back(res.value);
 1268|   393k|        }
 1269|   397k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   397k|    }
 1271|  1.03k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   998k|{
 1169|   998k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   998k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   998k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   998k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   998k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   998k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.6k, False: 980k]
  |  |  ------------------
  ------------------
 1173|  18.6k|        return {get_start_for_next_code_point(input),
 1174|  18.6k|                detail::invalid_code_point};
 1175|  18.6k|    }
 1176|   980k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   980k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 962k]
  |  |  ------------------
  ------------------
 1177|  17.1k|        return {input.end(), detail::invalid_code_point};
 1178|  17.1k|    }
 1179|       |
 1180|   962k|    return {input.begin() + len,
 1181|   962k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   980k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  18.6k|{
 1155|  18.6k|    auto it = input.begin();
 1156|  87.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 85.9k, False: 1.83k]
  ------------------
 1157|  85.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.7k, False: 69.2k]
  ------------------
 1158|  16.7k|            break;
 1159|  16.7k|        }
 1160|  85.9k|    }
 1161|  18.6k|    return it;
 1162|  18.6k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  18.6k|    {
 2931|  18.6k|        SCN_UNLIKELY_ATTR
 2932|  18.6k|        m_msg = msg;
 2933|  18.6k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  1.17M|    {
 2936|  1.17M|        return m_msg == nullptr;
 2937|  1.17M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.96M|{
  458|  2.96M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.96M|        static_cast<unsigned char>(ch))];
  460|  2.96M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  43.7k|{
  469|  43.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  43.7k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  12.6k|{
  474|  12.6k|#if WCHAR_MIN < 0
  475|  12.6k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 11.2k, False: 1.35k]
  |  Branch (475:23): [True: 6.97k, False: 4.32k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  12.6k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.02M|{
  539|  1.02M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.02M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  4.53M|{
  784|  4.53M|    return e != eof_error::good;
  785|  4.53M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  14.1k|{
  798|  14.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  14.1k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  14.1k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  83.1M|{
 1200|       |    // Pattern_White_Space property
 1201|  83.1M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 16.4M, False: 66.6M]
  |  Branch (1201:27): [True: 2.47M, False: 13.9M]
  ------------------
 1202|  83.1M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 2.51M, False: 78.1M]
  ------------------
 1203|  83.1M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 414k, False: 77.7M]
  ------------------
 1204|  83.1M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 185k, False: 77.5M]
  ------------------
 1205|  83.1M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 329k, False: 77.2M]
  ------------------
 1206|  83.1M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 278k, False: 76.9M]
  ------------------
 1207|  83.1M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 76.9M]
  ------------------
 1208|  83.1M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.11M|{
 6008|  1.11M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.11M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.11M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.11M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.11M|    return {};
 6023|  1.11M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   531k|    {
  304|   531k|        ranges::advance(x, n);
  305|   531k|        return x;
  306|   531k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   531k|    {
  268|   531k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   531k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   531k|    {
  151|   531k|        i += n;
  152|   531k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.24M|    {
  108|  1.24M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.24M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.24M|    {
   87|  1.24M|        return s - i;
   88|  1.24M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.59M|    {
  108|  1.59M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.59M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.59M|    {
   87|  1.59M|        return s - i;
   88|  1.59M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   150k|{
  981|   150k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   150k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   150k|        return true;
  984|   150k|    }
  985|   150k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   150k|                           ranges::const_iterator_t<Range>,
  987|   150k|                           typename detail::basic_scan_buffer<
  988|   150k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   150k|        auto beg = r.begin();
  990|   150k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 150k, False: 0]
  ------------------
  991|   150k|            return false;
  992|   150k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   150k|    else {
 1006|   150k|        return false;
 1007|   150k|    }
 1008|   150k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  38.8k|    {
  763|  38.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  38.8k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.84k|    {
  754|  8.84k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  19.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.4k|              cvref<T> obj = *get<T>(fn);
  745|  19.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.4k|              }
  748|  19.4k|              else {
  749|  19.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.4k|              }
  751|  19.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  19.4k|    {
  684|  19.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.4k|            return static_cast<T*>(s.m_cp);
  686|  19.4k|        }
  687|  19.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.4k|            return static_cast<T*>(s.m_p);
  689|  19.4k|        }
  690|  19.4k|        else {
  691|  19.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.4k|        }
  693|  19.4k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  8.84k|        {
  662|  8.84k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  88.5M|    {
  763|  88.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  88.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  88.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.55M|    {
  754|  2.55M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  6.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.05M|              cvref<T> obj = *get<T>(fn);
  745|  6.05M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.05M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.05M|              }
  748|  6.05M|              else {
  749|  6.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.05M|              }
  751|  6.05M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.05M|    {
  684|  6.05M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.05M|            return static_cast<T*>(s.m_cp);
  686|  6.05M|        }
  687|  6.05M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.05M|            return static_cast<T*>(s.m_p);
  689|  6.05M|        }
  690|  6.05M|        else {
  691|  6.05M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.05M|        }
  693|  6.05M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.55M|        {
  662|  2.55M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  62.1k|    {
 6037|  62.1k|        const bool need_skipped_width =
 6038|  62.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 62.1k]
  |  Branch (6038:33): [True: 0, False: 62.1k]
  ------------------
 6039|  62.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  62.1k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 62.1k]
  ------------------
 6043|  62.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 62.1k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  62.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 62.1k, False: 0]
  |  Branch (6047:56): [True: 59.1k, False: 2.94k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  59.1k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 59.1k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   117k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    966|    }                                                  \
  |  |  |  | 3671|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   117k|                            make_eof_scan_error));
 6058|       |
 6059|   117k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 58.2k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  58.2k|            return result_type{it, 0};
 6067|   117k|        }
 6068|       |
 6069|  2.94k|        return result_type{rng.begin(), 0};
 6070|  62.1k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.94k|{
 1976|  2.94k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.94k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.94k|{
 1957|  2.94k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.94k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.94k|    }
 1960|  2.94k|    else {
 1961|  2.94k|        auto first = range.begin();
 1962|  6.52k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.46k, False: 60]
  ------------------
 1963|  6.46k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.88k, False: 3.58k]
  ------------------
 1964|  2.88k|                return first;
 1965|  2.88k|            }
 1966|  6.46k|        }
 1967|     60|        return first;
 1968|  2.94k|    }
 1969|  2.94k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  58.0k|    {
  108|  58.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  58.0k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  58.0k|    {
   94|  58.0k|        iter_difference_t<I> counter{0};
   95|   703k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 645k, False: 58.0k]
  ------------------
   96|   645k|            ++i;
   97|   645k|            ++counter;
   98|   645k|        }
   99|  58.0k|        return counter;
  100|  58.0k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   236k|{
  950|   236k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 233k]
  |  |  ------------------
  ------------------
  951|  2.22k|        return eof_error::eof;
  952|  2.22k|    }
  953|   233k|    return eof_error::good;
  954|   236k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.91M|{
  944|  1.91M|    return is_range_eof(r.begin(), r.end());
  945|  1.91M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.91M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.91M|    {
  937|  1.91M|        return begin == end;
  938|  1.91M|    }
  939|  1.91M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   146k|{
 1683|   146k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   146k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   146k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   146k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   146k|    }
 1688|   146k|    else {
 1689|   146k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   146k|    }
 1691|   146k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   146k|    {
 1537|   146k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   146k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   146k|    {
 1621|   146k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   146k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   146k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   146k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   146k|            m_storage.reset();
 1627|   146k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   146k|        }
 1629|   146k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   146k|                                          std::basic_string<CharT>>) {
 1631|   146k|            m_storage.emplace(SCN_FWD(range));
 1632|   146k|            m_view = string_view_type{*m_storage};
 1633|   146k|        }
 1634|   146k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   146k|                                          typename detail::basic_scan_buffer<
 1636|   146k|                                              value_t>::forward_iterator> &&
 1637|   146k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   146k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   146k|            auto end_seg = range.end().contiguous_segment();
 1640|   146k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 142k]
  |  |  ------------------
  ------------------
 1641|   146k|                             detail::to_address(end_seg.end()))) {
 1642|  3.71k|                auto& str = m_storage.emplace();
 1643|  3.71k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.71k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.71k|                m_view = string_view_type{str};
 1646|  3.71k|                return;
 1647|  3.71k|            }
 1648|       |
 1649|   142k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   142k|                                                            end_seg.data());
 1651|   142k|            m_storage.reset();
 1652|   142k|        }
 1653|   146k|        else {
 1654|   146k|            auto& str = m_storage.emplace();
 1655|   146k|            if constexpr (ranges::sized_range<Range>) {
 1656|   146k|                str.reserve(range.size());
 1657|   146k|            }
 1658|   146k|            if constexpr (ranges::common_range<Range>) {
 1659|   146k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   146k|                          std::back_inserter(str));
 1661|   146k|            }
 1662|   146k|            else {
 1663|   146k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   146k|                     ++it) {
 1665|   146k|                    str.push_back(*it);
 1666|   146k|                }
 1667|   146k|            }
 1668|   146k|            m_view = string_view_type{str};
 1669|   146k|        }
 1670|   146k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   287k|    {
 1582|   287k|        return m_view;
 1583|   287k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   146k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  57.5k|    {
 6079|  57.5k|        const bool need_skipped_width =
 6080|  57.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 57.5k]
  |  Branch (6080:33): [True: 0, False: 57.5k]
  ------------------
 6081|  57.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  57.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 57.5k]
  ------------------
 6084|  57.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 57.5k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  57.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 57.5k, False: 0]
  ------------------
 6093|  57.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 848, False: 56.7k]
  ------------------
 6094|  57.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 848]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    848|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 848]
  ------------------
 6096|    848|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  57.5k|        return result_type{rng.begin(), 0};
 6118|  57.5k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   427k|{
  950|   427k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.69k, False: 423k]
  |  |  ------------------
  ------------------
  951|  3.69k|        return eof_error::eof;
  952|  3.69k|    }
  953|   423k|    return eof_error::good;
  954|   427k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   427k|{
  944|   427k|    return is_range_eof(r.begin(), r.end());
  945|   427k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   427k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   427k|    {
  937|   427k|        return begin == end;
  938|   427k|    }
  939|   427k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   266k|{
 1683|   266k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   266k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   266k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   266k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   266k|    }
 1688|   266k|    else {
 1689|   266k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   266k|    }
 1691|   266k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   266k|    {
 1490|   266k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.45M|    {
 1503|  1.45M|        return sv;
 1504|  1.45M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  5.89k|{
 1976|  5.89k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.89k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.89k|{
 1957|  5.89k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.89k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.89k|    }
 1960|  5.89k|    else {
 1961|  5.89k|        auto first = range.begin();
 1962|  5.89k|        for (; first != range.end(); ++first) {
 1963|  5.89k|            if (pred(*first)) {
 1964|  5.89k|                return first;
 1965|  5.89k|            }
 1966|  5.89k|        }
 1967|  5.89k|        return first;
 1968|  5.89k|    }
 1969|  5.89k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   266k|{
 2951|   266k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 266k, False: 0]
  ------------------
 2952|   266k|        auto it = read_while_classic_space(range);
 2953|   266k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   266k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59k, False: 264k]
  |  |  ------------------
  ------------------
 2955|  2.59k|            return unexpected(e);
 2956|  2.59k|        }
 2957|       |
 2958|   264k|        return it;
 2959|   266k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   266k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   266k|{
 2117|   266k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   266k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   266k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   266k|        auto buf = make_contiguous_buffer(range);
 2121|   266k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   266k|        return ranges::next(range.begin(),
 2123|   266k|                            ranges::distance(buf.view().begin(), it));
 2124|   266k|    }
 2125|   266k|    else {
 2126|   266k|        auto it = range.begin();
 2127|       |
 2128|   266k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   266k|            auto seg = get_contiguous_beginning(range);
 2130|   266k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   266k|                seg_it != seg.end()) {
 2132|   266k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   266k|            }
 2134|   266k|            ranges::advance(it, seg.size());
 2135|   266k|        }
 2136|       |
 2137|   266k|        return read_while_code_point(
 2138|   266k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   266k|    }
 2140|   266k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   531k|{
 1683|   531k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   531k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   531k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   531k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   531k|    }
 1688|   531k|    else {
 1689|   531k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   531k|    }
 1691|   531k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   531k|    {
 1490|   531k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  10.1k|    {
  304|  10.1k|        ranges::advance(x, n);
  305|  10.1k|        return x;
  306|  10.1k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   292k|    {
  268|   292k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   292k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   292k|    {
  181|   550k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 257k, False: 292k]
  ------------------
  182|   257k|            ++i;
  183|   257k|        }
  184|   292k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   145k|    {
 1587|   145k|        return m_storage.has_value();
 1588|   145k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.33k|    {
 1592|  2.33k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.33k|        return *m_storage;
 1594|  2.33k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  64.2k|    {
 6193|  64.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  64.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  64.2k|            auto rd = make_reader<T, char_type>();
 6198|  64.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  64.2k|                return unexpected(e);
 6200|  64.2k|            }
 6201|       |
 6202|  64.2k|            return impl(rd, range, value);
 6203|  64.2k|        }
 6204|  64.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  64.2k|            auto rd = make_reader<T, char_type>();
 6206|  64.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 62.1k]
  |  |  ------------------
  ------------------
 6207|  2.07k|                return unexpected(e);
 6208|  2.07k|            }
 6209|       |
 6210|  62.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 62.1k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  62.1k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  62.1k|                return impl(rd, range, value);
 6213|  62.1k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  64.2k|        else {
 6221|  64.2k|            SCN_EXPECT(false);
 6222|  64.2k|            SCN_UNREACHABLE;
 6223|  64.2k|        }
 6224|  64.2k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   291k|{
 5809|   291k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   291k|        return reader_impl_for_bool<CharT>{};
 5811|   291k|    }
 5812|   291k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   291k|        return reader_impl_for_char<CharT>{};
 5814|   291k|    }
 5815|   291k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   291k|        return reader_impl_for_wchar<CharT>{};
 5817|   291k|    }
 5818|   291k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   291k|        return reader_impl_for_code_point<CharT>{};
 5820|   291k|    }
 5821|   291k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   291k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   291k|        return reader_impl_for_string<CharT>{};
 5824|   291k|    }
 5825|   291k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   291k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   291k|        return reader_impl_for_string<CharT>{};
 5828|   291k|    }
 5829|   291k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   291k|                       std::is_same_v<T, wregex_matches>) {
 5831|   291k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   291k|    }
 5833|   291k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   291k|        return reader_impl_for_voidptr<CharT>{};
 5835|   291k|    }
 5836|   291k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   291k|        return reader_impl_for_float<CharT>{};
 5838|   291k|    }
 5839|   291k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   291k|                       !std::is_same_v<T, wchar_t> &&
 5841|   291k|                       !std::is_same_v<T, char32_t> &&
 5842|   291k|                       !std::is_same_v<T, bool>) {
 5843|   291k|        return reader_impl_for_int<CharT>{};
 5844|   291k|    }
 5845|   291k|    else {
 5846|   291k|        return reader_impl_for_monostate<CharT>{};
 5847|   291k|    }
 5848|   291k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   430k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   181k|    {
 3040|   181k|        reader_error_handler eh{};
 3041|   181k|        get_derived().check_specs_impl(specs, eh);
 3042|   181k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 175k]
  |  |  ------------------
  ------------------
 3043|  6.21k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.21k|        }
 3045|   175k|        return {};
 3046|   181k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   181k|    {
 3051|   181k|        return static_cast<Derived&>(*this);
 3052|   181k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   181k|    {
 5210|   181k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   181k|        SCN_GCC_PUSH
 5213|   181k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   181k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   181k|        SCN_CLANG_PUSH
 5217|   181k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   181k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   181k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 181k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 181k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   166k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 166k, False: 15.0k]
  ------------------
 5226|   166k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 166k]
  ------------------
 5227|   166k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 166k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   166k|                else {
 5231|   166k|                    m_type = reader_type::word;
 5232|   166k|                }
 5233|   166k|                break;
 5234|      0|            }
 5235|       |
 5236|  6.21k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 6.21k, False: 175k]
  ------------------
 5237|  6.21k|                m_type = reader_type::character;
 5238|  6.21k|                break;
 5239|       |
 5240|  8.84k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 8.84k, False: 172k]
  ------------------
 5241|  8.84k|                m_type = reader_type::character_set;
 5242|  8.84k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 181k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 181k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   181k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   181k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  62.1k|    {
 6124|  62.1k|        const bool need_skipped_width =
 6125|  62.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 62.1k]
  |  Branch (6125:33): [True: 0, False: 62.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  62.1k|        auto it = rng.begin();
 6129|  62.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  62.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 62.1k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  62.1k|        else {
 6138|  62.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 61.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    966|    }                                                  \
  |  |  |  | 3671|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  61.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  61.1k|        }
 6141|  61.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  61.1k|        std::ptrdiff_t value_width = 0;
 6145|  61.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 61.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  61.1k|        else {
 6161|  61.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.17k, False: 58.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.17k|    }                                                  \
  |  | 3671|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  58.0k|                                             specs, value, loc));
 6163|       |
 6164|  58.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 58.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  58.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  58.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  58.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 57.5k, False: 454]
  ------------------
 6174|  57.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  57.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  57.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  57.5k|                                 value_width));
 6178|  57.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  57.5k|        }
 6180|       |
 6181|  58.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  58.0k|                                                 value_width, postfix_width);
 6183|  58.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 58.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  58.0k|        return it;
 6188|  58.0k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   586k|    {
 5259|   586k|        return m_type == reader_type::word;
 5260|   586k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   412k|{
 1132|   412k|    auto it = src.begin();
 1133|  3.02M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.62M, False: 402k]
  ------------------
 1134|  2.62M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.62M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 5.24k, False: 2.61M]
  ------------------
 1136|  5.24k|            return false;
 1137|  5.24k|        }
 1138|  2.61M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 848, False: 2.61M]
  ------------------
 1139|    848|            return false;
 1140|    848|        }
 1141|  2.61M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.61M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.61M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 3.51k, False: 2.61M]
  ------------------
 1144|  3.51k|            return false;
 1145|  3.51k|        }
 1146|  2.61M|        it += len;
 1147|  2.61M|    }
 1148|   402k|    return true;
 1149|   412k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   143k|{
 2993|   143k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   143k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.33k, False: 141k]
  ------------------
 2995|  2.33k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.33k|    static_cast<    \
  |  |  929|  2.33k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.33k|        }
 2997|   141k|        else {
 2998|   141k|            dest.assign(source.view());
 2999|   141k|        }
 3000|   143k|    }
 3001|   143k|    else {
 3002|   143k|        return transcode_impl(source.view(), dest);
 3003|   143k|    }
 3004|       |
 3005|   143k|    return {};
 3006|   143k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  8.84k|        {
 5103|  8.84k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 8.84k, False: 0]
  ------------------
 5104|  8.84k|                return {};
 5105|  8.84k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  17.4k|        {
 5076|  17.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  17.4k|            const auto val =
 5078|  17.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  17.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  17.4k|                    (val % 8)) &
 5081|  17.4k|                   1u;
 5082|  17.4k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  19.4k|        {
 5129|  19.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.99k, False: 17.4k]
  ------------------
 5130|  1.99k|                return false;
 5131|  1.99k|            }
 5132|       |
 5133|  17.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  19.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  8.84k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  61.1k|    {
 5277|  61.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  61.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  61.1k|        return read_impl(range, specs, value);
 5279|  61.1k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  61.1k|    {
 5295|  61.1k|        SCN_CLANG_PUSH
 5296|  61.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  61.1k|        switch (m_type) {
 5299|  58.2k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 58.2k, False: 2.94k]
  ------------------
 5300|  58.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 61.1k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 61.1k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.94k, False: 58.2k]
  ------------------
 5310|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.94k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 61.1k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 61.1k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 61.1k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  61.1k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  61.1k|        }
 5331|       |
 5332|  61.1k|        SCN_CLANG_POP
 5333|  61.1k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   145k|    {
 4820|   145k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   145k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   145k|{
 4752|   145k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   145k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   145k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 2.94k, False: 142k]
  ------------------
 4756|  2.94k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  2.94k|                                     "Invalid encoding in scanned string");
 4758|  2.94k|    }
 4759|   142k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   142k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   142k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   142k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   145k|{
 2088|   145k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   145k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   145k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   145k|        auto buf = make_contiguous_buffer(range);
 2092|   145k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   145k|        return ranges::next(range.begin(),
 2094|   145k|                            ranges::distance(buf.view().begin(), it));
 2095|   145k|    }
 2096|   145k|    else {
 2097|   145k|        auto it = range.begin();
 2098|       |
 2099|   145k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   145k|            auto seg = get_contiguous_beginning(range);
 2101|   145k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   145k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 145k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   145k|            ranges::advance(it, seg.size());
 2106|   145k|        }
 2107|       |
 2108|   145k|        return read_until_code_point(
 2109|   145k|            ranges::subrange{it, range.end()},
 2110|   145k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   145k|    }
 2112|   145k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   292k|{
 1039|   292k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   292k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   292k|        return r;
 1042|   292k|    }
 1043|   292k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   292k|                           ranges::const_iterator_t<Range>,
 1045|   292k|                           typename detail::basic_scan_buffer<
 1046|   292k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   292k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   292k|            auto seg = r.begin().contiguous_segment();
 1049|   292k|            auto dist =
 1050|   292k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   292k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   292k|        }
 1053|   292k|        else {
 1054|   292k|            return r.begin().contiguous_segment();
 1055|   292k|        }
 1056|   292k|    }
 1057|   292k|    else {
 1058|   292k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   292k|    }
 1060|   292k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   282k|{
 2061|   282k|    auto it = range.begin();
 2062|  1.68M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.67M, False: 4.03k]
  ------------------
 2063|  1.67M|        const auto val =
 2064|  1.67M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.67M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.67M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.66M, False: 14.2k]
  |  |  ------------------
  ------------------
 2066|  1.66M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.66M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.66M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 278k, False: 1.38M]
  ------------------
 2069|   278k|                return it;
 2070|   278k|            }
 2071|  1.66M|        }
 2072|  1.39M|        it = val.iterator;
 2073|  1.39M|    }
 2074|       |
 2075|  4.03k|    return it;
 2076|   282k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.67M|{
 1899|  1.67M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.67M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.67M|    auto it = range.begin();
 1903|  1.67M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.67M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 1.66M]
  |  |  ------------------
  ------------------
 1906|  14.2k|        ++it;
 1907|  14.2k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  14.2k|        return {it, {}};
 1909|  14.2k|    }
 1910|       |
 1911|  1.66M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.57M, False: 91.7k]
  ------------------
 1912|  1.57M|        ++it;
 1913|  1.57M|        return {it, string_type(1, *range.begin())};
 1914|  1.57M|    }
 1915|       |
 1916|  91.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  91.7k|    return {it, string_type{range.begin(), it}};
 1918|  1.66M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  14.2k|{
 1155|  14.2k|    auto it = input.begin();
 1156|  36.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 36.1k, False: 408]
  ------------------
 1157|  36.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 13.8k, False: 22.2k]
  ------------------
 1158|  13.8k|            break;
 1159|  13.8k|        }
 1160|  36.1k|    }
 1161|  14.2k|    return it;
 1162|  14.2k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  91.7k|    {
  283|  91.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  91.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  91.7k|    {
  252|  91.7k|        constexpr iter_difference_t<I> zero{0};
  253|  91.7k|        iter_difference_t<I> counter{0};
  254|       |
  255|   333k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 242k, False: 91.1k]
  |  Branch (255:30): [True: 241k, False: 604]
  ------------------
  256|   241k|            ++i;
  257|   241k|            ++counter;
  258|   241k|        }
  259|       |
  260|  91.7k|        return counter;
  261|  91.7k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.67M|    {
 1890|  1.67M|        return !codepoint.empty();
 1891|  1.67M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   952k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   952k|              cvref<T> obj = *get<T>(fn);
  745|   952k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   952k|                  obj(static_cast<decltype(args)>(args)...);
  747|   952k|              }
  748|   952k|              else {
  749|   952k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   952k|              }
  751|   952k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   952k|    {
  684|   952k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   952k|            return static_cast<T*>(s.m_cp);
  686|   952k|        }
  687|   952k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   952k|            return static_cast<T*>(s.m_p);
  689|   952k|        }
  690|   952k|        else {
  691|   952k|            return reinterpret_cast<T*>(s.m_fp);
  692|   952k|        }
  693|   952k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   952k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.94k|    {
 5048|  2.94k|        auto it = read_source_impl(range, {specs});
 5049|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 878]
  |  |  ------------------
  ------------------
 5050|  2.07k|            return unexpected(it.error());
 5051|  2.07k|        }
 5052|       |
 5053|    878|        return read_string_impl(range, *it, value);
 5054|  2.94k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.94k|    {
 5153|  2.94k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.94k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.94k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.94k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.94k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.94k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.94k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.94k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.94k|        };
 5178|       |
 5179|  2.94k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.94k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.94k|        auto it = read_while_code_unit(range, cb);
 5184|  2.94k|        return check_nonempty(it, range);
 5185|  2.94k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.94k|    {
 5191|  2.94k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 2.07k, False: 878]
  ------------------
 5192|  2.07k|            return unexpected_scan_error(
 5193|  2.07k|                scan_error::invalid_scanned_value,
 5194|  2.07k|                "No characters matched in [character set]");
 5195|  2.07k|        }
 5196|       |
 5197|    878|        return it;
 5198|  2.94k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   137k|{
 2082|   137k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   137k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.94k|    {
  754|  2.94k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  6.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.46k|              cvref<T> obj = *get<T>(fn);
  745|  6.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.46k|              }
  748|  6.46k|              else {
  749|  6.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.46k|              }
  751|  6.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.46k|    {
  684|  6.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.46k|            return static_cast<T*>(s.m_cp);
  686|  6.46k|        }
  687|  6.46k|        else if constexpr (std::is_object_v<T>) {
  688|  6.46k|            return static_cast<T*>(s.m_p);
  689|  6.46k|        }
  690|  6.46k|        else {
  691|  6.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.46k|        }
  693|  6.46k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  6.46k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.46k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.46k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.94k|        {
  667|  2.94k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    878|{
 4752|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    878|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    878|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 878]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    878|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    878|    static_cast<    \
  |  |  929|    878|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    878|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    878|    return SCN_MOVE(result);
  ------------------
  |  |  928|    878|    static_cast<    \
  |  |  929|    878|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    878|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  55.8k|    {
 5277|  55.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  55.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  55.8k|        return read_impl(range, specs, value);
 5279|  55.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  55.8k|    {
 5295|  55.8k|        SCN_CLANG_PUSH
 5296|  55.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  55.8k|        switch (m_type) {
 5299|  52.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 52.8k, False: 2.94k]
  ------------------
 5300|  52.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 55.8k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 55.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.94k, False: 52.8k]
  ------------------
 5310|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.94k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 55.8k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 55.8k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 55.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  55.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  55.8k|        }
 5331|       |
 5332|  55.8k|        SCN_CLANG_POP
 5333|  55.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   132k|    {
 4820|   132k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   132k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   132k|{
 4752|   132k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   132k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   132k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.33k, False: 128k]
  ------------------
 4756|  3.33k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.33k|                                     "Invalid encoding in scanned string");
 4758|  3.33k|    }
 4759|   128k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   128k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   128k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   128k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   129k|{
 3012|   129k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   129k|        dest.assign(source.view());
 3014|   129k|    }
 3015|   129k|    else {
 3016|   129k|        return transcode_impl(source.view(), dest);
 3017|   129k|    }
 3018|       |
 3019|   129k|    return {};
 3020|   129k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   264k|{
 2088|   264k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   264k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   264k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   264k|        auto buf = make_contiguous_buffer(range);
 2092|   264k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   264k|        return ranges::next(range.begin(),
 2094|   264k|                            ranges::distance(buf.view().begin(), it));
 2095|   264k|    }
 2096|   264k|    else {
 2097|   264k|        auto it = range.begin();
 2098|       |
 2099|   264k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   264k|            auto seg = get_contiguous_beginning(range);
 2101|   264k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   264k|                seg_it != seg.end()) {
 2103|   264k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   264k|            }
 2105|   264k|            ranges::advance(it, seg.size());
 2106|   264k|        }
 2107|       |
 2108|   264k|        return read_until_code_point(
 2109|   264k|            ranges::subrange{it, range.end()},
 2110|   264k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   264k|    }
 2112|   264k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.94k|    {
 5048|  2.94k|        auto it = read_source_impl(range, {specs});
 5049|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 878]
  |  |  ------------------
  ------------------
 5050|  2.07k|            return unexpected(it.error());
 5051|  2.07k|        }
 5052|       |
 5053|    878|        return read_string_impl(range, *it, value);
 5054|  2.94k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  5.89k|    {
 5153|  5.89k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  5.89k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  5.89k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  5.89k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  5.89k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 5.89k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  5.89k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.89k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.89k|        };
 5178|       |
 5179|  5.89k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 5.89k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  5.89k|        auto it = read_while_code_unit(range, cb);
 5184|  5.89k|        return check_nonempty(it, range);
 5185|  5.89k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  5.89k|    {
 5191|  5.89k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 4.14k, False: 1.75k]
  ------------------
 5192|  4.14k|            return unexpected_scan_error(
 5193|  4.14k|                scan_error::invalid_scanned_value,
 5194|  4.14k|                "No characters matched in [character set]");
 5195|  4.14k|        }
 5196|       |
 5197|  1.75k|        return it;
 5198|  5.89k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  5.89k|    {
  754|  5.89k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  12.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.9k|              cvref<T> obj = *get<T>(fn);
  745|  12.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.9k|              }
  748|  12.9k|              else {
  749|  12.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.9k|              }
  751|  12.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  12.9k|    {
  684|  12.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.9k|            return static_cast<T*>(s.m_cp);
  686|  12.9k|        }
  687|  12.9k|        else if constexpr (std::is_object_v<T>) {
  688|  12.9k|            return static_cast<T*>(s.m_p);
  689|  12.9k|        }
  690|  12.9k|        else {
  691|  12.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.9k|        }
  693|  12.9k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  12.9k|        const auto cb = [&](SourceCharT ch) {
 5176|  12.9k|            return cb_wrapper.on_ascii_only(ch);
 5177|  12.9k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  5.89k|        {
  667|  5.89k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    878|{
 4752|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    878|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    878|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 878]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    878|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    878|    static_cast<    \
  |  |  929|    878|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    878|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    878|    return SCN_MOVE(result);
  ------------------
  |  |  928|    878|    static_cast<    \
  |  |  929|    878|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    878|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   138k|{
 5809|   138k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   138k|        return reader_impl_for_bool<CharT>{};
 5811|   138k|    }
 5812|   138k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   138k|        return reader_impl_for_char<CharT>{};
 5814|   138k|    }
 5815|   138k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   138k|        return reader_impl_for_wchar<CharT>{};
 5817|   138k|    }
 5818|   138k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   138k|        return reader_impl_for_code_point<CharT>{};
 5820|   138k|    }
 5821|   138k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   138k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   138k|        return reader_impl_for_string<CharT>{};
 5824|   138k|    }
 5825|   138k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   138k|                       std::is_same_v<T, std::wstring>) {
 5827|   138k|        return reader_impl_for_string<CharT>{};
 5828|   138k|    }
 5829|   138k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   138k|                       std::is_same_v<T, wregex_matches>) {
 5831|   138k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   138k|    }
 5833|   138k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   138k|        return reader_impl_for_voidptr<CharT>{};
 5835|   138k|    }
 5836|   138k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   138k|        return reader_impl_for_float<CharT>{};
 5838|   138k|    }
 5839|   138k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   138k|                       !std::is_same_v<T, wchar_t> &&
 5841|   138k|                       !std::is_same_v<T, char32_t> &&
 5842|   138k|                       !std::is_same_v<T, bool>) {
 5843|   138k|        return reader_impl_for_int<CharT>{};
 5844|   138k|    }
 5845|   138k|    else {
 5846|   138k|        return reader_impl_for_monostate<CharT>{};
 5847|   138k|    }
 5848|   138k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  55.8k|    {
 5277|  55.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  55.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  55.8k|        return read_impl(range, specs, value);
 5279|  55.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  55.8k|    {
 5295|  55.8k|        SCN_CLANG_PUSH
 5296|  55.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  55.8k|        switch (m_type) {
 5299|  52.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 52.8k, False: 2.94k]
  ------------------
 5300|  52.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 55.8k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 55.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.94k, False: 52.8k]
  ------------------
 5310|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.94k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 55.8k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 55.8k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 55.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  55.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  55.8k|        }
 5331|       |
 5332|  55.8k|        SCN_CLANG_POP
 5333|  55.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   132k|    {
 4827|   132k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   132k|                                     value);
 4829|   132k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   132k|{
 4773|   132k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   132k|    auto src = [&]() {
 4776|   132k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   132k|            return make_contiguous_buffer(
 4778|   132k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   132k|        }
 4780|   132k|        else {
 4781|   132k|            return make_contiguous_buffer(
 4782|   132k|                ranges::subrange{range.begin(), result});
 4783|   132k|        }
 4784|   132k|    }();
 4785|   132k|    using src_type = decltype(src);
 4786|       |
 4787|   132k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   132k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   132k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   132k|                                     "Cannot read a string_view from "
 4796|   132k|                                     "this source range (would require "
 4797|   132k|                                     "transcoding)");
 4798|   132k|    }
 4799|   132k|    else {
 4800|   132k|        const auto view = src.view();
 4801|   132k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   132k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.33k, False: 128k]
  ------------------
 4804|  3.33k|            return unexpected_scan_error(
 4805|  3.33k|                scan_error::invalid_scanned_value,
 4806|  3.33k|                "Invalid encoding in scanned string_view");
 4807|  3.33k|        }
 4808|       |
 4809|   128k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   132k|    }
 4811|   132k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   132k|    auto src = [&]() {
 4776|   132k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   132k|            return make_contiguous_buffer(
 4778|   132k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   132k|        }
 4780|   132k|        else {
 4781|   132k|            return make_contiguous_buffer(
 4782|   132k|                ranges::subrange{range.begin(), result});
 4783|   132k|        }
 4784|   132k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.94k|    {
 5062|  2.94k|        auto it = read_source_impl(range, {specs});
 5063|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 878]
  |  |  ------------------
  ------------------
 5064|  2.07k|            return unexpected(it.error());
 5065|  2.07k|        }
 5066|       |
 5067|    878|        return read_string_view_impl(range, *it, value);
 5068|  2.94k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    878|{
 4773|    878|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    878|    auto src = [&]() {
 4776|    878|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    878|            return make_contiguous_buffer(
 4778|    878|                ranges::subrange{range.begin().base(), result.base()});
 4779|    878|        }
 4780|    878|        else {
 4781|    878|            return make_contiguous_buffer(
 4782|    878|                ranges::subrange{range.begin(), result});
 4783|    878|        }
 4784|    878|    }();
 4785|    878|    using src_type = decltype(src);
 4786|       |
 4787|    878|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    878|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    878|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    878|                                     "Cannot read a string_view from "
 4796|    878|                                     "this source range (would require "
 4797|    878|                                     "transcoding)");
 4798|    878|    }
 4799|    878|    else {
 4800|    878|        const auto view = src.view();
 4801|    878|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    878|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 878]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    878|        return SCN_MOVE(result);
  ------------------
  |  |  928|    878|    static_cast<    \
  |  |  929|    878|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    878|    }
 4811|    878|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    878|    auto src = [&]() {
 4776|    878|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    878|            return make_contiguous_buffer(
 4778|    878|                ranges::subrange{range.begin().base(), result.base()});
 4779|    878|        }
 4780|    878|        else {
 4781|    878|            return make_contiguous_buffer(
 4782|    878|                ranges::subrange{range.begin(), result});
 4783|    878|        }
 4784|    878|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   147k|{
 2951|   147k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 147k, False: 0]
  ------------------
 2952|   147k|        auto it = read_while_classic_space(range);
 2953|   147k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   147k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 145k]
  |  |  ------------------
  ------------------
 2955|  1.58k|            return unexpected(e);
 2956|  1.58k|        }
 2957|       |
 2958|   145k|        return it;
 2959|   147k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   147k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   147k|{
 2117|   147k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   147k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   147k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   147k|        auto buf = make_contiguous_buffer(range);
 2121|   147k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   147k|        return ranges::next(range.begin(),
 2123|   147k|                            ranges::distance(buf.view().begin(), it));
 2124|   147k|    }
 2125|   147k|    else {
 2126|   147k|        auto it = range.begin();
 2127|       |
 2128|   147k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   147k|            auto seg = get_contiguous_beginning(range);
 2130|   147k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   147k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 10.1k, False: 137k]
  ------------------
 2132|  10.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  10.1k|            }
 2134|   137k|            ranges::advance(it, seg.size());
 2135|   137k|        }
 2136|       |
 2137|   137k|        return read_while_code_point(
 2138|   137k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   147k|    }
 2140|   147k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   137k|    {
  754|   137k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   710k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   710k|              cvref<T> obj = *get<T>(fn);
  745|   710k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   710k|                  obj(static_cast<decltype(args)>(args)...);
  747|   710k|              }
  748|   710k|              else {
  749|   710k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   710k|              }
  751|   710k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   710k|    {
  684|   710k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   710k|            return static_cast<T*>(s.m_cp);
  686|   710k|        }
  687|   710k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   710k|            return static_cast<T*>(s.m_p);
  689|   710k|        }
  690|   710k|        else {
  691|   710k|            return reinterpret_cast<T*>(s.m_fp);
  692|   710k|        }
  693|   710k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   710k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   137k|        {
  662|   137k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   811k|{
  981|   811k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   811k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   811k|        return true;
  984|   811k|    }
  985|   811k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   811k|                           ranges::const_iterator_t<Range>,
  987|   811k|                           typename detail::basic_scan_buffer<
  988|   811k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   811k|        auto beg = r.begin();
  990|   811k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 811k, False: 0]
  ------------------
  991|   811k|            return false;
  992|   811k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   811k|    else {
 1006|   811k|        return false;
 1007|   811k|    }
 1008|   811k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  25.2k|    {
  763|  25.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  25.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  12.6k|    {
  754|  12.6k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.6k|              cvref<T> obj = *get<T>(fn);
  745|  12.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.6k|              }
  748|  12.6k|              else {
  749|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.6k|              }
  751|  12.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  12.6k|    {
  684|  12.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.6k|            return static_cast<T*>(s.m_cp);
  686|  12.6k|        }
  687|  12.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.6k|            return static_cast<T*>(s.m_p);
  689|  12.6k|        }
  690|  12.6k|        else {
  691|  12.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.6k|        }
  693|  12.6k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  12.6k|        {
  662|  12.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   327k|    {
 6037|   327k|        const bool need_skipped_width =
 6038|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 327k]
  |  Branch (6038:33): [True: 0, False: 327k]
  ------------------
 6039|   327k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   327k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 327k]
  ------------------
 6043|   327k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 327k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   327k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 327k, False: 0]
  |  Branch (6047:56): [True: 322k, False: 4.20k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   322k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 322k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   644k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   644k|                            make_eof_scan_error));
 6058|       |
 6059|   644k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 321k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   321k|            return result_type{it, 0};
 6067|   644k|        }
 6068|       |
 6069|  4.20k|        return result_type{rng.begin(), 0};
 6070|   327k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.20k|{
 1976|  4.20k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.20k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.20k|{
 1957|  4.20k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.20k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.20k|    }
 1960|  4.20k|    else {
 1961|  4.20k|        auto first = range.begin();
 1962|  4.26k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 4.21k, False: 48]
  ------------------
 1963|  4.21k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.15k, False: 64]
  ------------------
 1964|  4.15k|                return first;
 1965|  4.15k|            }
 1966|  4.21k|        }
 1967|     48|        return first;
 1968|  4.20k|    }
 1969|  4.20k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   318k|    {
  108|   318k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   318k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   318k|    {
   94|   318k|        iter_difference_t<I> counter{0};
   95|  10.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 9.96M, False: 318k]
  ------------------
   96|  9.96M|            ++i;
   97|  9.96M|            ++counter;
   98|  9.96M|        }
   99|   318k|        return counter;
  100|   318k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.28M|{
  950|  1.28M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 1.28M]
  |  |  ------------------
  ------------------
  951|  2.73k|        return eof_error::eof;
  952|  2.73k|    }
  953|  1.28M|    return eof_error::good;
  954|  1.28M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  28.2M|{
  944|  28.2M|    return is_range_eof(r.begin(), r.end());
  945|  28.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  28.2M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  28.2M|    {
  937|  28.2M|        return begin == end;
  938|  28.2M|    }
  939|  28.2M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|   804k|{
 1683|   804k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   804k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   804k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   804k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   804k|    }
 1688|   804k|    else {
 1689|   804k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   804k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   804k|    }
 1691|   804k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   804k|    {
 1537|   804k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   804k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   804k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   804k|    {
 1621|   804k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   804k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   804k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   804k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   804k|            m_storage.reset();
 1627|   804k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   804k|        }
 1629|   804k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   804k|                                          std::basic_string<CharT>>) {
 1631|   804k|            m_storage.emplace(SCN_FWD(range));
 1632|   804k|            m_view = string_view_type{*m_storage};
 1633|   804k|        }
 1634|   804k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   804k|                                          typename detail::basic_scan_buffer<
 1636|   804k|                                              value_t>::forward_iterator> &&
 1637|   804k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   804k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   804k|            auto end_seg = range.end().contiguous_segment();
 1640|   804k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 800k]
  |  |  ------------------
  ------------------
 1641|   804k|                             detail::to_address(end_seg.end()))) {
 1642|  4.00k|                auto& str = m_storage.emplace();
 1643|  4.00k|                str.reserve(range.end().position() - range.begin().position());
 1644|  4.00k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  4.00k|                m_view = string_view_type{str};
 1646|  4.00k|                return;
 1647|  4.00k|            }
 1648|       |
 1649|   800k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   800k|                                                            end_seg.data());
 1651|   800k|            m_storage.reset();
 1652|   800k|        }
 1653|   804k|        else {
 1654|   804k|            auto& str = m_storage.emplace();
 1655|   804k|            if constexpr (ranges::sized_range<Range>) {
 1656|   804k|                str.reserve(range.size());
 1657|   804k|            }
 1658|   804k|            if constexpr (ranges::common_range<Range>) {
 1659|   804k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   804k|                          std::back_inserter(str));
 1661|   804k|            }
 1662|   804k|            else {
 1663|   804k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   804k|                     ++it) {
 1665|   804k|                    str.push_back(*it);
 1666|   804k|                }
 1667|   804k|            }
 1668|   804k|            m_view = string_view_type{str};
 1669|   804k|        }
 1670|   804k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.59M|    {
 1582|  1.59M|        return m_view;
 1583|  1.59M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|   804k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   317k|    {
 6079|   317k|        const bool need_skipped_width =
 6080|   317k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 317k]
  |  Branch (6080:33): [True: 0, False: 317k]
  ------------------
 6081|   317k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   317k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 317k]
  ------------------
 6084|   317k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 317k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   317k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 317k, False: 0]
  ------------------
 6093|   317k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 36, False: 317k]
  ------------------
 6094|   317k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 36]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     36|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 36]
  ------------------
 6096|     36|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   317k|        return result_type{rng.begin(), 0};
 6118|   317k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  53.9M|{
 1899|  53.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  53.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  53.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  53.9M|    auto it = range.begin();
 1903|  53.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  53.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  53.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.9M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  53.9M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 53.9M, False: 0]
  ------------------
 1912|  53.9M|        ++it;
 1913|  53.9M|        return {it, string_type(1, *range.begin())};
 1914|  53.9M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  53.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  56.4M|{
  944|  56.4M|    return is_range_eof(r.begin(), r.end());
  945|  56.4M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  56.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  56.4M|    {
  937|  56.4M|        return begin == end;
  938|  56.4M|    }
  939|  56.4M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  53.9M|    {
 1890|  53.9M|        return !codepoint.empty();
 1891|  53.9M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.57M|{
  950|  2.57M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.46k, False: 2.57M]
  |  |  ------------------
  ------------------
  951|  5.46k|        return eof_error::eof;
  952|  5.46k|    }
  953|  2.57M|    return eof_error::good;
  954|  2.57M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  1.60M|{
 1683|  1.60M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.60M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.60M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.60M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.60M|    }
 1688|  1.60M|    else {
 1689|  1.60M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.60M|    }
 1691|  1.60M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  1.60M|    {
 1490|  1.60M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  2.40M|    {
 1503|  2.40M|        return sv;
 1504|  2.40M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  8.40k|{
 1976|  8.40k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  8.40k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  8.40k|{
 1957|  8.40k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  8.40k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  8.40k|    }
 1960|  8.40k|    else {
 1961|  8.40k|        auto first = range.begin();
 1962|  8.40k|        for (; first != range.end(); ++first) {
 1963|  8.40k|            if (pred(*first)) {
 1964|  8.40k|                return first;
 1965|  8.40k|            }
 1966|  8.40k|        }
 1967|  8.40k|        return first;
 1968|  8.40k|    }
 1969|  8.40k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.61M|{
 2951|  1.61M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.61M, False: 0]
  ------------------
 2952|  1.61M|        auto it = read_while_classic_space(range);
 2953|  1.61M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.61M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 1.60M]
  |  |  ------------------
  ------------------
 2955|  2.74k|            return unexpected(e);
 2956|  2.74k|        }
 2957|       |
 2958|  1.60M|        return it;
 2959|  1.61M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.61M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.61M|{
 2117|  1.61M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.61M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.61M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.61M|        auto buf = make_contiguous_buffer(range);
 2121|  1.61M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.61M|        return ranges::next(range.begin(),
 2123|  1.61M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.61M|    }
 2125|  1.61M|    else {
 2126|  1.61M|        auto it = range.begin();
 2127|       |
 2128|  1.61M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.61M|            auto seg = get_contiguous_beginning(range);
 2130|  1.61M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.61M|                seg_it != seg.end()) {
 2132|  1.61M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.61M|            }
 2134|  1.61M|            ranges::advance(it, seg.size());
 2135|  1.61M|        }
 2136|       |
 2137|  1.61M|        return read_while_code_point(
 2138|  1.61M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.61M|    }
 2140|  1.61M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  1.61M|{
 2082|  1.61M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.61M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  3.21M|{
 2061|  3.21M|    auto it = range.begin();
 2062|  53.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 53.9M, False: 14.4k]
  ------------------
 2063|  53.9M|        const auto val =
 2064|  53.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  53.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  53.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 53.9M, False: 0]
  |  |  ------------------
  ------------------
 2066|  53.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  53.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  53.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.20M, False: 50.7M]
  ------------------
 2069|  3.20M|                return it;
 2070|  3.20M|            }
 2071|  53.9M|        }
 2072|  50.7M|        it = val.iterator;
 2073|  50.7M|    }
 2074|       |
 2075|  14.4k|    return it;
 2076|  3.21M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  1.61M|    {
  754|  1.61M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  3.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.56M|              cvref<T> obj = *get<T>(fn);
  745|  3.56M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.56M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.56M|              }
  748|  3.56M|              else {
  749|  3.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.56M|              }
  751|  3.56M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.56M|    {
  684|  3.56M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.56M|            return static_cast<T*>(s.m_cp);
  686|  3.56M|        }
  687|  3.56M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.56M|            return static_cast<T*>(s.m_p);
  689|  3.56M|        }
  690|  3.56M|        else {
  691|  3.56M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.56M|        }
  693|  3.56M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  3.56M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  1.61M|        {
  662|  1.61M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   798k|    {
 1587|   798k|        return m_storage.has_value();
 1588|   798k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  1.39k|    {
 1592|  1.39k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.39k|        return *m_storage;
 1594|  1.39k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  2.44M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   993k|    {
 3040|   993k|        reader_error_handler eh{};
 3041|   993k|        get_derived().check_specs_impl(specs, eh);
 3042|   993k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   993k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 981k]
  |  |  ------------------
  ------------------
 3043|  12.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  12.4k|        }
 3045|   981k|        return {};
 3046|   993k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|   993k|    {
 3051|   993k|        return static_cast<Derived&>(*this);
 3052|   993k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   993k|    {
 5210|   993k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   993k|        SCN_GCC_PUSH
 5213|   993k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   993k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   993k|        SCN_CLANG_PUSH
 5217|   993k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   993k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   993k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 993k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 993k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   968k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 968k, False: 25.0k]
  ------------------
 5226|   968k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 968k]
  ------------------
 5227|   968k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 968k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   968k|                else {
 5231|   968k|                    m_type = reader_type::word;
 5232|   968k|                }
 5233|   968k|                break;
 5234|      0|            }
 5235|       |
 5236|  12.4k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 12.4k, False: 981k]
  ------------------
 5237|  12.4k|                m_type = reader_type::character;
 5238|  12.4k|                break;
 5239|       |
 5240|  12.6k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 12.6k, False: 980k]
  ------------------
 5241|  12.6k|                m_type = reader_type::character_set;
 5242|  12.6k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 993k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 993k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   993k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   993k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  3.38M|    {
 5259|  3.38M|        return m_type == reader_type::word;
 5260|  3.38M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.41M|{
 1132|  2.41M|    auto it = src.begin();
 1133|  74.2M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 71.8M, False: 2.39M]
  ------------------
 1134|  71.8M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  71.8M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 71.8M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  71.8M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 71.8M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  71.8M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  71.8M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  71.8M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 22.8k, False: 71.8M]
  ------------------
 1144|  22.8k|            return false;
 1145|  22.8k|        }
 1146|  71.8M|        it += len;
 1147|  71.8M|    }
 1148|  2.39M|    return true;
 1149|  2.41M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  12.6k|        {
 5103|  12.6k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 12.6k, False: 0]
  ------------------
 5104|  12.6k|                return {};
 5105|  12.6k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  6.97k|        {
 5076|  6.97k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  6.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  6.97k|            const auto val =
 5078|  6.97k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  6.97k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  6.97k|                    (val % 8)) &
 5081|  6.97k|                   1u;
 5082|  6.97k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  12.6k|        {
 5129|  12.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 5.67k, False: 6.97k]
  ------------------
 5130|  5.67k|                return false;
 5131|  5.67k|            }
 5132|       |
 5133|  6.97k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  12.6k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  12.6k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   804k|{
 2088|   804k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   804k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   804k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   804k|        auto buf = make_contiguous_buffer(range);
 2092|   804k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   804k|        return ranges::next(range.begin(),
 2094|   804k|                            ranges::distance(buf.view().begin(), it));
 2095|   804k|    }
 2096|   804k|    else {
 2097|   804k|        auto it = range.begin();
 2098|       |
 2099|   804k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   804k|            auto seg = get_contiguous_beginning(range);
 2101|   804k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   804k|                seg_it != seg.end()) {
 2103|   804k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   804k|            }
 2105|   804k|            ranges::advance(it, seg.size());
 2106|   804k|        }
 2107|       |
 2108|   804k|        return read_until_code_point(
 2109|   804k|            ranges::subrange{it, range.end()},
 2110|   804k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   804k|    }
 2112|   804k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.60M|{
 2061|  1.60M|    auto it = range.begin();
 2062|  26.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 26.9M, False: 7.23k]
  ------------------
 2063|  26.9M|        const auto val =
 2064|  26.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  26.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  26.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 26.9M, False: 0]
  |  |  ------------------
  ------------------
 2066|  26.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  26.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  26.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.60M, False: 25.3M]
  ------------------
 2069|  1.60M|                return it;
 2070|  1.60M|            }
 2071|  26.9M|        }
 2072|  25.3M|        it = val.iterator;
 2073|  25.3M|    }
 2074|       |
 2075|  7.23k|    return it;
 2076|  1.60M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  26.9M|{
 1899|  26.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  26.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  26.9M|    auto it = range.begin();
 1903|  26.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  26.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  26.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.9M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  26.9M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 26.9M, False: 0]
  ------------------
 1912|  26.9M|        ++it;
 1913|  26.9M|        return {it, string_type(1, *range.begin())};
 1914|  26.9M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  26.9M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  26.9M|    {
 1890|  26.9M|        return !codepoint.empty();
 1891|  26.9M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   804k|    {
  754|   804k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  25.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.1M|              cvref<T> obj = *get<T>(fn);
  745|  25.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.1M|              }
  748|  25.1M|              else {
  749|  25.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.1M|              }
  751|  25.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  25.1M|    {
  684|  25.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.1M|            return static_cast<T*>(s.m_cp);
  686|  25.1M|        }
  687|  25.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.1M|            return static_cast<T*>(s.m_p);
  689|  25.1M|        }
  690|  25.1M|        else {
  691|  25.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.1M|        }
  693|  25.1M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  25.1M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   804k|        {
  662|   804k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  4.20k|    {
 5153|  4.20k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.20k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.20k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.20k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.20k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.20k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.20k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.20k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.20k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.20k|        };
 5178|       |
 5179|  4.20k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.20k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.20k|        auto it = read_while_code_unit(range, cb);
 5184|  4.20k|        return check_nonempty(it, range);
 5185|  4.20k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  4.20k|    {
 5191|  4.20k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 4.14k, False: 60]
  ------------------
 5192|  4.14k|            return unexpected_scan_error(
 5193|  4.14k|                scan_error::invalid_scanned_value,
 5194|  4.14k|                "No characters matched in [character set]");
 5195|  4.14k|        }
 5196|       |
 5197|     60|        return it;
 5198|  4.20k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   805k|{
 2082|   805k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   805k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  4.20k|    {
  754|  4.20k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  4.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.21k|              cvref<T> obj = *get<T>(fn);
  745|  4.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.21k|              }
  748|  4.21k|              else {
  749|  4.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.21k|              }
  751|  4.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.21k|    {
  684|  4.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.21k|            return static_cast<T*>(s.m_cp);
  686|  4.21k|        }
  687|  4.21k|        else if constexpr (std::is_object_v<T>) {
  688|  4.21k|            return static_cast<T*>(s.m_p);
  689|  4.21k|        }
  690|  4.21k|        else {
  691|  4.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.21k|        }
  693|  4.21k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  4.21k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.21k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.21k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  4.20k|        {
  667|  4.20k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  1.60M|{
 2088|  1.60M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.60M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.60M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.60M|        auto buf = make_contiguous_buffer(range);
 2092|  1.60M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.60M|        return ranges::next(range.begin(),
 2094|  1.60M|                            ranges::distance(buf.view().begin(), it));
 2095|  1.60M|    }
 2096|  1.60M|    else {
 2097|  1.60M|        auto it = range.begin();
 2098|       |
 2099|  1.60M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.60M|            auto seg = get_contiguous_beginning(range);
 2101|  1.60M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.60M|                seg_it != seg.end()) {
 2103|  1.60M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  1.60M|            }
 2105|  1.60M|            ranges::advance(it, seg.size());
 2106|  1.60M|        }
 2107|       |
 2108|  1.60M|        return read_until_code_point(
 2109|  1.60M|            ranges::subrange{it, range.end()},
 2110|  1.60M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.60M|    }
 2112|  1.60M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  1.60M|    {
  754|  1.60M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  50.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.3M|              cvref<T> obj = *get<T>(fn);
  745|  50.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  50.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.3M|              }
  748|  50.3M|              else {
  749|  50.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.3M|              }
  751|  50.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  50.3M|    {
  684|  50.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  50.3M|            return static_cast<T*>(s.m_cp);
  686|  50.3M|        }
  687|  50.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  50.3M|            return static_cast<T*>(s.m_p);
  689|  50.3M|        }
  690|  50.3M|        else {
  691|  50.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  50.3M|        }
  693|  50.3M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  50.3M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  1.60M|        {
  662|  1.60M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  8.40k|    {
 5153|  8.40k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  8.40k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  8.40k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  8.40k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  8.40k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 8.40k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  8.40k|        const auto cb = [&](SourceCharT ch) {
 5176|  8.40k|            return cb_wrapper.on_ascii_only(ch);
 5177|  8.40k|        };
 5178|       |
 5179|  8.40k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 8.40k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  8.40k|        auto it = read_while_code_unit(range, cb);
 5184|  8.40k|        return check_nonempty(it, range);
 5185|  8.40k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  8.40k|    {
 5191|  8.40k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 8.28k, False: 120]
  ------------------
 5192|  8.28k|            return unexpected_scan_error(
 5193|  8.28k|                scan_error::invalid_scanned_value,
 5194|  8.28k|                "No characters matched in [character set]");
 5195|  8.28k|        }
 5196|       |
 5197|    120|        return it;
 5198|  8.40k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  8.40k|    {
  754|  8.40k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  8.43k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.43k|              cvref<T> obj = *get<T>(fn);
  745|  8.43k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.43k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.43k|              }
  748|  8.43k|              else {
  749|  8.43k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.43k|              }
  751|  8.43k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  8.43k|    {
  684|  8.43k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.43k|            return static_cast<T*>(s.m_cp);
  686|  8.43k|        }
  687|  8.43k|        else if constexpr (std::is_object_v<T>) {
  688|  8.43k|            return static_cast<T*>(s.m_p);
  689|  8.43k|        }
  690|  8.43k|        else {
  691|  8.43k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.43k|        }
  693|  8.43k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  8.43k|        const auto cb = [&](SourceCharT ch) {
 5176|  8.43k|            return cb_wrapper.on_ascii_only(ch);
 5177|  8.43k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  8.40k|        {
  667|  8.40k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   331k|    {
 6193|   331k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   331k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   331k|            auto rd = make_reader<T, char_type>();
 6198|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   331k|                return unexpected(e);
 6200|   331k|            }
 6201|       |
 6202|   331k|            return impl(rd, range, value);
 6203|   331k|        }
 6204|   331k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   331k|            auto rd = make_reader<T, char_type>();
 6206|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 327k]
  |  |  ------------------
  ------------------
 6207|  4.14k|                return unexpected(e);
 6208|  4.14k|            }
 6209|       |
 6210|   327k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 327k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   327k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   327k|                return impl(rd, range, value);
 6213|   327k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   331k|        else {
 6221|   331k|            SCN_EXPECT(false);
 6222|   331k|            SCN_UNREACHABLE;
 6223|   331k|        }
 6224|   331k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  1.63M|{
 5809|  1.63M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.63M|        return reader_impl_for_bool<CharT>{};
 5811|  1.63M|    }
 5812|  1.63M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.63M|        return reader_impl_for_char<CharT>{};
 5814|  1.63M|    }
 5815|  1.63M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.63M|        return reader_impl_for_wchar<CharT>{};
 5817|  1.63M|    }
 5818|  1.63M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.63M|        return reader_impl_for_code_point<CharT>{};
 5820|  1.63M|    }
 5821|  1.63M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.63M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.63M|        return reader_impl_for_string<CharT>{};
 5824|  1.63M|    }
 5825|  1.63M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.63M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.63M|        return reader_impl_for_string<CharT>{};
 5828|  1.63M|    }
 5829|  1.63M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.63M|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.63M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.63M|    }
 5833|  1.63M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.63M|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.63M|    }
 5836|  1.63M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.63M|        return reader_impl_for_float<CharT>{};
 5838|  1.63M|    }
 5839|  1.63M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.63M|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.63M|                       !std::is_same_v<T, char32_t> &&
 5842|  1.63M|                       !std::is_same_v<T, bool>) {
 5843|  1.63M|        return reader_impl_for_int<CharT>{};
 5844|  1.63M|    }
 5845|  1.63M|    else {
 5846|  1.63M|        return reader_impl_for_monostate<CharT>{};
 5847|  1.63M|    }
 5848|  1.63M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|   327k|    {
 6124|   327k|        const bool need_skipped_width =
 6125|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 327k]
  |  Branch (6125:33): [True: 0, False: 327k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   327k|        auto it = rng.begin();
 6129|   327k|        std::ptrdiff_t prefix_width = 0;
 6130|   327k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 327k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   327k|        else {
 6138|   327k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   325k|            std::tie(it, prefix_width) = prefix_result;
 6140|   325k|        }
 6141|   325k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   325k|        std::ptrdiff_t value_width = 0;
 6145|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 325k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   325k|        else {
 6161|   325k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.18k, False: 318k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.18k|    }                                                  \
  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   318k|                                             specs, value, loc));
 6163|       |
 6164|   318k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 318k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   318k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   318k|        std::ptrdiff_t postfix_width = 0;
 6173|   318k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 317k, False: 928]
  ------------------
 6174|   317k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   317k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   317k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   317k|                                 value_width));
 6178|   317k|            std::tie(it, postfix_width) = postfix_result;
 6179|   317k|        }
 6180|       |
 6181|   318k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   318k|                                                 value_width, postfix_width);
 6183|   318k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 318k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   318k|        return it;
 6188|   318k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   796k|{
 2993|   796k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   796k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 1.39k, False: 795k]
  ------------------
 2995|  1.39k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.39k|    static_cast<    \
  |  |  929|  1.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  1.39k|        }
 2997|   795k|        else {
 2998|   795k|            dest.assign(source.view());
 2999|   795k|        }
 3000|   796k|    }
 3001|   796k|    else {
 3002|   796k|        return transcode_impl(source.view(), dest);
 3003|   796k|    }
 3004|       |
 3005|   796k|    return {};
 3006|   796k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|   325k|    {
 5277|   325k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   325k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   325k|        return read_impl(range, specs, value);
 5279|   325k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|   325k|    {
 5295|   325k|        SCN_CLANG_PUSH
 5296|   325k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   325k|        switch (m_type) {
 5299|   321k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 321k, False: 4.20k]
  ------------------
 5300|   321k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 325k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 325k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.20k, False: 321k]
  ------------------
 5310|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 325k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 325k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 325k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   325k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   325k|        }
 5331|       |
 5332|   325k|        SCN_CLANG_POP
 5333|   325k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   804k|    {
 4820|   804k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   804k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   804k|{
 4752|   804k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   804k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   804k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 7.62k, False: 796k]
  ------------------
 4756|  7.62k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  7.62k|                                     "Invalid encoding in scanned string");
 4758|  7.62k|    }
 4759|   796k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   796k|    static_cast<    \
  |  |  929|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   796k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   796k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   796k|    static_cast<    \
  |  |  929|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   796k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  4.20k|    {
 5048|  4.20k|        auto it = read_source_impl(range, {specs});
 5049|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 60]
  |  |  ------------------
  ------------------
 5050|  4.14k|            return unexpected(it.error());
 5051|  4.14k|        }
 5052|       |
 5053|     60|        return read_string_impl(range, *it, value);
 5054|  4.20k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     60|{
 4752|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     60|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     60|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 60]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     60|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     60|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     60|    return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     60|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|   325k|    {
 5277|   325k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   325k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   325k|        return read_impl(range, specs, value);
 5279|   325k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|   325k|    {
 5295|   325k|        SCN_CLANG_PUSH
 5296|   325k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   325k|        switch (m_type) {
 5299|   321k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 321k, False: 4.20k]
  ------------------
 5300|   321k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 325k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 325k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.20k, False: 321k]
  ------------------
 5310|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 325k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 325k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 325k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   325k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   325k|        }
 5331|       |
 5332|   325k|        SCN_CLANG_POP
 5333|   325k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   804k|    {
 4820|   804k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   804k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   804k|{
 4752|   804k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   804k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   804k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 7.62k, False: 796k]
  ------------------
 4756|  7.62k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  7.62k|                                     "Invalid encoding in scanned string");
 4758|  7.62k|    }
 4759|   796k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   796k|    static_cast<    \
  |  |  929|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   796k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   796k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   796k|    static_cast<    \
  |  |  929|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   796k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   796k|{
 3012|   796k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   796k|        dest.assign(source.view());
 3014|   796k|    }
 3015|   796k|    else {
 3016|   796k|        return transcode_impl(source.view(), dest);
 3017|   796k|    }
 3018|       |
 3019|   796k|    return {};
 3020|   796k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  4.20k|    {
 5048|  4.20k|        auto it = read_source_impl(range, {specs});
 5049|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 60]
  |  |  ------------------
  ------------------
 5050|  4.14k|            return unexpected(it.error());
 5051|  4.14k|        }
 5052|       |
 5053|     60|        return read_string_impl(range, *it, value);
 5054|  4.20k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     60|{
 4752|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     60|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     60|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 60]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     60|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     60|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     60|    return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     60|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|   815k|{
 5809|   815k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   815k|        return reader_impl_for_bool<CharT>{};
 5811|   815k|    }
 5812|   815k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   815k|        return reader_impl_for_char<CharT>{};
 5814|   815k|    }
 5815|   815k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   815k|        return reader_impl_for_wchar<CharT>{};
 5817|   815k|    }
 5818|   815k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   815k|        return reader_impl_for_code_point<CharT>{};
 5820|   815k|    }
 5821|   815k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   815k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   815k|        return reader_impl_for_string<CharT>{};
 5824|   815k|    }
 5825|   815k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   815k|                       std::is_same_v<T, std::wstring>) {
 5827|   815k|        return reader_impl_for_string<CharT>{};
 5828|   815k|    }
 5829|   815k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   815k|                       std::is_same_v<T, wregex_matches>) {
 5831|   815k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   815k|    }
 5833|   815k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   815k|        return reader_impl_for_voidptr<CharT>{};
 5835|   815k|    }
 5836|   815k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   815k|        return reader_impl_for_float<CharT>{};
 5838|   815k|    }
 5839|   815k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   815k|                       !std::is_same_v<T, wchar_t> &&
 5841|   815k|                       !std::is_same_v<T, char32_t> &&
 5842|   815k|                       !std::is_same_v<T, bool>) {
 5843|   815k|        return reader_impl_for_int<CharT>{};
 5844|   815k|    }
 5845|   815k|    else {
 5846|   815k|        return reader_impl_for_monostate<CharT>{};
 5847|   815k|    }
 5848|   815k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|   325k|    {
 5277|   325k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   325k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   325k|        return read_impl(range, specs, value);
 5279|   325k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|   325k|    {
 5295|   325k|        SCN_CLANG_PUSH
 5296|   325k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   325k|        switch (m_type) {
 5299|   321k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 321k, False: 4.20k]
  ------------------
 5300|   321k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 325k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 325k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.20k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.20k, False: 321k]
  ------------------
 5310|  4.20k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.20k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 325k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 325k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 325k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   325k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   325k|        }
 5331|       |
 5332|   325k|        SCN_CLANG_POP
 5333|   325k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   804k|    {
 4827|   804k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   804k|                                     value);
 4829|   804k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   804k|{
 4773|   804k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   804k|    auto src = [&]() {
 4776|   804k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   804k|            return make_contiguous_buffer(
 4778|   804k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   804k|        }
 4780|   804k|        else {
 4781|   804k|            return make_contiguous_buffer(
 4782|   804k|                ranges::subrange{range.begin(), result});
 4783|   804k|        }
 4784|   804k|    }();
 4785|   804k|    using src_type = decltype(src);
 4786|       |
 4787|   804k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   804k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   804k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   804k|                                     "Cannot read a string_view from "
 4796|   804k|                                     "this source range (would require "
 4797|   804k|                                     "transcoding)");
 4798|   804k|    }
 4799|   804k|    else {
 4800|   804k|        const auto view = src.view();
 4801|   804k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   804k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 7.62k, False: 796k]
  ------------------
 4804|  7.62k|            return unexpected_scan_error(
 4805|  7.62k|                scan_error::invalid_scanned_value,
 4806|  7.62k|                "Invalid encoding in scanned string_view");
 4807|  7.62k|        }
 4808|       |
 4809|   796k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   796k|    static_cast<    \
  |  |  929|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   804k|    }
 4811|   804k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   804k|    auto src = [&]() {
 4776|   804k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   804k|            return make_contiguous_buffer(
 4778|   804k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   804k|        }
 4780|   804k|        else {
 4781|   804k|            return make_contiguous_buffer(
 4782|   804k|                ranges::subrange{range.begin(), result});
 4783|   804k|        }
 4784|   804k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  4.20k|    {
 5062|  4.20k|        auto it = read_source_impl(range, {specs});
 5063|  4.20k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 60]
  |  |  ------------------
  ------------------
 5064|  4.14k|            return unexpected(it.error());
 5065|  4.14k|        }
 5066|       |
 5067|     60|        return read_string_view_impl(range, *it, value);
 5068|  4.20k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     60|{
 4773|     60|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     60|    auto src = [&]() {
 4776|     60|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     60|            return make_contiguous_buffer(
 4778|     60|                ranges::subrange{range.begin().base(), result.base()});
 4779|     60|        }
 4780|     60|        else {
 4781|     60|            return make_contiguous_buffer(
 4782|     60|                ranges::subrange{range.begin(), result});
 4783|     60|        }
 4784|     60|    }();
 4785|     60|    using src_type = decltype(src);
 4786|       |
 4787|     60|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     60|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     60|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     60|                                     "Cannot read a string_view from "
 4796|     60|                                     "this source range (would require "
 4797|     60|                                     "transcoding)");
 4798|     60|    }
 4799|     60|    else {
 4800|     60|        const auto view = src.view();
 4801|     60|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     60|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 60]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     60|        return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     60|    }
 4811|     60|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     60|    auto src = [&]() {
 4776|     60|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     60|            return make_contiguous_buffer(
 4778|     60|                ranges::subrange{range.begin().base(), result.base()});
 4779|     60|        }
 4780|     60|        else {
 4781|     60|            return make_contiguous_buffer(
 4782|     60|                ranges::subrange{range.begin(), result});
 4783|     60|        }
 4784|     60|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   805k|{
 2951|   805k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 805k, False: 0]
  ------------------
 2952|   805k|        auto it = read_while_classic_space(range);
 2953|   805k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   805k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.37k, False: 804k]
  |  |  ------------------
  ------------------
 2955|  1.37k|            return unexpected(e);
 2956|  1.37k|        }
 2957|       |
 2958|   804k|        return it;
 2959|   805k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   805k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   805k|{
 2117|   805k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   805k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   805k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   805k|        auto buf = make_contiguous_buffer(range);
 2121|   805k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   805k|        return ranges::next(range.begin(),
 2123|   805k|                            ranges::distance(buf.view().begin(), it));
 2124|   805k|    }
 2125|   805k|    else {
 2126|   805k|        auto it = range.begin();
 2127|       |
 2128|   805k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   805k|            auto seg = get_contiguous_beginning(range);
 2130|   805k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   805k|                seg_it != seg.end()) {
 2132|   805k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   805k|            }
 2134|   805k|            ranges::advance(it, seg.size());
 2135|   805k|        }
 2136|       |
 2137|   805k|        return read_while_code_point(
 2138|   805k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   805k|    }
 2140|   805k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   805k|    {
  754|   805k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78M|              cvref<T> obj = *get<T>(fn);
  745|  1.78M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.78M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78M|              }
  748|  1.78M|              else {
  749|  1.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78M|              }
  751|  1.78M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.78M|    {
  684|  1.78M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.78M|            return static_cast<T*>(s.m_cp);
  686|  1.78M|        }
  687|  1.78M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.78M|            return static_cast<T*>(s.m_p);
  689|  1.78M|        }
  690|  1.78M|        else {
  691|  1.78M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.78M|        }
  693|  1.78M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.78M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   805k|        {
  662|   805k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   160k|{
 5795|   160k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 159k]
  |  |  ------------------
  ------------------
 5796|  1.09k|        return unexpected(e);
 5797|  1.09k|    }
 5798|       |
 5799|   159k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 159k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   159k|    return skip_classic_whitespace(range);
 5804|   159k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  80.3k|    {
 5871|  80.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  80.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  80.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  80.3k|            auto rd = make_reader<T, char_type>();
 5876|  80.3k|            return impl(rd, range, value);
 5877|  80.3k|        }
 5878|  80.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  80.3k|            auto rd = make_reader<T, char_type>();
 5880|  80.3k|            if (!is_segment_contiguous(range)) {
 5881|  80.3k|                return impl(rd, range, value);
 5882|  80.3k|            }
 5883|  80.3k|            auto crange = get_as_contiguous(range);
 5884|  80.3k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  80.3k|            return ranges::next(range.begin(),
 5886|  80.3k|                                ranges::distance(crange.begin(), it));
 5887|  80.3k|        }
 5888|  80.3k|        else {
 5889|  80.3k|            SCN_EXPECT(false);
 5890|  80.3k|            SCN_UNREACHABLE;
 5891|  80.3k|        }
 5892|  80.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  80.3k|    {
 5863|  80.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  80.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 79.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  80.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  79.2k|                        .transform_error(make_eof_scan_error));
 5865|  79.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  80.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  79.2k|    {
 5266|  79.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  79.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  79.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  79.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  80.3k|    {
 5871|  80.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  80.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  80.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  80.3k|            auto rd = make_reader<T, char_type>();
 5876|  80.3k|            return impl(rd, range, value);
 5877|  80.3k|        }
 5878|  80.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  80.3k|            auto rd = make_reader<T, char_type>();
 5880|  80.3k|            if (!is_segment_contiguous(range)) {
 5881|  80.3k|                return impl(rd, range, value);
 5882|  80.3k|            }
 5883|  80.3k|            auto crange = get_as_contiguous(range);
 5884|  80.3k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  80.3k|            return ranges::next(range.begin(),
 5886|  80.3k|                                ranges::distance(crange.begin(), it));
 5887|  80.3k|        }
 5888|  80.3k|        else {
 5889|  80.3k|            SCN_EXPECT(false);
 5890|  80.3k|            SCN_UNREACHABLE;
 5891|  80.3k|        }
 5892|  80.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  80.3k|    {
 5863|  80.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  80.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 79.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  80.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  79.2k|                        .transform_error(make_eof_scan_error));
 5865|  79.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  80.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  79.2k|    {
 5266|  79.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  79.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  79.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  79.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  88.7k|{
 5795|  88.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 639, False: 88.0k]
  |  |  ------------------
  ------------------
 5796|    639|        return unexpected(e);
 5797|    639|    }
 5798|       |
 5799|  88.0k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 88.0k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  88.0k|    return skip_classic_whitespace(range);
 5804|  88.0k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  88.7k|    {
 5871|  88.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  88.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  88.7k|            auto rd = make_reader<T, char_type>();
 5876|  88.7k|            return impl(rd, range, value);
 5877|  88.7k|        }
 5878|  88.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  88.7k|            auto rd = make_reader<T, char_type>();
 5880|  88.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 88.7k, False: 0]
  ------------------
 5881|  88.7k|                return impl(rd, range, value);
 5882|  88.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  88.7k|        else {
 5889|  88.7k|            SCN_EXPECT(false);
 5890|  88.7k|            SCN_UNREACHABLE;
 5891|  88.7k|        }
 5892|  88.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  88.7k|    {
 5863|  88.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  88.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.26k, False: 87.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.26k|    }                                                  \
  |  |  |  | 3671|  88.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  87.4k|                        .transform_error(make_eof_scan_error));
 5865|  87.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  88.7k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  87.4k|    {
 5266|  87.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  87.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  87.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  87.4k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   125k|    {
 2879|   125k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   347k|    {
 2883|   347k|        return m_current;
 2884|   347k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   222k|    {
 2888|   222k|        return m_range.end();
 2889|   222k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   104k|    {
 2903|   104k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   104k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   104k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 104k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   104k|        }
 2909|   104k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   104k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   117k|    {
 2893|   117k|        return ranges::subrange{begin(), end()};
 2894|   117k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   113k|    {
 6037|   113k|        const bool need_skipped_width =
 6038|   113k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 113k]
  |  Branch (6038:33): [True: 0, False: 113k]
  ------------------
 6039|   113k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   113k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 113k]
  ------------------
 6043|   113k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 113k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   113k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 113k, False: 0]
  |  Branch (6047:56): [True: 107k, False: 5.89k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   107k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 107k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   212k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.47k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   212k|                            make_eof_scan_error));
 6058|       |
 6059|   212k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 105k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   105k|            return result_type{it, 0};
 6067|   212k|        }
 6068|       |
 6069|  5.89k|        return result_type{rng.begin(), 0};
 6070|   113k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   104k|    {
 6079|   104k|        const bool need_skipped_width =
 6080|   104k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 104k]
  |  Branch (6080:33): [True: 0, False: 104k]
  ------------------
 6081|   104k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   104k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 104k]
  ------------------
 6084|   104k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 104k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   104k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 104k, False: 0]
  ------------------
 6093|   104k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.69k, False: 102k]
  ------------------
 6094|   104k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.69k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.69k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.69k]
  ------------------
 6096|  1.69k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   104k|        return result_type{rng.begin(), 0};
 6118|   104k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  58.6k|    {
 6193|  58.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  58.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  58.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  58.6k|            auto rd = make_reader<T, char_type>();
 6198|  58.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 56.5k]
  |  |  ------------------
  ------------------
 6199|  2.07k|                return unexpected(e);
 6200|  2.07k|            }
 6201|       |
 6202|  56.5k|            return impl(rd, range, value);
 6203|  58.6k|        }
 6204|  58.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  58.6k|            auto rd = make_reader<T, char_type>();
 6206|  58.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  58.6k|                return unexpected(e);
 6208|  58.6k|            }
 6209|       |
 6210|  58.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  58.6k|                specs.width != 0) {
 6212|  58.6k|                return impl(rd, range, value);
 6213|  58.6k|            }
 6214|       |
 6215|  58.6k|            auto crange = get_as_contiguous(range);
 6216|  58.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  58.6k|            return ranges::next(range.begin(),
 6218|  58.6k|                                ranges::distance(crange.begin(), it));
 6219|  58.6k|        }
 6220|  58.6k|        else {
 6221|  58.6k|            SCN_EXPECT(false);
 6222|  58.6k|            SCN_UNREACHABLE;
 6223|  58.6k|        }
 6224|  58.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  56.5k|    {
 6124|  56.5k|        const bool need_skipped_width =
 6125|  56.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 56.5k]
  |  Branch (6125:33): [True: 0, False: 56.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  56.5k|        auto it = rng.begin();
 6129|  56.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  56.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 56.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  56.5k|        else {
 6138|  56.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 738, False: 55.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    738|    }                                                  \
  |  |  |  | 3671|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  55.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  55.8k|        }
 6141|  55.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  55.8k|        std::ptrdiff_t value_width = 0;
 6145|  55.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 55.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  55.8k|        else {
 6161|  55.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  55.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  55.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 52.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.40k|    }                                                  \
  |  | 3671|  55.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  52.3k|                                             specs, value, loc));
 6163|       |
 6164|  52.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 52.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  52.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  52.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  52.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 52.0k, False: 394]
  ------------------
 6174|  52.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  52.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  52.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  52.0k|                                 value_width));
 6178|  52.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  52.0k|        }
 6180|       |
 6181|  52.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  52.3k|                                                 value_width, postfix_width);
 6183|  52.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 52.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  52.3k|        return it;
 6188|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  58.6k|    {
 6193|  58.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  58.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  58.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  58.6k|            auto rd = make_reader<T, char_type>();
 6198|  58.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 56.5k]
  |  |  ------------------
  ------------------
 6199|  2.07k|                return unexpected(e);
 6200|  2.07k|            }
 6201|       |
 6202|  56.5k|            return impl(rd, range, value);
 6203|  58.6k|        }
 6204|  58.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  58.6k|            auto rd = make_reader<T, char_type>();
 6206|  58.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  58.6k|                return unexpected(e);
 6208|  58.6k|            }
 6209|       |
 6210|  58.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  58.6k|                specs.width != 0) {
 6212|  58.6k|                return impl(rd, range, value);
 6213|  58.6k|            }
 6214|       |
 6215|  58.6k|            auto crange = get_as_contiguous(range);
 6216|  58.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  58.6k|            return ranges::next(range.begin(),
 6218|  58.6k|                                ranges::distance(crange.begin(), it));
 6219|  58.6k|        }
 6220|  58.6k|        else {
 6221|  58.6k|            SCN_EXPECT(false);
 6222|  58.6k|            SCN_UNREACHABLE;
 6223|  58.6k|        }
 6224|  58.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  56.5k|    {
 6124|  56.5k|        const bool need_skipped_width =
 6125|  56.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 56.5k]
  |  Branch (6125:33): [True: 0, False: 56.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  56.5k|        auto it = rng.begin();
 6129|  56.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  56.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 56.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  56.5k|        else {
 6138|  56.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 738, False: 55.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    738|    }                                                  \
  |  |  |  | 3671|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  55.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  55.8k|        }
 6141|  55.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  55.8k|        std::ptrdiff_t value_width = 0;
 6145|  55.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 55.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  55.8k|        else {
 6161|  55.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  55.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  55.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 52.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.40k|    }                                                  \
  |  | 3671|  55.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  52.3k|                                             specs, value, loc));
 6163|       |
 6164|  52.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 52.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  52.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  52.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  52.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 52.0k, False: 394]
  ------------------
 6174|  52.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  52.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  52.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  52.0k|                                 value_width));
 6178|  52.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  52.0k|        }
 6180|       |
 6181|  52.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  52.3k|                                                 value_width, postfix_width);
 6183|  52.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 52.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  52.3k|        return it;
 6188|  52.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   968k|{
 5795|   968k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 965k]
  |  |  ------------------
  ------------------
 5796|  2.71k|        return unexpected(e);
 5797|  2.71k|    }
 5798|       |
 5799|   965k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 965k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   965k|    return skip_classic_whitespace(range);
 5804|   965k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   484k|    {
 5871|   484k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   484k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   484k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   484k|            auto rd = make_reader<T, char_type>();
 5876|   484k|            return impl(rd, range, value);
 5877|   484k|        }
 5878|   484k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   484k|            auto rd = make_reader<T, char_type>();
 5880|   484k|            if (!is_segment_contiguous(range)) {
 5881|   484k|                return impl(rd, range, value);
 5882|   484k|            }
 5883|   484k|            auto crange = get_as_contiguous(range);
 5884|   484k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   484k|            return ranges::next(range.begin(),
 5886|   484k|                                ranges::distance(crange.begin(), it));
 5887|   484k|        }
 5888|   484k|        else {
 5889|   484k|            SCN_EXPECT(false);
 5890|   484k|            SCN_UNREACHABLE;
 5891|   484k|        }
 5892|   484k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   484k|    {
 5863|   484k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   484k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   484k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   484k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 482k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.63k|    }                                                  \
  |  |  |  | 3671|   484k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   482k|                        .transform_error(make_eof_scan_error));
 5865|   482k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   484k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|   482k|    {
 5266|   482k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   482k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   482k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   482k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   484k|    {
 5871|   484k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   484k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   484k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   484k|            auto rd = make_reader<T, char_type>();
 5876|   484k|            return impl(rd, range, value);
 5877|   484k|        }
 5878|   484k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   484k|            auto rd = make_reader<T, char_type>();
 5880|   484k|            if (!is_segment_contiguous(range)) {
 5881|   484k|                return impl(rd, range, value);
 5882|   484k|            }
 5883|   484k|            auto crange = get_as_contiguous(range);
 5884|   484k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   484k|            return ranges::next(range.begin(),
 5886|   484k|                                ranges::distance(crange.begin(), it));
 5887|   484k|        }
 5888|   484k|        else {
 5889|   484k|            SCN_EXPECT(false);
 5890|   484k|            SCN_UNREACHABLE;
 5891|   484k|        }
 5892|   484k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   484k|    {
 5863|   484k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   484k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   484k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   484k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 482k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.63k|    }                                                  \
  |  |  |  | 3671|   484k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   482k|                        .transform_error(make_eof_scan_error));
 5865|   482k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   484k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|   482k|    {
 5266|   482k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   482k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   482k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   482k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   678k|    {
 2879|   678k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.97M|    {
 2883|  1.97M|        return m_current;
 2884|  1.97M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.29M|    {
 2888|  1.29M|        return m_range.end();
 2889|  1.29M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   637k|    {
 2903|   637k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   637k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   637k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   637k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   637k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 637k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   637k|        }
 2909|   637k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   637k|    static_cast<    \
  |  |  929|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   637k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   662k|    {
 2893|   662k|        return ranges::subrange{begin(), end()};
 2894|   662k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   654k|    {
 6037|   654k|        const bool need_skipped_width =
 6038|   654k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 654k]
  |  Branch (6038:33): [True: 0, False: 654k]
  ------------------
 6039|   654k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   654k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 654k]
  ------------------
 6043|   654k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 654k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   654k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 654k, False: 0]
  |  Branch (6047:56): [True: 645k, False: 8.40k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   645k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 645k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.28M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   645k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   645k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   645k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.18k, False: 643k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.18k|    }                                                  \
  |  |  |  | 3671|   645k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   643k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.28M|                            make_eof_scan_error));
 6058|       |
 6059|  1.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 643k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   643k|            return result_type{it, 0};
 6067|  1.28M|        }
 6068|       |
 6069|  8.40k|        return result_type{rng.begin(), 0};
 6070|   654k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   635k|    {
 6079|   635k|        const bool need_skipped_width =
 6080|   635k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 635k]
  |  Branch (6080:33): [True: 0, False: 635k]
  ------------------
 6081|   635k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   635k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 635k]
  ------------------
 6084|   635k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 635k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   635k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 635k, False: 0]
  ------------------
 6093|   635k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 72, False: 635k]
  ------------------
 6094|   635k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 72]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     72|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 72]
  ------------------
 6096|     72|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   635k|        return result_type{rng.begin(), 0};
 6118|   635k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   331k|    {
 6193|   331k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   331k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   331k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   331k|            auto rd = make_reader<T, char_type>();
 6198|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 327k]
  |  |  ------------------
  ------------------
 6199|  4.14k|                return unexpected(e);
 6200|  4.14k|            }
 6201|       |
 6202|   327k|            return impl(rd, range, value);
 6203|   331k|        }
 6204|   331k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   331k|            auto rd = make_reader<T, char_type>();
 6206|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   331k|                return unexpected(e);
 6208|   331k|            }
 6209|       |
 6210|   331k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   331k|                specs.width != 0) {
 6212|   331k|                return impl(rd, range, value);
 6213|   331k|            }
 6214|       |
 6215|   331k|            auto crange = get_as_contiguous(range);
 6216|   331k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   331k|            return ranges::next(range.begin(),
 6218|   331k|                                ranges::distance(crange.begin(), it));
 6219|   331k|        }
 6220|   331k|        else {
 6221|   331k|            SCN_EXPECT(false);
 6222|   331k|            SCN_UNREACHABLE;
 6223|   331k|        }
 6224|   331k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|   327k|    {
 6124|   327k|        const bool need_skipped_width =
 6125|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 327k]
  |  Branch (6125:33): [True: 0, False: 327k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   327k|        auto it = rng.begin();
 6129|   327k|        std::ptrdiff_t prefix_width = 0;
 6130|   327k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 327k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   327k|        else {
 6138|   327k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   325k|            std::tie(it, prefix_width) = prefix_result;
 6140|   325k|        }
 6141|   325k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   325k|        std::ptrdiff_t value_width = 0;
 6145|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 325k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   325k|        else {
 6161|   325k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.18k, False: 318k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.18k|    }                                                  \
  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   318k|                                             specs, value, loc));
 6163|       |
 6164|   318k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 318k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   318k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   318k|        std::ptrdiff_t postfix_width = 0;
 6173|   318k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 317k, False: 928]
  ------------------
 6174|   317k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   317k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   317k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   317k|                                 value_width));
 6178|   317k|            std::tie(it, postfix_width) = postfix_result;
 6179|   317k|        }
 6180|       |
 6181|   318k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   318k|                                                 value_width, postfix_width);
 6183|   318k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 318k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   318k|        return it;
 6188|   318k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   331k|    {
 6193|   331k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   331k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   331k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   331k|            auto rd = make_reader<T, char_type>();
 6198|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14k, False: 327k]
  |  |  ------------------
  ------------------
 6199|  4.14k|                return unexpected(e);
 6200|  4.14k|            }
 6201|       |
 6202|   327k|            return impl(rd, range, value);
 6203|   331k|        }
 6204|   331k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   331k|            auto rd = make_reader<T, char_type>();
 6206|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   331k|                return unexpected(e);
 6208|   331k|            }
 6209|       |
 6210|   331k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   331k|                specs.width != 0) {
 6212|   331k|                return impl(rd, range, value);
 6213|   331k|            }
 6214|       |
 6215|   331k|            auto crange = get_as_contiguous(range);
 6216|   331k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   331k|            return ranges::next(range.begin(),
 6218|   331k|                                ranges::distance(crange.begin(), it));
 6219|   331k|        }
 6220|   331k|        else {
 6221|   331k|            SCN_EXPECT(false);
 6222|   331k|            SCN_UNREACHABLE;
 6223|   331k|        }
 6224|   331k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|   327k|    {
 6124|   327k|        const bool need_skipped_width =
 6125|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 327k]
  |  Branch (6125:33): [True: 0, False: 327k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   327k|        auto it = rng.begin();
 6129|   327k|        std::ptrdiff_t prefix_width = 0;
 6130|   327k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 327k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   327k|        else {
 6138|   327k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   325k|            std::tie(it, prefix_width) = prefix_result;
 6140|   325k|        }
 6141|   325k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   325k|        std::ptrdiff_t value_width = 0;
 6145|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 325k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   325k|        else {
 6161|   325k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.18k, False: 318k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.18k|    }                                                  \
  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   318k|                                             specs, value, loc));
 6163|       |
 6164|   318k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 318k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   318k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   318k|        std::ptrdiff_t postfix_width = 0;
 6173|   318k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 317k, False: 928]
  ------------------
 6174|   317k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   317k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   317k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   317k|                                 value_width));
 6178|   317k|            std::tie(it, postfix_width) = postfix_result;
 6179|   317k|        }
 6180|       |
 6181|   318k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   318k|                                                 value_width, postfix_width);
 6183|   318k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 318k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   318k|        return it;
 6188|   318k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   484k|{
 5795|   484k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.35k, False: 482k]
  |  |  ------------------
  ------------------
 5796|  1.35k|        return unexpected(e);
 5797|  1.35k|    }
 5798|       |
 5799|   482k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 482k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   482k|    return skip_classic_whitespace(range);
 5804|   482k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|   484k|    {
 5871|   484k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   484k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   484k|            auto rd = make_reader<T, char_type>();
 5876|   484k|            return impl(rd, range, value);
 5877|   484k|        }
 5878|   484k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   484k|            auto rd = make_reader<T, char_type>();
 5880|   484k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 484k, False: 0]
  ------------------
 5881|   484k|                return impl(rd, range, value);
 5882|   484k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   484k|        else {
 5889|   484k|            SCN_EXPECT(false);
 5890|   484k|            SCN_UNREACHABLE;
 5891|   484k|        }
 5892|   484k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   484k|    {
 5863|   484k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   484k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   484k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   484k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 482k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.63k|    }                                                  \
  |  |  |  | 3671|   484k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   482k|                        .transform_error(make_eof_scan_error));
 5865|   482k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   484k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   482k|    {
 5266|   482k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   482k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   482k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   482k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.03k|{
   52|  1.03k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.03k|    string_buffer.resize(size);
   56|  1.03k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.03k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.03k|    const auto wsv_reinterpret_size =
   61|  1.03k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 207, False: 828]
  ------------------
   62|  1.03k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.03k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.03k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.03k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.03k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.03k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.03k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.03k|{
  122|  1.03k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.03k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.03k|    buf.resize(sizeof...(Args));
  125|  1.03k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.03k|    return buf;
  127|  1.03k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.03k|{
  108|  1.03k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.03k|        return format_string_view_buffer;
  110|  1.03k|    }
  111|  1.03k|    else {
  112|  1.03k|        return wformat_string_view_buffer;
  113|  1.03k|    }
  114|  1.03k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.03k|{
  185|  1.03k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.03k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.03k|                                   format_strings);
  188|  1.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.03k|{
  133|       |    // Regular scan
  134|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.21k, False: 1.03k]
  ------------------
  135|  6.21k|        auto it = scn::ranges::begin(source);
  136|  58.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.1k|            auto result = scn::scan<T>(
  139|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.1k|                scn::runtime_format(f));
  141|  58.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.21k, False: 51.9k]
  ------------------
  142|  6.21k|                break;
  143|  6.21k|            }
  144|  51.9k|            it = result->begin();
  145|  51.9k|        }
  146|  6.21k|    }
  147|       |
  148|       |    // scan localized
  149|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.21k, False: 1.03k]
  ------------------
  150|  6.21k|        auto it = scn::ranges::begin(source);
  151|  58.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.1k|            auto result = scn::scan<T>(
  154|  58.1k|                global_locale,
  155|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.1k|                scn::runtime_format(f));
  157|  58.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.21k, False: 51.9k]
  ------------------
  158|  6.21k|                break;
  159|  6.21k|            }
  160|  51.9k|            it = result->begin();
  161|  51.9k|        }
  162|  6.21k|    }
  163|       |
  164|       |    // scan_value
  165|  1.03k|    {
  166|  1.03k|        auto it = scn::ranges::begin(source);
  167|  26.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.7k|            auto result = scn::scan_value<T>(
  170|  26.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.03k, False: 25.7k]
  ------------------
  172|  1.03k|                break;
  173|  1.03k|            }
  174|  25.7k|            it = result->begin();
  175|  25.7k|        }
  176|  1.03k|    }
  177|  1.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.03k|{
  133|       |    // Regular scan
  134|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.21k, False: 1.03k]
  ------------------
  135|  6.21k|        auto it = scn::ranges::begin(source);
  136|  58.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.1k|            auto result = scn::scan<T>(
  139|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.1k|                scn::runtime_format(f));
  141|  58.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.21k, False: 51.9k]
  ------------------
  142|  6.21k|                break;
  143|  6.21k|            }
  144|  51.9k|            it = result->begin();
  145|  51.9k|        }
  146|  6.21k|    }
  147|       |
  148|       |    // scan localized
  149|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.21k, False: 1.03k]
  ------------------
  150|  6.21k|        auto it = scn::ranges::begin(source);
  151|  58.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.1k|            auto result = scn::scan<T>(
  154|  58.1k|                global_locale,
  155|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.1k|                scn::runtime_format(f));
  157|  58.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.21k, False: 51.9k]
  ------------------
  158|  6.21k|                break;
  159|  6.21k|            }
  160|  51.9k|            it = result->begin();
  161|  51.9k|        }
  162|  6.21k|    }
  163|       |
  164|       |    // scan_value
  165|  1.03k|    {
  166|  1.03k|        auto it = scn::ranges::begin(source);
  167|  26.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.7k|            auto result = scn::scan_value<T>(
  170|  26.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.03k, False: 25.7k]
  ------------------
  172|  1.03k|                break;
  173|  1.03k|            }
  174|  25.7k|            it = result->begin();
  175|  25.7k|        }
  176|  1.03k|    }
  177|  1.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.03k|{
  133|       |    // Regular scan
  134|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.21k, False: 1.03k]
  ------------------
  135|  6.21k|        auto it = scn::ranges::begin(source);
  136|  63.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  63.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  63.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  63.7k|            auto result = scn::scan<T>(
  139|  63.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  63.7k|                scn::runtime_format(f));
  141|  63.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.21k, False: 57.5k]
  ------------------
  142|  6.21k|                break;
  143|  6.21k|            }
  144|  57.5k|            it = result->begin();
  145|  57.5k|        }
  146|  6.21k|    }
  147|       |
  148|       |    // scan localized
  149|  6.21k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.21k, False: 1.03k]
  ------------------
  150|  6.21k|        auto it = scn::ranges::begin(source);
  151|  63.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  63.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  63.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  63.7k|            auto result = scn::scan<T>(
  154|  63.7k|                global_locale,
  155|  63.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  63.7k|                scn::runtime_format(f));
  157|  63.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.21k, False: 57.5k]
  ------------------
  158|  6.21k|                break;
  159|  6.21k|            }
  160|  57.5k|            it = result->begin();
  161|  57.5k|        }
  162|  6.21k|    }
  163|       |
  164|       |    // scan_value
  165|  1.03k|    {
  166|  1.03k|        auto it = scn::ranges::begin(source);
  167|  29.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.5k|            auto result = scn::scan_value<T>(
  170|  29.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.03k, False: 28.5k]
  ------------------
  172|  1.03k|                break;
  173|  1.03k|            }
  174|  28.5k|            it = result->begin();
  175|  28.5k|        }
  176|  1.03k|    }
  177|  1.03k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.03k|{
   90|  1.03k|    using char_type = ranges::range_value_t<Source>;
   91|  1.03k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.03k|    deque.clear();
   93|  1.03k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.03k|              std::back_inserter(deque));
   95|  1.03k|    return deque;
   96|  1.03k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.03k|{
   79|  1.03k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.03k|        return noncontiguous_buffer;
   81|  1.03k|    }
   82|  1.03k|    else {
   83|  1.03k|        return wnoncontiguous_buffer;
   84|  1.03k|    }
   85|  1.03k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.03k|{
  122|  1.03k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.03k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.03k|    buf.resize(sizeof...(Args));
  125|  1.03k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.03k|    return buf;
  127|  1.03k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.03k|{
  108|  1.03k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.03k|        return format_string_view_buffer;
  110|  1.03k|    }
  111|  1.03k|    else {
  112|  1.03k|        return wformat_string_view_buffer;
  113|  1.03k|    }
  114|  1.03k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.07k|{
  185|  2.07k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.07k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.07k|                                   format_strings);
  188|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.07k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.07k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   331k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   331k|            auto result = scn::scan<T>(
  139|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   331k|                scn::runtime_format(f));
  141|   331k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 318k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   318k|            it = result->begin();
  145|   318k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.07k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   331k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   331k|            auto result = scn::scan<T>(
  154|   331k|                global_locale,
  155|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   331k|                scn::runtime_format(f));
  157|   331k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 318k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   318k|            it = result->begin();
  161|   318k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.07k|    {
  166|  2.07k|        auto it = scn::ranges::begin(source);
  167|   161k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   161k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   161k|            auto result = scn::scan_value<T>(
  170|   161k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   161k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.07k, False: 159k]
  ------------------
  172|  2.07k|                break;
  173|  2.07k|            }
  174|   159k|            it = result->begin();
  175|   159k|        }
  176|  2.07k|    }
  177|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.07k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.07k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   331k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   331k|            auto result = scn::scan<T>(
  139|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   331k|                scn::runtime_format(f));
  141|   331k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 318k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   318k|            it = result->begin();
  145|   318k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.07k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   331k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   331k|            auto result = scn::scan<T>(
  154|   331k|                global_locale,
  155|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   331k|                scn::runtime_format(f));
  157|   331k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 318k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   318k|            it = result->begin();
  161|   318k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.07k|    {
  166|  2.07k|        auto it = scn::ranges::begin(source);
  167|   161k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   161k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   161k|            auto result = scn::scan_value<T>(
  170|   161k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   161k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.07k, False: 159k]
  ------------------
  172|  2.07k|                break;
  173|  2.07k|            }
  174|   159k|            it = result->begin();
  175|   159k|        }
  176|  2.07k|    }
  177|  2.07k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.07k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.07k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   331k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   331k|            auto result = scn::scan<T>(
  139|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   331k|                scn::runtime_format(f));
  141|   331k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 318k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   318k|            it = result->begin();
  145|   318k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.07k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   331k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   331k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   331k|            auto result = scn::scan<T>(
  154|   331k|                global_locale,
  155|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   331k|                scn::runtime_format(f));
  157|   331k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 318k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   318k|            it = result->begin();
  161|   318k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.07k|    {
  166|  2.07k|        auto it = scn::ranges::begin(source);
  167|   161k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   161k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   161k|            auto result = scn::scan_value<T>(
  170|   161k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   161k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.07k, False: 159k]
  ------------------
  172|  2.07k|                break;
  173|  2.07k|            }
  174|   159k|            it = result->begin();
  175|   159k|        }
  176|  2.07k|    }
  177|  2.07k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.07k|{
   90|  2.07k|    using char_type = ranges::range_value_t<Source>;
   91|  2.07k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.07k|    deque.clear();
   93|  2.07k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.07k|              std::back_inserter(deque));
   95|  2.07k|    return deque;
   96|  2.07k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.07k|{
   79|  2.07k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.07k|        return noncontiguous_buffer;
   81|  2.07k|    }
   82|  2.07k|    else {
   83|  2.07k|        return wnoncontiguous_buffer;
   84|  2.07k|    }
   85|  2.07k|}

LLVMFuzzerTestOneInput:
   57|  1.03k|{
   58|  1.03k|    scn::fuzz::run(data, size);
   59|  1.03k|    return 0;
   60|  1.03k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.03k|{
   36|  1.03k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.03k]
  |  Branch (36:35): [True: 0, False: 1.03k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.03k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.03k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.03k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.03k|    do_basic_run(sv, f);
   45|       |
   46|  1.03k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.03k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.03k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.03k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.03k, False: 0]
  ------------------
   50|  1.03k|        do_basic_run(wsv_transcode, wf);
   51|  1.03k|    }
   52|  1.03k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.03k|{
   25|  1.03k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.03k|                                                           format_strings);
   27|  1.03k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.03k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.03k|            source, format_strings);
   30|  1.03k|    }
   31|  1.03k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.03k|{
   25|  1.03k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.03k|                                                           format_strings);
   27|  1.03k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.03k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.03k|            source, format_strings);
   30|  1.03k|    }
   31|  1.03k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.07k|{
   25|  2.07k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.07k|                                                           format_strings);
   27|  2.07k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.07k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.07k|            source, format_strings);
   30|  2.07k|    }
   31|  2.07k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.07k|{
   25|  2.07k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.07k|                                                           format_strings);
   27|  2.07k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.07k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.07k|            source, format_strings);
   30|  2.07k|    }
   31|  2.07k|}

